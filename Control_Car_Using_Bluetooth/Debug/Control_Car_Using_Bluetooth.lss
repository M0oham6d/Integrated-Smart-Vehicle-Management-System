
Control_Car_Using_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000d54  00000dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001674  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013b9  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
  7a:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <GPIO_setupPinDirection+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <GPIO_setupPinDirection+0x8>
  8a:	0f 92       	push	r0
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <GPIO_setupPinDirection+0x1c>
  9c:	d5 c0       	rjmp	.+426    	; 0x248 <GPIO_setupPinDirection+0x1c6>
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	08 f0       	brcs	.+2      	; 0xa6 <GPIO_setupPinDirection+0x24>
  a4:	d1 c0       	rjmp	.+418    	; 0x248 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	3d 83       	std	Y+5, r19	; 0x05
  ae:	2c 83       	std	Y+4, r18	; 0x04
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	09 f4       	brne	.+2      	; 0xbc <GPIO_setupPinDirection+0x3a>
  ba:	43 c0       	rjmp	.+134    	; 0x142 <GPIO_setupPinDirection+0xc0>
  bc:	2c 81       	ldd	r18, Y+4	; 0x04
  be:	3d 81       	ldd	r19, Y+5	; 0x05
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <GPIO_setupPinDirection+0x4e>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	71 f0       	breq	.+28     	; 0xea <GPIO_setupPinDirection+0x68>
  ce:	bc c0       	rjmp	.+376    	; 0x248 <GPIO_setupPinDirection+0x1c6>
  d0:	2c 81       	ldd	r18, Y+4	; 0x04
  d2:	3d 81       	ldd	r19, Y+5	; 0x05
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <GPIO_setupPinDirection+0x5a>
  da:	5f c0       	rjmp	.+190    	; 0x19a <GPIO_setupPinDirection+0x118>
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	9d 81       	ldd	r25, Y+5	; 0x05
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	09 f4       	brne	.+2      	; 0xe8 <GPIO_setupPinDirection+0x66>
  e6:	85 c0       	rjmp	.+266    	; 0x1f2 <GPIO_setupPinDirection+0x170>
  e8:	af c0       	rjmp	.+350    	; 0x248 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	a1 f4       	brne	.+40     	; 0x118 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
  f0:	aa e3       	ldi	r26, 0x3A	; 58
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e3       	ldi	r30, 0x3A	; 58
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	48 2f       	mov	r20, r24
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 2e       	mov	r0, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <GPIO_setupPinDirection+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <GPIO_setupPinDirection+0x88>
 112:	84 2b       	or	r24, r20
 114:	8c 93       	st	X, r24
 116:	98 c0       	rjmp	.+304    	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 118:	aa e3       	ldi	r26, 0x3A	; 58
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	ea e3       	ldi	r30, 0x3A	; 58
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_setupPinDirection+0xb4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_setupPinDirection+0xb0>
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	8c 93       	st	X, r24
 140:	83 c0       	rjmp	.+262    	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	a1 f4       	brne	.+40     	; 0x170 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 148:	a7 e3       	ldi	r26, 0x37	; 55
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e7 e3       	ldi	r30, 0x37	; 55
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_setupPinDirection+0xe4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_setupPinDirection+0xe0>
 16a:	84 2b       	or	r24, r20
 16c:	8c 93       	st	X, r24
 16e:	6c c0       	rjmp	.+216    	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 170:	a7 e3       	ldi	r26, 0x37	; 55
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e7 e3       	ldi	r30, 0x37	; 55
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	48 2f       	mov	r20, r24
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 2e       	mov	r0, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <GPIO_setupPinDirection+0x10c>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <GPIO_setupPinDirection+0x108>
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	8c 93       	st	X, r24
 198:	57 c0       	rjmp	.+174    	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	a1 f4       	brne	.+40     	; 0x1c8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 1a0:	a4 e3       	ldi	r26, 0x34	; 52
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e4 e3       	ldi	r30, 0x34	; 52
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	48 2f       	mov	r20, r24
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <GPIO_setupPinDirection+0x13c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <GPIO_setupPinDirection+0x138>
 1c2:	84 2b       	or	r24, r20
 1c4:	8c 93       	st	X, r24
 1c6:	40 c0       	rjmp	.+128    	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 1c8:	a4 e3       	ldi	r26, 0x34	; 52
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e4 e3       	ldi	r30, 0x34	; 52
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	48 2f       	mov	r20, r24
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 2e       	mov	r0, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <GPIO_setupPinDirection+0x164>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <GPIO_setupPinDirection+0x160>
 1ea:	80 95       	com	r24
 1ec:	84 23       	and	r24, r20
 1ee:	8c 93       	st	X, r24
 1f0:	2b c0       	rjmp	.+86     	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	a1 f4       	brne	.+40     	; 0x220 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 1f8:	a1 e3       	ldi	r26, 0x31	; 49
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e1 e3       	ldi	r30, 0x31	; 49
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <GPIO_setupPinDirection+0x194>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <GPIO_setupPinDirection+0x190>
 21a:	84 2b       	or	r24, r20
 21c:	8c 93       	st	X, r24
 21e:	14 c0       	rjmp	.+40     	; 0x248 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 220:	a1 e3       	ldi	r26, 0x31	; 49
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e1 e3       	ldi	r30, 0x31	; 49
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <GPIO_setupPinDirection+0x1bc>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <GPIO_setupPinDirection+0x1b8>
 242:	80 95       	com	r24
 244:	84 23       	and	r24, r20
 246:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	cf 91       	pop	r28
 254:	df 91       	pop	r29
 256:	08 95       	ret

00000258 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 258:	df 93       	push	r29
 25a:	cf 93       	push	r28
 25c:	00 d0       	rcall	.+0      	; 0x25e <GPIO_writePin+0x6>
 25e:	00 d0       	rcall	.+0      	; 0x260 <GPIO_writePin+0x8>
 260:	0f 92       	push	r0
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	6a 83       	std	Y+2, r22	; 0x02
 26a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	08 f0       	brcs	.+2      	; 0x274 <GPIO_writePin+0x1c>
 272:	d5 c0       	rjmp	.+426    	; 0x41e <GPIO_writePin+0x1c6>
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	08 f0       	brcs	.+2      	; 0x27c <GPIO_writePin+0x24>
 27a:	d1 c0       	rjmp	.+418    	; 0x41e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	3d 83       	std	Y+5, r19	; 0x05
 284:	2c 83       	std	Y+4, r18	; 0x04
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	9d 81       	ldd	r25, Y+5	; 0x05
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 05       	cpc	r25, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <GPIO_writePin+0x3a>
 290:	43 c0       	rjmp	.+134    	; 0x318 <GPIO_writePin+0xc0>
 292:	2c 81       	ldd	r18, Y+4	; 0x04
 294:	3d 81       	ldd	r19, Y+5	; 0x05
 296:	22 30       	cpi	r18, 0x02	; 2
 298:	31 05       	cpc	r19, r1
 29a:	2c f4       	brge	.+10     	; 0x2a6 <GPIO_writePin+0x4e>
 29c:	8c 81       	ldd	r24, Y+4	; 0x04
 29e:	9d 81       	ldd	r25, Y+5	; 0x05
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	71 f0       	breq	.+28     	; 0x2c0 <GPIO_writePin+0x68>
 2a4:	bc c0       	rjmp	.+376    	; 0x41e <GPIO_writePin+0x1c6>
 2a6:	2c 81       	ldd	r18, Y+4	; 0x04
 2a8:	3d 81       	ldd	r19, Y+5	; 0x05
 2aa:	22 30       	cpi	r18, 0x02	; 2
 2ac:	31 05       	cpc	r19, r1
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <GPIO_writePin+0x5a>
 2b0:	5f c0       	rjmp	.+190    	; 0x370 <GPIO_writePin+0x118>
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	91 05       	cpc	r25, r1
 2ba:	09 f4       	brne	.+2      	; 0x2be <GPIO_writePin+0x66>
 2bc:	85 c0       	rjmp	.+266    	; 0x3c8 <GPIO_writePin+0x170>
 2be:	af c0       	rjmp	.+350    	; 0x41e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	a1 f4       	brne	.+40     	; 0x2ee <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 2c6:	ab e3       	ldi	r26, 0x3B	; 59
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	eb e3       	ldi	r30, 0x3B	; 59
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_writePin+0x8c>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_writePin+0x88>
 2e8:	84 2b       	or	r24, r20
 2ea:	8c 93       	st	X, r24
 2ec:	98 c0       	rjmp	.+304    	; 0x41e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 2ee:	ab e3       	ldi	r26, 0x3B	; 59
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	48 2f       	mov	r20, r24
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	28 2f       	mov	r18, r24
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 2e       	mov	r0, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <GPIO_writePin+0xb4>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <GPIO_writePin+0xb0>
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	8c 93       	st	X, r24
 316:	83 c0       	rjmp	.+262    	; 0x41e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	a1 f4       	brne	.+40     	; 0x346 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <GPIO_writePin+0xe4>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <GPIO_writePin+0xe0>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
 344:	6c c0       	rjmp	.+216    	; 0x41e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 346:	a8 e3       	ldi	r26, 0x38	; 56
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e8 e3       	ldi	r30, 0x38	; 56
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	48 2f       	mov	r20, r24
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 2e       	mov	r0, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <GPIO_writePin+0x10c>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <GPIO_writePin+0x108>
 368:	80 95       	com	r24
 36a:	84 23       	and	r24, r20
 36c:	8c 93       	st	X, r24
 36e:	57 c0       	rjmp	.+174    	; 0x41e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	a1 f4       	brne	.+40     	; 0x39e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 376:	a5 e3       	ldi	r26, 0x35	; 53
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e5 e3       	ldi	r30, 0x35	; 53
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	8a 81       	ldd	r24, Y+2	; 0x02
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <GPIO_writePin+0x13c>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <GPIO_writePin+0x138>
 398:	84 2b       	or	r24, r20
 39a:	8c 93       	st	X, r24
 39c:	40 c0       	rjmp	.+128    	; 0x41e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 39e:	a5 e3       	ldi	r26, 0x35	; 53
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 e3       	ldi	r30, 0x35	; 53
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	48 2f       	mov	r20, r24
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 2e       	mov	r0, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <GPIO_writePin+0x164>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <GPIO_writePin+0x160>
 3c0:	80 95       	com	r24
 3c2:	84 23       	and	r24, r20
 3c4:	8c 93       	st	X, r24
 3c6:	2b c0       	rjmp	.+86     	; 0x41e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 3c8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	a1 f4       	brne	.+40     	; 0x3f6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 3ce:	a2 e3       	ldi	r26, 0x32	; 50
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e2 e3       	ldi	r30, 0x32	; 50
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <GPIO_writePin+0x194>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <GPIO_writePin+0x190>
 3f0:	84 2b       	or	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	14 c0       	rjmp	.+40     	; 0x41e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 3f6:	a2 e3       	ldi	r26, 0x32	; 50
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e2 e3       	ldi	r30, 0x32	; 50
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	48 2f       	mov	r20, r24
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <GPIO_writePin+0x1bc>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <GPIO_writePin+0x1b8>
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	00 d0       	rcall	.+0      	; 0x434 <GPIO_readPin+0x6>
 434:	00 d0       	rcall	.+0      	; 0x436 <GPIO_readPin+0x8>
 436:	0f 92       	push	r0
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	8a 83       	std	Y+2, r24	; 0x02
 43e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 440:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	   Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	08 f0       	brcs	.+2      	; 0x44a <GPIO_readPin+0x1c>
 448:	84 c0       	rjmp	.+264    	; 0x552 <GPIO_readPin+0x124>
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	84 30       	cpi	r24, 0x04	; 4
 44e:	08 f0       	brcs	.+2      	; 0x452 <GPIO_readPin+0x24>
 450:	80 c0       	rjmp	.+256    	; 0x552 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	3d 83       	std	Y+5, r19	; 0x05
 45a:	2c 83       	std	Y+4, r18	; 0x04
 45c:	4c 81       	ldd	r20, Y+4	; 0x04
 45e:	5d 81       	ldd	r21, Y+5	; 0x05
 460:	41 30       	cpi	r20, 0x01	; 1
 462:	51 05       	cpc	r21, r1
 464:	79 f1       	breq	.+94     	; 0x4c4 <GPIO_readPin+0x96>
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	9d 81       	ldd	r25, Y+5	; 0x05
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	91 05       	cpc	r25, r1
 46e:	34 f4       	brge	.+12     	; 0x47c <GPIO_readPin+0x4e>
 470:	2c 81       	ldd	r18, Y+4	; 0x04
 472:	3d 81       	ldd	r19, Y+5	; 0x05
 474:	21 15       	cp	r18, r1
 476:	31 05       	cpc	r19, r1
 478:	69 f0       	breq	.+26     	; 0x494 <GPIO_readPin+0x66>
 47a:	6b c0       	rjmp	.+214    	; 0x552 <GPIO_readPin+0x124>
 47c:	4c 81       	ldd	r20, Y+4	; 0x04
 47e:	5d 81       	ldd	r21, Y+5	; 0x05
 480:	42 30       	cpi	r20, 0x02	; 2
 482:	51 05       	cpc	r21, r1
 484:	b9 f1       	breq	.+110    	; 0x4f4 <GPIO_readPin+0xc6>
 486:	8c 81       	ldd	r24, Y+4	; 0x04
 488:	9d 81       	ldd	r25, Y+5	; 0x05
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	91 05       	cpc	r25, r1
 48e:	09 f4       	brne	.+2      	; 0x492 <GPIO_readPin+0x64>
 490:	49 c0       	rjmp	.+146    	; 0x524 <GPIO_readPin+0xf6>
 492:	5f c0       	rjmp	.+190    	; 0x552 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 494:	e9 e3       	ldi	r30, 0x39	; 57
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	28 2f       	mov	r18, r24
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	88 2f       	mov	r24, r24
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <GPIO_readPin+0x7e>
 4a8:	55 95       	asr	r21
 4aa:	47 95       	ror	r20
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <GPIO_readPin+0x7a>
 4b0:	ca 01       	movw	r24, r20
 4b2:	81 70       	andi	r24, 0x01	; 1
 4b4:	90 70       	andi	r25, 0x00	; 0
 4b6:	88 23       	and	r24, r24
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	89 83       	std	Y+1, r24	; 0x01
 4be:	49 c0       	rjmp	.+146    	; 0x552 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4c0:	19 82       	std	Y+1, r1	; 0x01
 4c2:	47 c0       	rjmp	.+142    	; 0x552 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 4c4:	e6 e3       	ldi	r30, 0x36	; 54
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <GPIO_readPin+0xae>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <GPIO_readPin+0xaa>
 4e0:	ca 01       	movw	r24, r20
 4e2:	81 70       	andi	r24, 0x01	; 1
 4e4:	90 70       	andi	r25, 0x00	; 0
 4e6:	88 23       	and	r24, r24
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	31 c0       	rjmp	.+98     	; 0x552 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4f0:	19 82       	std	Y+1, r1	; 0x01
 4f2:	2f c0       	rjmp	.+94     	; 0x552 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 4f4:	e3 e3       	ldi	r30, 0x33	; 51
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	a9 01       	movw	r20, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <GPIO_readPin+0xde>
 508:	55 95       	asr	r21
 50a:	47 95       	ror	r20
 50c:	8a 95       	dec	r24
 50e:	e2 f7       	brpl	.-8      	; 0x508 <GPIO_readPin+0xda>
 510:	ca 01       	movw	r24, r20
 512:	81 70       	andi	r24, 0x01	; 1
 514:	90 70       	andi	r25, 0x00	; 0
 516:	88 23       	and	r24, r24
 518:	19 f0       	breq	.+6      	; 0x520 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	19 c0       	rjmp	.+50     	; 0x552 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 520:	19 82       	std	Y+1, r1	; 0x01
 522:	17 c0       	rjmp	.+46     	; 0x552 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 524:	e0 e3       	ldi	r30, 0x30	; 48
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	88 2f       	mov	r24, r24
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	a9 01       	movw	r20, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <GPIO_readPin+0x10e>
 538:	55 95       	asr	r21
 53a:	47 95       	ror	r20
 53c:	8a 95       	dec	r24
 53e:	e2 f7       	brpl	.-8      	; 0x538 <GPIO_readPin+0x10a>
 540:	ca 01       	movw	r24, r20
 542:	81 70       	andi	r24, 0x01	; 1
 544:	90 70       	andi	r25, 0x00	; 0
 546:	88 23       	and	r24, r24
 548:	19 f0       	breq	.+6      	; 0x550 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	89 83       	std	Y+1, r24	; 0x01
 54e:	01 c0       	rjmp	.+2      	; 0x552 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 550:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 552:	89 81       	ldd	r24, Y+1	; 0x01
}
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	cf 91       	pop	r28
 560:	df 91       	pop	r29
 562:	08 95       	ret

00000564 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 564:	df 93       	push	r29
 566:	cf 93       	push	r28
 568:	00 d0       	rcall	.+0      	; 0x56a <GPIO_setupPortDirection+0x6>
 56a:	00 d0       	rcall	.+0      	; 0x56c <GPIO_setupPortDirection+0x8>
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	84 30       	cpi	r24, 0x04	; 4
 578:	90 f5       	brcc	.+100    	; 0x5de <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	3c 83       	std	Y+4, r19	; 0x04
 582:	2b 83       	std	Y+3, r18	; 0x03
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	9c 81       	ldd	r25, Y+4	; 0x04
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	91 05       	cpc	r25, r1
 58c:	d1 f0       	breq	.+52     	; 0x5c2 <GPIO_setupPortDirection+0x5e>
 58e:	2b 81       	ldd	r18, Y+3	; 0x03
 590:	3c 81       	ldd	r19, Y+4	; 0x04
 592:	22 30       	cpi	r18, 0x02	; 2
 594:	31 05       	cpc	r19, r1
 596:	2c f4       	brge	.+10     	; 0x5a2 <GPIO_setupPortDirection+0x3e>
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	9c 81       	ldd	r25, Y+4	; 0x04
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	61 f0       	breq	.+24     	; 0x5b8 <GPIO_setupPortDirection+0x54>
 5a0:	1e c0       	rjmp	.+60     	; 0x5de <GPIO_setupPortDirection+0x7a>
 5a2:	2b 81       	ldd	r18, Y+3	; 0x03
 5a4:	3c 81       	ldd	r19, Y+4	; 0x04
 5a6:	22 30       	cpi	r18, 0x02	; 2
 5a8:	31 05       	cpc	r19, r1
 5aa:	81 f0       	breq	.+32     	; 0x5cc <GPIO_setupPortDirection+0x68>
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	9c 81       	ldd	r25, Y+4	; 0x04
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	91 05       	cpc	r25, r1
 5b4:	81 f0       	breq	.+32     	; 0x5d6 <GPIO_setupPortDirection+0x72>
 5b6:	13 c0       	rjmp	.+38     	; 0x5de <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 5b8:	ea e3       	ldi	r30, 0x3A	; 58
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	80 83       	st	Z, r24
 5c0:	0e c0       	rjmp	.+28     	; 0x5de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 5c2:	e7 e3       	ldi	r30, 0x37	; 55
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	80 83       	st	Z, r24
 5ca:	09 c0       	rjmp	.+18     	; 0x5de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 5cc:	e4 e3       	ldi	r30, 0x34	; 52
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	80 83       	st	Z, r24
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 5d6:	e1 e3       	ldi	r30, 0x31	; 49
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	80 83       	st	Z, r24
			break;
		}
	}
}
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	cf 91       	pop	r28
 5e8:	df 91       	pop	r29
 5ea:	08 95       	ret

000005ec <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 5ec:	df 93       	push	r29
 5ee:	cf 93       	push	r28
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <GPIO_writePort+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <GPIO_writePort+0x8>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	84 30       	cpi	r24, 0x04	; 4
 600:	90 f5       	brcc	.+100    	; 0x666 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	3c 83       	std	Y+4, r19	; 0x04
 60a:	2b 83       	std	Y+3, r18	; 0x03
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	9c 81       	ldd	r25, Y+4	; 0x04
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	d1 f0       	breq	.+52     	; 0x64a <GPIO_writePort+0x5e>
 616:	2b 81       	ldd	r18, Y+3	; 0x03
 618:	3c 81       	ldd	r19, Y+4	; 0x04
 61a:	22 30       	cpi	r18, 0x02	; 2
 61c:	31 05       	cpc	r19, r1
 61e:	2c f4       	brge	.+10     	; 0x62a <GPIO_writePort+0x3e>
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	9c 81       	ldd	r25, Y+4	; 0x04
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	61 f0       	breq	.+24     	; 0x640 <GPIO_writePort+0x54>
 628:	1e c0       	rjmp	.+60     	; 0x666 <GPIO_writePort+0x7a>
 62a:	2b 81       	ldd	r18, Y+3	; 0x03
 62c:	3c 81       	ldd	r19, Y+4	; 0x04
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	81 f0       	breq	.+32     	; 0x654 <GPIO_writePort+0x68>
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	9c 81       	ldd	r25, Y+4	; 0x04
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 05       	cpc	r25, r1
 63c:	81 f0       	breq	.+32     	; 0x65e <GPIO_writePort+0x72>
 63e:	13 c0       	rjmp	.+38     	; 0x666 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 640:	eb e3       	ldi	r30, 0x3B	; 59
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	80 83       	st	Z, r24
 648:	0e c0       	rjmp	.+28     	; 0x666 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 64a:	e8 e3       	ldi	r30, 0x38	; 56
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	80 83       	st	Z, r24
 652:	09 c0       	rjmp	.+18     	; 0x666 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 654:	e5 e3       	ldi	r30, 0x35	; 53
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	8a 81       	ldd	r24, Y+2	; 0x02
 65a:	80 83       	st	Z, r24
 65c:	04 c0       	rjmp	.+8      	; 0x666 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 65e:	e2 e3       	ldi	r30, 0x32	; 50
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	8a 81       	ldd	r24, Y+2	; 0x02
 664:	80 83       	st	Z, r24
			break;
		}
	}
}
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	cf 91       	pop	r28
 670:	df 91       	pop	r29
 672:	08 95       	ret

00000674 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 674:	df 93       	push	r29
 676:	cf 93       	push	r28
 678:	00 d0       	rcall	.+0      	; 0x67a <GPIO_readPort+0x6>
 67a:	00 d0       	rcall	.+0      	; 0x67c <GPIO_readPort+0x8>
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 682:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	84 30       	cpi	r24, 0x04	; 4
 688:	90 f5       	brcc	.+100    	; 0x6ee <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	3c 83       	std	Y+4, r19	; 0x04
 692:	2b 83       	std	Y+3, r18	; 0x03
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	9c 81       	ldd	r25, Y+4	; 0x04
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	91 05       	cpc	r25, r1
 69c:	d1 f0       	breq	.+52     	; 0x6d2 <GPIO_readPort+0x5e>
 69e:	2b 81       	ldd	r18, Y+3	; 0x03
 6a0:	3c 81       	ldd	r19, Y+4	; 0x04
 6a2:	22 30       	cpi	r18, 0x02	; 2
 6a4:	31 05       	cpc	r19, r1
 6a6:	2c f4       	brge	.+10     	; 0x6b2 <GPIO_readPort+0x3e>
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	9c 81       	ldd	r25, Y+4	; 0x04
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	61 f0       	breq	.+24     	; 0x6c8 <GPIO_readPort+0x54>
 6b0:	1e c0       	rjmp	.+60     	; 0x6ee <GPIO_readPort+0x7a>
 6b2:	2b 81       	ldd	r18, Y+3	; 0x03
 6b4:	3c 81       	ldd	r19, Y+4	; 0x04
 6b6:	22 30       	cpi	r18, 0x02	; 2
 6b8:	31 05       	cpc	r19, r1
 6ba:	81 f0       	breq	.+32     	; 0x6dc <GPIO_readPort+0x68>
 6bc:	8b 81       	ldd	r24, Y+3	; 0x03
 6be:	9c 81       	ldd	r25, Y+4	; 0x04
 6c0:	83 30       	cpi	r24, 0x03	; 3
 6c2:	91 05       	cpc	r25, r1
 6c4:	81 f0       	breq	.+32     	; 0x6e6 <GPIO_readPort+0x72>
 6c6:	13 c0       	rjmp	.+38     	; 0x6ee <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 6c8:	e9 e3       	ldi	r30, 0x39	; 57
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	89 83       	std	Y+1, r24	; 0x01
 6d0:	0e c0       	rjmp	.+28     	; 0x6ee <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 6d2:	e6 e3       	ldi	r30, 0x36	; 54
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	09 c0       	rjmp	.+18     	; 0x6ee <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 6dc:	e3 e3       	ldi	r30, 0x33	; 51
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 6e6:	e0 e3       	ldi	r30, 0x30	; 48
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
}
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	cf 91       	pop	r28
 6fa:	df 91       	pop	r29
 6fc:	08 95       	ret

000006fe <PWM_Timer0_Start>:

/*
 * Function to initialize Timer0 with Fast PWM mode.
 */
void PWM_Timer0_Start(const Timer_ConfigType * Config_Ptr)
{
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	df 93       	push	r29
 704:	cf 93       	push	r28
 706:	00 d0       	rcall	.+0      	; 0x708 <PWM_Timer0_Start+0xa>
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	9a 83       	std	Y+2, r25	; 0x02
 70e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; 							/* Set Timer Initial value. */
 710:	e2 e5       	ldi	r30, 0x52	; 82
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	10 82       	st	Z, r1

	OCR0  = (Config_Ptr->duty_cycle * 255) / 100; 	/* Set Compare Value. */
 716:	0c e5       	ldi	r16, 0x5C	; 92
 718:	10 e0       	ldi	r17, 0x00	; 0
 71a:	e9 81       	ldd	r30, Y+1	; 0x01
 71c:	fa 81       	ldd	r31, Y+2	; 0x02
 71e:	82 81       	ldd	r24, Z+2	; 0x02
 720:	48 2f       	mov	r20, r24
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	ca 01       	movw	r24, r20
 726:	9c 01       	movw	r18, r24
 728:	22 0f       	add	r18, r18
 72a:	33 1f       	adc	r19, r19
 72c:	c9 01       	movw	r24, r18
 72e:	96 95       	lsr	r25
 730:	98 2f       	mov	r25, r24
 732:	88 27       	eor	r24, r24
 734:	97 95       	ror	r25
 736:	87 95       	ror	r24
 738:	82 1b       	sub	r24, r18
 73a:	93 0b       	sbc	r25, r19
 73c:	84 0f       	add	r24, r20
 73e:	95 1f       	adc	r25, r21
 740:	24 e6       	ldi	r18, 0x64	; 100
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	b9 01       	movw	r22, r18
 746:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__divmodhi4>
 74a:	cb 01       	movw	r24, r22
 74c:	f8 01       	movw	r30, r16
 74e:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); 			/* set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC. */
 750:	a7 e3       	ldi	r26, 0x37	; 55
 752:	b0 e0       	ldi	r27, 0x00	; 0
 754:	e7 e3       	ldi	r30, 0x37	; 55
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	88 60       	ori	r24, 0x08	; 8
 75c:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | ((Config_Ptr->mode)<<COM00) | ((Config_Ptr->timer_clock)<<CS00);
 75e:	a3 e5       	ldi	r26, 0x53	; 83
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e9 81       	ldd	r30, Y+1	; 0x01
 764:	fa 81       	ldd	r31, Y+2	; 0x02
 766:	80 81       	ld	r24, Z
 768:	88 2f       	mov	r24, r24
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	82 95       	swap	r24
 76e:	92 95       	swap	r25
 770:	90 7f       	andi	r25, 0xF0	; 240
 772:	98 27       	eor	r25, r24
 774:	80 7f       	andi	r24, 0xF0	; 240
 776:	98 27       	eor	r25, r24
 778:	98 2f       	mov	r25, r24
 77a:	98 64       	ori	r25, 0x48	; 72
 77c:	e9 81       	ldd	r30, Y+1	; 0x01
 77e:	fa 81       	ldd	r31, Y+2	; 0x02
 780:	81 81       	ldd	r24, Z+1	; 0x01
 782:	89 2b       	or	r24, r25
 784:	8c 93       	st	X, r24
}
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	cf 91       	pop	r28
 78c:	df 91       	pop	r29
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
 794:	df 93       	push	r29
 796:	cf 93       	push	r28
 798:	00 d0       	rcall	.+0      	; 0x79a <UART_init+0x6>
 79a:	00 d0       	rcall	.+0      	; 0x79c <UART_init+0x8>
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	9c 83       	std	Y+4, r25	; 0x04
 7a2:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
 7a4:	1a 82       	std	Y+2, r1	; 0x02
 7a6:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1<<U2X);
 7a8:	eb e2       	ldi	r30, 0x2B	; 43
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	80 83       	st	Z, r24
     * RXEN  = 1 Receiver Enable
     * RXEN  = 1 Transmitter Enable
     * UCSZ2 = 0 For 5-bit, 6-bit, 7-bit, 8-bit data mode
     * RXB8 & TXB8 not used for 8-bit data mode
     ***********************************************************************/
    UCSRB = (1<<RXEN) | (1<<TXEN);
 7b0:	ea e2       	ldi	r30, 0x2A	; 42
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	88 e1       	ldi	r24, 0x18	; 24
 7b6:	80 83       	st	Z, r24
     * UPM1:0  = 00 Disable parity bit, 10  Even Parity, 11  Odd Parity
     * USBS    = 0 One stop bit, 1 Two stop bit
     * UCSZ1:0 = 11 For 8-bit data mode
     * UCPOL   = 0 Used with the Synchronous operation only
     ***********************************************************************/
    UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data)<<UCSZ0) |
 7b8:	a0 e4       	ldi	r26, 0x40	; 64
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	eb 81       	ldd	r30, Y+3	; 0x03
 7be:	fc 81       	ldd	r31, Y+4	; 0x04
 7c0:	86 81       	ldd	r24, Z+6	; 0x06
 7c2:	88 2f       	mov	r24, r24
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	28 2f       	mov	r18, r24
 7cc:	20 68       	ori	r18, 0x80	; 128
 7ce:	eb 81       	ldd	r30, Y+3	; 0x03
 7d0:	fc 81       	ldd	r31, Y+4	; 0x04
 7d2:	84 81       	ldd	r24, Z+4	; 0x04
 7d4:	88 2f       	mov	r24, r24
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	82 95       	swap	r24
 7da:	92 95       	swap	r25
 7dc:	90 7f       	andi	r25, 0xF0	; 240
 7de:	98 27       	eor	r25, r24
 7e0:	80 7f       	andi	r24, 0xF0	; 240
 7e2:	98 27       	eor	r25, r24
 7e4:	28 2b       	or	r18, r24
 7e6:	eb 81       	ldd	r30, Y+3	; 0x03
 7e8:	fc 81       	ldd	r31, Y+4	; 0x04
 7ea:	85 81       	ldd	r24, Z+5	; 0x05
 7ec:	88 2f       	mov	r24, r24
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	82 2b       	or	r24, r18
 7fe:	8c 93       	st	X, r24
            ((Config_Ptr->Parity_Configurations)<<UPM0) |
            ((Config_Ptr->StopBit_Configurations)<<USBS);

    /* Calculate the UBRR register value */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
 800:	eb 81       	ldd	r30, Y+3	; 0x03
 802:	fc 81       	ldd	r31, Y+4	; 0x04
 804:	80 81       	ld	r24, Z
 806:	91 81       	ldd	r25, Z+1	; 0x01
 808:	a2 81       	ldd	r26, Z+2	; 0x02
 80a:	b3 81       	ldd	r27, Z+3	; 0x03
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	aa 1f       	adc	r26, r26
 812:	bb 1f       	adc	r27, r27
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	aa 1f       	adc	r26, r26
 81a:	bb 1f       	adc	r27, r27
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	aa 1f       	adc	r26, r26
 822:	bb 1f       	adc	r27, r27
 824:	9c 01       	movw	r18, r24
 826:	ad 01       	movw	r20, r26
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	94 e2       	ldi	r25, 0x24	; 36
 82c:	a4 ef       	ldi	r26, 0xF4	; 244
 82e:	b0 e0       	ldi	r27, 0x00	; 0
 830:	bc 01       	movw	r22, r24
 832:	cd 01       	movw	r24, r26
 834:	0e 94 72 06 	call	0xce4	; 0xce4 <__udivmodsi4>
 838:	da 01       	movw	r26, r20
 83a:	c9 01       	movw	r24, r18
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	9a 83       	std	Y+2, r25	; 0x02
 840:	89 83       	std	Y+1, r24	; 0x01

    /* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
    UBRRH = ubrr_value>>8;
 842:	e0 e4       	ldi	r30, 0x40	; 64
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	9a 81       	ldd	r25, Y+2	; 0x02
 84a:	89 2f       	mov	r24, r25
 84c:	99 27       	eor	r25, r25
 84e:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
 850:	e9 e2       	ldi	r30, 0x29	; 41
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	89 81       	ldd	r24, Y+1	; 0x01
 856:	80 83       	st	Z, r24
}
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	0f 90       	pop	r0
 860:	cf 91       	pop	r28
 862:	df 91       	pop	r29
 864:	08 95       	ret

00000866 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
 866:	df 93       	push	r29
 868:	cf 93       	push	r28
 86a:	0f 92       	push	r0
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	89 83       	std	Y+1, r24	; 0x01
    /*
     * UDRE flag is set when the TX buffer (UDR) is empty and ready for
     * transmitting a new byte so wait until this flag is set to one
     */
    while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 872:	eb e2       	ldi	r30, 0x2B	; 43
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	88 2f       	mov	r24, r24
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	80 72       	andi	r24, 0x20	; 32
 87e:	90 70       	andi	r25, 0x00	; 0
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	b9 f3       	breq	.-18     	; 0x872 <UART_sendByte+0xc>

    /*
     * Put the required data in the UDR register and it also clear the UDRE flag as
     * the UDR register is not empty now
     */
    UDR = data;
 884:	ec e2       	ldi	r30, 0x2C	; 44
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	89 81       	ldd	r24, Y+1	; 0x01
 88a:	80 83       	st	Z, r24
}
 88c:	0f 90       	pop	r0
 88e:	cf 91       	pop	r28
 890:	df 91       	pop	r29
 892:	08 95       	ret

00000894 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
 894:	df 93       	push	r29
 896:	cf 93       	push	r28
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
    /* RXC flag is set when the UART receive data so wait until this flag is set to one */
    while(BIT_IS_CLEAR(UCSRA,RXC)){}
 89c:	eb e2       	ldi	r30, 0x2B	; 43
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	88 23       	and	r24, r24
 8a4:	dc f7       	brge	.-10     	; 0x89c <UART_receiveByte+0x8>

    /*
     * Read the received data from the RX buffer (UDR)
     * The RXC flag will be cleared after read the data
     */
    return UDR;
 8a6:	ec e2       	ldi	r30, 0x2C	; 44
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
}
 8ac:	cf 91       	pop	r28
 8ae:	df 91       	pop	r29
 8b0:	08 95       	ret

000008b2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
 8b2:	df 93       	push	r29
 8b4:	cf 93       	push	r28
 8b6:	00 d0       	rcall	.+0      	; 0x8b8 <UART_sendString+0x6>
 8b8:	0f 92       	push	r0
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	9b 83       	std	Y+3, r25	; 0x03
 8c0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
 8c2:	19 82       	std	Y+1, r1	; 0x01
 8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <UART_sendString+0x30>

    /* Send the whole string */
    while(Str[i] != '\0')
    {
        UART_sendByte(Str[i]);
 8c6:	89 81       	ldd	r24, Y+1	; 0x01
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	9b 81       	ldd	r25, Y+3	; 0x03
 8d0:	fc 01       	movw	r30, r24
 8d2:	e2 0f       	add	r30, r18
 8d4:	f3 1f       	adc	r31, r19
 8d6:	80 81       	ld	r24, Z
 8d8:	0e 94 33 04 	call	0x866	; 0x866 <UART_sendByte>
        i++;
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	8f 5f       	subi	r24, 0xFF	; 255
 8e0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
    uint8 i = 0;

    /* Send the whole string */
    while(Str[i] != '\0')
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	28 2f       	mov	r18, r24
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ea:	9b 81       	ldd	r25, Y+3	; 0x03
 8ec:	fc 01       	movw	r30, r24
 8ee:	e2 0f       	add	r30, r18
 8f0:	f3 1f       	adc	r31, r19
 8f2:	80 81       	ld	r24, Z
 8f4:	88 23       	and	r24, r24
 8f6:	39 f7       	brne	.-50     	; 0x8c6 <UART_sendString+0x14>
    {
        UART_sendByte(Str[i]);
        i++;
    }
}
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	cf 91       	pop	r28
 900:	df 91       	pop	r29
 902:	08 95       	ret

00000904 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	df 93       	push	r29
 90a:	cf 93       	push	r28
 90c:	00 d0       	rcall	.+0      	; 0x90e <UART_receiveString+0xa>
 90e:	0f 92       	push	r0
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
 914:	9b 83       	std	Y+3, r25	; 0x03
 916:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
 918:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte */
    Str[i] = UART_receiveByte();
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	28 2f       	mov	r18, r24
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	9b 81       	ldd	r25, Y+3	; 0x03
 924:	8c 01       	movw	r16, r24
 926:	02 0f       	add	r16, r18
 928:	13 1f       	adc	r17, r19
 92a:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 92e:	f8 01       	movw	r30, r16
 930:	80 83       	st	Z, r24
 932:	0f c0       	rjmp	.+30     	; 0x952 <UART_receiveString+0x4e>

    /* Receive the whole string until the '#' */
    while(Str[i] != '#')
    {
        i++;
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	8f 5f       	subi	r24, 0xFF	; 255
 938:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_receiveByte();
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	28 2f       	mov	r18, r24
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	9b 81       	ldd	r25, Y+3	; 0x03
 944:	8c 01       	movw	r16, r24
 946:	02 0f       	add	r16, r18
 948:	13 1f       	adc	r17, r19
 94a:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 94e:	f8 01       	movw	r30, r16
 950:	80 83       	st	Z, r24

    /* Receive the first byte */
    Str[i] = UART_receiveByte();

    /* Receive the whole string until the '#' */
    while(Str[i] != '#')
 952:	89 81       	ldd	r24, Y+1	; 0x01
 954:	28 2f       	mov	r18, r24
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	9b 81       	ldd	r25, Y+3	; 0x03
 95c:	fc 01       	movw	r30, r24
 95e:	e2 0f       	add	r30, r18
 960:	f3 1f       	adc	r31, r19
 962:	80 81       	ld	r24, Z
 964:	83 32       	cpi	r24, 0x23	; 35
 966:	31 f7       	brne	.-52     	; 0x934 <UART_receiveString+0x30>
        i++;
        Str[i] = UART_receiveByte();
    }

    /* After receiving the whole string plus the '#', replace the '#' with '\0' */
    Str[i] = '\0';
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	28 2f       	mov	r18, r24
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	8a 81       	ldd	r24, Y+2	; 0x02
 970:	9b 81       	ldd	r25, Y+3	; 0x03
 972:	fc 01       	movw	r30, r24
 974:	e2 0f       	add	r30, r18
 976:	f3 1f       	adc	r31, r19
 978:	10 82       	st	Z, r1
}
 97a:	0f 90       	pop	r0
 97c:	0f 90       	pop	r0
 97e:	0f 90       	pop	r0
 980:	cf 91       	pop	r28
 982:	df 91       	pop	r29
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <UART_sendArray>:
/*
 * Description :
 * Send the required array through UART to the other UART device.
 */
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	00 d0       	rcall	.+0      	; 0x990 <UART_sendArray+0x6>
 990:	00 d0       	rcall	.+0      	; 0x992 <UART_sendArray+0x8>
 992:	cd b7       	in	r28, 0x3d	; 61
 994:	de b7       	in	r29, 0x3e	; 62
 996:	9b 83       	std	Y+3, r25	; 0x03
 998:	8a 83       	std	Y+2, r24	; 0x02
 99a:	6c 83       	std	Y+4, r22	; 0x04
    uint8 i;

    /* Send the whole array */
	for(i = 0; i < size; i++)
 99c:	19 82       	std	Y+1, r1	; 0x01
 99e:	0e c0       	rjmp	.+28     	; 0x9bc <UART_sendArray+0x32>
    {
        UART_sendByte(a_ptr[i]);
 9a0:	89 81       	ldd	r24, Y+1	; 0x01
 9a2:	28 2f       	mov	r18, r24
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	8a 81       	ldd	r24, Y+2	; 0x02
 9a8:	9b 81       	ldd	r25, Y+3	; 0x03
 9aa:	fc 01       	movw	r30, r24
 9ac:	e2 0f       	add	r30, r18
 9ae:	f3 1f       	adc	r31, r19
 9b0:	80 81       	ld	r24, Z
 9b2:	0e 94 33 04 	call	0x866	; 0x866 <UART_sendByte>
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    uint8 i;

    /* Send the whole array */
	for(i = 0; i < size; i++)
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	99 81       	ldd	r25, Y+1	; 0x01
 9be:	8c 81       	ldd	r24, Y+4	; 0x04
 9c0:	98 17       	cp	r25, r24
 9c2:	70 f3       	brcs	.-36     	; 0x9a0 <UART_sendArray+0x16>
    {
        UART_sendByte(a_ptr[i]);
    }
    UART_sendByte('#');
 9c4:	83 e2       	ldi	r24, 0x23	; 35
 9c6:	0e 94 33 04 	call	0x866	; 0x866 <UART_sendByte>
}
 9ca:	0f 90       	pop	r0
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	08 95       	ret

000009d8 <UART_receiveArray>:
/*
 * Description :
 * Receive the required array until the '#' symbol through UART from the other UART device.
 */
void UART_receiveArray(uint8 *a_ptr)
{
 9d8:	0f 93       	push	r16
 9da:	1f 93       	push	r17
 9dc:	df 93       	push	r29
 9de:	cf 93       	push	r28
 9e0:	00 d0       	rcall	.+0      	; 0x9e2 <UART_receiveArray+0xa>
 9e2:	0f 92       	push	r0
 9e4:	cd b7       	in	r28, 0x3d	; 61
 9e6:	de b7       	in	r29, 0x3e	; 62
 9e8:	9b 83       	std	Y+3, r25	; 0x03
 9ea:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
 9ec:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte */
	a_ptr[i] = UART_receiveByte();
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
 9f0:	28 2f       	mov	r18, r24
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	8a 81       	ldd	r24, Y+2	; 0x02
 9f6:	9b 81       	ldd	r25, Y+3	; 0x03
 9f8:	8c 01       	movw	r16, r24
 9fa:	02 0f       	add	r16, r18
 9fc:	13 1f       	adc	r17, r19
 9fe:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 a02:	f8 01       	movw	r30, r16
 a04:	80 83       	st	Z, r24
 a06:	0f c0       	rjmp	.+30     	; 0xa26 <UART_receiveArray+0x4e>

    /* Receive the whole string until the '#' */
	while(a_ptr[i] != '#')
	{
		i++;
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	8f 5f       	subi	r24, 0xFF	; 255
 a0c:	89 83       	std	Y+1, r24	; 0x01
		a_ptr[i] = UART_receiveByte();
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
 a10:	28 2f       	mov	r18, r24
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	8a 81       	ldd	r24, Y+2	; 0x02
 a16:	9b 81       	ldd	r25, Y+3	; 0x03
 a18:	8c 01       	movw	r16, r24
 a1a:	02 0f       	add	r16, r18
 a1c:	13 1f       	adc	r17, r19
 a1e:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 a22:	f8 01       	movw	r30, r16
 a24:	80 83       	st	Z, r24

    /* Receive the first byte */
	a_ptr[i] = UART_receiveByte();

    /* Receive the whole string until the '#' */
	while(a_ptr[i] != '#')
 a26:	89 81       	ldd	r24, Y+1	; 0x01
 a28:	28 2f       	mov	r18, r24
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	8a 81       	ldd	r24, Y+2	; 0x02
 a2e:	9b 81       	ldd	r25, Y+3	; 0x03
 a30:	fc 01       	movw	r30, r24
 a32:	e2 0f       	add	r30, r18
 a34:	f3 1f       	adc	r31, r19
 a36:	80 81       	ld	r24, Z
 a38:	83 32       	cpi	r24, 0x23	; 35
 a3a:	31 f7       	brne	.-52     	; 0xa08 <UART_receiveArray+0x30>
	{
		i++;
		a_ptr[i] = UART_receiveByte();
	}
}
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	1f 91       	pop	r17
 a48:	0f 91       	pop	r16
 a4a:	08 95       	ret

00000a4c <DcMotor_Init>:

/*
 * Function to initialize DC motor.
 */
void DcMotor_Init(void)
{
 a4c:	df 93       	push	r29
 a4e:	cf 93       	push	r28
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setup pin direction for INT1 & INT2 as output.
	 * Setup pin direction for Enable as output.
	 * */
	GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT1, PIN_OUTPUT);
 a54:	83 e0       	ldi	r24, 0x03	; 3
 a56:	66 e0       	ldi	r22, 0x06	; 6
 a58:	41 e0       	ldi	r20, 0x01	; 1
 a5a:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT2, PIN_OUTPUT);
 a5e:	83 e0       	ldi	r24, 0x03	; 3
 a60:	67 e0       	ldi	r22, 0x07	; 7
 a62:	41 e0       	ldi	r20, 0x01	; 1
 a64:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ENABLE_PORT_CONNECTION, ENABLE_PIN, PIN_OUTPUT);
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	63 e0       	ldi	r22, 0x03	; 3
 a6c:	41 e0       	ldi	r20, 0x01	; 1
 a6e:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>

	/* Stop the motor at the beginning. */
	GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
 a72:	83 e0       	ldi	r24, 0x03	; 3
 a74:	66 e0       	ldi	r22, 0x06	; 6
 a76:	40 e0       	ldi	r20, 0x00	; 0
 a78:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
 a7c:	83 e0       	ldi	r24, 0x03	; 3
 a7e:	67 e0       	ldi	r22, 0x07	; 7
 a80:	40 e0       	ldi	r20, 0x00	; 0
 a82:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
}
 a86:	cf 91       	pop	r28
 a88:	df 91       	pop	r29
 a8a:	08 95       	ret

00000a8c <DcMotor_Rotate>:
 * Function to rotate the motor.
 * Rotate in CW or CCW or STOP the motor.
 * Control the motor speed using PWM.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
 a8c:	df 93       	push	r29
 a8e:	cf 93       	push	r28
 a90:	cd b7       	in	r28, 0x3d	; 61
 a92:	de b7       	in	r29, 0x3e	; 62
 a94:	27 97       	sbiw	r28, 0x07	; 7
 a96:	0f b6       	in	r0, 0x3f	; 63
 a98:	f8 94       	cli
 a9a:	de bf       	out	0x3e, r29	; 62
 a9c:	0f be       	out	0x3f, r0	; 63
 a9e:	cd bf       	out	0x3d, r28	; 61
 aa0:	8c 83       	std	Y+4, r24	; 0x04
 aa2:	6d 83       	std	Y+5, r22	; 0x05
	Timer_ConfigType configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
 aa4:	82 e0       	ldi	r24, 0x02	; 2
 aa6:	89 83       	std	Y+1, r24	; 0x01
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	8a 83       	std	Y+2, r24	; 0x02
 aac:	8d 81       	ldd	r24, Y+5	; 0x05
 aae:	8b 83       	std	Y+3, r24	; 0x03
	PWM_Timer0_Start(&configrations);
 ab0:	ce 01       	movw	r24, r28
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <PWM_Timer0_Start>

	switch (state)
 ab8:	8c 81       	ldd	r24, Y+4	; 0x04
 aba:	28 2f       	mov	r18, r24
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	3f 83       	std	Y+7, r19	; 0x07
 ac0:	2e 83       	std	Y+6, r18	; 0x06
 ac2:	8e 81       	ldd	r24, Y+6	; 0x06
 ac4:	9f 81       	ldd	r25, Y+7	; 0x07
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	91 05       	cpc	r25, r1
 aca:	a1 f0       	breq	.+40     	; 0xaf4 <DcMotor_Rotate+0x68>
 acc:	2e 81       	ldd	r18, Y+6	; 0x06
 ace:	3f 81       	ldd	r19, Y+7	; 0x07
 ad0:	22 30       	cpi	r18, 0x02	; 2
 ad2:	31 05       	cpc	r19, r1
 ad4:	d1 f0       	breq	.+52     	; 0xb0a <DcMotor_Rotate+0x7e>
 ad6:	8e 81       	ldd	r24, Y+6	; 0x06
 ad8:	9f 81       	ldd	r25, Y+7	; 0x07
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	01 f5       	brne	.+64     	; 0xb1e <DcMotor_Rotate+0x92>
	{
	case STOP:
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
 ade:	83 e0       	ldi	r24, 0x03	; 3
 ae0:	66 e0       	ldi	r22, 0x06	; 6
 ae2:	40 e0       	ldi	r20, 0x00	; 0
 ae4:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	67 e0       	ldi	r22, 0x07	; 7
 aec:	40 e0       	ldi	r20, 0x00	; 0
 aee:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
 af2:	15 c0       	rjmp	.+42     	; 0xb1e <DcMotor_Rotate+0x92>
		break;

	case CW:
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_HIGH);
 af4:	83 e0       	ldi	r24, 0x03	; 3
 af6:	66 e0       	ldi	r22, 0x06	; 6
 af8:	41 e0       	ldi	r20, 0x01	; 1
 afa:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
 afe:	83 e0       	ldi	r24, 0x03	; 3
 b00:	67 e0       	ldi	r22, 0x07	; 7
 b02:	40 e0       	ldi	r20, 0x00	; 0
 b04:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
 b08:	0a c0       	rjmp	.+20     	; 0xb1e <DcMotor_Rotate+0x92>
		break;
	case CCW:
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
 b0a:	83 e0       	ldi	r24, 0x03	; 3
 b0c:	66 e0       	ldi	r22, 0x06	; 6
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_HIGH);
 b14:	83 e0       	ldi	r24, 0x03	; 3
 b16:	67 e0       	ldi	r22, 0x07	; 7
 b18:	41 e0       	ldi	r20, 0x01	; 1
 b1a:	0e 94 2c 01 	call	0x258	; 0x258 <GPIO_writePin>
		break;
	}
}
 b1e:	27 96       	adiw	r28, 0x07	; 7
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	f8 94       	cli
 b24:	de bf       	out	0x3e, r29	; 62
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	cd bf       	out	0x3d, r28	; 61
 b2a:	cf 91       	pop	r28
 b2c:	df 91       	pop	r29
 b2e:	08 95       	ret

00000b30 <motorSpeed>:
#include "../MCAL/uart.h"
#include "../Standard_Types/standard_types.h"
#include <stdlib.h>

uint8 motorSpeed(uint8 speed)
{
 b30:	df 93       	push	r29
 b32:	cf 93       	push	r28
 b34:	00 d0       	rcall	.+0      	; 0xb36 <motorSpeed+0x6>
 b36:	00 d0       	rcall	.+0      	; 0xb38 <motorSpeed+0x8>
 b38:	0f 92       	push	r0
 b3a:	cd b7       	in	r28, 0x3d	; 61
 b3c:	de b7       	in	r29, 0x3e	; 62
 b3e:	89 83       	std	Y+1, r24	; 0x01
	switch(speed)
 b40:	89 81       	ldd	r24, Y+1	; 0x01
 b42:	28 2f       	mov	r18, r24
 b44:	30 e0       	ldi	r19, 0x00	; 0
 b46:	3c 83       	std	Y+4, r19	; 0x04
 b48:	2b 83       	std	Y+3, r18	; 0x03
 b4a:	8b 81       	ldd	r24, Y+3	; 0x03
 b4c:	9c 81       	ldd	r25, Y+4	; 0x04
 b4e:	83 33       	cpi	r24, 0x33	; 51
 b50:	91 05       	cpc	r25, r1
 b52:	09 f1       	breq	.+66     	; 0xb96 <motorSpeed+0x66>
 b54:	2b 81       	ldd	r18, Y+3	; 0x03
 b56:	3c 81       	ldd	r19, Y+4	; 0x04
 b58:	24 33       	cpi	r18, 0x34	; 52
 b5a:	31 05       	cpc	r19, r1
 b5c:	5c f4       	brge	.+22     	; 0xb74 <motorSpeed+0x44>
 b5e:	8b 81       	ldd	r24, Y+3	; 0x03
 b60:	9c 81       	ldd	r25, Y+4	; 0x04
 b62:	81 33       	cpi	r24, 0x31	; 49
 b64:	91 05       	cpc	r25, r1
 b66:	89 f0       	breq	.+34     	; 0xb8a <motorSpeed+0x5a>
 b68:	2b 81       	ldd	r18, Y+3	; 0x03
 b6a:	3c 81       	ldd	r19, Y+4	; 0x04
 b6c:	22 33       	cpi	r18, 0x32	; 50
 b6e:	31 05       	cpc	r19, r1
 b70:	79 f0       	breq	.+30     	; 0xb90 <motorSpeed+0x60>
 b72:	1a c0       	rjmp	.+52     	; 0xba8 <motorSpeed+0x78>
 b74:	8b 81       	ldd	r24, Y+3	; 0x03
 b76:	9c 81       	ldd	r25, Y+4	; 0x04
 b78:	84 33       	cpi	r24, 0x34	; 52
 b7a:	91 05       	cpc	r25, r1
 b7c:	79 f0       	breq	.+30     	; 0xb9c <motorSpeed+0x6c>
 b7e:	2b 81       	ldd	r18, Y+3	; 0x03
 b80:	3c 81       	ldd	r19, Y+4	; 0x04
 b82:	25 33       	cpi	r18, 0x35	; 53
 b84:	31 05       	cpc	r19, r1
 b86:	69 f0       	breq	.+26     	; 0xba2 <motorSpeed+0x72>
 b88:	0f c0       	rjmp	.+30     	; 0xba8 <motorSpeed+0x78>
	{
	case '1':
		return 20;
 b8a:	34 e1       	ldi	r19, 0x14	; 20
 b8c:	3a 83       	std	Y+2, r19	; 0x02
 b8e:	0d c0       	rjmp	.+26     	; 0xbaa <motorSpeed+0x7a>
		break;
	case '2':
		return 40;
 b90:	88 e2       	ldi	r24, 0x28	; 40
 b92:	8a 83       	std	Y+2, r24	; 0x02
 b94:	0a c0       	rjmp	.+20     	; 0xbaa <motorSpeed+0x7a>
		break;
	case '3':
		return 60;
 b96:	9c e3       	ldi	r25, 0x3C	; 60
 b98:	9a 83       	std	Y+2, r25	; 0x02
 b9a:	07 c0       	rjmp	.+14     	; 0xbaa <motorSpeed+0x7a>
		break;
	case '4':
		return 80;
 b9c:	20 e5       	ldi	r18, 0x50	; 80
 b9e:	2a 83       	std	Y+2, r18	; 0x02
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <motorSpeed+0x7a>
		break;
	case '5':
		return 100;
 ba2:	34 e6       	ldi	r19, 0x64	; 100
 ba4:	3a 83       	std	Y+2, r19	; 0x02
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <motorSpeed+0x7a>
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <motorSpeed+0x7e>
		break;
	}
}
 baa:	8a 81       	ldd	r24, Y+2	; 0x02
 bac:	8d 83       	std	Y+5, r24	; 0x05
 bae:	8d 81       	ldd	r24, Y+5	; 0x05
 bb0:	0f 90       	pop	r0
 bb2:	0f 90       	pop	r0
 bb4:	0f 90       	pop	r0
 bb6:	0f 90       	pop	r0
 bb8:	0f 90       	pop	r0
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <main>:

int main(void)
{
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	cd b7       	in	r28, 0x3d	; 61
 bc6:	de b7       	in	r29, 0x3e	; 62
 bc8:	2f 97       	sbiw	r28, 0x0f	; 15
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
 bce:	de bf       	out	0x3e, r29	; 62
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	cd bf       	out	0x3d, r28	; 61
	uint8 recievedMSG;

	DcMotor_Init();
 bd4:	0e 94 26 05 	call	0xa4c	; 0xa4c <DcMotor_Init>

	UART_ConfigType uart_configratoin = {9600, UART_Parity_NONE, UART_STOP_1_BIT, MODE_EIGHT_BIT};
 bd8:	9e 01       	movw	r18, r28
 bda:	2e 5f       	subi	r18, 0xFE	; 254
 bdc:	3f 4f       	sbci	r19, 0xFF	; 255
 bde:	3c 87       	std	Y+12, r19	; 0x0c
 be0:	2b 87       	std	Y+11, r18	; 0x0b
 be2:	80 e6       	ldi	r24, 0x60	; 96
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	9e 87       	std	Y+14, r25	; 0x0e
 be8:	8d 87       	std	Y+13, r24	; 0x0d
 bea:	97 e0       	ldi	r25, 0x07	; 7
 bec:	9f 87       	std	Y+15, r25	; 0x0f
 bee:	ed 85       	ldd	r30, Y+13	; 0x0d
 bf0:	fe 85       	ldd	r31, Y+14	; 0x0e
 bf2:	00 80       	ld	r0, Z
 bf4:	2d 85       	ldd	r18, Y+13	; 0x0d
 bf6:	3e 85       	ldd	r19, Y+14	; 0x0e
 bf8:	2f 5f       	subi	r18, 0xFF	; 255
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	3e 87       	std	Y+14, r19	; 0x0e
 bfe:	2d 87       	std	Y+13, r18	; 0x0d
 c00:	eb 85       	ldd	r30, Y+11	; 0x0b
 c02:	fc 85       	ldd	r31, Y+12	; 0x0c
 c04:	00 82       	st	Z, r0
 c06:	2b 85       	ldd	r18, Y+11	; 0x0b
 c08:	3c 85       	ldd	r19, Y+12	; 0x0c
 c0a:	2f 5f       	subi	r18, 0xFF	; 255
 c0c:	3f 4f       	sbci	r19, 0xFF	; 255
 c0e:	3c 87       	std	Y+12, r19	; 0x0c
 c10:	2b 87       	std	Y+11, r18	; 0x0b
 c12:	3f 85       	ldd	r19, Y+15	; 0x0f
 c14:	31 50       	subi	r19, 0x01	; 1
 c16:	3f 87       	std	Y+15, r19	; 0x0f
 c18:	8f 85       	ldd	r24, Y+15	; 0x0f
 c1a:	88 23       	and	r24, r24
 c1c:	41 f7       	brne	.-48     	; 0xbee <main+0x2e>
	UART_init(&uart_configratoin);
 c1e:	ce 01       	movw	r24, r28
 c20:	02 96       	adiw	r24, 0x02	; 2
 c22:	0e 94 ca 03 	call	0x794	; 0x794 <UART_init>

	recievedMSG = UART_receiveByte();
 c26:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 c2a:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		switch(recievedMSG)
 c2c:	89 81       	ldd	r24, Y+1	; 0x01
 c2e:	e8 2f       	mov	r30, r24
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	fa 87       	std	Y+10, r31	; 0x0a
 c34:	e9 87       	std	Y+9, r30	; 0x09
 c36:	29 85       	ldd	r18, Y+9	; 0x09
 c38:	3a 85       	ldd	r19, Y+10	; 0x0a
 c3a:	26 34       	cpi	r18, 0x46	; 70
 c3c:	31 05       	cpc	r19, r1
 c3e:	59 f0       	breq	.+22     	; 0xc56 <main+0x96>
 c40:	89 85       	ldd	r24, Y+9	; 0x09
 c42:	9a 85       	ldd	r25, Y+10	; 0x0a
 c44:	83 35       	cpi	r24, 0x53	; 83
 c46:	91 05       	cpc	r25, r1
 c48:	91 f1       	breq	.+100    	; 0xcae <main+0xee>
 c4a:	e9 85       	ldd	r30, Y+9	; 0x09
 c4c:	fa 85       	ldd	r31, Y+10	; 0x0a
 c4e:	e2 34       	cpi	r30, 0x42	; 66
 c50:	f1 05       	cpc	r31, r1
 c52:	b9 f0       	breq	.+46     	; 0xc82 <main+0xc2>
 c54:	eb cf       	rjmp	.-42     	; 0xc2c <main+0x6c>
		{
		case 'F':
			recievedMSG = UART_receiveByte();
 c56:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 c5a:	89 83       	std	Y+1, r24	; 0x01
 c5c:	0b c0       	rjmp	.+22     	; 0xc74 <main+0xb4>
			while(recievedMSG >= '1' && recievedMSG <= '5')
			{
				DcMotor_Rotate(CW, motorSpeed(recievedMSG));
 c5e:	89 81       	ldd	r24, Y+1	; 0x01
 c60:	0e 94 98 05 	call	0xb30	; 0xb30 <motorSpeed>
 c64:	98 2f       	mov	r25, r24
 c66:	81 e0       	ldi	r24, 0x01	; 1
 c68:	69 2f       	mov	r22, r25
 c6a:	0e 94 46 05 	call	0xa8c	; 0xa8c <DcMotor_Rotate>
				recievedMSG = UART_receiveByte();
 c6e:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 c72:	89 83       	std	Y+1, r24	; 0x01
	{
		switch(recievedMSG)
		{
		case 'F':
			recievedMSG = UART_receiveByte();
			while(recievedMSG >= '1' && recievedMSG <= '5')
 c74:	89 81       	ldd	r24, Y+1	; 0x01
 c76:	81 33       	cpi	r24, 0x31	; 49
 c78:	c8 f2       	brcs	.-78     	; 0xc2c <main+0x6c>
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	86 33       	cpi	r24, 0x36	; 54
 c7e:	78 f3       	brcs	.-34     	; 0xc5e <main+0x9e>
 c80:	d5 cf       	rjmp	.-86     	; 0xc2c <main+0x6c>
				DcMotor_Rotate(CW, motorSpeed(recievedMSG));
				recievedMSG = UART_receiveByte();
			}
			break;
		case 'B':
			recievedMSG = UART_receiveByte();
 c82:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 c86:	89 83       	std	Y+1, r24	; 0x01
 c88:	0b c0       	rjmp	.+22     	; 0xca0 <main+0xe0>
			while(recievedMSG >= '1' && recievedMSG <= '5')
			{
				DcMotor_Rotate(CCW, motorSpeed(recievedMSG));
 c8a:	89 81       	ldd	r24, Y+1	; 0x01
 c8c:	0e 94 98 05 	call	0xb30	; 0xb30 <motorSpeed>
 c90:	98 2f       	mov	r25, r24
 c92:	82 e0       	ldi	r24, 0x02	; 2
 c94:	69 2f       	mov	r22, r25
 c96:	0e 94 46 05 	call	0xa8c	; 0xa8c <DcMotor_Rotate>
				recievedMSG = UART_receiveByte();
 c9a:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 c9e:	89 83       	std	Y+1, r24	; 0x01
				recievedMSG = UART_receiveByte();
			}
			break;
		case 'B':
			recievedMSG = UART_receiveByte();
			while(recievedMSG >= '1' && recievedMSG <= '5')
 ca0:	89 81       	ldd	r24, Y+1	; 0x01
 ca2:	81 33       	cpi	r24, 0x31	; 49
 ca4:	18 f2       	brcs	.-122    	; 0xc2c <main+0x6c>
 ca6:	89 81       	ldd	r24, Y+1	; 0x01
 ca8:	86 33       	cpi	r24, 0x36	; 54
 caa:	78 f3       	brcs	.-34     	; 0xc8a <main+0xca>
 cac:	bf cf       	rjmp	.-130    	; 0xc2c <main+0x6c>
				DcMotor_Rotate(CCW, motorSpeed(recievedMSG));
				recievedMSG = UART_receiveByte();
			}
			break;
		case 'S':
			DcMotor_Rotate(STOP, MOTOR_STOP);
 cae:	80 e0       	ldi	r24, 0x00	; 0
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	0e 94 46 05 	call	0xa8c	; 0xa8c <DcMotor_Rotate>
			recievedMSG = UART_receiveByte();
 cb6:	0e 94 4a 04 	call	0x894	; 0x894 <UART_receiveByte>
 cba:	89 83       	std	Y+1, r24	; 0x01
 cbc:	b7 cf       	rjmp	.-146    	; 0xc2c <main+0x6c>

00000cbe <__divmodhi4>:
 cbe:	97 fb       	bst	r25, 7
 cc0:	09 2e       	mov	r0, r25
 cc2:	07 26       	eor	r0, r23
 cc4:	0a d0       	rcall	.+20     	; 0xcda <__divmodhi4_neg1>
 cc6:	77 fd       	sbrc	r23, 7
 cc8:	04 d0       	rcall	.+8      	; 0xcd2 <__divmodhi4_neg2>
 cca:	2e d0       	rcall	.+92     	; 0xd28 <__udivmodhi4>
 ccc:	06 d0       	rcall	.+12     	; 0xcda <__divmodhi4_neg1>
 cce:	00 20       	and	r0, r0
 cd0:	1a f4       	brpl	.+6      	; 0xcd8 <__divmodhi4_exit>

00000cd2 <__divmodhi4_neg2>:
 cd2:	70 95       	com	r23
 cd4:	61 95       	neg	r22
 cd6:	7f 4f       	sbci	r23, 0xFF	; 255

00000cd8 <__divmodhi4_exit>:
 cd8:	08 95       	ret

00000cda <__divmodhi4_neg1>:
 cda:	f6 f7       	brtc	.-4      	; 0xcd8 <__divmodhi4_exit>
 cdc:	90 95       	com	r25
 cde:	81 95       	neg	r24
 ce0:	9f 4f       	sbci	r25, 0xFF	; 255
 ce2:	08 95       	ret

00000ce4 <__udivmodsi4>:
 ce4:	a1 e2       	ldi	r26, 0x21	; 33
 ce6:	1a 2e       	mov	r1, r26
 ce8:	aa 1b       	sub	r26, r26
 cea:	bb 1b       	sub	r27, r27
 cec:	fd 01       	movw	r30, r26
 cee:	0d c0       	rjmp	.+26     	; 0xd0a <__udivmodsi4_ep>

00000cf0 <__udivmodsi4_loop>:
 cf0:	aa 1f       	adc	r26, r26
 cf2:	bb 1f       	adc	r27, r27
 cf4:	ee 1f       	adc	r30, r30
 cf6:	ff 1f       	adc	r31, r31
 cf8:	a2 17       	cp	r26, r18
 cfa:	b3 07       	cpc	r27, r19
 cfc:	e4 07       	cpc	r30, r20
 cfe:	f5 07       	cpc	r31, r21
 d00:	20 f0       	brcs	.+8      	; 0xd0a <__udivmodsi4_ep>
 d02:	a2 1b       	sub	r26, r18
 d04:	b3 0b       	sbc	r27, r19
 d06:	e4 0b       	sbc	r30, r20
 d08:	f5 0b       	sbc	r31, r21

00000d0a <__udivmodsi4_ep>:
 d0a:	66 1f       	adc	r22, r22
 d0c:	77 1f       	adc	r23, r23
 d0e:	88 1f       	adc	r24, r24
 d10:	99 1f       	adc	r25, r25
 d12:	1a 94       	dec	r1
 d14:	69 f7       	brne	.-38     	; 0xcf0 <__udivmodsi4_loop>
 d16:	60 95       	com	r22
 d18:	70 95       	com	r23
 d1a:	80 95       	com	r24
 d1c:	90 95       	com	r25
 d1e:	9b 01       	movw	r18, r22
 d20:	ac 01       	movw	r20, r24
 d22:	bd 01       	movw	r22, r26
 d24:	cf 01       	movw	r24, r30
 d26:	08 95       	ret

00000d28 <__udivmodhi4>:
 d28:	aa 1b       	sub	r26, r26
 d2a:	bb 1b       	sub	r27, r27
 d2c:	51 e1       	ldi	r21, 0x11	; 17
 d2e:	07 c0       	rjmp	.+14     	; 0xd3e <__udivmodhi4_ep>

00000d30 <__udivmodhi4_loop>:
 d30:	aa 1f       	adc	r26, r26
 d32:	bb 1f       	adc	r27, r27
 d34:	a6 17       	cp	r26, r22
 d36:	b7 07       	cpc	r27, r23
 d38:	10 f0       	brcs	.+4      	; 0xd3e <__udivmodhi4_ep>
 d3a:	a6 1b       	sub	r26, r22
 d3c:	b7 0b       	sbc	r27, r23

00000d3e <__udivmodhi4_ep>:
 d3e:	88 1f       	adc	r24, r24
 d40:	99 1f       	adc	r25, r25
 d42:	5a 95       	dec	r21
 d44:	a9 f7       	brne	.-22     	; 0xd30 <__udivmodhi4_loop>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	bc 01       	movw	r22, r24
 d4c:	cd 01       	movw	r24, r26
 d4e:	08 95       	ret

00000d50 <_exit>:
 d50:	f8 94       	cli

00000d52 <__stop_program>:
 d52:	ff cf       	rjmp	.-2      	; 0xd52 <__stop_program>
