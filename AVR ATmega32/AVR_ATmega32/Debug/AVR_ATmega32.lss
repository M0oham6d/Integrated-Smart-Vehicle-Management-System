
AVR_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  000064be  00006552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008001a6  008001a6  00006698  2**0
                  ALLOC
  3 .stab         000065ac  00000000  00000000  00006698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f5b  00000000  00000000  0000cc44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ff31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000136c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00014a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00014d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000156bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__vector_1>
       8:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__vector_2>
       c:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__vector_3>
      10:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_4>
      14:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_5>
      18:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_6>
      1c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_9>
      28:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_10>
      2c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <main>
      8a:	0c 94 5d 32 	jmp	0x64ba	; 0x64ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 31 	jmp	0x63ea	; 0x63ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e8       	ldi	r26, 0x88	; 136
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 32 	jmp	0x6422	; 0x6422 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 32 	jmp	0x643a	; 0x643a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 32 	jmp	0x643a	; 0x643a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 31 	jmp	0x63ea	; 0x63ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 32 	jmp	0x6422	; 0x6422 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e8       	ldi	r22, 0x88	; 136
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 32 	jmp	0x643a	; 0x643a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 32 	jmp	0x643a	; 0x643a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 32 	jmp	0x643a	; 0x643a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 32 	jmp	0x640a	; 0x640a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 21 32 	jmp	0x6442	; 0x6442 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 57       	subi	r30, 0x70	; 112
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
/* Callbacks */
static void (*RxCallback)(uint8) = 0;
static void (*TxCallback)(void) = 0;

void UART_Init(UART_ConfigType *config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
    /* Set baud rate */
    uint16 ubrr = (F_CPU / (16 * config->baudRate)) - 1;
     e46:	ed 81       	ldd	r30, Y+5	; 0x05
     e48:	fe 81       	ldd	r31, Y+6	; 0x06
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	a2 81       	ldd	r26, Z+2	; 0x02
     e50:	b3 81       	ldd	r27, Z+3	; 0x03
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	9c 01       	movw	r18, r24
     e74:	ad 01       	movw	r20, r26
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	94 e2       	ldi	r25, 0x24	; 36
     e7a:	a4 ef       	ldi	r26, 0xF4	; 244
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 bf 31 	call	0x637e	; 0x637e <__udivmodsi4>
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
    UBRRH = (uint8)(ubrr >> 8);
     e90:	e0 e4       	ldi	r30, 0x40	; 64
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	89 2f       	mov	r24, r25
     e9a:	99 27       	eor	r25, r25
     e9c:	80 83       	st	Z, r24
    UBRRL = (uint8)ubrr;
     e9e:	e9 e2       	ldi	r30, 0x29	; 41
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	80 83       	st	Z, r24

    /* Set frame format */
    uint8 ucsrb = (1 << RXEN) | (1 << TXEN);  /* Enable RX and TX */
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 ucsrc = (1 << URSEL);	/* URSEL must be 1 when writing to UCSRC */
     eaa:	80 e8       	ldi	r24, 0x80	; 128
     eac:	89 83       	std	Y+1, r24	; 0x01

    /* Data bits */
    switch (config->dataBits)
     eae:	ed 81       	ldd	r30, Y+5	; 0x05
     eb0:	fe 81       	ldd	r31, Y+6	; 0x06
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	38 87       	std	Y+8, r19	; 0x08
     eba:	2f 83       	std	Y+7, r18	; 0x07
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	87 30       	cpi	r24, 0x07	; 7
     ec2:	91 05       	cpc	r25, r1
     ec4:	f9 f0       	breq	.+62     	; 0xf04 <UART_Init+0xd6>
     ec6:	2f 81       	ldd	r18, Y+7	; 0x07
     ec8:	38 85       	ldd	r19, Y+8	; 0x08
     eca:	28 30       	cpi	r18, 0x08	; 8
     ecc:	31 05       	cpc	r19, r1
     ece:	5c f4       	brge	.+22     	; 0xee6 <UART_Init+0xb8>
     ed0:	8f 81       	ldd	r24, Y+7	; 0x07
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	85 30       	cpi	r24, 0x05	; 5
     ed6:	91 05       	cpc	r25, r1
     ed8:	19 f1       	breq	.+70     	; 0xf20 <UART_Init+0xf2>
     eda:	2f 81       	ldd	r18, Y+7	; 0x07
     edc:	38 85       	ldd	r19, Y+8	; 0x08
     ede:	26 30       	cpi	r18, 0x06	; 6
     ee0:	31 05       	cpc	r19, r1
     ee2:	61 f0       	breq	.+24     	; 0xefc <UART_Init+0xce>
     ee4:	1d c0       	rjmp	.+58     	; 0xf20 <UART_Init+0xf2>
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	91 05       	cpc	r25, r1
     eee:	71 f0       	breq	.+28     	; 0xf0c <UART_Init+0xde>
     ef0:	2f 81       	ldd	r18, Y+7	; 0x07
     ef2:	38 85       	ldd	r19, Y+8	; 0x08
     ef4:	29 30       	cpi	r18, 0x09	; 9
     ef6:	31 05       	cpc	r19, r1
     ef8:	69 f0       	breq	.+26     	; 0xf14 <UART_Init+0xe6>
     efa:	12 c0       	rjmp	.+36     	; 0xf20 <UART_Init+0xf2>
    {
        case 5: ucsrc |= (0 << UCSZ0) | (0 << UCSZ1); break;
        case 6: ucsrc |= (1 << UCSZ0) | (0 << UCSZ1); break;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <UART_Init+0xf2>
        case 7: ucsrc |= (0 << UCSZ0) | (1 << UCSZ1); break;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	84 60       	ori	r24, 0x04	; 4
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <UART_Init+0xf2>
        case 8: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); break;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	86 60       	ori	r24, 0x06	; 6
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <UART_Init+0xf2>
        case 9: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); ucsrb |= (1 << UCSZ2); break;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	86 60       	ori	r24, 0x06	; 6
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	8a 83       	std	Y+2, r24	; 0x02
    }

    if (config->parity == 1) ucsrc |= (1 << UPM1);	/* Even parity */
     f20:	ed 81       	ldd	r30, Y+5	; 0x05
     f22:	fe 81       	ldd	r31, Y+6	; 0x06
     f24:	85 81       	ldd	r24, Z+5	; 0x05
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	21 f4       	brne	.+8      	; 0xf32 <UART_Init+0x104>
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 62       	ori	r24, 0x20	; 32
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <UART_Init+0x114>
    else if (config->parity == 2) ucsrc |= (1 << UPM1) | (1 << UPM0);	/* Odd parity */
     f32:	ed 81       	ldd	r30, Y+5	; 0x05
     f34:	fe 81       	ldd	r31, Y+6	; 0x06
     f36:	85 81       	ldd	r24, Z+5	; 0x05
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	19 f4       	brne	.+6      	; 0xf42 <UART_Init+0x114>
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 63       	ori	r24, 0x30	; 48
     f40:	89 83       	std	Y+1, r24	; 0x01

    if (config->stopBits == 2) ucsrc |= (1 << USBS);	/* Stop bits */
     f42:	ed 81       	ldd	r30, Y+5	; 0x05
     f44:	fe 81       	ldd	r31, Y+6	; 0x06
     f46:	86 81       	ldd	r24, Z+6	; 0x06
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	19 f4       	brne	.+6      	; 0xf52 <UART_Init+0x124>
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	89 83       	std	Y+1, r24	; 0x01

    // Apply configurations
    UCSRB = ucsrb;
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	80 83       	st	Z, r24
    UCSRC = ucsrc;
     f5a:	e0 e4       	ldi	r30, 0x40	; 64
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	80 83       	st	Z, r24

    sei();		/* Enable Global Interrupts */
     f62:	78 94       	sei
}
     f64:	28 96       	adiw	r28, 0x08	; 8
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <UART_Transmit>:

/* Transmit data */
void UART_Transmit (uint8 data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1 << UDRE)));  // Wait for empty transmit buffer
     f82:	eb e2       	ldi	r30, 0x2B	; 43
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 72       	andi	r24, 0x20	; 32
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	b9 f3       	breq	.-18     	; 0xf82 <UART_Transmit+0xc>
    UDR = data;
     f94:	ec e2       	ldi	r30, 0x2C	; 44
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_Receive>:

/* Receive data */
uint8 UART_Receive (void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
    while (!(UCSRA & (1 << RXC)));  // Wait for data to be received
     fac:	eb e2       	ldi	r30, 0x2B	; 43
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	dc f7       	brge	.-10     	; 0xfac <UART_Receive+0x8>
    return UDR;
     fb6:	ec e2       	ldi	r30, 0x2C	; 44
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <UART_SetRxCallback>:

/* Set RX callback */
void UART_SetRxCallback(void (*callback)(uint8))
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <UART_SetRxCallback+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
    RxCallback = callback;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	90 93 a7 01 	sts	0x01A7, r25
     fd8:	80 93 a6 01 	sts	0x01A6, r24
    UCSRB |= (1 << RXCIE);		/* Enable RX interrupt */
     fdc:	aa e2       	ldi	r26, 0x2A	; 42
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ea e2       	ldi	r30, 0x2A	; 42
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <UART_SetTxCallback>:

/* Set TX callback */
void UART_SetTxCallback(void (*callback)(void))
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <UART_SetTxCallback+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    TxCallback = callback;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	90 93 a9 01 	sts	0x01A9, r25
    100a:	80 93 a8 01 	sts	0x01A8, r24
    UCSRB |= (1 << TXCIE);		/* Enable TX interrupt */
    100e:	aa e2       	ldi	r26, 0x2A	; 42
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ea e2       	ldi	r30, 0x2A	; 42
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <__vector_13>:

ISR (USART_RXC_vect)		/* ISR for RX complete */
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    if (RxCallback)
    1050:	80 91 a6 01 	lds	r24, 0x01A6
    1054:	90 91 a7 01 	lds	r25, 0x01A7
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	41 f0       	breq	.+16     	; 0x106c <__vector_13+0x46>
    {
        RxCallback(UDR);
    105c:	e0 91 a6 01 	lds	r30, 0x01A6
    1060:	f0 91 a7 01 	lds	r31, 0x01A7
    1064:	ac e2       	ldi	r26, 0x2C	; 44
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	8c 91       	ld	r24, X
    106a:	09 95       	icall
    }
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_15>:

ISR (USART_TXC_vect)		/* ISR for TX complete */
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    if (TxCallback)
    10bc:	80 91 a8 01 	lds	r24, 0x01A8
    10c0:	90 91 a9 01 	lds	r25, 0x01A9
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <__vector_15+0x40>
    {
        TxCallback();
    10c8:	e0 91 a8 01 	lds	r30, 0x01A8
    10cc:	f0 91 a9 01 	lds	r31, 0x01A9
    10d0:	09 95       	icall
    }
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <UART_SendNumbersWithDelimiter>:

void UART_SendNumbersWithDelimiter(const uint16* numbers, uint8 count, char delimiter)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	60 97       	sbiw	r28, 0x10	; 16
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	9e 87       	std	Y+14, r25	; 0x0e
    110e:	8d 87       	std	Y+13, r24	; 0x0d
    1110:	6f 87       	std	Y+15, r22	; 0x0f
    1112:	48 8b       	std	Y+16, r20	; 0x10
    char buffer[10];
    for (uint8 i = 0; i < count; i++)
    1114:	1a 82       	std	Y+2, r1	; 0x02
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <UART_SendNumbersWithDelimiter+0xa0>
    {
        itoa(numbers[i], buffer, 10);  /* From integer to string */
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9c 01       	movw	r18, r24
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	fc 01       	movw	r30, r24
    112a:	e2 0f       	add	r30, r18
    112c:	f3 1f       	adc	r31, r19
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	9e 01       	movw	r18, r28
    1134:	2d 5f       	subi	r18, 0xFD	; 253
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	b9 01       	movw	r22, r18
    113a:	4a e0       	ldi	r20, 0x0A	; 10
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	0e 94 2c 32 	call	0x6458	; 0x6458 <itoa>
        for (uint8 j = 0; buffer[j] != '\0'; j++)
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <UART_SendNumbersWithDelimiter+0x6a>
        {
            UART_Transmit(buffer[j]);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	03 96       	adiw	r24, 0x03	; 3
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	80 81       	ld	r24, Z
    1158:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_Transmit>
{
    char buffer[10];
    for (uint8 i = 0; i < count; i++)
    {
        itoa(numbers[i], buffer, 10);  /* From integer to string */
        for (uint8 j = 0; buffer[j] != '\0'; j++)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	ce 01       	movw	r24, r28
    116a:	03 96       	adiw	r24, 0x03	; 3
    116c:	fc 01       	movw	r30, r24
    116e:	e2 0f       	add	r30, r18
    1170:	f3 1f       	adc	r31, r19
    1172:	80 81       	ld	r24, Z
    1174:	88 23       	and	r24, r24
    1176:	39 f7       	brne	.-50     	; 0x1146 <UART_SendNumbersWithDelimiter+0x4e>
        {
            UART_Transmit(buffer[j]);
        }

        if (i < count - 1)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	28 17       	cp	r18, r24
    1188:	39 07       	cpc	r19, r25
    118a:	1c f4       	brge	.+6      	; 0x1192 <UART_SendNumbersWithDelimiter+0x9a>
        {
            UART_Transmit(delimiter);
    118c:	88 89       	ldd	r24, Y+16	; 0x10
    118e:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_Transmit>
}

void UART_SendNumbersWithDelimiter(const uint16* numbers, uint8 count, char delimiter)
{
    char buffer[10];
    for (uint8 i = 0; i < count; i++)
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	8f 85       	ldd	r24, Y+15	; 0x0f
    119c:	98 17       	cp	r25, r24
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <UART_SendNumbersWithDelimiter+0xaa>
    11a0:	bb cf       	rjmp	.-138    	; 0x1118 <UART_SendNumbersWithDelimiter+0x20>
        if (i < count - 1)
        {
            UART_Transmit(delimiter);
        }
    }
    UART_Transmit('\n'); 	/* If i want */
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_Transmit>
}
    11a8:	60 96       	adiw	r28, 0x10	; 16
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <__vector_11>:
 *******************************************************************************/
/*
 * ISR For Timer0 Overflow
 */
ISR(TIMER0_OVF_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    11e4:	80 91 aa 01 	lds	r24, 0x01AA
    11e8:	90 91 ab 01 	lds	r25, 0x01AB
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	29 f0       	breq	.+10     	; 0x11fa <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer0)();
    11f0:	e0 91 aa 01 	lds	r30, 0x01AA
    11f4:	f0 91 ab 01 	lds	r31, 0x01AB
    11f8:	09 95       	icall
	}
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_10>:

/*
 * ISR For Timer0 Compare Match
 */
ISR(TIMER0_COMP_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    124a:	80 91 aa 01 	lds	r24, 0x01AA
    124e:	90 91 ab 01 	lds	r25, 0x01AB
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	29 f0       	breq	.+10     	; 0x1260 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer0)();
    1256:	e0 91 aa 01 	lds	r30, 0x01AA
    125a:	f0 91 ab 01 	lds	r31, 0x01AB
    125e:	09 95       	icall
	}
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_9>:

/*
 * ISR For Timer1 Overflow
 */
ISR(TIMER1_OVF_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    12b0:	80 91 ac 01 	lds	r24, 0x01AC
    12b4:	90 91 ad 01 	lds	r25, 0x01AD
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer1)();
    12bc:	e0 91 ac 01 	lds	r30, 0x01AC
    12c0:	f0 91 ad 01 	lds	r31, 0x01AD
    12c4:	09 95       	icall
	}
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_7>:

/*
 * ISR For Timer1 Compare Match A
 */
ISR(TIMER1_COMPA_vect)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    1316:	80 91 ac 01 	lds	r24, 0x01AC
    131a:	90 91 ad 01 	lds	r25, 0x01AD
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	29 f0       	breq	.+10     	; 0x132c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer1)();
    1322:	e0 91 ac 01 	lds	r30, 0x01AC
    1326:	f0 91 ad 01 	lds	r31, 0x01AD
    132a:	09 95       	icall
	}
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_5>:

/*
 * ISR For Timer2 Overflow
 */
ISR(TIMER2_OVF_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    137c:	80 91 ae 01 	lds	r24, 0x01AE
    1380:	90 91 af 01 	lds	r25, 0x01AF
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	29 f0       	breq	.+10     	; 0x1392 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer2)();
    1388:	e0 91 ae 01 	lds	r30, 0x01AE
    138c:	f0 91 af 01 	lds	r31, 0x01AF
    1390:	09 95       	icall
	}
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_4>:

/*
 * ISR For Timer2 Compare Match
 */
ISR(TIMER2_COMP_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	6f 93       	push	r22
    13cc:	7f 93       	push	r23
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    13e2:	80 91 ae 01 	lds	r24, 0x01AE
    13e6:	90 91 af 01 	lds	r25, 0x01AF
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	29 f0       	breq	.+10     	; 0x13f8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer2)();
    13ee:	e0 91 ae 01 	lds	r30, 0x01AE
    13f2:	f0 91 af 01 	lds	r31, 0x01AF
    13f6:	09 95       	icall
	}
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <Timer_init>:
/*
 * Function to initialize the Timer driver.
 * Config_Ptr: Pointer to the Timer configuration structure.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <Timer_init+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <Timer_init+0x8>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <Timer_init+0x2a>
    1446:	47 c0       	rjmp	.+142    	; 0x14d6 <Timer_init+0xb8>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <Timer_init+0x36>
    1452:	85 c0       	rjmp	.+266    	; 0x155e <Timer_init+0x140>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	09 f0       	breq	.+2      	; 0x145e <Timer_init+0x40>
    145c:	bb c0       	rjmp	.+374    	; 0x15d4 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS00 & CS01 & CS02.
		 */
		TCCR0 = (1<<FOC0) | ((Config_Ptr->timer_mode)<<WGM01) | ((Config_Ptr->timer_clock)<<CS00);
    145e:	a3 e5       	ldi	r26, 0x53	; 83
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	86 81       	ldd	r24, Z+6	; 0x06
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	98 2f       	mov	r25, r24
    147a:	90 68       	ori	r25, 0x80	; 128
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	85 81       	ldd	r24, Z+5	; 0x05
    1482:	89 2b       	or	r24, r25
    1484:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT0 */
		TCNT0 = Config_Ptr->timer_InitialValue;
    1486:	a2 e5       	ldi	r26, 0x52	; 82
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e9 81       	ldd	r30, Y+1	; 0x01
    148c:	fa 81       	ldd	r31, Y+2	; 0x02
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	86 81       	ldd	r24, Z+6	; 0x06
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	39 f4       	brne	.+14     	; 0x14ac <Timer_init+0x8e>
		{
			/* Set Output Compare Register – OCR0 */
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    149e:	ac e5       	ldi	r26, 0x5C	; 92
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	86 81       	ldd	r24, Z+6	; 0x06
    14b2:	88 23       	and	r24, r24
    14b4:	41 f4       	brne	.+16     	; 0x14c6 <Timer_init+0xa8>
		{
			TIMSK |= (1<<TOIE0);
    14b6:	a9 e5       	ldi	r26, 0x59	; 89
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 e5       	ldi	r30, 0x59	; 89
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	8c 93       	st	X, r24
    14c4:	87 c0       	rjmp	.+270    	; 0x15d4 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE0);
    14c6:	a9 e5       	ldi	r26, 0x59	; 89
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e5       	ldi	r30, 0x59	; 89
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	82 60       	ori	r24, 0x02	; 2
    14d2:	8c 93       	st	X, r24
    14d4:	7f c0       	rjmp	.+254    	; 0x15d4 <Timer_init+0x1b6>
		 * The FOC1A/FOC1B = 1 when the WGM13:0 bits specifies a non-PWM mode.
		 * Normal mode WGM10 = 0, WGM11 = 0, WGM12 = 0; WGM13 = 0
		 * Compare mode WGM10 = 0, WGM11 = 0, WGM12 = 1; WGM13 = 0
		 * Set clock as we need from CS10 & CS11 & CS12.
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    14d6:	ef e4       	ldi	r30, 0x4F	; 79
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8c e0       	ldi	r24, 0x0C	; 12
    14dc:	80 83       	st	Z, r24
		TCCR1B = ((Config_Ptr->timer_mode)<<WGM12) | ((Config_Ptr->timer_clock)<<CS10);
    14de:	ae e4       	ldi	r26, 0x4E	; 78
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	86 81       	ldd	r24, Z+6	; 0x06
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	98 2f       	mov	r25, r24
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	85 81       	ldd	r24, Z+5	; 0x05
    1500:	89 2b       	or	r24, r25
    1502:	8c 93       	st	X, r24

		/* Set Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = Config_Ptr->timer_InitialValue;
    1504:	ac e4       	ldi	r26, 0x4C	; 76
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	9c 93       	st	X, r25
    1514:	8e 93       	st	-X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	86 81       	ldd	r24, Z+6	; 0x06
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	51 f4       	brne	.+20     	; 0x1534 <Timer_init+0x116>
		{
			/* Set Output Compare Register 1 A – OCR1AH and OCR1AL */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1520:	ea e4       	ldi	r30, 0x4A	; 74
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	a9 81       	ldd	r26, Y+1	; 0x01
    1526:	ba 81       	ldd	r27, Y+2	; 0x02
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	8d 91       	ld	r24, X+
    152c:	9c 91       	ld	r25, X
    152e:	13 97       	sbiw	r26, 0x03	; 3
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	86 81       	ldd	r24, Z+6	; 0x06
    153a:	88 23       	and	r24, r24
    153c:	41 f4       	brne	.+16     	; 0x154e <Timer_init+0x130>
		{
			TIMSK |= (1<<TOIE1);
    153e:	a9 e5       	ldi	r26, 0x59	; 89
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e9 e5       	ldi	r30, 0x59	; 89
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	8c 93       	st	X, r24
    154c:	43 c0       	rjmp	.+134    	; 0x15d4 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE1A);
    154e:	a9 e5       	ldi	r26, 0x59	; 89
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e9 e5       	ldi	r30, 0x59	; 89
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 61       	ori	r24, 0x10	; 16
    155a:	8c 93       	st	X, r24
    155c:	3b c0       	rjmp	.+118    	; 0x15d4 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS20 & CS21 & CS22.
		 */
		TCCR2 = (1<<FOC2) | ((Config_Ptr->timer_mode)<<WGM21) | ((Config_Ptr->timer_clock)<<CS20);
    155e:	a5 e4       	ldi	r26, 0x45	; 69
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e9 81       	ldd	r30, Y+1	; 0x01
    1564:	fa 81       	ldd	r31, Y+2	; 0x02
    1566:	86 81       	ldd	r24, Z+6	; 0x06
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	98 2f       	mov	r25, r24
    157a:	90 68       	ori	r25, 0x80	; 128
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	85 81       	ldd	r24, Z+5	; 0x05
    1582:	89 2b       	or	r24, r25
    1584:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT2 */
		TCNT2 = Config_Ptr->timer_InitialValue;
    1586:	a4 e4       	ldi	r26, 0x44	; 68
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	86 81       	ldd	r24, Z+6	; 0x06
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	39 f4       	brne	.+14     	; 0x15ac <Timer_init+0x18e>
		{
			/* Set Output Compare Register – OCR2 */
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    159e:	a3 e4       	ldi	r26, 0x43	; 67
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	86 81       	ldd	r24, Z+6	; 0x06
    15b2:	88 23       	and	r24, r24
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <Timer_init+0x1a8>
		{
			TIMSK |= (1<<TOIE2);
    15b6:	a9 e5       	ldi	r26, 0x59	; 89
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e9 e5       	ldi	r30, 0x59	; 89
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 64       	ori	r24, 0x40	; 64
    15c2:	8c 93       	st	X, r24
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE2);
    15c6:	a9 e5       	ldi	r26, 0x59	; 89
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 e5       	ldi	r30, 0x59	; 89
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	8c 93       	st	X, r24
		}
		break;
	}
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Timer_deInit>:
/*
 * Function to disable the Timer via Timer_ID.
 * timer_type: The ID of the timer to be disabled.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Timer_deInit+0x6>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3b 83       	std	Y+3, r19	; 0x03
    15f8:	2a 83       	std	Y+2, r18	; 0x02
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	11 f1       	breq	.+68     	; 0x1648 <Timer_deInit+0x66>
    1604:	2a 81       	ldd	r18, Y+2	; 0x02
    1606:	3b 81       	ldd	r19, Y+3	; 0x03
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	d1 f1       	breq	.+116    	; 0x1682 <Timer_deInit+0xa0>
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	09 f0       	breq	.+2      	; 0x1618 <Timer_deInit+0x36>
    1616:	4c c0       	rjmp	.+152    	; 0x16b0 <Timer_deInit+0xce>
	case TIMER0_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR0 = 0;
    1618:	e3 e5       	ldi	r30, 0x53	; 83
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT0 */
		TCNT0 = 0;
    161e:	e2 e5       	ldi	r30, 0x52	; 82
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR0 */
		OCR0 = 0;
    1624:	ec e5       	ldi	r30, 0x5C	; 92
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE0);
    162a:	a9 e5       	ldi	r26, 0x59	; 89
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e9 e5       	ldi	r30, 0x59	; 89
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    1638:	a9 e5       	ldi	r26, 0x59	; 89
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e9 e5       	ldi	r30, 0x59	; 89
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8d 7f       	andi	r24, 0xFD	; 253
    1644:	8c 93       	st	X, r24
    1646:	34 c0       	rjmp	.+104    	; 0x16b0 <Timer_deInit+0xce>
	case TIMER1_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR1A = 0;
    1648:	ef e4       	ldi	r30, 0x4F	; 79
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	10 82       	st	Z, r1
		TCCR1B = 0;
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	10 82       	st	Z, r1

		/* Reset Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = 0;
    1654:	ec e4       	ldi	r30, 0x4C	; 76
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	11 82       	std	Z+1, r1	; 0x01
    165a:	10 82       	st	Z, r1

		/* Reset Output Compare Register 1 A – OCR1AH and OCR1AL */
		OCR1A = 0;
    165c:	ea e4       	ldi	r30, 0x4A	; 74
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	11 82       	std	Z+1, r1	; 0x01
    1662:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE1);
    1664:	a9 e5       	ldi	r26, 0x59	; 89
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e9 e5       	ldi	r30, 0x59	; 89
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8b 7f       	andi	r24, 0xFB	; 251
    1670:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    1672:	a9 e5       	ldi	r26, 0x59	; 89
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e9 e5       	ldi	r30, 0x59	; 89
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8f 7e       	andi	r24, 0xEF	; 239
    167e:	8c 93       	st	X, r24
    1680:	17 c0       	rjmp	.+46     	; 0x16b0 <Timer_deInit+0xce>
	case TIMER2_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR2 = 0;
    1682:	e5 e4       	ldi	r30, 0x45	; 69
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT2 */
		TCNT2 = 0;
    1688:	e4 e4       	ldi	r30, 0x44	; 68
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR2 */
		OCR2 = 0;
    168e:	e3 e4       	ldi	r30, 0x43	; 67
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE2);
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7b       	andi	r24, 0xBF	; 191
    16a0:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    16a2:	a9 e5       	ldi	r26, 0x59	; 89
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e9 e5       	ldi	r30, 0x59	; 89
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 77       	andi	r24, 0x7F	; 127
    16ae:	8c 93       	st	X, r24
		break;
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <Timer_getTimerValue>:
 * Function to get the Timer Value.
 * timer_type: The ID of the timer to get the value from.
 * Returns: The current value of the timer.
 */
uint16 Timer_getTimerValue(Timer_ID_Type timer_type)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	27 97       	sbiw	r28, 0x07	; 7
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3d 83       	std	Y+5, r19	; 0x05
    16da:	2c 83       	std	Y+4, r18	; 0x04
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	89 f0       	breq	.+34     	; 0x1708 <Timer_getTimerValue+0x4c>
    16e6:	2c 81       	ldd	r18, Y+4	; 0x04
    16e8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	99 f0       	breq	.+38     	; 0x1716 <Timer_getTimerValue+0x5a>
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	b9 f4       	brne	.+46     	; 0x1726 <Timer_getTimerValue+0x6a>
	{
	case TIMER0_ID:
		return TCNT0;
    16f8:	e2 e5       	ldi	r30, 0x52	; 82
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3b 83       	std	Y+3, r19	; 0x03
    1704:	2a 83       	std	Y+2, r18	; 0x02
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <Timer_getTimerValue+0x6c>
		break;
	case TIMER1_ID:
		return TCNT1;
    1708:	ec e4       	ldi	r30, 0x4C	; 76
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	9b 83       	std	Y+3, r25	; 0x03
    1712:	8a 83       	std	Y+2, r24	; 0x02
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <Timer_getTimerValue+0x6c>
		break;
	case TIMER2_ID:
		return TCNT2;
    1716:	e4 e4       	ldi	r30, 0x44	; 68
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3b 83       	std	Y+3, r19	; 0x03
    1722:	2a 83       	std	Y+2, r18	; 0x02
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <Timer_getTimerValue+0x6c>
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <Timer_getTimerValue+0x74>
		break;
	}
}
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	9f 83       	std	Y+7, r25	; 0x07
    172e:	8e 83       	std	Y+6, r24	; 0x06
    1730:	8e 81       	ldd	r24, Y+6	; 0x06
    1732:	9f 81       	ldd	r25, Y+7	; 0x07
    1734:	27 96       	adiw	r28, 0x07	; 7
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <Timer_setCallBack>:
 * Function to set the Call Back function address to the required Timer.
 * a_ptr: Pointer to the callback function.
 * timer_type: The ID of the timer to set the callback for.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_type)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <Timer_setCallBack+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <Timer_setCallBack+0x8>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3d 83       	std	Y+5, r19	; 0x05
    1762:	2c 83       	std	Y+4, r18	; 0x04
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	91 05       	cpc	r25, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <Timer_setCallBack+0x48>
    176e:	2c 81       	ldd	r18, Y+4	; 0x04
    1770:	3d 81       	ldd	r19, Y+5	; 0x05
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	91 f0       	breq	.+36     	; 0x179c <Timer_setCallBack+0x56>
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	a1 f4       	brne	.+40     	; 0x17a8 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_timer0 = a_ptr;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	90 93 ab 01 	sts	0x01AB, r25
    1788:	80 93 aa 01 	sts	0x01AA, r24
    178c:	0d c0       	rjmp	.+26     	; 0x17a8 <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_timer1 = a_ptr;
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	90 93 ad 01 	sts	0x01AD, r25
    1796:	80 93 ac 01 	sts	0x01AC, r24
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_timer2 = a_ptr;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	90 93 af 01 	sts	0x01AF, r25
    17a4:	80 93 ae 01 	sts	0x01AE, r24
		break;
	}
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <PWM_Timer0_Start>:
 * Function to initialize Timer0 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer0_Start(const Timer_Configuration * Config_Ptr)
{
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <PWM_Timer0_Start+0xa>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = 0;  /* Set Timer Initial value to 0. */
    17ca:	e2 e5       	ldi	r30, 0x52	; 82
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR0) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR0 is calculated as:
     * OCR0 = (duty_cycle * 255) / 100
     */
    OCR0  = (Config_Ptr->duty_cycle * 255) / 100;
    17d0:	0c e5       	ldi	r16, 0x5C	; 92
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	e9 81       	ldd	r30, Y+1	; 0x01
    17d6:	fa 81       	ldd	r31, Y+2	; 0x02
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	48 2f       	mov	r20, r24
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	ca 01       	movw	r24, r20
    17e0:	9c 01       	movw	r18, r24
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	c9 01       	movw	r24, r18
    17e8:	96 95       	lsr	r25
    17ea:	98 2f       	mov	r25, r24
    17ec:	88 27       	eor	r24, r24
    17ee:	97 95       	ror	r25
    17f0:	87 95       	ror	r24
    17f2:	82 1b       	sub	r24, r18
    17f4:	93 0b       	sbc	r25, r19
    17f6:	84 0f       	add	r24, r20
    17f8:	95 1f       	adc	r25, r21
    17fa:	24 e6       	ldi	r18, 0x64	; 100
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	b9 01       	movw	r22, r18
    1800:	0e 94 ac 31 	call	0x6358	; 0x6358 <__divmodhi4>
    1804:	cb 01       	movw	r24, r22
    1806:	f8 01       	movw	r30, r16
    1808:	80 83       	st	Z, r24

    /* Set PB3/OC0 as output pin (DDRB |= (1<<PB3)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRB  = DDRB | (1<<PB3);
    180a:	a7 e3       	ldi	r26, 0x37	; 55
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e7 e3       	ldi	r30, 0x37	; 55
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	88 60       	ori	r24, 0x08	; 8
    1816:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM01:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC0 on compare match.
     *    - INVERTING: Set OC0 on compare match.
     * 3. Set clock source (CS02:0) as per Config_Ptr->timer_clock.
     */
    TCCR0 = (1<<WGM00) | (1<<WGM01) | ((Config_Ptr->mode)<<COM00) | ((Config_Ptr->timer_clock)<<CS00);
    1818:	a3 e5       	ldi	r26, 0x53	; 83
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	80 81       	ld	r24, Z
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	82 95       	swap	r24
    1828:	92 95       	swap	r25
    182a:	90 7f       	andi	r25, 0xF0	; 240
    182c:	98 27       	eor	r25, r24
    182e:	80 7f       	andi	r24, 0xF0	; 240
    1830:	98 27       	eor	r25, r24
    1832:	98 2f       	mov	r25, r24
    1834:	98 64       	ori	r25, 0x48	; 72
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	81 81       	ldd	r24, Z+1	; 0x01
    183c:	89 2b       	or	r24, r25
    183e:	8c 93       	st	X, r24
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <PWM_Timer2_Start>:
 * Function to initialize Timer2 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer2_Start(const Timer_Configuration * Config_Ptr)
{
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <PWM_Timer2_Start+0xa>
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = 0;  /* Set Timer Initial value to 0. */
    1860:	e4 e4       	ldi	r30, 0x44	; 68
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR2) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR2 is calculated as:
     * OCR2 = (duty_cycle * 255) / 100
     */
    OCR2  = (Config_Ptr->duty_cycle * 255) / 100;
    1866:	03 e4       	ldi	r16, 0x43	; 67
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	e9 81       	ldd	r30, Y+1	; 0x01
    186c:	fa 81       	ldd	r31, Y+2	; 0x02
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	48 2f       	mov	r20, r24
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	ca 01       	movw	r24, r20
    1876:	9c 01       	movw	r18, r24
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	c9 01       	movw	r24, r18
    187e:	96 95       	lsr	r25
    1880:	98 2f       	mov	r25, r24
    1882:	88 27       	eor	r24, r24
    1884:	97 95       	ror	r25
    1886:	87 95       	ror	r24
    1888:	82 1b       	sub	r24, r18
    188a:	93 0b       	sbc	r25, r19
    188c:	84 0f       	add	r24, r20
    188e:	95 1f       	adc	r25, r21
    1890:	24 e6       	ldi	r18, 0x64	; 100
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	b9 01       	movw	r22, r18
    1896:	0e 94 ac 31 	call	0x6358	; 0x6358 <__divmodhi4>
    189a:	cb 01       	movw	r24, r22
    189c:	f8 01       	movw	r30, r16
    189e:	80 83       	st	Z, r24

    /* Set PD7/OC2 as output pin (DDRD |= (1<<PD7)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRD  = DDRD | (1<<PD7);
    18a0:	a1 e3       	ldi	r26, 0x31	; 49
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e1 e3       	ldi	r30, 0x31	; 49
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 68       	ori	r24, 0x80	; 128
    18ac:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM21:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC2 on compare match.
     *    - INVERTING: Set OC2 on compare match.
     * 3. Set clock source (CS22:0) as per Config_Ptr->timer_clock.
     */
    TCCR2 = (1<<WGM20) | (1<<WGM21) | ((Config_Ptr->mode)<<COM20) | ((Config_Ptr->timer_clock)<<CS20);
    18ae:	a5 e4       	ldi	r26, 0x45	; 69
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e9 81       	ldd	r30, Y+1	; 0x01
    18b4:	fa 81       	ldd	r31, Y+2	; 0x02
    18b6:	80 81       	ld	r24, Z
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	82 95       	swap	r24
    18be:	92 95       	swap	r25
    18c0:	90 7f       	andi	r25, 0xF0	; 240
    18c2:	98 27       	eor	r25, r24
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	98 27       	eor	r25, r24
    18c8:	98 2f       	mov	r25, r24
    18ca:	98 64       	ori	r25, 0x48	; 72
    18cc:	e9 81       	ldd	r30, Y+1	; 0x01
    18ce:	fa 81       	ldd	r31, Y+2	; 0x02
    18d0:	81 81       	ldd	r24, Z+1	; 0x01
    18d2:	89 2b       	or	r24, r25
    18d4:	8c 93       	st	X, r24
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <__vector_6>:
 * Description :
 * Interrupt Service Routine for Timer1 Input Capture Event.
 * This ISR is triggered when an edge is detected on the ICP1/PD6 pin.
 */
ISR(TIMER1_CAPT_vect)
{
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
    190e:	80 91 b0 01 	lds	r24, 0x01B0
    1912:	90 91 b1 01 	lds	r25, 0x01B1
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	29 f0       	breq	.+10     	; 0x1924 <__vector_6+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr)();  /* Another method: g_callBackPtr(); */
    191a:	e0 91 b0 01 	lds	r30, 0x01B0
    191e:	f0 91 b1 01 	lds	r31, 0x01B1
    1922:	09 95       	icall
    }
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <ICU_init>:
 * 4. Initialize Timer1 Registers.
 * Parameters  :
 * - Config_Ptr: Pointer to the ICU configuration structure.
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <ICU_init+0x6>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
    /* Configure ICP1/PD6 as an input pin (DDRD &= ~(1<<PD6)) */
    DDRD &= ~(1<<PD6);
    1958:	a1 e3       	ldi	r26, 0x31	; 49
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e1 e3       	ldi	r30, 0x31	; 49
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8f 7b       	andi	r24, 0xBF	; 191
    1964:	8c 93       	st	X, r24

    /* Timer1 always operates in Normal Mode (WGM13:0 = 0000) */
    TCCR1A = (1<<FOC1A) | (1<<FOC1B);  /* Force Output Compare for non-PWM mode */
    1966:	ef e4       	ldi	r30, 0x4F	; 79
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	8c e0       	ldi	r24, 0x0C	; 12
    196c:	80 83       	st	Z, r24

    /*
     * Insert the required clock value in the first three bits (CS10, CS11, and CS12)
     * of the TCCR1B Register.
     */
    TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	98 2f       	mov	r25, r24
    197a:	98 7f       	andi	r25, 0xF8	; 248
    197c:	e9 81       	ldd	r30, Y+1	; 0x01
    197e:	fa 81       	ldd	r31, Y+2	; 0x02
    1980:	80 81       	ld	r24, Z
    1982:	89 2b       	or	r24, r25
    1984:	8c 93       	st	X, r24
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1986:	ae e4       	ldi	r26, 0x4E	; 78
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	28 2f       	mov	r18, r24
    1992:	2f 7b       	andi	r18, 0xBF	; 191
    1994:	e9 81       	ldd	r30, Y+1	; 0x01
    1996:	fa 81       	ldd	r31, Y+2	; 0x02
    1998:	81 81       	ldd	r24, Z+1	; 0x01
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	00 24       	eor	r0, r0
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	07 94       	ror	r0
    19a6:	96 95       	lsr	r25
    19a8:	87 95       	ror	r24
    19aa:	07 94       	ror	r0
    19ac:	98 2f       	mov	r25, r24
    19ae:	80 2d       	mov	r24, r0
    19b0:	82 2b       	or	r24, r18
    19b2:	8c 93       	st	X, r24

    /* Initialize Timer1 counter value to 0 */
    TCNT1 = 0;
    19b4:	ec e4       	ldi	r30, 0x4C	; 76
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	11 82       	std	Z+1, r1	; 0x01
    19ba:	10 82       	st	Z, r1

    /* Initialize the Input Capture Register (ICR1) to 0 */
    ICR1 = 0;
    19bc:	e6 e4       	ldi	r30, 0x46	; 70
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	11 82       	std	Z+1, r1	; 0x01
    19c2:	10 82       	st	Z, r1

    /* Enable the Input Capture interrupt to generate an interrupt when an edge is detected on ICP1/PD6 pin */
    TIMSK |= (1<<TICIE1);
    19c4:	a9 e5       	ldi	r26, 0x59	; 89
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e9 e5       	ldi	r30, 0x59	; 89
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 62       	ori	r24, 0x20	; 32
    19d0:	8c 93       	st	X, r24

    /* Enable global interrupts (SREG |= (1<<7)) */
    SREG |= (1<<7);
    19d2:	af e5       	ldi	r26, 0x5F	; 95
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ef e5       	ldi	r30, 0x5F	; 95
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 68       	ori	r24, 0x80	; 128
    19de:	8c 93       	st	X, r24
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <ICU_setCallBack>:
 * Function to set the callback function address.
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <ICU_setCallBack+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    /* Save the address of the callback function in a global variable */
    g_callBackPtr = a_ptr;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	90 93 b1 01 	sts	0x01B1, r25
    1a00:	80 93 b0 01 	sts	0x01B0, r24
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <ICU_setEdgeDetectionType>:
 * Function to set the required edge detection.
 * Parameters  :
 * - a_edgeType: The edge detection type (FALLING or RAISING).
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1a1a:	ae e4       	ldi	r26, 0x4E	; 78
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ee e4       	ldi	r30, 0x4E	; 78
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	28 2f       	mov	r18, r24
    1a26:	2f 7b       	andi	r18, 0xBF	; 191
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	00 24       	eor	r0, r0
    1a30:	96 95       	lsr	r25
    1a32:	87 95       	ror	r24
    1a34:	07 94       	ror	r0
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	07 94       	ror	r0
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	80 2d       	mov	r24, r0
    1a40:	82 2b       	or	r24, r18
    1a42:	8c 93       	st	X, r24
}
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <ICU_getInputCaptureValue>:
 * The value is stored in the Input Capture Register (ICR1).
 * Returns     :
 * - The captured value from ICR1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1a54:	e6 e4       	ldi	r30, 0x46	; 70
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <ICU_clearTimerValue>:
/*
 * Description :
 * Function to clear the Timer1 value to start counting from ZERO.
 */
void ICU_clearTimerValue(void)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    1a6a:	ec e4       	ldi	r30, 0x4C	; 76
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	11 82       	std	Z+1, r1	; 0x01
    1a70:	10 82       	st	Z, r1
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <ICU_deInit>:
/*
 * Description :
 * Function to disable Timer1 to stop the ICU driver.
 */
void ICU_deInit(void)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    /* Clear all Timer1/ICU registers */
    TCCR1A = 0;
    1a80:	ef e4       	ldi	r30, 0x4F	; 79
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	10 82       	st	Z, r1
    TCCR1B = 0;
    1a86:	ee e4       	ldi	r30, 0x4E	; 78
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	10 82       	st	Z, r1
    TCNT1 = 0;
    1a8c:	ec e4       	ldi	r30, 0x4C	; 76
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	11 82       	std	Z+1, r1	; 0x01
    1a92:	10 82       	st	Z, r1
    ICR1 = 0;
    1a94:	e6 e4       	ldi	r30, 0x46	; 70
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	11 82       	std	Z+1, r1	; 0x01
    1a9a:	10 82       	st	Z, r1

    /* Disable the Input Capture interrupt */
    TIMSK &= ~(1<<TICIE1);
    1a9c:	a9 e5       	ldi	r26, 0x59	; 89
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e9 e5       	ldi	r30, 0x59	; 89
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 7d       	andi	r24, 0xDF	; 223
    1aa8:	8c 93       	st	X, r24

    /* Reset the global callback pointer to NULL */
    g_callBackPtr = NULL_PTR;
    1aaa:	10 92 b1 01 	sts	0x01B1, r1
    1aae:	10 92 b0 01 	sts	0x01B0, r1
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <GPIO_setupPinDirection>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - direction: The direction of the pin (PIN_INPUT or PIN_OUTPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <GPIO_setupPinDirection+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <GPIO_setupPinDirection+0x8>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
    1aca:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	88 30       	cpi	r24, 0x08	; 8
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <GPIO_setupPinDirection+0x1c>
    1ad2:	d5 c0       	rjmp	.+426    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <GPIO_setupPinDirection+0x24>
    1ada:	d1 c0       	rjmp	.+418    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Setup the pin direction as required */
        switch (port_num)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 83       	std	Y+5, r19	; 0x05
    1ae4:	2c 83       	std	Y+4, r18	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_setupPinDirection+0x3a>
    1af0:	43 c0       	rjmp	.+134    	; 0x1b78 <GPIO_setupPinDirection+0xc0>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <GPIO_setupPinDirection+0x4e>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	71 f0       	breq	.+28     	; 0x1b20 <GPIO_setupPinDirection+0x68>
    1b04:	bc c0       	rjmp	.+376    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <GPIO_setupPinDirection+0x5a>
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <GPIO_setupPinDirection+0x118>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <GPIO_setupPinDirection+0x66>
    1b1c:	85 c0       	rjmp	.+266    	; 0x1c28 <GPIO_setupPinDirection+0x170>
    1b1e:	af c0       	rjmp	.+350    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
        {
        case PORTA_ID:
            if (direction == PIN_OUTPUT)
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	a1 f4       	brne	.+40     	; 0x1b4e <GPIO_setupPinDirection+0x96>
            {
                SET_BIT(DDRA, pin_num);  /* Set pin as output */
    1b26:	aa e3       	ldi	r26, 0x3A	; 58
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	ea e3       	ldi	r30, 0x3A	; 58
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <GPIO_setupPinDirection+0x8c>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	0a 94       	dec	r0
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <GPIO_setupPinDirection+0x88>
    1b48:	84 2b       	or	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	98 c0       	rjmp	.+304    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRA, pin_num);  /* Set pin as input */
    1b4e:	aa e3       	ldi	r26, 0x3A	; 58
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ea e3       	ldi	r30, 0x3A	; 58
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <GPIO_setupPinDirection+0xb4>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <GPIO_setupPinDirection+0xb0>
    1b70:	80 95       	com	r24
    1b72:	84 23       	and	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	83 c0       	rjmp	.+262    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTB_ID:
            if (direction == PIN_OUTPUT)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	a1 f4       	brne	.+40     	; 0x1ba6 <GPIO_setupPinDirection+0xee>
            {
                SET_BIT(DDRB, pin_num);  /* Set pin as output */
    1b7e:	a7 e3       	ldi	r26, 0x37	; 55
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e7 e3       	ldi	r30, 0x37	; 55
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <GPIO_setupPinDirection+0xe4>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <GPIO_setupPinDirection+0xe0>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	6c c0       	rjmp	.+216    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRB, pin_num);  /* Set pin as input */
    1ba6:	a7 e3       	ldi	r26, 0x37	; 55
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e7 e3       	ldi	r30, 0x37	; 55
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <GPIO_setupPinDirection+0x10c>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <GPIO_setupPinDirection+0x108>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	57 c0       	rjmp	.+174    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTC_ID:
            if (direction == PIN_OUTPUT)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	a1 f4       	brne	.+40     	; 0x1bfe <GPIO_setupPinDirection+0x146>
            {
                SET_BIT(DDRC, pin_num);  /* Set pin as output */
    1bd6:	a4 e3       	ldi	r26, 0x34	; 52
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 e3       	ldi	r30, 0x34	; 52
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <GPIO_setupPinDirection+0x13c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <GPIO_setupPinDirection+0x138>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	40 c0       	rjmp	.+128    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRC, pin_num);  /* Set pin as input */
    1bfe:	a4 e3       	ldi	r26, 0x34	; 52
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e4 e3       	ldi	r30, 0x34	; 52
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <GPIO_setupPinDirection+0x164>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <GPIO_setupPinDirection+0x160>
    1c20:	80 95       	com	r24
    1c22:	84 23       	and	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	2b c0       	rjmp	.+86     	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTD_ID:
            if (direction == PIN_OUTPUT)
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	a1 f4       	brne	.+40     	; 0x1c56 <GPIO_setupPinDirection+0x19e>
            {
                SET_BIT(DDRD, pin_num);  /* Set pin as output */
    1c2e:	a1 e3       	ldi	r26, 0x31	; 49
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e1 e3       	ldi	r30, 0x31	; 49
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_setupPinDirection+0x194>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_setupPinDirection+0x190>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRD, pin_num);  /* Set pin as input */
    1c56:	a1 e3       	ldi	r26, 0x31	; 49
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e1 e3       	ldi	r30, 0x31	; 49
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <GPIO_setupPinDirection+0x1bc>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <GPIO_setupPinDirection+0x1b8>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <GPIO_writePin>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - value: The value to write (Logic High or Logic Low).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <GPIO_writePin+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <GPIO_writePin+0x8>
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	6a 83       	std	Y+2, r22	; 0x02
    1ca0:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	88 30       	cpi	r24, 0x08	; 8
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <GPIO_writePin+0x1c>
    1ca8:	d5 c0       	rjmp	.+426    	; 0x1e54 <GPIO_writePin+0x1c6>
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <GPIO_writePin+0x24>
    1cb0:	d1 c0       	rjmp	.+418    	; 0x1e54 <GPIO_writePin+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Write the pin value as required */
        switch (port_num)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <GPIO_writePin+0x3a>
    1cc6:	43 c0       	rjmp	.+134    	; 0x1d4e <GPIO_writePin+0xc0>
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <GPIO_writePin+0x4e>
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	71 f0       	breq	.+28     	; 0x1cf6 <GPIO_writePin+0x68>
    1cda:	bc c0       	rjmp	.+376    	; 0x1e54 <GPIO_writePin+0x1c6>
    1cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cde:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <GPIO_writePin+0x5a>
    1ce6:	5f c0       	rjmp	.+190    	; 0x1da6 <GPIO_writePin+0x118>
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <GPIO_writePin+0x66>
    1cf2:	85 c0       	rjmp	.+266    	; 0x1dfe <GPIO_writePin+0x170>
    1cf4:	af c0       	rjmp	.+350    	; 0x1e54 <GPIO_writePin+0x1c6>
        {
        case PORTA_ID:
            if (value == LOGIC_HIGH)
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	a1 f4       	brne	.+40     	; 0x1d24 <GPIO_writePin+0x96>
            {
                SET_BIT(PORTA, pin_num);  /* Set pin to Logic High */
    1cfc:	ab e3       	ldi	r26, 0x3B	; 59
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e3       	ldi	r30, 0x3B	; 59
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <GPIO_writePin+0x8c>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <GPIO_writePin+0x88>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	98 c0       	rjmp	.+304    	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTA, pin_num);  /* Set pin to Logic Low */
    1d24:	ab e3       	ldi	r26, 0x3B	; 59
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	eb e3       	ldi	r30, 0x3B	; 59
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <GPIO_writePin+0xb4>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <GPIO_writePin+0xb0>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	83 c0       	rjmp	.+262    	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTB_ID:
            if (value == LOGIC_HIGH)
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	a1 f4       	brne	.+40     	; 0x1d7c <GPIO_writePin+0xee>
            {
                SET_BIT(PORTB, pin_num);  /* Set pin to Logic High */
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <GPIO_writePin+0xe4>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <GPIO_writePin+0xe0>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	6c c0       	rjmp	.+216    	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTB, pin_num);  /* Set pin to Logic Low */
    1d7c:	a8 e3       	ldi	r26, 0x38	; 56
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <GPIO_writePin+0x10c>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <GPIO_writePin+0x108>
    1d9e:	80 95       	com	r24
    1da0:	84 23       	and	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	57 c0       	rjmp	.+174    	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTC_ID:
            if (value == LOGIC_HIGH)
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	a1 f4       	brne	.+40     	; 0x1dd4 <GPIO_writePin+0x146>
            {
                SET_BIT(PORTC, pin_num);  /* Set pin to Logic High */
    1dac:	a5 e3       	ldi	r26, 0x35	; 53
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e3       	ldi	r30, 0x35	; 53
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <GPIO_writePin+0x13c>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <GPIO_writePin+0x138>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	40 c0       	rjmp	.+128    	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTC, pin_num);  /* Set pin to Logic Low */
    1dd4:	a5 e3       	ldi	r26, 0x35	; 53
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e5 e3       	ldi	r30, 0x35	; 53
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <GPIO_writePin+0x164>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <GPIO_writePin+0x160>
    1df6:	80 95       	com	r24
    1df8:	84 23       	and	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	2b c0       	rjmp	.+86     	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTD_ID:
            if (value == LOGIC_HIGH)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <GPIO_writePin+0x19e>
            {
                SET_BIT(PORTD, pin_num);  /* Set pin to Logic High */
    1e04:	a2 e3       	ldi	r26, 0x32	; 50
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e2 e3       	ldi	r30, 0x32	; 50
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <GPIO_writePin+0x194>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <GPIO_writePin+0x190>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTD, pin_num);  /* Set pin to Logic Low */
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GPIO_writePin+0x1bc>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GPIO_writePin+0x1b8>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <GPIO_readPin>:
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * Returns     :
 * - The value of the pin (Logic High or Logic Low).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <GPIO_readPin+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <GPIO_readPin+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    1e76:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, return Logic Low.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 30       	cpi	r24, 0x08	; 8
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <GPIO_readPin+0x1c>
    1e7e:	84 c0       	rjmp	.+264    	; 0x1f88 <GPIO_readPin+0x124>
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <GPIO_readPin+0x24>
    1e86:	80 c0       	rjmp	.+256    	; 0x1f88 <GPIO_readPin+0x124>
        /* Do Nothing */
    }
    else
    {
        /* Read the pin value as required */
        switch (port_num)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	4c 81       	ldd	r20, Y+4	; 0x04
    1e94:	5d 81       	ldd	r21, Y+5	; 0x05
    1e96:	41 30       	cpi	r20, 0x01	; 1
    1e98:	51 05       	cpc	r21, r1
    1e9a:	79 f1       	breq	.+94     	; 0x1efa <GPIO_readPin+0x96>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	34 f4       	brge	.+12     	; 0x1eb2 <GPIO_readPin+0x4e>
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	21 15       	cp	r18, r1
    1eac:	31 05       	cpc	r19, r1
    1eae:	69 f0       	breq	.+26     	; 0x1eca <GPIO_readPin+0x66>
    1eb0:	6b c0       	rjmp	.+214    	; 0x1f88 <GPIO_readPin+0x124>
    1eb2:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb4:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb6:	42 30       	cpi	r20, 0x02	; 2
    1eb8:	51 05       	cpc	r21, r1
    1eba:	b9 f1       	breq	.+110    	; 0x1f2a <GPIO_readPin+0xc6>
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <GPIO_readPin+0x64>
    1ec6:	49 c0       	rjmp	.+146    	; 0x1f5a <GPIO_readPin+0xf6>
    1ec8:	5f c0       	rjmp	.+190    	; 0x1f88 <GPIO_readPin+0x124>
        {
        case PORTA_ID:
            if (BIT_IS_SET(PINA, pin_num))  /* Check if the pin is Logic High */
    1eca:	e9 e3       	ldi	r30, 0x39	; 57
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a9 01       	movw	r20, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_readPin+0x7e>
    1ede:	55 95       	asr	r21
    1ee0:	47 95       	ror	r20
    1ee2:	8a 95       	dec	r24
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_readPin+0x7a>
    1ee6:	ca 01       	movw	r24, r20
    1ee8:	81 70       	andi	r24, 0x01	; 1
    1eea:	90 70       	andi	r25, 0x00	; 0
    1eec:	88 23       	and	r24, r24
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <GPIO_readPin+0x92>
            {
                pin_value = LOGIC_HIGH;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	49 c0       	rjmp	.+146    	; 0x1f88 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1ef6:	19 82       	std	Y+1, r1	; 0x01
    1ef8:	47 c0       	rjmp	.+142    	; 0x1f88 <GPIO_readPin+0x124>
            }
            break;
        case PORTB_ID:
            if (BIT_IS_SET(PINB, pin_num))  /* Check if the pin is Logic High */
    1efa:	e6 e3       	ldi	r30, 0x36	; 54
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a9 01       	movw	r20, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <GPIO_readPin+0xae>
    1f0e:	55 95       	asr	r21
    1f10:	47 95       	ror	r20
    1f12:	8a 95       	dec	r24
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <GPIO_readPin+0xaa>
    1f16:	ca 01       	movw	r24, r20
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	90 70       	andi	r25, 0x00	; 0
    1f1c:	88 23       	and	r24, r24
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <GPIO_readPin+0xc2>
            {
                pin_value = LOGIC_HIGH;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	31 c0       	rjmp	.+98     	; 0x1f88 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	2f c0       	rjmp	.+94     	; 0x1f88 <GPIO_readPin+0x124>
            }
            break;
        case PORTC_ID:
            if (BIT_IS_SET(PINC, pin_num))  /* Check if the pin is Logic High */
    1f2a:	e3 e3       	ldi	r30, 0x33	; 51
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a9 01       	movw	r20, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_readPin+0xde>
    1f3e:	55 95       	asr	r21
    1f40:	47 95       	ror	r20
    1f42:	8a 95       	dec	r24
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_readPin+0xda>
    1f46:	ca 01       	movw	r24, r20
    1f48:	81 70       	andi	r24, 0x01	; 1
    1f4a:	90 70       	andi	r25, 0x00	; 0
    1f4c:	88 23       	and	r24, r24
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <GPIO_readPin+0xf2>
            {
                pin_value = LOGIC_HIGH;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	19 c0       	rjmp	.+50     	; 0x1f88 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	17 c0       	rjmp	.+46     	; 0x1f88 <GPIO_readPin+0x124>
            }
            break;
        case PORTD_ID:
            if (BIT_IS_SET(PIND, pin_num))  /* Check if the pin is Logic High */
    1f5a:	e0 e3       	ldi	r30, 0x30	; 48
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a9 01       	movw	r20, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_readPin+0x10e>
    1f6e:	55 95       	asr	r21
    1f70:	47 95       	ror	r20
    1f72:	8a 95       	dec	r24
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_readPin+0x10a>
    1f76:	ca 01       	movw	r24, r20
    1f78:	81 70       	andi	r24, 0x01	; 1
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	88 23       	and	r24, r24
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <GPIO_readPin+0x122>
            {
                pin_value = LOGIC_HIGH;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1f86:	19 82       	std	Y+1, r1	; 0x01
            }
            break;
        }
    }

    return pin_value;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <GPIO_setupPortDirection>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - direction: The direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <GPIO_setupPortDirection+0x6>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <GPIO_setupPortDirection+0x8>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	90 f5       	brcc	.+100    	; 0x2014 <GPIO_setupPortDirection+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Setup the port direction as required */
        switch (port_num)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3c 83       	std	Y+4, r19	; 0x04
    1fb8:	2b 83       	std	Y+3, r18	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	d1 f0       	breq	.+52     	; 0x1ff8 <GPIO_setupPortDirection+0x5e>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <GPIO_setupPortDirection+0x3e>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <GPIO_setupPortDirection+0x54>
    1fd6:	1e c0       	rjmp	.+60     	; 0x2014 <GPIO_setupPortDirection+0x7a>
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	81 f0       	breq	.+32     	; 0x2002 <GPIO_setupPortDirection+0x68>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	81 f0       	breq	.+32     	; 0x200c <GPIO_setupPortDirection+0x72>
    1fec:	13 c0       	rjmp	.+38     	; 0x2014 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;  /* Set port A direction */
    1fee:	ea e3       	ldi	r30, 0x3A	; 58
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	80 83       	st	Z, r24
    1ff6:	0e c0       	rjmp	.+28     	; 0x2014 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;  /* Set port B direction */
    1ff8:	e7 e3       	ldi	r30, 0x37	; 55
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 83       	st	Z, r24
    2000:	09 c0       	rjmp	.+18     	; 0x2014 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;  /* Set port C direction */
    2002:	e4 e3       	ldi	r30, 0x34	; 52
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	80 83       	st	Z, r24
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;  /* Set port D direction */
    200c:	e1 e3       	ldi	r30, 0x31	; 49
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	80 83       	st	Z, r24
            break;
        }
    }
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <GPIO_writePort>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - value: The value to write on the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <GPIO_writePort+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <GPIO_writePort+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	84 30       	cpi	r24, 0x04	; 4
    2036:	90 f5       	brcc	.+100    	; 0x209c <GPIO_writePort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Write the port value as required */
        switch (port_num)
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	3c 83       	std	Y+4, r19	; 0x04
    2040:	2b 83       	std	Y+3, r18	; 0x03
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	91 05       	cpc	r25, r1
    204a:	d1 f0       	breq	.+52     	; 0x2080 <GPIO_writePort+0x5e>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	2c f4       	brge	.+10     	; 0x2060 <GPIO_writePort+0x3e>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	61 f0       	breq	.+24     	; 0x2076 <GPIO_writePort+0x54>
    205e:	1e c0       	rjmp	.+60     	; 0x209c <GPIO_writePort+0x7a>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	81 f0       	breq	.+32     	; 0x208a <GPIO_writePort+0x68>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	91 05       	cpc	r25, r1
    2072:	81 f0       	breq	.+32     	; 0x2094 <GPIO_writePort+0x72>
    2074:	13 c0       	rjmp	.+38     	; 0x209c <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;  /* Write value to port A */
    2076:	eb e3       	ldi	r30, 0x3B	; 59
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
    207e:	0e c0       	rjmp	.+28     	; 0x209c <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;  /* Write value to port B */
    2080:	e8 e3       	ldi	r30, 0x38	; 56
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	80 83       	st	Z, r24
    2088:	09 c0       	rjmp	.+18     	; 0x209c <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;  /* Write value to port C */
    208a:	e5 e3       	ldi	r30, 0x35	; 53
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 83       	st	Z, r24
    2092:	04 c0       	rjmp	.+8      	; 0x209c <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;  /* Write value to port D */
    2094:	e2 e3       	ldi	r30, 0x32	; 50
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	80 83       	st	Z, r24
            break;
        }
    }
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <GPIO_readPort>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * Returns     :
 * - The value of the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <GPIO_readPort+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <GPIO_readPort+0x8>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
    20b8:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number is invalid.
     * If invalid, return ZERO.
     */
    if (port_num >= NUM_OF_PORTS)
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	90 f5       	brcc	.+100    	; 0x2124 <GPIO_readPort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Read the port value as required */
        switch (port_num)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3c 83       	std	Y+4, r19	; 0x04
    20c8:	2b 83       	std	Y+3, r18	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	d1 f0       	breq	.+52     	; 0x2108 <GPIO_readPort+0x5e>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <GPIO_readPort+0x3e>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <GPIO_readPort+0x54>
    20e6:	1e c0       	rjmp	.+60     	; 0x2124 <GPIO_readPort+0x7a>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	81 f0       	breq	.+32     	; 0x2112 <GPIO_readPort+0x68>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	81 f0       	breq	.+32     	; 0x211c <GPIO_readPort+0x72>
    20fc:	13 c0       	rjmp	.+38     	; 0x2124 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            value = PINA;  /* Read value from port A */
    20fe:	e9 e3       	ldi	r30, 0x39	; 57
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <GPIO_readPort+0x7a>
            break;
        case PORTB_ID:
            value = PINB;  /* Read value from port B */
    2108:	e6 e3       	ldi	r30, 0x36	; 54
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	09 c0       	rjmp	.+18     	; 0x2124 <GPIO_readPort+0x7a>
            break;
        case PORTC_ID:
            value = PINC;  /* Read value from port C */
    2112:	e3 e3       	ldi	r30, 0x33	; 51
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <GPIO_readPort+0x7a>
            break;
        case PORTD_ID:
            value = PIND;  /* Read value from port D */
    211c:	e0 e3       	ldi	r30, 0x30	; 48
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return value;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <__vector_1>:
 * Description :
 * Interrupt Service Routine for INT0.
 * This ISR is called when an interrupt is triggered on INT0.
 */
ISR(INT0_vect)
{
    2134:	1f 92       	push	r1
    2136:	0f 92       	push	r0
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	0f 92       	push	r0
    213c:	11 24       	eor	r1, r1
    213e:	2f 93       	push	r18
    2140:	3f 93       	push	r19
    2142:	4f 93       	push	r20
    2144:	5f 93       	push	r21
    2146:	6f 93       	push	r22
    2148:	7f 93       	push	r23
    214a:	8f 93       	push	r24
    214c:	9f 93       	push	r25
    214e:	af 93       	push	r26
    2150:	bf 93       	push	r27
    2152:	ef 93       	push	r30
    2154:	ff 93       	push	r31
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT0 != NULL_PTR)
    215e:	80 91 b2 01 	lds	r24, 0x01B2
    2162:	90 91 b3 01 	lds	r25, 0x01B3
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	29 f0       	breq	.+10     	; 0x2174 <__vector_1+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT0)();
    216a:	e0 91 b2 01 	lds	r30, 0x01B2
    216e:	f0 91 b3 01 	lds	r31, 0x01B3
    2172:	09 95       	icall
    }
}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	ff 91       	pop	r31
    217a:	ef 91       	pop	r30
    217c:	bf 91       	pop	r27
    217e:	af 91       	pop	r26
    2180:	9f 91       	pop	r25
    2182:	8f 91       	pop	r24
    2184:	7f 91       	pop	r23
    2186:	6f 91       	pop	r22
    2188:	5f 91       	pop	r21
    218a:	4f 91       	pop	r20
    218c:	3f 91       	pop	r19
    218e:	2f 91       	pop	r18
    2190:	0f 90       	pop	r0
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	0f 90       	pop	r0
    2196:	1f 90       	pop	r1
    2198:	18 95       	reti

0000219a <__vector_2>:
 * Description :
 * Interrupt Service Routine for INT1.
 * This ISR is called when an interrupt is triggered on INT1.
 */
ISR(INT1_vect)
{
    219a:	1f 92       	push	r1
    219c:	0f 92       	push	r0
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	0f 92       	push	r0
    21a2:	11 24       	eor	r1, r1
    21a4:	2f 93       	push	r18
    21a6:	3f 93       	push	r19
    21a8:	4f 93       	push	r20
    21aa:	5f 93       	push	r21
    21ac:	6f 93       	push	r22
    21ae:	7f 93       	push	r23
    21b0:	8f 93       	push	r24
    21b2:	9f 93       	push	r25
    21b4:	af 93       	push	r26
    21b6:	bf 93       	push	r27
    21b8:	ef 93       	push	r30
    21ba:	ff 93       	push	r31
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT1 != NULL_PTR)
    21c4:	80 91 b4 01 	lds	r24, 0x01B4
    21c8:	90 91 b5 01 	lds	r25, 0x01B5
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	29 f0       	breq	.+10     	; 0x21da <__vector_2+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT1)();
    21d0:	e0 91 b4 01 	lds	r30, 0x01B4
    21d4:	f0 91 b5 01 	lds	r31, 0x01B5
    21d8:	09 95       	icall
    }
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	bf 91       	pop	r27
    21e4:	af 91       	pop	r26
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	7f 91       	pop	r23
    21ec:	6f 91       	pop	r22
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	0f 90       	pop	r0
    21fc:	1f 90       	pop	r1
    21fe:	18 95       	reti

00002200 <__vector_3>:
 * Description :
 * Interrupt Service Routine for INT2.
 * This ISR is called when an interrupt is triggered on INT2.
 */
ISR(INT2_vect)
{
    2200:	1f 92       	push	r1
    2202:	0f 92       	push	r0
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	0f 92       	push	r0
    2208:	11 24       	eor	r1, r1
    220a:	2f 93       	push	r18
    220c:	3f 93       	push	r19
    220e:	4f 93       	push	r20
    2210:	5f 93       	push	r21
    2212:	6f 93       	push	r22
    2214:	7f 93       	push	r23
    2216:	8f 93       	push	r24
    2218:	9f 93       	push	r25
    221a:	af 93       	push	r26
    221c:	bf 93       	push	r27
    221e:	ef 93       	push	r30
    2220:	ff 93       	push	r31
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT2 != NULL_PTR)
    222a:	80 91 b6 01 	lds	r24, 0x01B6
    222e:	90 91 b7 01 	lds	r25, 0x01B7
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	29 f0       	breq	.+10     	; 0x2240 <__vector_3+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT2)();
    2236:	e0 91 b6 01 	lds	r30, 0x01B6
    223a:	f0 91 b7 01 	lds	r31, 0x01B7
    223e:	09 95       	icall
    }
}
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	ff 91       	pop	r31
    2246:	ef 91       	pop	r30
    2248:	bf 91       	pop	r27
    224a:	af 91       	pop	r26
    224c:	9f 91       	pop	r25
    224e:	8f 91       	pop	r24
    2250:	7f 91       	pop	r23
    2252:	6f 91       	pop	r22
    2254:	5f 91       	pop	r21
    2256:	4f 91       	pop	r20
    2258:	3f 91       	pop	r19
    225a:	2f 91       	pop	r18
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	0f 90       	pop	r0
    2262:	1f 90       	pop	r1
    2264:	18 95       	reti

00002266 <external_interrupt_init>:
 * This function configures the interrupt sense control and enables the interrupt.
 * Parameters  :
 * - a_ptr: Pointer to the external interrupt configuration structure.
 */
void external_interrupt_init(const EXT_INT_ConfigType * a_ptr)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <external_interrupt_init+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <external_interrupt_init+0x8>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    switch (a_ptr->INT_ID)
    2276:	e9 81       	ldd	r30, Y+1	; 0x01
    2278:	fa 81       	ldd	r31, Y+2	; 0x02
    227a:	80 81       	ld	r24, Z
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3c 83       	std	Y+4, r19	; 0x04
    2282:	2b 83       	std	Y+3, r18	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	31 f1       	breq	.+76     	; 0x22da <external_interrupt_init+0x74>
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	3c 81       	ldd	r19, Y+4	; 0x04
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <external_interrupt_init+0x34>
    2298:	41 c0       	rjmp	.+130    	; 0x231c <external_interrupt_init+0xb6>
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <external_interrupt_init+0x3e>
    22a2:	5e c0       	rjmp	.+188    	; 0x2360 <external_interrupt_init+0xfa>
    {
    case INT_0:
        DDRD &= (~(1 << PD2));  /* Configure INT0/PD2 as input pin */
    22a4:	a1 e3       	ldi	r26, 0x31	; 49
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e1 e3       	ldi	r30, 0x31	; 49
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8b 7f       	andi	r24, 0xFB	; 251
    22b0:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT0:
         * - Falling edge: ISC00 = 0, ISC01 = 1
         * - Rising edge: ISC00 = 1, ISC01 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC00 | 1 << ISC01)) | ((a_ptr->INT_Sense) << ISC00);
    22b2:	a5 e5       	ldi	r26, 0x55	; 85
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e5 e5       	ldi	r30, 0x55	; 85
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	98 2f       	mov	r25, r24
    22be:	9c 7f       	andi	r25, 0xFC	; 252
    22c0:	e9 81       	ldd	r30, Y+1	; 0x01
    22c2:	fa 81       	ldd	r31, Y+2	; 0x02
    22c4:	81 81       	ldd	r24, Z+1	; 0x01
    22c6:	89 2b       	or	r24, r25
    22c8:	8c 93       	st	X, r24

        /* Enable external interrupt INT0 */
        GICR |= (1 << INT0);
    22ca:	ab e5       	ldi	r26, 0x5B	; 91
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	eb e5       	ldi	r30, 0x5B	; 91
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	80 64       	ori	r24, 0x40	; 64
    22d6:	8c 93       	st	X, r24
    22d8:	43 c0       	rjmp	.+134    	; 0x2360 <external_interrupt_init+0xfa>
        break;

    case INT_1:
        DDRD &= (~(1 << PD3));  /* Configure INT1/PD3 as input pin */
    22da:	a1 e3       	ldi	r26, 0x31	; 49
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e1 e3       	ldi	r30, 0x31	; 49
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	87 7f       	andi	r24, 0xF7	; 247
    22e6:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT1:
         * - Falling edge: ISC10 = 0, ISC11 = 1
         * - Rising edge: ISC10 = 1, ISC11 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC10 | 1 << ISC11)) | ((a_ptr->INT_Sense) << ISC10);
    22e8:	a5 e5       	ldi	r26, 0x55	; 85
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e5 e5       	ldi	r30, 0x55	; 85
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	28 2f       	mov	r18, r24
    22f4:	23 7f       	andi	r18, 0xF3	; 243
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	81 81       	ldd	r24, Z+1	; 0x01
    22fc:	88 2f       	mov	r24, r24
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	82 2b       	or	r24, r18
    230a:	8c 93       	st	X, r24

        /* Enable external interrupt INT1 */
        GICR |= (1 << INT1);
    230c:	ab e5       	ldi	r26, 0x5B	; 91
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	eb e5       	ldi	r30, 0x5B	; 91
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	80 68       	ori	r24, 0x80	; 128
    2318:	8c 93       	st	X, r24
    231a:	22 c0       	rjmp	.+68     	; 0x2360 <external_interrupt_init+0xfa>
        break;

    case INT_2:
        DDRB &= (~(1 << PB2));  /* Configure INT2/PB2 as input pin */
    231c:	a7 e3       	ldi	r26, 0x37	; 55
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e7 e3       	ldi	r30, 0x37	; 55
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8b 7f       	andi	r24, 0xFB	; 251
    2328:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT2:
         * - Falling edge: ISC2 = 0
         * - Rising edge: ISC2 = 1
         */
        if (a_ptr->INT_Sense == RISING_EDGE_INT2) {
    232a:	e9 81       	ldd	r30, Y+1	; 0x01
    232c:	fa 81       	ldd	r31, Y+2	; 0x02
    232e:	81 81       	ldd	r24, Z+1	; 0x01
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	41 f4       	brne	.+16     	; 0x2344 <external_interrupt_init+0xde>
            MCUCSR |= (1 << ISC2);
    2334:	a4 e5       	ldi	r26, 0x54	; 84
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e4 e5       	ldi	r30, 0x54	; 84
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	80 64       	ori	r24, 0x40	; 64
    2340:	8c 93       	st	X, r24
    2342:	07 c0       	rjmp	.+14     	; 0x2352 <external_interrupt_init+0xec>
        } else {
            MCUCSR &= ~(1 << ISC2);
    2344:	a4 e5       	ldi	r26, 0x54	; 84
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e4 e5       	ldi	r30, 0x54	; 84
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8f 7b       	andi	r24, 0xBF	; 191
    2350:	8c 93       	st	X, r24
        }

        /* Enable external interrupt INT2 */
        GICR |= (1 << INT2);
    2352:	ab e5       	ldi	r26, 0x5B	; 91
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	eb e5       	ldi	r30, 0x5B	; 91
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	80 62       	ori	r24, 0x20	; 32
    235e:	8c 93       	st	X, r24
        break;
    }
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <external_interrupt_deinit>:
 * This function disables the specified external interrupt.
 * Parameters  :
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_deinit(EXT_INT_Type INT_ID)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <external_interrupt_deinit+0x6>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	89 83       	std	Y+1, r24	; 0x01
    switch (INT_ID)
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	3b 83       	std	Y+3, r19	; 0x03
    2384:	2a 83       	std	Y+2, r18	; 0x02
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	91 05       	cpc	r25, r1
    238e:	c1 f0       	breq	.+48     	; 0x23c0 <external_interrupt_deinit+0x52>
    2390:	2a 81       	ldd	r18, Y+2	; 0x02
    2392:	3b 81       	ldd	r19, Y+3	; 0x03
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	11 f1       	breq	.+68     	; 0x23de <external_interrupt_deinit+0x70>
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	9b 81       	ldd	r25, Y+3	; 0x03
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 f5       	brne	.+88     	; 0x23fa <external_interrupt_deinit+0x8c>
    {
    case INT_0:
        /* Clear the sense control bits for INT0 */
        MCUCR &= ~(1 << ISC00) & ~(1 << ISC01);
    23a2:	a5 e5       	ldi	r26, 0x55	; 85
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e5 e5       	ldi	r30, 0x55	; 85
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8c 7f       	andi	r24, 0xFC	; 252
    23ae:	8c 93       	st	X, r24

        /* Disable external interrupt INT0 */
        GICR &= ~(1 << INT0);
    23b0:	ab e5       	ldi	r26, 0x5B	; 91
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	eb e5       	ldi	r30, 0x5B	; 91
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7b       	andi	r24, 0xBF	; 191
    23bc:	8c 93       	st	X, r24
    23be:	1d c0       	rjmp	.+58     	; 0x23fa <external_interrupt_deinit+0x8c>
        break;

    case INT_1:
        /* Clear the sense control bits for INT1 */
        MCUCR &= ~(1 << ISC10) & ~(1 << ISC11);
    23c0:	a5 e5       	ldi	r26, 0x55	; 85
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e5 e5       	ldi	r30, 0x55	; 85
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	83 7f       	andi	r24, 0xF3	; 243
    23cc:	8c 93       	st	X, r24

        /* Disable external interrupt INT1 */
        GICR &= ~(1 << INT1);
    23ce:	ab e5       	ldi	r26, 0x5B	; 91
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	eb e5       	ldi	r30, 0x5B	; 91
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 77       	andi	r24, 0x7F	; 127
    23da:	8c 93       	st	X, r24
    23dc:	0e c0       	rjmp	.+28     	; 0x23fa <external_interrupt_deinit+0x8c>
        break;

    case INT_2:
        /* Clear the sense control bit for INT2 */
        MCUCSR &= ~(1 << ISC2);
    23de:	a4 e5       	ldi	r26, 0x54	; 84
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e4 e5       	ldi	r30, 0x54	; 84
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8f 7b       	andi	r24, 0xBF	; 191
    23ea:	8c 93       	st	X, r24

        /* Disable external interrupt INT2 */
        GICR &= ~(1 << INT2);
    23ec:	ab e5       	ldi	r26, 0x5B	; 91
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	eb e5       	ldi	r30, 0x5B	; 91
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	8f 7d       	andi	r24, 0xDF	; 223
    23f8:	8c 93       	st	X, r24
        break;
    }
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <external_interrupt_setCallBack>:
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_setCallBack(void(*a_ptr)(void), EXT_INT_Type INT_ID)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <external_interrupt_setCallBack+0x6>
    240c:	00 d0       	rcall	.+0      	; 0x240e <external_interrupt_setCallBack+0x8>
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	9a 83       	std	Y+2, r25	; 0x02
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	6b 83       	std	Y+3, r22	; 0x03
    switch (INT_ID)
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	3d 83       	std	Y+5, r19	; 0x05
    2422:	2c 83       	std	Y+4, r18	; 0x04
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	91 05       	cpc	r25, r1
    242c:	81 f0       	breq	.+32     	; 0x244e <external_interrupt_setCallBack+0x48>
    242e:	2c 81       	ldd	r18, Y+4	; 0x04
    2430:	3d 81       	ldd	r19, Y+5	; 0x05
    2432:	22 30       	cpi	r18, 0x02	; 2
    2434:	31 05       	cpc	r19, r1
    2436:	91 f0       	breq	.+36     	; 0x245c <external_interrupt_setCallBack+0x56>
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	a1 f4       	brne	.+40     	; 0x2468 <external_interrupt_setCallBack+0x62>
    {
    case INT_0:
        g_callBackPtr_INT0 = a_ptr;  /* Set callback for INT0 */
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	90 93 b3 01 	sts	0x01B3, r25
    2448:	80 93 b2 01 	sts	0x01B2, r24
    244c:	0d c0       	rjmp	.+26     	; 0x2468 <external_interrupt_setCallBack+0x62>
        break;
    case INT_1:
        g_callBackPtr_INT1 = a_ptr;  /* Set callback for INT1 */
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	90 93 b5 01 	sts	0x01B5, r25
    2456:	80 93 b4 01 	sts	0x01B4, r24
    245a:	06 c0       	rjmp	.+12     	; 0x2468 <external_interrupt_setCallBack+0x62>
        break;
    case INT_2:
        g_callBackPtr_INT2 = a_ptr;  /* Set callback for INT2 */
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	90 93 b7 01 	sts	0x01B7, r25
    2464:	80 93 b6 01 	sts	0x01B6, r24
        break;
    }
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <Ultrasonic_init>:

/*******************************************************************************
 *                      	Functions Definitions                              *
 *******************************************************************************/
void Ultrasonic_init(void)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <Ultrasonic_init+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <Ultrasonic_init+0x8>
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, RISING_EDGE};
    2484:	19 82       	std	Y+1, r1	; 0x01
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	8a 83       	std	Y+2, r24	; 0x02
	external_interrupt_setCallBack(Ultrasonic_edgeProcessing_INT0, INT_0); /* Set the callback function for INT0 */
    248a:	80 ee       	ldi	r24, 0xE0	; 224
    248c:	95 e1       	ldi	r25, 0x15	; 21
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	0e 94 03 12 	call	0x2406	; 0x2406 <external_interrupt_setCallBack>
	external_interrupt_init(&EXT_INT0_Configrations);	/* Initialize INT0 with the specified configuration */
    2494:	ce 01       	movw	r24, r28
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	0e 94 33 11 	call	0x2266	; 0x2266 <external_interrupt_init>

	EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, RISING_EDGE};
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	83 e0       	ldi	r24, 0x03	; 3
    24a2:	8c 83       	std	Y+4, r24	; 0x04
	external_interrupt_setCallBack(Ultrasonic_edgeProcessing_INT2, INT_1); /* Set the callback function for INT2 */
    24a4:	88 e4       	ldi	r24, 0x48	; 72
    24a6:	96 e1       	ldi	r25, 0x16	; 22
    24a8:	61 e0       	ldi	r22, 0x01	; 1
    24aa:	0e 94 03 12 	call	0x2406	; 0x2406 <external_interrupt_setCallBack>
	external_interrupt_init(&EXT_INT2_Configrations);	/* Initialize INT2 with the specified configuration */
    24ae:	ce 01       	movw	r24, r28
    24b0:	03 96       	adiw	r24, 0x03	; 3
    24b2:	0e 94 33 11 	call	0x2266	; 0x2266 <external_interrupt_init>

	/* Set up pin direction for trigger pin as output */
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, PIN_OUTPUT);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	65 e0       	ldi	r22, 0x05	; 5
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, PIN_OUTPUT);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	66 e0       	ldi	r22, 0x06	; 6
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, PIN_OUTPUT);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	67 e0       	ldi	r22, 0x07	; 7
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <Ultrasonic_Trigger>:

static void Ultrasonic_Trigger(Ultrasonic ultrasonic)
{
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	cb 54       	subi	r28, 0x4B	; 75
    24f0:	d0 40       	sbci	r29, 0x00	; 0
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 5b       	subi	r30, 0xB7	; 183
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 83       	st	Z, r24
	switch(ultrasonic)
    2504:	fe 01       	movw	r30, r28
    2506:	e7 5b       	subi	r30, 0xB7	; 183
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	2c 96       	adiw	r28, 0x0c	; 12
    2512:	3f af       	std	Y+63, r19	; 0x3f
    2514:	2e af       	std	Y+62, r18	; 0x3e
    2516:	2c 97       	sbiw	r28, 0x0c	; 12
    2518:	2c 96       	adiw	r28, 0x0c	; 12
    251a:	8e ad       	ldd	r24, Y+62	; 0x3e
    251c:	9f ad       	ldd	r25, Y+63	; 0x3f
    251e:	2c 97       	sbiw	r28, 0x0c	; 12
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	91 05       	cpc	r25, r1
    2524:	89 f0       	breq	.+34     	; 0x2548 <Ultrasonic_Trigger+0x66>
    2526:	2c 96       	adiw	r28, 0x0c	; 12
    2528:	ee ad       	ldd	r30, Y+62	; 0x3e
    252a:	ff ad       	ldd	r31, Y+63	; 0x3f
    252c:	2c 97       	sbiw	r28, 0x0c	; 12
    252e:	e2 30       	cpi	r30, 0x02	; 2
    2530:	f1 05       	cpc	r31, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <Ultrasonic_Trigger+0x54>
    2534:	ba c1       	rjmp	.+884    	; 0x28aa <Ultrasonic_Trigger+0x3c8>
    2536:	2c 96       	adiw	r28, 0x0c	; 12
    2538:	2e ad       	ldd	r18, Y+62	; 0x3e
    253a:	3f ad       	ldd	r19, Y+63	; 0x3f
    253c:	2c 97       	sbiw	r28, 0x0c	; 12
    253e:	21 15       	cp	r18, r1
    2540:	31 05       	cpc	r19, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <Ultrasonic_Trigger+0x64>
    2544:	e9 c0       	rjmp	.+466    	; 0x2718 <Ultrasonic_Trigger+0x236>
    2546:	79 c2       	rjmp	.+1266   	; 0x2a3a <Ultrasonic_Trigger+0x558>
	{
	case U_right:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, LOGIC_HIGH);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	65 e0       	ldi	r22, 0x05	; 5
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2552:	fe 01       	movw	r30, r28
    2554:	eb 5b       	subi	r30, 0xBB	; 187
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e2       	ldi	r26, 0x20	; 32
    255e:	b1 e4       	ldi	r27, 0x41	; 65
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2568:	8e 01       	movw	r16, r28
    256a:	0f 5b       	subi	r16, 0xBF	; 191
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	fe 01       	movw	r30, r28
    2570:	eb 5b       	subi	r30, 0xBB	; 187
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	2b ea       	ldi	r18, 0xAB	; 171
    257e:	3a ea       	ldi	r19, 0xAA	; 170
    2580:	4a ea       	ldi	r20, 0xAA	; 170
    2582:	50 e4       	ldi	r21, 0x40	; 64
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2596:	fe 01       	movw	r30, r28
    2598:	ef 5b       	subi	r30, 0xBF	; 191
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	34 f4       	brge	.+12     	; 0x25c0 <Ultrasonic_Trigger+0xde>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	fe 01       	movw	r30, r28
    25b8:	e0 5c       	subi	r30, 0xC0	; 192
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 83       	st	Z, r24
    25be:	9d c0       	rjmp	.+314    	; 0x26fa <Ultrasonic_Trigger+0x218>
	else if (__tmp > 255)
    25c0:	fe 01       	movw	r30, r28
    25c2:	ef 5b       	subi	r30, 0xBF	; 191
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	53 e4       	ldi	r21, 0x43	; 67
    25d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	0c f0       	brlt	.+2      	; 0x25e0 <Ultrasonic_Trigger+0xfe>
    25de:	7e c0       	rjmp	.+252    	; 0x26dc <Ultrasonic_Trigger+0x1fa>
	{
		_delay_ms(__us / 1000.0);
    25e0:	fe 01       	movw	r30, r28
    25e2:	eb 5b       	subi	r30, 0xBB	; 187
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a e7       	ldi	r20, 0x7A	; 122
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8c af       	std	Y+60, r24	; 0x3c
    2600:	9d af       	std	Y+61, r25	; 0x3d
    2602:	ae af       	std	Y+62, r26	; 0x3e
    2604:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2606:	6c ad       	ldd	r22, Y+60	; 0x3c
    2608:	7d ad       	ldd	r23, Y+61	; 0x3d
    260a:	8e ad       	ldd	r24, Y+62	; 0x3e
    260c:	9f ad       	ldd	r25, Y+63	; 0x3f
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a e7       	ldi	r20, 0x7A	; 122
    2614:	55 e4       	ldi	r21, 0x45	; 69
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	88 af       	std	Y+56, r24	; 0x38
    2620:	99 af       	std	Y+57, r25	; 0x39
    2622:	aa af       	std	Y+58, r26	; 0x3a
    2624:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2626:	68 ad       	ldd	r22, Y+56	; 0x38
    2628:	79 ad       	ldd	r23, Y+57	; 0x39
    262a:	8a ad       	ldd	r24, Y+58	; 0x3a
    262c:	9b ad       	ldd	r25, Y+59	; 0x3b
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	2c f4       	brge	.+10     	; 0x2648 <Ultrasonic_Trigger+0x166>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9f ab       	std	Y+55, r25	; 0x37
    2644:	8e ab       	std	Y+54, r24	; 0x36
    2646:	3f c0       	rjmp	.+126    	; 0x26c6 <Ultrasonic_Trigger+0x1e4>
	else if (__tmp > 65535)
    2648:	68 ad       	ldd	r22, Y+56	; 0x38
    264a:	79 ad       	ldd	r23, Y+57	; 0x39
    264c:	8a ad       	ldd	r24, Y+58	; 0x3a
    264e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    265c:	18 16       	cp	r1, r24
    265e:	4c f5       	brge	.+82     	; 0x26b2 <Ultrasonic_Trigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2660:	6c ad       	ldd	r22, Y+60	; 0x3c
    2662:	7d ad       	ldd	r23, Y+61	; 0x3d
    2664:	8e ad       	ldd	r24, Y+62	; 0x3e
    2666:	9f ad       	ldd	r25, Y+63	; 0x3f
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9f ab       	std	Y+55, r25	; 0x37
    2686:	8e ab       	std	Y+54, r24	; 0x36
    2688:	0f c0       	rjmp	.+30     	; 0x26a8 <Ultrasonic_Trigger+0x1c6>
    268a:	80 e9       	ldi	r24, 0x90	; 144
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	9d ab       	std	Y+53, r25	; 0x35
    2690:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2692:	8c a9       	ldd	r24, Y+52	; 0x34
    2694:	9d a9       	ldd	r25, Y+53	; 0x35
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <Ultrasonic_Trigger+0x1b4>
    269a:	9d ab       	std	Y+53, r25	; 0x35
    269c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	8e a9       	ldd	r24, Y+54	; 0x36
    26a0:	9f a9       	ldd	r25, Y+55	; 0x37
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	9f ab       	std	Y+55, r25	; 0x37
    26a6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a8:	8e a9       	ldd	r24, Y+54	; 0x36
    26aa:	9f a9       	ldd	r25, Y+55	; 0x37
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	69 f7       	brne	.-38     	; 0x268a <Ultrasonic_Trigger+0x1a8>
    26b0:	2d c0       	rjmp	.+90     	; 0x270c <Ultrasonic_Trigger+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b2:	68 ad       	ldd	r22, Y+56	; 0x38
    26b4:	79 ad       	ldd	r23, Y+57	; 0x39
    26b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    26b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9f ab       	std	Y+55, r25	; 0x37
    26c4:	8e ab       	std	Y+54, r24	; 0x36
    26c6:	8e a9       	ldd	r24, Y+54	; 0x36
    26c8:	9f a9       	ldd	r25, Y+55	; 0x37
    26ca:	9b ab       	std	Y+51, r25	; 0x33
    26cc:	8a ab       	std	Y+50, r24	; 0x32
    26ce:	8a a9       	ldd	r24, Y+50	; 0x32
    26d0:	9b a9       	ldd	r25, Y+51	; 0x33
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <Ultrasonic_Trigger+0x1f0>
    26d6:	9b ab       	std	Y+51, r25	; 0x33
    26d8:	8a ab       	std	Y+50, r24	; 0x32
    26da:	18 c0       	rjmp	.+48     	; 0x270c <Ultrasonic_Trigger+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26dc:	fe 01       	movw	r30, r28
    26de:	ef 5b       	subi	r30, 0xBF	; 191
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	fe 01       	movw	r30, r28
    26f4:	e0 5c       	subi	r30, 0xC0	; 192
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 83       	st	Z, r24
    26fa:	fe 01       	movw	r30, r28
    26fc:	e0 5c       	subi	r30, 0xC0	; 192
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2704:	89 a9       	ldd	r24, Y+49	; 0x31
    2706:	8a 95       	dec	r24
    2708:	f1 f7       	brne	.-4      	; 0x2706 <Ultrasonic_Trigger+0x224>
    270a:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, LOGIC_LOW);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	65 e0       	ldi	r22, 0x05	; 5
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2716:	91 c1       	rjmp	.+802    	; 0x2a3a <Ultrasonic_Trigger+0x558>
		break;

	case U_forward:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, LOGIC_HIGH);
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	66 e0       	ldi	r22, 0x06	; 6
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e2       	ldi	r26, 0x20	; 32
    2728:	b1 e4       	ldi	r27, 0x41	; 65
    272a:	8d a7       	std	Y+45, r24	; 0x2d
    272c:	9e a7       	std	Y+46, r25	; 0x2e
    272e:	af a7       	std	Y+47, r26	; 0x2f
    2730:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2732:	6d a5       	ldd	r22, Y+45	; 0x2d
    2734:	7e a5       	ldd	r23, Y+46	; 0x2e
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	2b ea       	ldi	r18, 0xAB	; 171
    273c:	3a ea       	ldi	r19, 0xAA	; 170
    273e:	4a ea       	ldi	r20, 0xAA	; 170
    2740:	50 e4       	ldi	r21, 0x40	; 64
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	89 a7       	std	Y+41, r24	; 0x29
    274c:	9a a7       	std	Y+42, r25	; 0x2a
    274e:	ab a7       	std	Y+43, r26	; 0x2b
    2750:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2752:	69 a5       	ldd	r22, Y+41	; 0x29
    2754:	7a a5       	ldd	r23, Y+42	; 0x2a
    2756:	8b a5       	ldd	r24, Y+43	; 0x2b
    2758:	9c a5       	ldd	r25, Y+44	; 0x2c
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	1c f4       	brge	.+6      	; 0x2770 <Ultrasonic_Trigger+0x28e>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	88 a7       	std	Y+40, r24	; 0x28
    276e:	91 c0       	rjmp	.+290    	; 0x2892 <Ultrasonic_Trigger+0x3b0>
	else if (__tmp > 255)
    2770:	69 a5       	ldd	r22, Y+41	; 0x29
    2772:	7a a5       	ldd	r23, Y+42	; 0x2a
    2774:	8b a5       	ldd	r24, Y+43	; 0x2b
    2776:	9c a5       	ldd	r25, Y+44	; 0x2c
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4f e7       	ldi	r20, 0x7F	; 127
    277e:	53 e4       	ldi	r21, 0x43	; 67
    2780:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2784:	18 16       	cp	r1, r24
    2786:	0c f0       	brlt	.+2      	; 0x278a <Ultrasonic_Trigger+0x2a8>
    2788:	7b c0       	rjmp	.+246    	; 0x2880 <Ultrasonic_Trigger+0x39e>
	{
		_delay_ms(__us / 1000.0);
    278a:	6d a5       	ldd	r22, Y+45	; 0x2d
    278c:	7e a5       	ldd	r23, Y+46	; 0x2e
    278e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2790:	98 a9       	ldd	r25, Y+48	; 0x30
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a e7       	ldi	r20, 0x7A	; 122
    2798:	54 e4       	ldi	r21, 0x44	; 68
    279a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8c a3       	std	Y+36, r24	; 0x24
    27a4:	9d a3       	std	Y+37, r25	; 0x25
    27a6:	ae a3       	std	Y+38, r26	; 0x26
    27a8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6c a1       	ldd	r22, Y+36	; 0x24
    27ac:	7d a1       	ldd	r23, Y+37	; 0x25
    27ae:	8e a1       	ldd	r24, Y+38	; 0x26
    27b0:	9f a1       	ldd	r25, Y+39	; 0x27
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a e7       	ldi	r20, 0x7A	; 122
    27b8:	55 e4       	ldi	r21, 0x45	; 69
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	88 a3       	std	Y+32, r24	; 0x20
    27c4:	99 a3       	std	Y+33, r25	; 0x21
    27c6:	aa a3       	std	Y+34, r26	; 0x22
    27c8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27ca:	68 a1       	ldd	r22, Y+32	; 0x20
    27cc:	79 a1       	ldd	r23, Y+33	; 0x21
    27ce:	8a a1       	ldd	r24, Y+34	; 0x22
    27d0:	9b a1       	ldd	r25, Y+35	; 0x23
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <Ultrasonic_Trigger+0x30a>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9f 8f       	std	Y+31, r25	; 0x1f
    27e8:	8e 8f       	std	Y+30, r24	; 0x1e
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <Ultrasonic_Trigger+0x388>
	else if (__tmp > 65535)
    27ec:	68 a1       	ldd	r22, Y+32	; 0x20
    27ee:	79 a1       	ldd	r23, Y+33	; 0x21
    27f0:	8a a1       	ldd	r24, Y+34	; 0x22
    27f2:	9b a1       	ldd	r25, Y+35	; 0x23
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <Ultrasonic_Trigger+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6c a1       	ldd	r22, Y+36	; 0x24
    2806:	7d a1       	ldd	r23, Y+37	; 0x25
    2808:	8e a1       	ldd	r24, Y+38	; 0x26
    280a:	9f a1       	ldd	r25, Y+39	; 0x27
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9f 8f       	std	Y+31, r25	; 0x1f
    282a:	8e 8f       	std	Y+30, r24	; 0x1e
    282c:	0f c0       	rjmp	.+30     	; 0x284c <Ultrasonic_Trigger+0x36a>
    282e:	80 e9       	ldi	r24, 0x90	; 144
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	9d 8f       	std	Y+29, r25	; 0x1d
    2834:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2836:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2838:	9d 8d       	ldd	r25, Y+29	; 0x1d
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <Ultrasonic_Trigger+0x358>
    283e:	9d 8f       	std	Y+29, r25	; 0x1d
    2840:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2844:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9f 8f       	std	Y+31, r25	; 0x1f
    284a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    284e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <Ultrasonic_Trigger+0x34c>
    2854:	24 c0       	rjmp	.+72     	; 0x289e <Ultrasonic_Trigger+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	68 a1       	ldd	r22, Y+32	; 0x20
    2858:	79 a1       	ldd	r23, Y+33	; 0x21
    285a:	8a a1       	ldd	r24, Y+34	; 0x22
    285c:	9b a1       	ldd	r25, Y+35	; 0x23
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9f 8f       	std	Y+31, r25	; 0x1f
    2868:	8e 8f       	std	Y+30, r24	; 0x1e
    286a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    286c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    286e:	9b 8f       	std	Y+27, r25	; 0x1b
    2870:	8a 8f       	std	Y+26, r24	; 0x1a
    2872:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2874:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <Ultrasonic_Trigger+0x394>
    287a:	9b 8f       	std	Y+27, r25	; 0x1b
    287c:	8a 8f       	std	Y+26, r24	; 0x1a
    287e:	0f c0       	rjmp	.+30     	; 0x289e <Ultrasonic_Trigger+0x3bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2880:	69 a5       	ldd	r22, Y+41	; 0x29
    2882:	7a a5       	ldd	r23, Y+42	; 0x2a
    2884:	8b a5       	ldd	r24, Y+43	; 0x2b
    2886:	9c a5       	ldd	r25, Y+44	; 0x2c
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	88 a7       	std	Y+40, r24	; 0x28
    2892:	88 a5       	ldd	r24, Y+40	; 0x28
    2894:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2896:	89 8d       	ldd	r24, Y+25	; 0x19
    2898:	8a 95       	dec	r24
    289a:	f1 f7       	brne	.-4      	; 0x2898 <Ultrasonic_Trigger+0x3b6>
    289c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, LOGIC_LOW);
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	66 e0       	ldi	r22, 0x06	; 6
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    28a8:	c8 c0       	rjmp	.+400    	; 0x2a3a <Ultrasonic_Trigger+0x558>
		break;

	case U_backward:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, LOGIC_HIGH);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	67 e0       	ldi	r22, 0x07	; 7
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 e2       	ldi	r26, 0x20	; 32
    28ba:	b1 e4       	ldi	r27, 0x41	; 65
    28bc:	8d 8b       	std	Y+21, r24	; 0x15
    28be:	9e 8b       	std	Y+22, r25	; 0x16
    28c0:	af 8b       	std	Y+23, r26	; 0x17
    28c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28c4:	6d 89       	ldd	r22, Y+21	; 0x15
    28c6:	7e 89       	ldd	r23, Y+22	; 0x16
    28c8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ca:	98 8d       	ldd	r25, Y+24	; 0x18
    28cc:	2b ea       	ldi	r18, 0xAB	; 171
    28ce:	3a ea       	ldi	r19, 0xAA	; 170
    28d0:	4a ea       	ldi	r20, 0xAA	; 170
    28d2:	50 e4       	ldi	r21, 0x40	; 64
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	89 8b       	std	Y+17, r24	; 0x11
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	ab 8b       	std	Y+19, r26	; 0x13
    28e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28e4:	69 89       	ldd	r22, Y+17	; 0x11
    28e6:	7a 89       	ldd	r23, Y+18	; 0x12
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	1c f4       	brge	.+6      	; 0x2902 <Ultrasonic_Trigger+0x420>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	88 8b       	std	Y+16, r24	; 0x10
    2900:	91 c0       	rjmp	.+290    	; 0x2a24 <Ultrasonic_Trigger+0x542>
	else if (__tmp > 255)
    2902:	69 89       	ldd	r22, Y+17	; 0x11
    2904:	7a 89       	ldd	r23, Y+18	; 0x12
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	53 e4       	ldi	r21, 0x43	; 67
    2912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	0c f0       	brlt	.+2      	; 0x291c <Ultrasonic_Trigger+0x43a>
    291a:	7b c0       	rjmp	.+246    	; 0x2a12 <Ultrasonic_Trigger+0x530>
	{
		_delay_ms(__us / 1000.0);
    291c:	6d 89       	ldd	r22, Y+21	; 0x15
    291e:	7e 89       	ldd	r23, Y+22	; 0x16
    2920:	8f 89       	ldd	r24, Y+23	; 0x17
    2922:	98 8d       	ldd	r25, Y+24	; 0x18
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a e7       	ldi	r20, 0x7A	; 122
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8c 87       	std	Y+12, r24	; 0x0c
    2936:	9d 87       	std	Y+13, r25	; 0x0d
    2938:	ae 87       	std	Y+14, r26	; 0x0e
    293a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	6c 85       	ldd	r22, Y+12	; 0x0c
    293e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2940:	8e 85       	ldd	r24, Y+14	; 0x0e
    2942:	9f 85       	ldd	r25, Y+15	; 0x0f
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a e7       	ldi	r20, 0x7A	; 122
    294a:	55 e4       	ldi	r21, 0x45	; 69
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	88 87       	std	Y+8, r24	; 0x08
    2956:	99 87       	std	Y+9, r25	; 0x09
    2958:	aa 87       	std	Y+10, r26	; 0x0a
    295a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    295c:	68 85       	ldd	r22, Y+8	; 0x08
    295e:	79 85       	ldd	r23, Y+9	; 0x09
    2960:	8a 85       	ldd	r24, Y+10	; 0x0a
    2962:	9b 85       	ldd	r25, Y+11	; 0x0b
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <Ultrasonic_Trigger+0x49c>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9f 83       	std	Y+7, r25	; 0x07
    297a:	8e 83       	std	Y+6, r24	; 0x06
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <Ultrasonic_Trigger+0x51a>
	else if (__tmp > 65535)
    297e:	68 85       	ldd	r22, Y+8	; 0x08
    2980:	79 85       	ldd	r23, Y+9	; 0x09
    2982:	8a 85       	ldd	r24, Y+10	; 0x0a
    2984:	9b 85       	ldd	r25, Y+11	; 0x0b
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <Ultrasonic_Trigger+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	6c 85       	ldd	r22, Y+12	; 0x0c
    2998:	7d 85       	ldd	r23, Y+13	; 0x0d
    299a:	8e 85       	ldd	r24, Y+14	; 0x0e
    299c:	9f 85       	ldd	r25, Y+15	; 0x0f
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9f 83       	std	Y+7, r25	; 0x07
    29bc:	8e 83       	std	Y+6, r24	; 0x06
    29be:	0f c0       	rjmp	.+30     	; 0x29de <Ultrasonic_Trigger+0x4fc>
    29c0:	80 e9       	ldi	r24, 0x90	; 144
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	9d 83       	std	Y+5, r25	; 0x05
    29c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ca:	9d 81       	ldd	r25, Y+5	; 0x05
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <Ultrasonic_Trigger+0x4ea>
    29d0:	9d 83       	std	Y+5, r25	; 0x05
    29d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8e 81       	ldd	r24, Y+6	; 0x06
    29d6:	9f 81       	ldd	r25, Y+7	; 0x07
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9f 83       	std	Y+7, r25	; 0x07
    29dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8e 81       	ldd	r24, Y+6	; 0x06
    29e0:	9f 81       	ldd	r25, Y+7	; 0x07
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <Ultrasonic_Trigger+0x4de>
    29e6:	24 c0       	rjmp	.+72     	; 0x2a30 <Ultrasonic_Trigger+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	68 85       	ldd	r22, Y+8	; 0x08
    29ea:	79 85       	ldd	r23, Y+9	; 0x09
    29ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9f 83       	std	Y+7, r25	; 0x07
    29fa:	8e 83       	std	Y+6, r24	; 0x06
    29fc:	8e 81       	ldd	r24, Y+6	; 0x06
    29fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2a00:	9b 83       	std	Y+3, r25	; 0x03
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	9b 81       	ldd	r25, Y+3	; 0x03
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <Ultrasonic_Trigger+0x526>
    2a0c:	9b 83       	std	Y+3, r25	; 0x03
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <Ultrasonic_Trigger+0x54e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a12:	69 89       	ldd	r22, Y+17	; 0x11
    2a14:	7a 89       	ldd	r23, Y+18	; 0x12
    2a16:	8b 89       	ldd	r24, Y+19	; 0x13
    2a18:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	88 8b       	std	Y+16, r24	; 0x10
    2a24:	88 89       	ldd	r24, Y+16	; 0x10
    2a26:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	8a 95       	dec	r24
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <Ultrasonic_Trigger+0x548>
    2a2e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, LOGIC_LOW);
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	67 e0       	ldi	r22, 0x07	; 7
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
		break;

	}

}
    2a3a:	c5 5b       	subi	r28, 0xB5	; 181
    2a3c:	df 4f       	sbci	r29, 0xFF	; 255
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	08 95       	ret

00002a52 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance (Ultrasonic ultrasonic)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	27 97       	sbiw	r28, 0x07	; 7
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	89 83       	std	Y+1, r24	; 0x01
	switch(ultrasonic)
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	3d 83       	std	Y+5, r19	; 0x05
    2a70:	2c 83       	std	Y+4, r18	; 0x04
    2a72:	8c 81       	ldd	r24, Y+4	; 0x04
    2a74:	9d 81       	ldd	r25, Y+5	; 0x05
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	91 05       	cpc	r25, r1
    2a7a:	59 f0       	breq	.+22     	; 0x2a92 <Ultrasonic_readDistance+0x40>
    2a7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a80:	22 30       	cpi	r18, 0x02	; 2
    2a82:	31 05       	cpc	r19, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <Ultrasonic_readDistance+0x36>
    2a86:	5f c0       	rjmp	.+190    	; 0x2b46 <Ultrasonic_readDistance+0xf4>
    2a88:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	71 f1       	breq	.+92     	; 0x2aec <Ultrasonic_readDistance+0x9a>
    2a90:	87 c0       	rjmp	.+270    	; 0x2ba0 <Ultrasonic_readDistance+0x14e>
	{
	case U_right:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_right);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	0e 94 71 12 	call	0x24e2	; 0x24e2 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT0 * 1.088) + 1;
    2a98:	80 91 b8 01 	lds	r24, 0x01B8
    2a9c:	90 91 b9 01 	lds	r25, 0x01B9
    2aa0:	cc 01       	movw	r24, r24
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	26 e9       	ldi	r18, 0x96	; 150
    2ab8:	33 e4       	ldi	r19, 0x43	; 67
    2aba:	4b e8       	ldi	r20, 0x8B	; 139
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9b 83       	std	Y+3, r25	; 0x03
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	5b c0       	rjmp	.+182    	; 0x2ba2 <Ultrasonic_readDistance+0x150>
		break;

	case U_forward:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_forward);
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	0e 94 71 12 	call	0x24e2	; 0x24e2 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT1 * 1.088) + 1;
    2af2:	80 91 bb 01 	lds	r24, 0x01BB
    2af6:	90 91 bc 01 	lds	r25, 0x01BC
    2afa:	cc 01       	movw	r24, r24
    2afc:	a0 e0       	ldi	r26, 0x00	; 0
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	26 e9       	ldi	r18, 0x96	; 150
    2b12:	33 e4       	ldi	r19, 0x43	; 67
    2b14:	4b e8       	ldi	r20, 0x8B	; 139
    2b16:	5f e3       	ldi	r21, 0x3F	; 63
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9b 83       	std	Y+3, r25	; 0x03
    2b42:	8a 83       	std	Y+2, r24	; 0x02
    2b44:	2e c0       	rjmp	.+92     	; 0x2ba2 <Ultrasonic_readDistance+0x150>
		break;

	case U_backward:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_backward);
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	0e 94 71 12 	call	0x24e2	; 0x24e2 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT0 * 1.088) + 1;
    2b4c:	80 91 b8 01 	lds	r24, 0x01B8
    2b50:	90 91 b9 01 	lds	r25, 0x01B9
    2b54:	cc 01       	movw	r24, r24
    2b56:	a0 e0       	ldi	r26, 0x00	; 0
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	26 e9       	ldi	r18, 0x96	; 150
    2b6c:	33 e4       	ldi	r19, 0x43	; 67
    2b6e:	4b e8       	ldi	r20, 0x8B	; 139
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9b 83       	std	Y+3, r25	; 0x03
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <Ultrasonic_readDistance+0x150>
    2ba0:	04 c0       	rjmp	.+8      	; 0x2baa <Ultrasonic_readDistance+0x158>
		break;
	}
}
    2ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba6:	3f 83       	std	Y+7, r19	; 0x07
    2ba8:	2e 83       	std	Y+6, r18	; 0x06
    2baa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bac:	9f 81       	ldd	r25, Y+7	; 0x07
    2bae:	27 96       	adiw	r28, 0x07	; 7
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <Ultrasonic_edgeProcessing_INT0>:

static void Ultrasonic_edgeProcessing_INT0(void)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	60 97       	sbiw	r28, 0x10	; 16
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_INT0++; 	// Increment edge count
    2bd4:	80 91 ba 01 	lds	r24, 0x01BA
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	80 93 ba 01 	sts	0x01BA, r24

	if (1 == g_edgeTime_INT0) {
    2bde:	80 91 ba 01 	lds	r24, 0x01BA
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	91 f5       	brne	.+100    	; 0x2c4a <Ultrasonic_edgeProcessing_INT0+0x8a>
		/* Rising edge detected */
		Timer_deInit(TIMER1_ID); // De-initialize Timer1
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Timer_deInit>

		external_interrupt_deinit(INT_0); // De-initialize INT2
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	0e 94 b7 11 	call	0x236e	; 0x236e <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, FALLING_EDGE}; // Configure INT2 for falling edge detection
    2bf2:	19 82       	std	Y+1, r1	; 0x01
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
		external_interrupt_init(&EXT_INT0_Configrations); // Reinitialize INT2 with the new configuration
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	0e 94 33 11 	call	0x2266	; 0x2266 <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER1_ID, F_CPU_1024, NORMAL_MODE}; // Configure Timer1
    2c00:	ce 01       	movw	r24, r28
    2c02:	03 96       	adiw	r24, 0x03	; 3
    2c04:	9d 87       	std	Y+13, r25	; 0x0d
    2c06:	8c 87       	std	Y+12, r24	; 0x0c
    2c08:	e7 e9       	ldi	r30, 0x97	; 151
    2c0a:	f1 e0       	ldi	r31, 0x01	; 1
    2c0c:	ff 87       	std	Y+15, r31	; 0x0f
    2c0e:	ee 87       	std	Y+14, r30	; 0x0e
    2c10:	f7 e0       	ldi	r31, 0x07	; 7
    2c12:	f8 8b       	std	Y+16, r31	; 0x10
    2c14:	ee 85       	ldd	r30, Y+14	; 0x0e
    2c16:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c18:	00 80       	ld	r0, Z
    2c1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	9f 87       	std	Y+15, r25	; 0x0f
    2c22:	8e 87       	std	Y+14, r24	; 0x0e
    2c24:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c26:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c28:	00 82       	st	Z, r0
    2c2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	9d 87       	std	Y+13, r25	; 0x0d
    2c32:	8c 87       	std	Y+12, r24	; 0x0c
    2c34:	98 89       	ldd	r25, Y+16	; 0x10
    2c36:	91 50       	subi	r25, 0x01	; 1
    2c38:	98 8b       	std	Y+16, r25	; 0x10
    2c3a:	e8 89       	ldd	r30, Y+16	; 0x10
    2c3c:	ee 23       	and	r30, r30
    2c3e:	51 f7       	brne	.-44     	; 0x2c14 <Ultrasonic_edgeProcessing_INT0+0x54>
		Timer_init(&Timer_Configrations); // Initialize Timer1
    2c40:	ce 01       	movw	r24, r28
    2c42:	03 96       	adiw	r24, 0x03	; 3
    2c44:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_init>
    2c48:	1a c0       	rjmp	.+52     	; 0x2c7e <Ultrasonic_edgeProcessing_INT0+0xbe>

	} else if (2 == g_edgeTime_INT0) {
    2c4a:	80 91 ba 01 	lds	r24, 0x01BA
    2c4e:	82 30       	cpi	r24, 0x02	; 2
    2c50:	b1 f4       	brne	.+44     	; 0x2c7e <Ultrasonic_edgeProcessing_INT0+0xbe>
		/* Falling edge detected */
		g_highTime_INT0 = Timer_getTimerValue(TIMER1_ID); // Calculate pulse width
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Timer_getTimerValue>
    2c58:	90 93 b9 01 	sts	0x01B9, r25
    2c5c:	80 93 b8 01 	sts	0x01B8, r24

		Timer_deInit(TIMER1_ID);	/* De-initialize Timer1 */
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Timer_deInit>

		external_interrupt_deinit(INT_0);	/* De-initialize INT2 */
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	0e 94 b7 11 	call	0x236e	; 0x236e <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, RISING_EDGE};	/* Configure INT2 for rising edge detection */
    2c6c:	1a 86       	std	Y+10, r1	; 0x0a
    2c6e:	83 e0       	ldi	r24, 0x03	; 3
    2c70:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT0_Configrations);	/* Reinitialize INT2 with the new configuration */
    2c72:	ce 01       	movw	r24, r28
    2c74:	0a 96       	adiw	r24, 0x0a	; 10
    2c76:	0e 94 33 11 	call	0x2266	; 0x2266 <external_interrupt_init>

		g_edgeTime_INT0 = 0;		/* Reset edge count */
    2c7a:	10 92 ba 01 	sts	0x01BA, r1
	}
}
    2c7e:	60 96       	adiw	r28, 0x10	; 16
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <Ultrasonic_edgeProcessing_INT2>:

static void Ultrasonic_edgeProcessing_INT2(void)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	60 97       	sbiw	r28, 0x10	; 16
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_INT1++; 	// Increment edge count
    2ca4:	80 91 bd 01 	lds	r24, 0x01BD
    2ca8:	8f 5f       	subi	r24, 0xFF	; 255
    2caa:	80 93 bd 01 	sts	0x01BD, r24

	if (1 == g_edgeTime_INT1) {
    2cae:	80 91 bd 01 	lds	r24, 0x01BD
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	99 f5       	brne	.+102    	; 0x2d1c <Ultrasonic_edgeProcessing_INT2+0x8c>
		/* Rising edge detected */
		Timer_deInit(TIMER1_ID); // De-initialize Timer1
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Timer_deInit>

		external_interrupt_deinit(INT_1); // De-initialize INT2
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	0e 94 b7 11 	call	0x236e	; 0x236e <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, FALLING_EDGE}; // Configure INT2 for falling edge detection
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
		external_interrupt_init(&EXT_INT2_Configrations); // Reinitialize INT2 with the new configuration
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	0e 94 33 11 	call	0x2266	; 0x2266 <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER1_ID, F_CPU_1024, NORMAL_MODE}; // Configure Timer1
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	03 96       	adiw	r24, 0x03	; 3
    2cd6:	9d 87       	std	Y+13, r25	; 0x0d
    2cd8:	8c 87       	std	Y+12, r24	; 0x0c
    2cda:	ee e9       	ldi	r30, 0x9E	; 158
    2cdc:	f1 e0       	ldi	r31, 0x01	; 1
    2cde:	ff 87       	std	Y+15, r31	; 0x0f
    2ce0:	ee 87       	std	Y+14, r30	; 0x0e
    2ce2:	f7 e0       	ldi	r31, 0x07	; 7
    2ce4:	f8 8b       	std	Y+16, r31	; 0x10
    2ce6:	ee 85       	ldd	r30, Y+14	; 0x0e
    2ce8:	ff 85       	ldd	r31, Y+15	; 0x0f
    2cea:	00 80       	ld	r0, Z
    2cec:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cee:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	9f 87       	std	Y+15, r25	; 0x0f
    2cf4:	8e 87       	std	Y+14, r24	; 0x0e
    2cf6:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cf8:	fd 85       	ldd	r31, Y+13	; 0x0d
    2cfa:	00 82       	st	Z, r0
    2cfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	9d 87       	std	Y+13, r25	; 0x0d
    2d04:	8c 87       	std	Y+12, r24	; 0x0c
    2d06:	98 89       	ldd	r25, Y+16	; 0x10
    2d08:	91 50       	subi	r25, 0x01	; 1
    2d0a:	98 8b       	std	Y+16, r25	; 0x10
    2d0c:	e8 89       	ldd	r30, Y+16	; 0x10
    2d0e:	ee 23       	and	r30, r30
    2d10:	51 f7       	brne	.-44     	; 0x2ce6 <Ultrasonic_edgeProcessing_INT2+0x56>
		Timer_init(&Timer_Configrations); // Initialize Timer1
    2d12:	ce 01       	movw	r24, r28
    2d14:	03 96       	adiw	r24, 0x03	; 3
    2d16:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_init>
    2d1a:	1b c0       	rjmp	.+54     	; 0x2d52 <Ultrasonic_edgeProcessing_INT2+0xc2>

	} else if (2 == g_edgeTime_INT1) {
    2d1c:	80 91 bd 01 	lds	r24, 0x01BD
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	b9 f4       	brne	.+46     	; 0x2d52 <Ultrasonic_edgeProcessing_INT2+0xc2>
		/* Falling edge detected */
		g_highTime_INT1 = Timer_getTimerValue(TIMER1_ID); // Calculate pulse width
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Timer_getTimerValue>
    2d2a:	90 93 bc 01 	sts	0x01BC, r25
    2d2e:	80 93 bb 01 	sts	0x01BB, r24

		Timer_deInit(TIMER1_ID);	/* De-initialize Timer1 */
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Timer_deInit>

		external_interrupt_deinit(INT_1);	/* De-initialize INT2 */
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	0e 94 b7 11 	call	0x236e	; 0x236e <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, RISING_EDGE};	/* Configure INT2 for rising edge detection */
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	8a 87       	std	Y+10, r24	; 0x0a
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT2_Configrations);	/* Reinitialize INT2 with the new configuration */
    2d46:	ce 01       	movw	r24, r28
    2d48:	0a 96       	adiw	r24, 0x0a	; 10
    2d4a:	0e 94 33 11 	call	0x2266	; 0x2266 <external_interrupt_init>

		g_edgeTime_INT1 = 0;		/* Reset edge count */
    2d4e:	10 92 bd 01 	sts	0x01BD, r1
	}
}
    2d52:	60 96       	adiw	r28, 0x10	; 16
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <PIR_init>:
 * Description :
 * Function to initialize the PIR sensor.
 * This function sets up the necessary pin directions for the PIR sensor.
 */
void PIR_init(void)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    /* Configure PIR sensor 0 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR0_PIN, PIN_INPUT);
    2d6c:	83 e0       	ldi	r24, 0x03	; 3
    2d6e:	62 e0       	ldi	r22, 0x02	; 2
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

    /* Configure PIR sensor 1 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR1_PIN, PIN_INPUT);
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	63 e0       	ldi	r22, 0x03	; 3
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
}
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <PIR_ReadValue1>:
 * Function to read the value from PIR sensor 0.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue1(void)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 0 */
    return GPIO_readPin(PIR_PORT, PIR0_PIN);
    2d8e:	83 e0       	ldi	r24, 0x03	; 3
    2d90:	62 e0       	ldi	r22, 0x02	; 2
    2d92:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <GPIO_readPin>
}
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <PIR_ReadValue2>:
 * Function to read the value from PIR sensor 1.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue2(void)
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 1 */
    return GPIO_readPin(PIR_PORT, PIR1_PIN);
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	63 e0       	ldi	r22, 0x03	; 3
    2da8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <GPIO_readPin>
}
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <Handel_Max_Speed>:
 * Static function to handle the maximum speed of the motor.
 * Parameters  :
 * - speed: The maximum speed to be set.
 */
static void Handel_Max_Speed(uint8 speed)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	0f 92       	push	r0
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    max_Speed = speed;
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	80 93 be 01 	sts	0x01BE, r24
}
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <DcMotor_Init>:
 * This function sets up the necessary pin directions and stops the motor initially.
 * Parameters  :
 * - MAXSPEED: The maximum speed of the motor (0 to 100).
 */
void DcMotor_Init(uint8 MAXSPEED)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	0f 92       	push	r0
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    /* Set the maximum speed */
    Handel_Max_Speed(MAXSPEED);
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <Handel_Max_Speed>

    /* For motor 1 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT1, PIN_OUTPUT);  /* Set INT1 as output */
    2dde:	82 e0       	ldi	r24, 0x02	; 2
    2de0:	64 e0       	ldi	r22, 0x04	; 4
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT2, PIN_OUTPUT);  /* Set INT2 as output */
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	63 e0       	ldi	r22, 0x03	; 3
    2dec:	41 e0       	ldi	r20, 0x01	; 1
    2dee:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE1_PORT_CONNECTION, ENABLE1_PIN, PIN_OUTPUT);  /* Set Enable1 as output */
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	63 e0       	ldi	r22, 0x03	; 3
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

    /* For motor 2 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT3, PIN_OUTPUT);  /* Set INT3 as output */
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	66 e0       	ldi	r22, 0x06	; 6
    2e00:	41 e0       	ldi	r20, 0x01	; 1
    2e02:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT4, PIN_OUTPUT);  /* Set INT4 as output */
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	67 e0       	ldi	r22, 0x07	; 7
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE2_PORT_CONNECTION, ENABLE2_PIN, PIN_OUTPUT);  /* Set Enable2 as output */
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	67 e0       	ldi	r22, 0x07	; 7
    2e14:	41 e0       	ldi	r20, 0x01	; 1
    2e16:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

    /* Stop the motor at the beginning */
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	64 e0       	ldi	r22, 0x04	; 4
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	63 e0       	ldi	r22, 0x03	; 3
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	66 e0       	ldi	r22, 0x06	; 6
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	67 e0       	ldi	r22, 0x07	; 7
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
}
    2e42:	0f 90       	pop	r0
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <DcMotor1_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor1_Rotate(DcMotor_State state, uint8 speed)
{
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	27 97       	sbiw	r28, 0x07	; 7
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	8c 83       	std	Y+4, r24	; 0x04
    2e60:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 1 */
	Timer_Configuration configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer0_Start(&configrations);
    2e6e:	ce 01       	movw	r24, r28
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <PWM_Timer0_Start>

    /* Control motor 1 direction */
    switch (state)
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	3f 83       	std	Y+7, r19	; 0x07
    2e7e:	2e 83       	std	Y+6, r18	; 0x06
    2e80:	8e 81       	ldd	r24, Y+6	; 0x06
    2e82:	9f 81       	ldd	r25, Y+7	; 0x07
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	91 05       	cpc	r25, r1
    2e88:	a1 f0       	breq	.+40     	; 0x2eb2 <DcMotor1_Rotate+0x68>
    2e8a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e8c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e8e:	22 30       	cpi	r18, 0x02	; 2
    2e90:	31 05       	cpc	r19, r1
    2e92:	d1 f0       	breq	.+52     	; 0x2ec8 <DcMotor1_Rotate+0x7e>
    2e94:	8e 81       	ldd	r24, Y+6	; 0x06
    2e96:	9f 81       	ldd	r25, Y+7	; 0x07
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	01 f5       	brne	.+64     	; 0x2edc <DcMotor1_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	64 e0       	ldi	r22, 0x04	; 4
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	63 e0       	ldi	r22, 0x03	; 3
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2eb0:	15 c0       	rjmp	.+42     	; 0x2edc <DcMotor1_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_HIGH);
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	64 e0       	ldi	r22, 0x04	; 4
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	63 e0       	ldi	r22, 0x03	; 3
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2ec6:	0a c0       	rjmp	.+20     	; 0x2edc <DcMotor1_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	64 e0       	ldi	r22, 0x04	; 4
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_HIGH);
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	63 e0       	ldi	r22, 0x03	; 3
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        break;
    }
}
    2edc:	27 96       	adiw	r28, 0x07	; 7
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <DcMotor2_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor2_Rotate(DcMotor_State state, uint8 speed)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	27 97       	sbiw	r28, 0x07	; 7
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	8c 83       	std	Y+4, r24	; 0x04
    2f04:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 2 */
	Timer_Configuration configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer2_Start(&configrations);
    2f12:	ce 01       	movw	r24, r28
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	0e 94 27 0c 	call	0x184e	; 0x184e <PWM_Timer2_Start>

    /* Control motor 2 direction */
    switch (state)
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	3f 83       	std	Y+7, r19	; 0x07
    2f22:	2e 83       	std	Y+6, r18	; 0x06
    2f24:	8e 81       	ldd	r24, Y+6	; 0x06
    2f26:	9f 81       	ldd	r25, Y+7	; 0x07
    2f28:	81 30       	cpi	r24, 0x01	; 1
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	a1 f0       	breq	.+40     	; 0x2f56 <DcMotor2_Rotate+0x68>
    2f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f30:	3f 81       	ldd	r19, Y+7	; 0x07
    2f32:	22 30       	cpi	r18, 0x02	; 2
    2f34:	31 05       	cpc	r19, r1
    2f36:	d1 f0       	breq	.+52     	; 0x2f6c <DcMotor2_Rotate+0x7e>
    2f38:	8e 81       	ldd	r24, Y+6	; 0x06
    2f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	01 f5       	brne	.+64     	; 0x2f80 <DcMotor2_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	66 e0       	ldi	r22, 0x06	; 6
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	67 e0       	ldi	r22, 0x07	; 7
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2f54:	15 c0       	rjmp	.+42     	; 0x2f80 <DcMotor2_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_HIGH);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	66 e0       	ldi	r22, 0x06	; 6
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	67 e0       	ldi	r22, 0x07	; 7
    2f64:	40 e0       	ldi	r20, 0x00	; 0
    2f66:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2f6a:	0a c0       	rjmp	.+20     	; 0x2f80 <DcMotor2_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	66 e0       	ldi	r22, 0x06	; 6
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_HIGH);
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	67 e0       	ldi	r22, 0x07	; 7
    2f7a:	41 e0       	ldi	r20, 0x01	; 1
    2f7c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
        break;
    }
}
    2f80:	27 96       	adiw	r28, 0x07	; 7
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <Forward>:
 * Description :
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	60 97       	sbiw	r28, 0x10	; 16
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    2fa6:	18 8a       	std	Y+16, r1	; 0x10
    2fa8:	1f 86       	std	Y+15, r1	; 0x0f
    2faa:	81 c0       	rjmp	.+258    	; 0x30ae <Forward+0x11c>
    {
        DcMotor1_Rotate(CCW, i);
    2fac:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	69 2f       	mov	r22, r25
    2fb2:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    2fb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	69 2f       	mov	r22, r25
    2fbc:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	8b 87       	std	Y+11, r24	; 0x0b
    2fca:	9c 87       	std	Y+12, r25	; 0x0c
    2fcc:	ad 87       	std	Y+13, r26	; 0x0d
    2fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	4a e7       	ldi	r20, 0x7A	; 122
    2fde:	55 e4       	ldi	r21, 0x45	; 69
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	8f 83       	std	Y+7, r24	; 0x07
    2fea:	98 87       	std	Y+8, r25	; 0x08
    2fec:	a9 87       	std	Y+9, r26	; 0x09
    2fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	2c f4       	brge	.+10     	; 0x3012 <Forward+0x80>
		__ticks = 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	3f c0       	rjmp	.+126    	; 0x3090 <Forward+0xfe>
	else if (__tmp > 65535)
    3012:	6f 81       	ldd	r22, Y+7	; 0x07
    3014:	78 85       	ldd	r23, Y+8	; 0x08
    3016:	89 85       	ldd	r24, Y+9	; 0x09
    3018:	9a 85       	ldd	r25, Y+10	; 0x0a
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	4c f5       	brge	.+82     	; 0x307c <Forward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	6b 85       	ldd	r22, Y+11	; 0x0b
    302c:	7c 85       	ldd	r23, Y+12	; 0x0c
    302e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3030:	9e 85       	ldd	r25, Y+14	; 0x0e
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <Forward+0xe0>
    3054:	80 e9       	ldi	r24, 0x90	; 144
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	9c 81       	ldd	r25, Y+4	; 0x04
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <Forward+0xce>
    3064:	9c 83       	std	Y+4, r25	; 0x04
    3066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	69 f7       	brne	.-38     	; 0x3054 <Forward+0xc2>
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <Forward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <Forward+0x10a>
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    30a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a6:	98 89       	ldd	r25, Y+16	; 0x10
    30a8:	0a 96       	adiw	r24, 0x0a	; 10
    30aa:	98 8b       	std	Y+16, r25	; 0x10
    30ac:	8f 87       	std	Y+15, r24	; 0x0f
    30ae:	80 91 be 01 	lds	r24, 0x01BE
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b8:	98 89       	ldd	r25, Y+16	; 0x10
    30ba:	28 17       	cp	r18, r24
    30bc:	39 07       	cpc	r19, r25
    30be:	0c f0       	brlt	.+2      	; 0x30c2 <Forward+0x130>
    30c0:	75 cf       	rjmp	.-278    	; 0x2fac <Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    30c2:	60 96       	adiw	r28, 0x10	; 16
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <Backward>:
 * Description :
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	60 97       	sbiw	r28, 0x10	; 16
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    30e8:	18 8a       	std	Y+16, r1	; 0x10
    30ea:	1f 86       	std	Y+15, r1	; 0x0f
    30ec:	81 c0       	rjmp	.+258    	; 0x31f0 <Backward+0x11c>
    {
        DcMotor1_Rotate(CW, i);
    30ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	69 2f       	mov	r22, r25
    30f4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    30f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	69 2f       	mov	r22, r25
    30fe:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	a0 e0       	ldi	r26, 0x00	; 0
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	8b 87       	std	Y+11, r24	; 0x0b
    310c:	9c 87       	std	Y+12, r25	; 0x0c
    310e:	ad 87       	std	Y+13, r26	; 0x0d
    3110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3112:	6b 85       	ldd	r22, Y+11	; 0x0b
    3114:	7c 85       	ldd	r23, Y+12	; 0x0c
    3116:	8d 85       	ldd	r24, Y+13	; 0x0d
    3118:	9e 85       	ldd	r25, Y+14	; 0x0e
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	4a e7       	ldi	r20, 0x7A	; 122
    3120:	55 e4       	ldi	r21, 0x45	; 69
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8f 83       	std	Y+7, r24	; 0x07
    312c:	98 87       	std	Y+8, r25	; 0x08
    312e:	a9 87       	std	Y+9, r26	; 0x09
    3130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3132:	6f 81       	ldd	r22, Y+7	; 0x07
    3134:	78 85       	ldd	r23, Y+8	; 0x08
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	9a 85       	ldd	r25, Y+10	; 0x0a
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e8       	ldi	r20, 0x80	; 128
    3140:	5f e3       	ldi	r21, 0x3F	; 63
    3142:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3146:	88 23       	and	r24, r24
    3148:	2c f4       	brge	.+10     	; 0x3154 <Backward+0x80>
		__ticks = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
    3152:	3f c0       	rjmp	.+126    	; 0x31d2 <Backward+0xfe>
	else if (__tmp > 65535)
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	3f ef       	ldi	r19, 0xFF	; 255
    3160:	4f e7       	ldi	r20, 0x7F	; 127
    3162:	57 e4       	ldi	r21, 0x47	; 71
    3164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3168:	18 16       	cp	r1, r24
    316a:	4c f5       	brge	.+82     	; 0x31be <Backward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316c:	6b 85       	ldd	r22, Y+11	; 0x0b
    316e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3170:	8d 85       	ldd	r24, Y+13	; 0x0d
    3172:	9e 85       	ldd	r25, Y+14	; 0x0e
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e2       	ldi	r20, 0x20	; 32
    317a:	51 e4       	ldi	r21, 0x41	; 65
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	0f c0       	rjmp	.+30     	; 0x31b4 <Backward+0xe0>
    3196:	80 e9       	ldi	r24, 0x90	; 144
    3198:	91 e0       	ldi	r25, 0x01	; 1
    319a:	9c 83       	std	Y+4, r25	; 0x04
    319c:	8b 83       	std	Y+3, r24	; 0x03
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	9c 81       	ldd	r25, Y+4	; 0x04
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <Backward+0xce>
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	69 f7       	brne	.-38     	; 0x3196 <Backward+0xc2>
    31bc:	14 c0       	rjmp	.+40     	; 0x31e6 <Backward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31be:	6f 81       	ldd	r22, Y+7	; 0x07
    31c0:	78 85       	ldd	r23, Y+8	; 0x08
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	9e 81       	ldd	r25, Y+6	; 0x06
    31d6:	9a 83       	std	Y+2, r25	; 0x02
    31d8:	89 83       	std	Y+1, r24	; 0x01
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <Backward+0x10a>
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    31e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31e8:	98 89       	ldd	r25, Y+16	; 0x10
    31ea:	0a 96       	adiw	r24, 0x0a	; 10
    31ec:	98 8b       	std	Y+16, r25	; 0x10
    31ee:	8f 87       	std	Y+15, r24	; 0x0f
    31f0:	80 91 be 01 	lds	r24, 0x01BE
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fa:	98 89       	ldd	r25, Y+16	; 0x10
    31fc:	28 17       	cp	r18, r24
    31fe:	39 07       	cpc	r19, r25
    3200:	0c f0       	brlt	.+2      	; 0x3204 <Backward+0x130>
    3202:	75 cf       	rjmp	.-278    	; 0x30ee <Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3204:	60 96       	adiw	r28, 0x10	; 16
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <Stop>:
 * Description :
 * Function to stop the car.
 * This function stops both motors.
 */
void Stop(void)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    DcMotor1_Rotate(STOP, MOTOR_STOP);
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
    DcMotor2_Rotate(STOP, MOTOR_STOP);
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
}
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <Right_Forward>:
 * Description :
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	60 97       	sbiw	r28, 0x10	; 16
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    3248:	18 8a       	std	Y+16, r1	; 0x10
    324a:	1f 86       	std	Y+15, r1	; 0x0f
    324c:	80 c0       	rjmp	.+256    	; 0x334e <Right_Forward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    3256:	9f 85       	ldd	r25, Y+15	; 0x0f
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	69 2f       	mov	r22, r25
    325c:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	a0 e0       	ldi	r26, 0x00	; 0
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	8b 87       	std	Y+11, r24	; 0x0b
    326a:	9c 87       	std	Y+12, r25	; 0x0c
    326c:	ad 87       	std	Y+13, r26	; 0x0d
    326e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3270:	6b 85       	ldd	r22, Y+11	; 0x0b
    3272:	7c 85       	ldd	r23, Y+12	; 0x0c
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	4a e7       	ldi	r20, 0x7A	; 122
    327e:	55 e4       	ldi	r21, 0x45	; 69
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	8f 83       	std	Y+7, r24	; 0x07
    328a:	98 87       	std	Y+8, r25	; 0x08
    328c:	a9 87       	std	Y+9, r26	; 0x09
    328e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3290:	6f 81       	ldd	r22, Y+7	; 0x07
    3292:	78 85       	ldd	r23, Y+8	; 0x08
    3294:	89 85       	ldd	r24, Y+9	; 0x09
    3296:	9a 85       	ldd	r25, Y+10	; 0x0a
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e8       	ldi	r20, 0x80	; 128
    329e:	5f e3       	ldi	r21, 0x3F	; 63
    32a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	2c f4       	brge	.+10     	; 0x32b2 <Right_Forward+0x7e>
		__ticks = 1;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
    32b0:	3f c0       	rjmp	.+126    	; 0x3330 <Right_Forward+0xfc>
	else if (__tmp > 65535)
    32b2:	6f 81       	ldd	r22, Y+7	; 0x07
    32b4:	78 85       	ldd	r23, Y+8	; 0x08
    32b6:	89 85       	ldd	r24, Y+9	; 0x09
    32b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	3f ef       	ldi	r19, 0xFF	; 255
    32be:	4f e7       	ldi	r20, 0x7F	; 127
    32c0:	57 e4       	ldi	r21, 0x47	; 71
    32c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c6:	18 16       	cp	r1, r24
    32c8:	4c f5       	brge	.+82     	; 0x331c <Right_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    32cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e2       	ldi	r20, 0x20	; 32
    32d8:	51 e4       	ldi	r21, 0x41	; 65
    32da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	9e 83       	std	Y+6, r25	; 0x06
    32f0:	8d 83       	std	Y+5, r24	; 0x05
    32f2:	0f c0       	rjmp	.+30     	; 0x3312 <Right_Forward+0xde>
    32f4:	80 e9       	ldi	r24, 0x90	; 144
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	9c 83       	std	Y+4, r25	; 0x04
    32fa:	8b 83       	std	Y+3, r24	; 0x03
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <Right_Forward+0xcc>
    3304:	9c 83       	std	Y+4, r25	; 0x04
    3306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	69 f7       	brne	.-38     	; 0x32f4 <Right_Forward+0xc0>
    331a:	14 c0       	rjmp	.+40     	; 0x3344 <Right_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331c:	6f 81       	ldd	r22, Y+7	; 0x07
    331e:	78 85       	ldd	r23, Y+8	; 0x08
    3320:	89 85       	ldd	r24, Y+9	; 0x09
    3322:	9a 85       	ldd	r25, Y+10	; 0x0a
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	8d 83       	std	Y+5, r24	; 0x05
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <Right_Forward+0x108>
    3340:	9a 83       	std	Y+2, r25	; 0x02
    3342:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    3344:	8f 85       	ldd	r24, Y+15	; 0x0f
    3346:	98 89       	ldd	r25, Y+16	; 0x10
    3348:	0a 96       	adiw	r24, 0x0a	; 10
    334a:	98 8b       	std	Y+16, r25	; 0x10
    334c:	8f 87       	std	Y+15, r24	; 0x0f
    334e:	80 91 be 01 	lds	r24, 0x01BE
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	8f 85       	ldd	r24, Y+15	; 0x0f
    3358:	98 89       	ldd	r25, Y+16	; 0x10
    335a:	28 17       	cp	r18, r24
    335c:	39 07       	cpc	r19, r25
    335e:	0c f0       	brlt	.+2      	; 0x3362 <Right_Forward+0x12e>
    3360:	76 cf       	rjmp	.-276    	; 0x324e <Right_Forward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3362:	60 96       	adiw	r28, 0x10	; 16
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <Left_Forward>:
 * Description :
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	60 97       	sbiw	r28, 0x10	; 16
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    3388:	18 8a       	std	Y+16, r1	; 0x10
    338a:	1f 86       	std	Y+15, r1	; 0x0f
    338c:	80 c0       	rjmp	.+256    	; 0x348e <Left_Forward+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    338e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	69 2f       	mov	r22, r25
    3394:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	a0 e0       	ldi	r26, 0x00	; 0
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	8b 87       	std	Y+11, r24	; 0x0b
    33aa:	9c 87       	std	Y+12, r25	; 0x0c
    33ac:	ad 87       	std	Y+13, r26	; 0x0d
    33ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	4a e7       	ldi	r20, 0x7A	; 122
    33be:	55 e4       	ldi	r21, 0x45	; 69
    33c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	8f 83       	std	Y+7, r24	; 0x07
    33ca:	98 87       	std	Y+8, r25	; 0x08
    33cc:	a9 87       	std	Y+9, r26	; 0x09
    33ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d0:	6f 81       	ldd	r22, Y+7	; 0x07
    33d2:	78 85       	ldd	r23, Y+8	; 0x08
    33d4:	89 85       	ldd	r24, Y+9	; 0x09
    33d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e8       	ldi	r20, 0x80	; 128
    33de:	5f e3       	ldi	r21, 0x3F	; 63
    33e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	2c f4       	brge	.+10     	; 0x33f2 <Left_Forward+0x7e>
		__ticks = 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	3f c0       	rjmp	.+126    	; 0x3470 <Left_Forward+0xfc>
	else if (__tmp > 65535)
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	3f ef       	ldi	r19, 0xFF	; 255
    33fe:	4f e7       	ldi	r20, 0x7F	; 127
    3400:	57 e4       	ldi	r21, 0x47	; 71
    3402:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3406:	18 16       	cp	r1, r24
    3408:	4c f5       	brge	.+82     	; 0x345c <Left_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340a:	6b 85       	ldd	r22, Y+11	; 0x0b
    340c:	7c 85       	ldd	r23, Y+12	; 0x0c
    340e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3410:	9e 85       	ldd	r25, Y+14	; 0x0e
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e2       	ldi	r20, 0x20	; 32
    3418:	51 e4       	ldi	r21, 0x41	; 65
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	0f c0       	rjmp	.+30     	; 0x3452 <Left_Forward+0xde>
    3434:	80 e9       	ldi	r24, 0x90	; 144
    3436:	91 e0       	ldi	r25, 0x01	; 1
    3438:	9c 83       	std	Y+4, r25	; 0x04
    343a:	8b 83       	std	Y+3, r24	; 0x03
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <Left_Forward+0xcc>
    3444:	9c 83       	std	Y+4, r25	; 0x04
    3446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	69 f7       	brne	.-38     	; 0x3434 <Left_Forward+0xc0>
    345a:	14 c0       	rjmp	.+40     	; 0x3484 <Left_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	6f 81       	ldd	r22, Y+7	; 0x07
    345e:	78 85       	ldd	r23, Y+8	; 0x08
    3460:	89 85       	ldd	r24, Y+9	; 0x09
    3462:	9a 85       	ldd	r25, Y+10	; 0x0a
    3464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	9e 83       	std	Y+6, r25	; 0x06
    346e:	8d 83       	std	Y+5, r24	; 0x05
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	9a 81       	ldd	r25, Y+2	; 0x02
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <Left_Forward+0x108>
    3480:	9a 83       	std	Y+2, r25	; 0x02
    3482:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    3484:	8f 85       	ldd	r24, Y+15	; 0x0f
    3486:	98 89       	ldd	r25, Y+16	; 0x10
    3488:	0a 96       	adiw	r24, 0x0a	; 10
    348a:	98 8b       	std	Y+16, r25	; 0x10
    348c:	8f 87       	std	Y+15, r24	; 0x0f
    348e:	80 91 be 01 	lds	r24, 0x01BE
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	8f 85       	ldd	r24, Y+15	; 0x0f
    3498:	98 89       	ldd	r25, Y+16	; 0x10
    349a:	28 17       	cp	r18, r24
    349c:	39 07       	cpc	r19, r25
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <Left_Forward+0x12e>
    34a0:	76 cf       	rjmp	.-276    	; 0x338e <Left_Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    34a2:	60 96       	adiw	r28, 0x10	; 16
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <Left_Forward_Parking>:
 * Description :
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(void)
{
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	60 97       	sbiw	r28, 0x10	; 16
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= MOTOR_MAX_SPEED; i = i + 10)
    34c8:	18 8a       	std	Y+16, r1	; 0x10
    34ca:	1f 86       	std	Y+15, r1	; 0x0f
    34cc:	80 c0       	rjmp	.+256    	; 0x35ce <Left_Forward_Parking+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    34ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    34d0:	82 e0       	ldi	r24, 0x02	; 2
    34d2:	69 2f       	mov	r22, r25
    34d4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	60 e0       	ldi	r22, 0x00	; 0
    34dc:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	a0 e0       	ldi	r26, 0x00	; 0
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	8b 87       	std	Y+11, r24	; 0x0b
    34ea:	9c 87       	std	Y+12, r25	; 0x0c
    34ec:	ad 87       	std	Y+13, r26	; 0x0d
    34ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	4a e7       	ldi	r20, 0x7A	; 122
    34fe:	55 e4       	ldi	r21, 0x45	; 69
    3500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	8f 83       	std	Y+7, r24	; 0x07
    350a:	98 87       	std	Y+8, r25	; 0x08
    350c:	a9 87       	std	Y+9, r26	; 0x09
    350e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e8       	ldi	r20, 0x80	; 128
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3524:	88 23       	and	r24, r24
    3526:	2c f4       	brge	.+10     	; 0x3532 <Left_Forward_Parking+0x7e>
		__ticks = 1;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	3f c0       	rjmp	.+126    	; 0x35b0 <Left_Forward_Parking+0xfc>
	else if (__tmp > 65535)
    3532:	6f 81       	ldd	r22, Y+7	; 0x07
    3534:	78 85       	ldd	r23, Y+8	; 0x08
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	9a 85       	ldd	r25, Y+10	; 0x0a
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	4c f5       	brge	.+82     	; 0x359c <Left_Forward_Parking+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	6b 85       	ldd	r22, Y+11	; 0x0b
    354c:	7c 85       	ldd	r23, Y+12	; 0x0c
    354e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3550:	9e 85       	ldd	r25, Y+14	; 0x0e
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e2       	ldi	r20, 0x20	; 32
    3558:	51 e4       	ldi	r21, 0x41	; 65
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	bc 01       	movw	r22, r24
    3564:	cd 01       	movw	r24, r26
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9e 83       	std	Y+6, r25	; 0x06
    3570:	8d 83       	std	Y+5, r24	; 0x05
    3572:	0f c0       	rjmp	.+30     	; 0x3592 <Left_Forward_Parking+0xde>
    3574:	80 e9       	ldi	r24, 0x90	; 144
    3576:	91 e0       	ldi	r25, 0x01	; 1
    3578:	9c 83       	std	Y+4, r25	; 0x04
    357a:	8b 83       	std	Y+3, r24	; 0x03
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <Left_Forward_Parking+0xcc>
    3584:	9c 83       	std	Y+4, r25	; 0x04
    3586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	69 f7       	brne	.-38     	; 0x3574 <Left_Forward_Parking+0xc0>
    359a:	14 c0       	rjmp	.+40     	; 0x35c4 <Left_Forward_Parking+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	9e 83       	std	Y+6, r25	; 0x06
    35ae:	8d 83       	std	Y+5, r24	; 0x05
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	9a 83       	std	Y+2, r25	; 0x02
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	9a 81       	ldd	r25, Y+2	; 0x02
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <Left_Forward_Parking+0x108>
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(void)
{
    for (int i = 0; i <= MOTOR_MAX_SPEED; i = i + 10)
    35c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c6:	98 89       	ldd	r25, Y+16	; 0x10
    35c8:	0a 96       	adiw	r24, 0x0a	; 10
    35ca:	98 8b       	std	Y+16, r25	; 0x10
    35cc:	8f 87       	std	Y+15, r24	; 0x0f
    35ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d0:	98 89       	ldd	r25, Y+16	; 0x10
    35d2:	85 36       	cpi	r24, 0x65	; 101
    35d4:	91 05       	cpc	r25, r1
    35d6:	0c f4       	brge	.+2      	; 0x35da <Left_Forward_Parking+0x126>
    35d8:	7a cf       	rjmp	.-268    	; 0x34ce <Left_Forward_Parking+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    35da:	60 96       	adiw	r28, 0x10	; 16
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <Right_Backward>:
 * Description :
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	60 97       	sbiw	r28, 0x10	; 16
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    3600:	18 8a       	std	Y+16, r1	; 0x10
    3602:	1f 86       	std	Y+15, r1	; 0x0f
    3604:	80 c0       	rjmp	.+256    	; 0x3706 <Right_Backward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    360e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	69 2f       	mov	r22, r25
    3614:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e0       	ldi	r26, 0x00	; 0
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	4a e7       	ldi	r20, 0x7A	; 122
    3636:	55 e4       	ldi	r21, 0x45	; 69
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08
    3644:	a9 87       	std	Y+9, r26	; 0x09
    3646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	2c f4       	brge	.+10     	; 0x366a <Right_Backward+0x7e>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <Right_Backward+0xfc>
	else if (__tmp > 65535)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	3f ef       	ldi	r19, 0xFF	; 255
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	57 e4       	ldi	r21, 0x47	; 71
    367a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	4c f5       	brge	.+82     	; 0x36d4 <Right_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e2       	ldi	r20, 0x20	; 32
    3690:	51 e4       	ldi	r21, 0x41	; 65
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <Right_Backward+0xde>
    36ac:	80 e9       	ldi	r24, 0x90	; 144
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <Right_Backward+0xcc>
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	69 f7       	brne	.-38     	; 0x36ac <Right_Backward+0xc0>
    36d2:	14 c0       	rjmp	.+40     	; 0x36fc <Right_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <Right_Backward+0x108>
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    36fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36fe:	98 89       	ldd	r25, Y+16	; 0x10
    3700:	0a 96       	adiw	r24, 0x0a	; 10
    3702:	98 8b       	std	Y+16, r25	; 0x10
    3704:	8f 87       	std	Y+15, r24	; 0x0f
    3706:	80 91 be 01 	lds	r24, 0x01BE
    370a:	28 2f       	mov	r18, r24
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3710:	98 89       	ldd	r25, Y+16	; 0x10
    3712:	28 17       	cp	r18, r24
    3714:	39 07       	cpc	r19, r25
    3716:	0c f0       	brlt	.+2      	; 0x371a <Right_Backward+0x12e>
    3718:	76 cf       	rjmp	.-276    	; 0x3606 <Right_Backward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    371a:	60 96       	adiw	r28, 0x10	; 16
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <Left_Backward>:
 * Description :
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	60 97       	sbiw	r28, 0x10	; 16
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    3740:	18 8a       	std	Y+16, r1	; 0x10
    3742:	1f 86       	std	Y+15, r1	; 0x0f
    3744:	80 c0       	rjmp	.+256    	; 0x3846 <Left_Backward+0x11a>
    {
        DcMotor1_Rotate(CW, i);
    3746:	9f 85       	ldd	r25, Y+15	; 0x0f
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	69 2f       	mov	r22, r25
    374c:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	0e 94 77 17 	call	0x2eee	; 0x2eee <DcMotor2_Rotate>
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	a0 e0       	ldi	r26, 0x00	; 0
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	8b 87       	std	Y+11, r24	; 0x0b
    3762:	9c 87       	std	Y+12, r25	; 0x0c
    3764:	ad 87       	std	Y+13, r26	; 0x0d
    3766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3768:	6b 85       	ldd	r22, Y+11	; 0x0b
    376a:	7c 85       	ldd	r23, Y+12	; 0x0c
    376c:	8d 85       	ldd	r24, Y+13	; 0x0d
    376e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	4a e7       	ldi	r20, 0x7A	; 122
    3776:	55 e4       	ldi	r21, 0x45	; 69
    3778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	8f 83       	std	Y+7, r24	; 0x07
    3782:	98 87       	std	Y+8, r25	; 0x08
    3784:	a9 87       	std	Y+9, r26	; 0x09
    3786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3788:	6f 81       	ldd	r22, Y+7	; 0x07
    378a:	78 85       	ldd	r23, Y+8	; 0x08
    378c:	89 85       	ldd	r24, Y+9	; 0x09
    378e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e8       	ldi	r20, 0x80	; 128
    3796:	5f e3       	ldi	r21, 0x3F	; 63
    3798:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    379c:	88 23       	and	r24, r24
    379e:	2c f4       	brge	.+10     	; 0x37aa <Left_Backward+0x7e>
		__ticks = 1;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	3f c0       	rjmp	.+126    	; 0x3828 <Left_Backward+0xfc>
	else if (__tmp > 65535)
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	3f ef       	ldi	r19, 0xFF	; 255
    37b6:	4f e7       	ldi	r20, 0x7F	; 127
    37b8:	57 e4       	ldi	r21, 0x47	; 71
    37ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37be:	18 16       	cp	r1, r24
    37c0:	4c f5       	brge	.+82     	; 0x3814 <Left_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e2       	ldi	r20, 0x20	; 32
    37d0:	51 e4       	ldi	r21, 0x41	; 65
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
    37ea:	0f c0       	rjmp	.+30     	; 0x380a <Left_Backward+0xde>
    37ec:	80 e9       	ldi	r24, 0x90	; 144
    37ee:	91 e0       	ldi	r25, 0x01	; 1
    37f0:	9c 83       	std	Y+4, r25	; 0x04
    37f2:	8b 83       	std	Y+3, r24	; 0x03
    37f4:	8b 81       	ldd	r24, Y+3	; 0x03
    37f6:	9c 81       	ldd	r25, Y+4	; 0x04
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <Left_Backward+0xcc>
    37fc:	9c 83       	std	Y+4, r25	; 0x04
    37fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3800:	8d 81       	ldd	r24, Y+5	; 0x05
    3802:	9e 81       	ldd	r25, Y+6	; 0x06
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380a:	8d 81       	ldd	r24, Y+5	; 0x05
    380c:	9e 81       	ldd	r25, Y+6	; 0x06
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	69 f7       	brne	.-38     	; 0x37ec <Left_Backward+0xc0>
    3812:	14 c0       	rjmp	.+40     	; 0x383c <Left_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3814:	6f 81       	ldd	r22, Y+7	; 0x07
    3816:	78 85       	ldd	r23, Y+8	; 0x08
    3818:	89 85       	ldd	r24, Y+9	; 0x09
    381a:	9a 85       	ldd	r25, Y+10	; 0x0a
    381c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	9e 83       	std	Y+6, r25	; 0x06
    3826:	8d 83       	std	Y+5, r24	; 0x05
    3828:	8d 81       	ldd	r24, Y+5	; 0x05
    382a:	9e 81       	ldd	r25, Y+6	; 0x06
    382c:	9a 83       	std	Y+2, r25	; 0x02
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	9a 81       	ldd	r25, Y+2	; 0x02
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <Left_Backward+0x108>
    3838:	9a 83       	std	Y+2, r25	; 0x02
    383a:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    383c:	8f 85       	ldd	r24, Y+15	; 0x0f
    383e:	98 89       	ldd	r25, Y+16	; 0x10
    3840:	0a 96       	adiw	r24, 0x0a	; 10
    3842:	98 8b       	std	Y+16, r25	; 0x10
    3844:	8f 87       	std	Y+15, r24	; 0x0f
    3846:	80 91 be 01 	lds	r24, 0x01BE
    384a:	28 2f       	mov	r18, r24
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3850:	98 89       	ldd	r25, Y+16	; 0x10
    3852:	28 17       	cp	r18, r24
    3854:	39 07       	cpc	r19, r25
    3856:	0c f0       	brlt	.+2      	; 0x385a <Left_Backward+0x12e>
    3858:	76 cf       	rjmp	.-276    	; 0x3746 <Left_Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    385a:	60 96       	adiw	r28, 0x10	; 16
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	08 95       	ret

0000386c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions using the GPIO driver.
 * 2. Setup the LCD Data Mode (4-bits or 8-bits).
 */
void LCD_init(void)
{
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	2e 97       	sbiw	r28, 0x0e	; 14
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    /* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	61 e0       	ldi	r22, 0x01	; 1
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	62 e0       	ldi	r22, 0x02	; 2
    388e:	41 e0       	ldi	r20, 0x01	; 1
    3890:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a0 ea       	ldi	r26, 0xA0	; 160
    389a:	b1 e4       	ldi	r27, 0x41	; 65
    389c:	8b 87       	std	Y+11, r24	; 0x0b
    389e:	9c 87       	std	Y+12, r25	; 0x0c
    38a0:	ad 87       	std	Y+13, r26	; 0x0d
    38a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a e7       	ldi	r20, 0x7A	; 122
    38b2:	55 e4       	ldi	r21, 0x45	; 69
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	8f 83       	std	Y+7, r24	; 0x07
    38be:	98 87       	std	Y+8, r25	; 0x08
    38c0:	a9 87       	std	Y+9, r26	; 0x09
    38c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c4:	6f 81       	ldd	r22, Y+7	; 0x07
    38c6:	78 85       	ldd	r23, Y+8	; 0x08
    38c8:	89 85       	ldd	r24, Y+9	; 0x09
    38ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	2c f4       	brge	.+10     	; 0x38e6 <LCD_init+0x7a>
		__ticks = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9e 83       	std	Y+6, r25	; 0x06
    38e2:	8d 83       	std	Y+5, r24	; 0x05
    38e4:	3f c0       	rjmp	.+126    	; 0x3964 <LCD_init+0xf8>
	else if (__tmp > 65535)
    38e6:	6f 81       	ldd	r22, Y+7	; 0x07
    38e8:	78 85       	ldd	r23, Y+8	; 0x08
    38ea:	89 85       	ldd	r24, Y+9	; 0x09
    38ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	3f ef       	ldi	r19, 0xFF	; 255
    38f2:	4f e7       	ldi	r20, 0x7F	; 127
    38f4:	57 e4       	ldi	r21, 0x47	; 71
    38f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fa:	18 16       	cp	r1, r24
    38fc:	4c f5       	brge	.+82     	; 0x3950 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3900:	7c 85       	ldd	r23, Y+12	; 0x0c
    3902:	8d 85       	ldd	r24, Y+13	; 0x0d
    3904:	9e 85       	ldd	r25, Y+14	; 0x0e
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e2       	ldi	r20, 0x20	; 32
    390c:	51 e4       	ldi	r21, 0x41	; 65
    390e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	9e 83       	std	Y+6, r25	; 0x06
    3924:	8d 83       	std	Y+5, r24	; 0x05
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <LCD_init+0xda>
    3928:	80 e9       	ldi	r24, 0x90	; 144
    392a:	91 e0       	ldi	r25, 0x01	; 1
    392c:	9c 83       	std	Y+4, r25	; 0x04
    392e:	8b 83       	std	Y+3, r24	; 0x03
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	9c 81       	ldd	r25, Y+4	; 0x04
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_init+0xc8>
    3938:	9c 83       	std	Y+4, r25	; 0x04
    393a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393c:	8d 81       	ldd	r24, Y+5	; 0x05
    393e:	9e 81       	ldd	r25, Y+6	; 0x06
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	9e 83       	std	Y+6, r25	; 0x06
    3944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3946:	8d 81       	ldd	r24, Y+5	; 0x05
    3948:	9e 81       	ldd	r25, Y+6	; 0x06
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	69 f7       	brne	.-38     	; 0x3928 <LCD_init+0xbc>
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	6f 81       	ldd	r22, Y+7	; 0x07
    3952:	78 85       	ldd	r23, Y+8	; 0x08
    3954:	89 85       	ldd	r24, Y+9	; 0x09
    3956:	9a 85       	ldd	r25, Y+10	; 0x0a
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9e 83       	std	Y+6, r25	; 0x06
    3962:	8d 83       	std	Y+5, r24	; 0x05
    3964:	8d 81       	ldd	r24, Y+5	; 0x05
    3966:	9e 81       	ldd	r25, Y+6	; 0x06
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_init+0x104>
    3974:	9a 83       	std	Y+2, r25	; 0x02
    3976:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(20);  /* LCD Power ON delay (always > 15ms) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Configure 4 pins in the data port as output pins */
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	63 e0       	ldi	r22, 0x03	; 3
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	64 e0       	ldi	r22, 0x04	; 4
    3986:	41 e0       	ldi	r20, 0x01	; 1
    3988:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	65 e0       	ldi	r22, 0x05	; 5
    3990:	41 e0       	ldi	r20, 0x01	; 1
    3992:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	66 e0       	ldi	r22, 0x06	; 6
    399a:	41 e0       	ldi	r20, 0x01	; 1
    399c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

    /* Send initialization commands for 4-bit mode */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    39a0:	83 e3       	ldi	r24, 0x33	; 51
    39a2:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    39a6:	82 e3       	ldi	r24, 0x32	; 50
    39a8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>

    /* Set 2-line LCD, 4-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    39ac:	88 e2       	ldi	r24, 0x28	; 40
    39ae:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>

    /* Set 2-line LCD, 8-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif

    LCD_sendCommand(LCD_CURSOR_OFF);  /* Turn cursor off */
    39b2:	8c e0       	ldi	r24, 0x0C	; 12
    39b4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Clear LCD at the beginning */
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>
}
    39be:	2e 96       	adiw	r28, 0x0e	; 14
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <LCD_sendCommand>:
 * Send a command to the LCD.
 * Parameters  :
 * - command: The command to be sent.
 */
void LCD_sendCommand(uint8 command)
{
    39d0:	0f 93       	push	r16
    39d2:	1f 93       	push	r17
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	c3 56       	subi	r28, 0x63	; 99
    39de:	d0 40       	sbci	r29, 0x00	; 0
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
    39ea:	fe 01       	movw	r30, r28
    39ec:	ed 59       	subi	r30, 0x9D	; 157
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);  /* Instruction Mode (RS = 0) */
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	61 e0       	ldi	r22, 0x01	; 1
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    39fc:	fe 01       	movw	r30, r28
    39fe:	e1 5a       	subi	r30, 0xA1	; 161
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	a0 e8       	ldi	r26, 0x80	; 128
    3a08:	bf e3       	ldi	r27, 0x3F	; 63
    3a0a:	80 83       	st	Z, r24
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	a2 83       	std	Z+2, r26	; 0x02
    3a10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a12:	8e 01       	movw	r16, r28
    3a14:	05 5a       	subi	r16, 0xA5	; 165
    3a16:	1f 4f       	sbci	r17, 0xFF	; 255
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e1 5a       	subi	r30, 0xA1	; 161
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	60 81       	ld	r22, Z
    3a20:	71 81       	ldd	r23, Z+1	; 0x01
    3a22:	82 81       	ldd	r24, Z+2	; 0x02
    3a24:	93 81       	ldd	r25, Z+3	; 0x03
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	4a e7       	ldi	r20, 0x7A	; 122
    3a2c:	55 e4       	ldi	r21, 0x45	; 69
    3a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	f8 01       	movw	r30, r16
    3a38:	80 83       	st	Z, r24
    3a3a:	91 83       	std	Z+1, r25	; 0x01
    3a3c:	a2 83       	std	Z+2, r26	; 0x02
    3a3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a40:	fe 01       	movw	r30, r28
    3a42:	e5 5a       	subi	r30, 0xA5	; 165
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	44 f4       	brge	.+16     	; 0x3a6e <LCD_sendCommand+0x9e>
		__ticks = 1;
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e7 5a       	subi	r30, 0xA7	; 167
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
    3a6c:	64 c0       	rjmp	.+200    	; 0x3b36 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e5 5a       	subi	r30, 0xA5	; 165
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	60 81       	ld	r22, Z
    3a76:	71 81       	ldd	r23, Z+1	; 0x01
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	57 e4       	ldi	r21, 0x47	; 71
    3a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	0c f0       	brlt	.+2      	; 0x3a8e <LCD_sendCommand+0xbe>
    3a8c:	43 c0       	rjmp	.+134    	; 0x3b14 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e1 5a       	subi	r30, 0xA1	; 161
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	60 81       	ld	r22, Z
    3a96:	71 81       	ldd	r23, Z+1	; 0x01
    3a98:	82 81       	ldd	r24, Z+2	; 0x02
    3a9a:	93 81       	ldd	r25, Z+3	; 0x03
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e2       	ldi	r20, 0x20	; 32
    3aa2:	51 e4       	ldi	r21, 0x41	; 65
    3aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	8e 01       	movw	r16, r28
    3aae:	07 5a       	subi	r16, 0xA7	; 167
    3ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab2:	bc 01       	movw	r22, r24
    3ab4:	cd 01       	movw	r24, r26
    3ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	f8 01       	movw	r30, r16
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	1f c0       	rjmp	.+62     	; 0x3b04 <LCD_sendCommand+0x134>
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e9 5a       	subi	r30, 0xA9	; 169
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	80 e9       	ldi	r24, 0x90	; 144
    3ace:	91 e0       	ldi	r25, 0x01	; 1
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e9 5a       	subi	r30, 0xA9	; 169
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 81       	ld	r24, Z
    3adc:	91 81       	ldd	r25, Z+1	; 0x01
    3ade:	01 97       	sbiw	r24, 0x01	; 1
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <LCD_sendCommand+0x10e>
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	e9 5a       	subi	r30, 0xA9	; 169
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aec:	de 01       	movw	r26, r28
    3aee:	a7 5a       	subi	r26, 0xA7	; 167
    3af0:	bf 4f       	sbci	r27, 0xFF	; 255
    3af2:	fe 01       	movw	r30, r28
    3af4:	e7 5a       	subi	r30, 0xA7	; 167
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	80 81       	ld	r24, Z
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	11 96       	adiw	r26, 0x01	; 1
    3b00:	9c 93       	st	X, r25
    3b02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b04:	fe 01       	movw	r30, r28
    3b06:	e7 5a       	subi	r30, 0xA7	; 167
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	80 81       	ld	r24, Z
    3b0c:	91 81       	ldd	r25, Z+1	; 0x01
    3b0e:	00 97       	sbiw	r24, 0x00	; 0
    3b10:	d1 f6       	brne	.-76     	; 0x3ac6 <LCD_sendCommand+0xf6>
    3b12:	27 c0       	rjmp	.+78     	; 0x3b62 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b14:	8e 01       	movw	r16, r28
    3b16:	07 5a       	subi	r16, 0xA7	; 167
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e5 5a       	subi	r30, 0xA5	; 165
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	f8 01       	movw	r30, r16
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	80 83       	st	Z, r24
    3b36:	de 01       	movw	r26, r28
    3b38:	ab 5a       	subi	r26, 0xAB	; 171
    3b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e7 5a       	subi	r30, 0xA7	; 167
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	91 81       	ldd	r25, Z+1	; 0x01
    3b46:	8d 93       	st	X+, r24
    3b48:	9c 93       	st	X, r25
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	eb 5a       	subi	r30, 0xAB	; 171
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <LCD_sendCommand+0x184>
    3b58:	fe 01       	movw	r30, r28
    3b5a:	eb 5a       	subi	r30, 0xAB	; 171
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	62 e0       	ldi	r22, 0x02	; 2
    3b66:	41 e0       	ldi	r20, 0x01	; 1
    3b68:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	ef 5a       	subi	r30, 0xAF	; 175
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	a0 e8       	ldi	r26, 0x80	; 128
    3b78:	bf e3       	ldi	r27, 0x3F	; 63
    3b7a:	80 83       	st	Z, r24
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	a2 83       	std	Z+2, r26	; 0x02
    3b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b82:	8e 01       	movw	r16, r28
    3b84:	03 5b       	subi	r16, 0xB3	; 179
    3b86:	1f 4f       	sbci	r17, 0xFF	; 255
    3b88:	fe 01       	movw	r30, r28
    3b8a:	ef 5a       	subi	r30, 0xAF	; 175
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	60 81       	ld	r22, Z
    3b90:	71 81       	ldd	r23, Z+1	; 0x01
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	4a e7       	ldi	r20, 0x7A	; 122
    3b9c:	55 e4       	ldi	r21, 0x45	; 69
    3b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	f8 01       	movw	r30, r16
    3ba8:	80 83       	st	Z, r24
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	a2 83       	std	Z+2, r26	; 0x02
    3bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e3 5b       	subi	r30, 0xB3	; 179
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e8       	ldi	r20, 0x80	; 128
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bca:	88 23       	and	r24, r24
    3bcc:	44 f4       	brge	.+16     	; 0x3bde <LCD_sendCommand+0x20e>
		__ticks = 1;
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e5 5b       	subi	r30, 0xB5	; 181
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	80 83       	st	Z, r24
    3bdc:	64 c0       	rjmp	.+200    	; 0x3ca6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3bde:	fe 01       	movw	r30, r28
    3be0:	e3 5b       	subi	r30, 0xB3	; 179
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	3f ef       	ldi	r19, 0xFF	; 255
    3bf0:	4f e7       	ldi	r20, 0x7F	; 127
    3bf2:	57 e4       	ldi	r21, 0x47	; 71
    3bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf8:	18 16       	cp	r1, r24
    3bfa:	0c f0       	brlt	.+2      	; 0x3bfe <LCD_sendCommand+0x22e>
    3bfc:	43 c0       	rjmp	.+134    	; 0x3c84 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ef 5a       	subi	r30, 0xAF	; 175
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	60 81       	ld	r22, Z
    3c06:	71 81       	ldd	r23, Z+1	; 0x01
    3c08:	82 81       	ldd	r24, Z+2	; 0x02
    3c0a:	93 81       	ldd	r25, Z+3	; 0x03
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e2       	ldi	r20, 0x20	; 32
    3c12:	51 e4       	ldi	r21, 0x41	; 65
    3c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	8e 01       	movw	r16, r28
    3c1e:	05 5b       	subi	r16, 0xB5	; 181
    3c20:	1f 4f       	sbci	r17, 0xFF	; 255
    3c22:	bc 01       	movw	r22, r24
    3c24:	cd 01       	movw	r24, r26
    3c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	f8 01       	movw	r30, r16
    3c30:	91 83       	std	Z+1, r25	; 0x01
    3c32:	80 83       	st	Z, r24
    3c34:	1f c0       	rjmp	.+62     	; 0x3c74 <LCD_sendCommand+0x2a4>
    3c36:	fe 01       	movw	r30, r28
    3c38:	e7 5b       	subi	r30, 0xB7	; 183
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	80 e9       	ldi	r24, 0x90	; 144
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	80 83       	st	Z, r24
    3c44:	fe 01       	movw	r30, r28
    3c46:	e7 5b       	subi	r30, 0xB7	; 183
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <LCD_sendCommand+0x27e>
    3c52:	fe 01       	movw	r30, r28
    3c54:	e7 5b       	subi	r30, 0xB7	; 183
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c5c:	de 01       	movw	r26, r28
    3c5e:	a5 5b       	subi	r26, 0xB5	; 181
    3c60:	bf 4f       	sbci	r27, 0xFF	; 255
    3c62:	fe 01       	movw	r30, r28
    3c64:	e5 5b       	subi	r30, 0xB5	; 181
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	11 96       	adiw	r26, 0x01	; 1
    3c70:	9c 93       	st	X, r25
    3c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c74:	fe 01       	movw	r30, r28
    3c76:	e5 5b       	subi	r30, 0xB5	; 181
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	80 81       	ld	r24, Z
    3c7c:	91 81       	ldd	r25, Z+1	; 0x01
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	d1 f6       	brne	.-76     	; 0x3c36 <LCD_sendCommand+0x266>
    3c82:	27 c0       	rjmp	.+78     	; 0x3cd2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c84:	8e 01       	movw	r16, r28
    3c86:	05 5b       	subi	r16, 0xB5	; 181
    3c88:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	e3 5b       	subi	r30, 0xB3	; 179
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	60 81       	ld	r22, Z
    3c92:	71 81       	ldd	r23, Z+1	; 0x01
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	93 81       	ldd	r25, Z+3	; 0x03
    3c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	f8 01       	movw	r30, r16
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	80 83       	st	Z, r24
    3ca6:	de 01       	movw	r26, r28
    3ca8:	a9 5b       	subi	r26, 0xB9	; 185
    3caa:	bf 4f       	sbci	r27, 0xFF	; 255
    3cac:	fe 01       	movw	r30, r28
    3cae:	e5 5b       	subi	r30, 0xB5	; 181
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	80 81       	ld	r24, Z
    3cb4:	91 81       	ldd	r25, Z+1	; 0x01
    3cb6:	8d 93       	st	X+, r24
    3cb8:	9c 93       	st	X, r25
    3cba:	fe 01       	movw	r30, r28
    3cbc:	e9 5b       	subi	r30, 0xB9	; 185
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <LCD_sendCommand+0x2f4>
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e9 5b       	subi	r30, 0xB9	; 185
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	ed 59       	subi	r30, 0x9D	; 157
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	88 2f       	mov	r24, r24
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	80 71       	andi	r24, 0x10	; 16
    3ce0:	90 70       	andi	r25, 0x00	; 0
    3ce2:	95 95       	asr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	95 95       	asr	r25
    3ce8:	87 95       	ror	r24
    3cea:	95 95       	asr	r25
    3cec:	87 95       	ror	r24
    3cee:	95 95       	asr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	98 2f       	mov	r25, r24
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	63 e0       	ldi	r22, 0x03	; 3
    3cf8:	49 2f       	mov	r20, r25
    3cfa:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ed 59       	subi	r30, 0x9D	; 157
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	80 81       	ld	r24, Z
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	80 72       	andi	r24, 0x20	; 32
    3d0c:	90 70       	andi	r25, 0x00	; 0
    3d0e:	95 95       	asr	r25
    3d10:	87 95       	ror	r24
    3d12:	95 95       	asr	r25
    3d14:	87 95       	ror	r24
    3d16:	95 95       	asr	r25
    3d18:	87 95       	ror	r24
    3d1a:	95 95       	asr	r25
    3d1c:	87 95       	ror	r24
    3d1e:	95 95       	asr	r25
    3d20:	87 95       	ror	r24
    3d22:	98 2f       	mov	r25, r24
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	64 e0       	ldi	r22, 0x04	; 4
    3d28:	49 2f       	mov	r20, r25
    3d2a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    3d2e:	fe 01       	movw	r30, r28
    3d30:	ed 59       	subi	r30, 0x9D	; 157
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	80 81       	ld	r24, Z
    3d36:	88 2f       	mov	r24, r24
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	80 74       	andi	r24, 0x40	; 64
    3d3c:	90 70       	andi	r25, 0x00	; 0
    3d3e:	08 2e       	mov	r0, r24
    3d40:	89 2f       	mov	r24, r25
    3d42:	00 0c       	add	r0, r0
    3d44:	88 1f       	adc	r24, r24
    3d46:	99 0b       	sbc	r25, r25
    3d48:	00 0c       	add	r0, r0
    3d4a:	88 1f       	adc	r24, r24
    3d4c:	99 1f       	adc	r25, r25
    3d4e:	98 2f       	mov	r25, r24
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	65 e0       	ldi	r22, 0x05	; 5
    3d54:	49 2f       	mov	r20, r25
    3d56:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ed 59       	subi	r30, 0x9D	; 157
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	98 2f       	mov	r25, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	99 27       	eor	r25, r25
    3d68:	99 1f       	adc	r25, r25
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	66 e0       	ldi	r22, 0x06	; 6
    3d6e:	49 2f       	mov	r20, r25
    3d70:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    3d74:	fe 01       	movw	r30, r28
    3d76:	ed 5b       	subi	r30, 0xBD	; 189
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	a0 e8       	ldi	r26, 0x80	; 128
    3d80:	bf e3       	ldi	r27, 0x3F	; 63
    3d82:	80 83       	st	Z, r24
    3d84:	91 83       	std	Z+1, r25	; 0x01
    3d86:	a2 83       	std	Z+2, r26	; 0x02
    3d88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d8a:	8e 01       	movw	r16, r28
    3d8c:	01 5c       	subi	r16, 0xC1	; 193
    3d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d90:	fe 01       	movw	r30, r28
    3d92:	ed 5b       	subi	r30, 0xBD	; 189
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	4a e7       	ldi	r20, 0x7A	; 122
    3da4:	55 e4       	ldi	r21, 0x45	; 69
    3da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	f8 01       	movw	r30, r16
    3db0:	80 83       	st	Z, r24
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	a2 83       	std	Z+2, r26	; 0x02
    3db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db8:	fe 01       	movw	r30, r28
    3dba:	ff 96       	adiw	r30, 0x3f	; 63
    3dbc:	60 81       	ld	r22, Z
    3dbe:	71 81       	ldd	r23, Z+1	; 0x01
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	93 81       	ldd	r25, Z+3	; 0x03
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	40 e8       	ldi	r20, 0x80	; 128
    3dca:	5f e3       	ldi	r21, 0x3F	; 63
    3dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd0:	88 23       	and	r24, r24
    3dd2:	2c f4       	brge	.+10     	; 0x3dde <LCD_sendCommand+0x40e>
		__ticks = 1;
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	9e af       	std	Y+62, r25	; 0x3e
    3dda:	8d af       	std	Y+61, r24	; 0x3d
    3ddc:	46 c0       	rjmp	.+140    	; 0x3e6a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3dde:	fe 01       	movw	r30, r28
    3de0:	ff 96       	adiw	r30, 0x3f	; 63
    3de2:	60 81       	ld	r22, Z
    3de4:	71 81       	ldd	r23, Z+1	; 0x01
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	3f ef       	ldi	r19, 0xFF	; 255
    3dee:	4f e7       	ldi	r20, 0x7F	; 127
    3df0:	57 e4       	ldi	r21, 0x47	; 71
    3df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df6:	18 16       	cp	r1, r24
    3df8:	64 f5       	brge	.+88     	; 0x3e52 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	ed 5b       	subi	r30, 0xBD	; 189
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e2       	ldi	r20, 0x20	; 32
    3e0e:	51 e4       	ldi	r21, 0x41	; 65
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	bc 01       	movw	r22, r24
    3e1a:	cd 01       	movw	r24, r26
    3e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	9e af       	std	Y+62, r25	; 0x3e
    3e26:	8d af       	std	Y+61, r24	; 0x3d
    3e28:	0f c0       	rjmp	.+30     	; 0x3e48 <LCD_sendCommand+0x478>
    3e2a:	80 e9       	ldi	r24, 0x90	; 144
    3e2c:	91 e0       	ldi	r25, 0x01	; 1
    3e2e:	9c af       	std	Y+60, r25	; 0x3c
    3e30:	8b af       	std	Y+59, r24	; 0x3b
    3e32:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e34:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	f1 f7       	brne	.-4      	; 0x3e36 <LCD_sendCommand+0x466>
    3e3a:	9c af       	std	Y+60, r25	; 0x3c
    3e3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e40:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	9e af       	std	Y+62, r25	; 0x3e
    3e46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e48:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	69 f7       	brne	.-38     	; 0x3e2a <LCD_sendCommand+0x45a>
    3e50:	16 c0       	rjmp	.+44     	; 0x3e7e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e52:	fe 01       	movw	r30, r28
    3e54:	ff 96       	adiw	r30, 0x3f	; 63
    3e56:	60 81       	ld	r22, Z
    3e58:	71 81       	ldd	r23, Z+1	; 0x01
    3e5a:	82 81       	ldd	r24, Z+2	; 0x02
    3e5c:	93 81       	ldd	r25, Z+3	; 0x03
    3e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	9e af       	std	Y+62, r25	; 0x3e
    3e68:	8d af       	std	Y+61, r24	; 0x3d
    3e6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e6e:	9a af       	std	Y+58, r25	; 0x3a
    3e70:	89 af       	std	Y+57, r24	; 0x39
    3e72:	89 ad       	ldd	r24, Y+57	; 0x39
    3e74:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <LCD_sendCommand+0x4a6>
    3e7a:	9a af       	std	Y+58, r25	; 0x3a
    3e7c:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	62 e0       	ldi	r22, 0x02	; 2
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	a0 e8       	ldi	r26, 0x80	; 128
    3e8e:	bf e3       	ldi	r27, 0x3F	; 63
    3e90:	8d ab       	std	Y+53, r24	; 0x35
    3e92:	9e ab       	std	Y+54, r25	; 0x36
    3e94:	af ab       	std	Y+55, r26	; 0x37
    3e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e98:	6d a9       	ldd	r22, Y+53	; 0x35
    3e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4a e7       	ldi	r20, 0x7A	; 122
    3ea6:	55 e4       	ldi	r21, 0x45	; 69
    3ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	89 ab       	std	Y+49, r24	; 0x31
    3eb2:	9a ab       	std	Y+50, r25	; 0x32
    3eb4:	ab ab       	std	Y+51, r26	; 0x33
    3eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    3eba:	7a a9       	ldd	r23, Y+50	; 0x32
    3ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    3ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e8       	ldi	r20, 0x80	; 128
    3ec6:	5f e3       	ldi	r21, 0x3F	; 63
    3ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ecc:	88 23       	and	r24, r24
    3ece:	2c f4       	brge	.+10     	; 0x3eda <LCD_sendCommand+0x50a>
		__ticks = 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	98 ab       	std	Y+48, r25	; 0x30
    3ed6:	8f a7       	std	Y+47, r24	; 0x2f
    3ed8:	3f c0       	rjmp	.+126    	; 0x3f58 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3eda:	69 a9       	ldd	r22, Y+49	; 0x31
    3edc:	7a a9       	ldd	r23, Y+50	; 0x32
    3ede:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	3f ef       	ldi	r19, 0xFF	; 255
    3ee6:	4f e7       	ldi	r20, 0x7F	; 127
    3ee8:	57 e4       	ldi	r21, 0x47	; 71
    3eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eee:	18 16       	cp	r1, r24
    3ef0:	4c f5       	brge	.+82     	; 0x3f44 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e2       	ldi	r20, 0x20	; 32
    3f00:	51 e4       	ldi	r21, 0x41	; 65
    3f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	cd 01       	movw	r24, r26
    3f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	98 ab       	std	Y+48, r25	; 0x30
    3f18:	8f a7       	std	Y+47, r24	; 0x2f
    3f1a:	0f c0       	rjmp	.+30     	; 0x3f3a <LCD_sendCommand+0x56a>
    3f1c:	80 e9       	ldi	r24, 0x90	; 144
    3f1e:	91 e0       	ldi	r25, 0x01	; 1
    3f20:	9e a7       	std	Y+46, r25	; 0x2e
    3f22:	8d a7       	std	Y+45, r24	; 0x2d
    3f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f26:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <LCD_sendCommand+0x558>
    3f2c:	9e a7       	std	Y+46, r25	; 0x2e
    3f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f32:	98 a9       	ldd	r25, Y+48	; 0x30
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	98 ab       	std	Y+48, r25	; 0x30
    3f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <LCD_sendCommand+0x54c>
    3f42:	14 c0       	rjmp	.+40     	; 0x3f6c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f44:	69 a9       	ldd	r22, Y+49	; 0x31
    3f46:	7a a9       	ldd	r23, Y+50	; 0x32
    3f48:	8b a9       	ldd	r24, Y+51	; 0x33
    3f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	98 ab       	std	Y+48, r25	; 0x30
    3f56:	8f a7       	std	Y+47, r24	; 0x2f
    3f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f5c:	9c a7       	std	Y+44, r25	; 0x2c
    3f5e:	8b a7       	std	Y+43, r24	; 0x2b
    3f60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f62:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <LCD_sendCommand+0x594>
    3f68:	9c a7       	std	Y+44, r25	; 0x2c
    3f6a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	62 e0       	ldi	r22, 0x02	; 2
    3f70:	41 e0       	ldi	r20, 0x01	; 1
    3f72:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	a0 e8       	ldi	r26, 0x80	; 128
    3f7c:	bf e3       	ldi	r27, 0x3F	; 63
    3f7e:	8f a3       	std	Y+39, r24	; 0x27
    3f80:	98 a7       	std	Y+40, r25	; 0x28
    3f82:	a9 a7       	std	Y+41, r26	; 0x29
    3f84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f86:	6f a1       	ldd	r22, Y+39	; 0x27
    3f88:	78 a5       	ldd	r23, Y+40	; 0x28
    3f8a:	89 a5       	ldd	r24, Y+41	; 0x29
    3f8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	4a e7       	ldi	r20, 0x7A	; 122
    3f94:	55 e4       	ldi	r21, 0x45	; 69
    3f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	8b a3       	std	Y+35, r24	; 0x23
    3fa0:	9c a3       	std	Y+36, r25	; 0x24
    3fa2:	ad a3       	std	Y+37, r26	; 0x25
    3fa4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    3faa:	8d a1       	ldd	r24, Y+37	; 0x25
    3fac:	9e a1       	ldd	r25, Y+38	; 0x26
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	40 e8       	ldi	r20, 0x80	; 128
    3fb4:	5f e3       	ldi	r21, 0x3F	; 63
    3fb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fba:	88 23       	and	r24, r24
    3fbc:	2c f4       	brge	.+10     	; 0x3fc8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	9a a3       	std	Y+34, r25	; 0x22
    3fc4:	89 a3       	std	Y+33, r24	; 0x21
    3fc6:	3f c0       	rjmp	.+126    	; 0x4046 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3fc8:	6b a1       	ldd	r22, Y+35	; 0x23
    3fca:	7c a1       	ldd	r23, Y+36	; 0x24
    3fcc:	8d a1       	ldd	r24, Y+37	; 0x25
    3fce:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	3f ef       	ldi	r19, 0xFF	; 255
    3fd4:	4f e7       	ldi	r20, 0x7F	; 127
    3fd6:	57 e4       	ldi	r21, 0x47	; 71
    3fd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fdc:	18 16       	cp	r1, r24
    3fde:	4c f5       	brge	.+82     	; 0x4032 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	40 e2       	ldi	r20, 0x20	; 32
    3fee:	51 e4       	ldi	r21, 0x41	; 65
    3ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	bc 01       	movw	r22, r24
    3ffa:	cd 01       	movw	r24, r26
    3ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	9a a3       	std	Y+34, r25	; 0x22
    4006:	89 a3       	std	Y+33, r24	; 0x21
    4008:	0f c0       	rjmp	.+30     	; 0x4028 <LCD_sendCommand+0x658>
    400a:	80 e9       	ldi	r24, 0x90	; 144
    400c:	91 e0       	ldi	r25, 0x01	; 1
    400e:	98 a3       	std	Y+32, r25	; 0x20
    4010:	8f 8f       	std	Y+31, r24	; 0x1f
    4012:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4014:	98 a1       	ldd	r25, Y+32	; 0x20
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <LCD_sendCommand+0x646>
    401a:	98 a3       	std	Y+32, r25	; 0x20
    401c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401e:	89 a1       	ldd	r24, Y+33	; 0x21
    4020:	9a a1       	ldd	r25, Y+34	; 0x22
    4022:	01 97       	sbiw	r24, 0x01	; 1
    4024:	9a a3       	std	Y+34, r25	; 0x22
    4026:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4028:	89 a1       	ldd	r24, Y+33	; 0x21
    402a:	9a a1       	ldd	r25, Y+34	; 0x22
    402c:	00 97       	sbiw	r24, 0x00	; 0
    402e:	69 f7       	brne	.-38     	; 0x400a <LCD_sendCommand+0x63a>
    4030:	14 c0       	rjmp	.+40     	; 0x405a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4032:	6b a1       	ldd	r22, Y+35	; 0x23
    4034:	7c a1       	ldd	r23, Y+36	; 0x24
    4036:	8d a1       	ldd	r24, Y+37	; 0x25
    4038:	9e a1       	ldd	r25, Y+38	; 0x26
    403a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	9a a3       	std	Y+34, r25	; 0x22
    4044:	89 a3       	std	Y+33, r24	; 0x21
    4046:	89 a1       	ldd	r24, Y+33	; 0x21
    4048:	9a a1       	ldd	r25, Y+34	; 0x22
    404a:	9e 8f       	std	Y+30, r25	; 0x1e
    404c:	8d 8f       	std	Y+29, r24	; 0x1d
    404e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4050:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4052:	01 97       	sbiw	r24, 0x01	; 1
    4054:	f1 f7       	brne	.-4      	; 0x4052 <LCD_sendCommand+0x682>
    4056:	9e 8f       	std	Y+30, r25	; 0x1e
    4058:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    405a:	fe 01       	movw	r30, r28
    405c:	ed 59       	subi	r30, 0x9D	; 157
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 81       	ld	r24, Z
    4062:	98 2f       	mov	r25, r24
    4064:	91 70       	andi	r25, 0x01	; 1
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	63 e0       	ldi	r22, 0x03	; 3
    406a:	49 2f       	mov	r20, r25
    406c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    4070:	fe 01       	movw	r30, r28
    4072:	ed 59       	subi	r30, 0x9D	; 157
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	80 81       	ld	r24, Z
    4078:	88 2f       	mov	r24, r24
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	82 70       	andi	r24, 0x02	; 2
    407e:	90 70       	andi	r25, 0x00	; 0
    4080:	95 95       	asr	r25
    4082:	87 95       	ror	r24
    4084:	98 2f       	mov	r25, r24
    4086:	80 e0       	ldi	r24, 0x00	; 0
    4088:	64 e0       	ldi	r22, 0x04	; 4
    408a:	49 2f       	mov	r20, r25
    408c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    4090:	fe 01       	movw	r30, r28
    4092:	ed 59       	subi	r30, 0x9D	; 157
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 81       	ld	r24, Z
    4098:	88 2f       	mov	r24, r24
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	84 70       	andi	r24, 0x04	; 4
    409e:	90 70       	andi	r25, 0x00	; 0
    40a0:	95 95       	asr	r25
    40a2:	87 95       	ror	r24
    40a4:	95 95       	asr	r25
    40a6:	87 95       	ror	r24
    40a8:	98 2f       	mov	r25, r24
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	65 e0       	ldi	r22, 0x05	; 5
    40ae:	49 2f       	mov	r20, r25
    40b0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    40b4:	fe 01       	movw	r30, r28
    40b6:	ed 59       	subi	r30, 0x9D	; 157
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	80 81       	ld	r24, Z
    40bc:	88 2f       	mov	r24, r24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	88 70       	andi	r24, 0x08	; 8
    40c2:	90 70       	andi	r25, 0x00	; 0
    40c4:	95 95       	asr	r25
    40c6:	87 95       	ror	r24
    40c8:	95 95       	asr	r25
    40ca:	87 95       	ror	r24
    40cc:	95 95       	asr	r25
    40ce:	87 95       	ror	r24
    40d0:	98 2f       	mov	r25, r24
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	66 e0       	ldi	r22, 0x06	; 6
    40d6:	49 2f       	mov	r20, r25
    40d8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	a0 e8       	ldi	r26, 0x80	; 128
    40e2:	bf e3       	ldi	r27, 0x3F	; 63
    40e4:	89 8f       	std	Y+25, r24	; 0x19
    40e6:	9a 8f       	std	Y+26, r25	; 0x1a
    40e8:	ab 8f       	std	Y+27, r26	; 0x1b
    40ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ec:	69 8d       	ldd	r22, Y+25	; 0x19
    40ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	4a e7       	ldi	r20, 0x7A	; 122
    40fa:	55 e4       	ldi	r21, 0x45	; 69
    40fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	8d 8b       	std	Y+21, r24	; 0x15
    4106:	9e 8b       	std	Y+22, r25	; 0x16
    4108:	af 8b       	std	Y+23, r26	; 0x17
    410a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    410c:	6d 89       	ldd	r22, Y+21	; 0x15
    410e:	7e 89       	ldd	r23, Y+22	; 0x16
    4110:	8f 89       	ldd	r24, Y+23	; 0x17
    4112:	98 8d       	ldd	r25, Y+24	; 0x18
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	40 e8       	ldi	r20, 0x80	; 128
    411a:	5f e3       	ldi	r21, 0x3F	; 63
    411c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4120:	88 23       	and	r24, r24
    4122:	2c f4       	brge	.+10     	; 0x412e <LCD_sendCommand+0x75e>
		__ticks = 1;
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	9c 8b       	std	Y+20, r25	; 0x14
    412a:	8b 8b       	std	Y+19, r24	; 0x13
    412c:	3f c0       	rjmp	.+126    	; 0x41ac <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    412e:	6d 89       	ldd	r22, Y+21	; 0x15
    4130:	7e 89       	ldd	r23, Y+22	; 0x16
    4132:	8f 89       	ldd	r24, Y+23	; 0x17
    4134:	98 8d       	ldd	r25, Y+24	; 0x18
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	3f ef       	ldi	r19, 0xFF	; 255
    413a:	4f e7       	ldi	r20, 0x7F	; 127
    413c:	57 e4       	ldi	r21, 0x47	; 71
    413e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4142:	18 16       	cp	r1, r24
    4144:	4c f5       	brge	.+82     	; 0x4198 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4146:	69 8d       	ldd	r22, Y+25	; 0x19
    4148:	7a 8d       	ldd	r23, Y+26	; 0x1a
    414a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    414c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e2       	ldi	r20, 0x20	; 32
    4154:	51 e4       	ldi	r21, 0x41	; 65
    4156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	9c 8b       	std	Y+20, r25	; 0x14
    416c:	8b 8b       	std	Y+19, r24	; 0x13
    416e:	0f c0       	rjmp	.+30     	; 0x418e <LCD_sendCommand+0x7be>
    4170:	80 e9       	ldi	r24, 0x90	; 144
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	9a 8b       	std	Y+18, r25	; 0x12
    4176:	89 8b       	std	Y+17, r24	; 0x11
    4178:	89 89       	ldd	r24, Y+17	; 0x11
    417a:	9a 89       	ldd	r25, Y+18	; 0x12
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <LCD_sendCommand+0x7ac>
    4180:	9a 8b       	std	Y+18, r25	; 0x12
    4182:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4184:	8b 89       	ldd	r24, Y+19	; 0x13
    4186:	9c 89       	ldd	r25, Y+20	; 0x14
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	9c 8b       	std	Y+20, r25	; 0x14
    418c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    418e:	8b 89       	ldd	r24, Y+19	; 0x13
    4190:	9c 89       	ldd	r25, Y+20	; 0x14
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	69 f7       	brne	.-38     	; 0x4170 <LCD_sendCommand+0x7a0>
    4196:	14 c0       	rjmp	.+40     	; 0x41c0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4198:	6d 89       	ldd	r22, Y+21	; 0x15
    419a:	7e 89       	ldd	r23, Y+22	; 0x16
    419c:	8f 89       	ldd	r24, Y+23	; 0x17
    419e:	98 8d       	ldd	r25, Y+24	; 0x18
    41a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	9c 8b       	std	Y+20, r25	; 0x14
    41aa:	8b 8b       	std	Y+19, r24	; 0x13
    41ac:	8b 89       	ldd	r24, Y+19	; 0x13
    41ae:	9c 89       	ldd	r25, Y+20	; 0x14
    41b0:	98 8b       	std	Y+16, r25	; 0x10
    41b2:	8f 87       	std	Y+15, r24	; 0x0f
    41b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b6:	98 89       	ldd	r25, Y+16	; 0x10
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <LCD_sendCommand+0x7e8>
    41bc:	98 8b       	std	Y+16, r25	; 0x10
    41be:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	62 e0       	ldi	r22, 0x02	; 2
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	a0 e8       	ldi	r26, 0x80	; 128
    41d0:	bf e3       	ldi	r27, 0x3F	; 63
    41d2:	8b 87       	std	Y+11, r24	; 0x0b
    41d4:	9c 87       	std	Y+12, r25	; 0x0c
    41d6:	ad 87       	std	Y+13, r26	; 0x0d
    41d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41da:	6b 85       	ldd	r22, Y+11	; 0x0b
    41dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41de:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	4a e7       	ldi	r20, 0x7A	; 122
    41e8:	55 e4       	ldi	r21, 0x45	; 69
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	8f 83       	std	Y+7, r24	; 0x07
    41f4:	98 87       	std	Y+8, r25	; 0x08
    41f6:	a9 87       	std	Y+9, r26	; 0x09
    41f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41fa:	6f 81       	ldd	r22, Y+7	; 0x07
    41fc:	78 85       	ldd	r23, Y+8	; 0x08
    41fe:	89 85       	ldd	r24, Y+9	; 0x09
    4200:	9a 85       	ldd	r25, Y+10	; 0x0a
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e8       	ldi	r20, 0x80	; 128
    4208:	5f e3       	ldi	r21, 0x3F	; 63
    420a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    420e:	88 23       	and	r24, r24
    4210:	2c f4       	brge	.+10     	; 0x421c <LCD_sendCommand+0x84c>
		__ticks = 1;
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	9e 83       	std	Y+6, r25	; 0x06
    4218:	8d 83       	std	Y+5, r24	; 0x05
    421a:	3f c0       	rjmp	.+126    	; 0x429a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    421c:	6f 81       	ldd	r22, Y+7	; 0x07
    421e:	78 85       	ldd	r23, Y+8	; 0x08
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	9a 85       	ldd	r25, Y+10	; 0x0a
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	3f ef       	ldi	r19, 0xFF	; 255
    4228:	4f e7       	ldi	r20, 0x7F	; 127
    422a:	57 e4       	ldi	r21, 0x47	; 71
    422c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4230:	18 16       	cp	r1, r24
    4232:	4c f5       	brge	.+82     	; 0x4286 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4234:	6b 85       	ldd	r22, Y+11	; 0x0b
    4236:	7c 85       	ldd	r23, Y+12	; 0x0c
    4238:	8d 85       	ldd	r24, Y+13	; 0x0d
    423a:	9e 85       	ldd	r25, Y+14	; 0x0e
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	40 e2       	ldi	r20, 0x20	; 32
    4242:	51 e4       	ldi	r21, 0x41	; 65
    4244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	9e 83       	std	Y+6, r25	; 0x06
    425a:	8d 83       	std	Y+5, r24	; 0x05
    425c:	0f c0       	rjmp	.+30     	; 0x427c <LCD_sendCommand+0x8ac>
    425e:	80 e9       	ldi	r24, 0x90	; 144
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	9c 83       	std	Y+4, r25	; 0x04
    4264:	8b 83       	std	Y+3, r24	; 0x03
    4266:	8b 81       	ldd	r24, Y+3	; 0x03
    4268:	9c 81       	ldd	r25, Y+4	; 0x04
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <LCD_sendCommand+0x89a>
    426e:	9c 83       	std	Y+4, r25	; 0x04
    4270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	9e 81       	ldd	r25, Y+6	; 0x06
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	9e 83       	std	Y+6, r25	; 0x06
    427a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	9e 81       	ldd	r25, Y+6	; 0x06
    4280:	00 97       	sbiw	r24, 0x00	; 0
    4282:	69 f7       	brne	.-38     	; 0x425e <LCD_sendCommand+0x88e>
    4284:	14 c0       	rjmp	.+40     	; 0x42ae <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4286:	6f 81       	ldd	r22, Y+7	; 0x07
    4288:	78 85       	ldd	r23, Y+8	; 0x08
    428a:	89 85       	ldd	r24, Y+9	; 0x09
    428c:	9a 85       	ldd	r25, Y+10	; 0x0a
    428e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	9e 83       	std	Y+6, r25	; 0x06
    4298:	8d 83       	std	Y+5, r24	; 0x05
    429a:	8d 81       	ldd	r24, Y+5	; 0x05
    429c:	9e 81       	ldd	r25, Y+6	; 0x06
    429e:	9a 83       	std	Y+2, r25	; 0x02
    42a0:	89 83       	std	Y+1, r24	; 0x01
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	f1 f7       	brne	.-4      	; 0x42a6 <LCD_sendCommand+0x8d6>
    42aa:	9a 83       	std	Y+2, r25	; 0x02
    42ac:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, command);  /* Output the command to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    42ae:	cd 59       	subi	r28, 0x9D	; 157
    42b0:	df 4f       	sbci	r29, 0xFF	; 255
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	1f 91       	pop	r17
    42c2:	0f 91       	pop	r16
    42c4:	08 95       	ret

000042c6 <LCD_displayCharacter>:
 * Display a character on the LCD.
 * Parameters  :
 * - data: The character to be displayed.
 */
void LCD_displayCharacter(uint8 data)
{
    42c6:	0f 93       	push	r16
    42c8:	1f 93       	push	r17
    42ca:	df 93       	push	r29
    42cc:	cf 93       	push	r28
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62
    42d2:	c3 56       	subi	r28, 0x63	; 99
    42d4:	d0 40       	sbci	r29, 0x00	; 0
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	fe 01       	movw	r30, r28
    42e2:	ed 59       	subi	r30, 0x9D	; 157
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);  /* Data Mode (RS = 1) */
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	61 e0       	ldi	r22, 0x01	; 1
    42ec:	41 e0       	ldi	r20, 0x01	; 1
    42ee:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    42f2:	fe 01       	movw	r30, r28
    42f4:	e1 5a       	subi	r30, 0xA1	; 161
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	a0 e8       	ldi	r26, 0x80	; 128
    42fe:	bf e3       	ldi	r27, 0x3F	; 63
    4300:	80 83       	st	Z, r24
    4302:	91 83       	std	Z+1, r25	; 0x01
    4304:	a2 83       	std	Z+2, r26	; 0x02
    4306:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4308:	8e 01       	movw	r16, r28
    430a:	05 5a       	subi	r16, 0xA5	; 165
    430c:	1f 4f       	sbci	r17, 0xFF	; 255
    430e:	fe 01       	movw	r30, r28
    4310:	e1 5a       	subi	r30, 0xA1	; 161
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	60 81       	ld	r22, Z
    4316:	71 81       	ldd	r23, Z+1	; 0x01
    4318:	82 81       	ldd	r24, Z+2	; 0x02
    431a:	93 81       	ldd	r25, Z+3	; 0x03
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	4a e7       	ldi	r20, 0x7A	; 122
    4322:	55 e4       	ldi	r21, 0x45	; 69
    4324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	f8 01       	movw	r30, r16
    432e:	80 83       	st	Z, r24
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	a2 83       	std	Z+2, r26	; 0x02
    4334:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4336:	fe 01       	movw	r30, r28
    4338:	e5 5a       	subi	r30, 0xA5	; 165
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	60 81       	ld	r22, Z
    433e:	71 81       	ldd	r23, Z+1	; 0x01
    4340:	82 81       	ldd	r24, Z+2	; 0x02
    4342:	93 81       	ldd	r25, Z+3	; 0x03
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e8       	ldi	r20, 0x80	; 128
    434a:	5f e3       	ldi	r21, 0x3F	; 63
    434c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4350:	88 23       	and	r24, r24
    4352:	44 f4       	brge	.+16     	; 0x4364 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    4354:	fe 01       	movw	r30, r28
    4356:	e7 5a       	subi	r30, 0xA7	; 167
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	91 83       	std	Z+1, r25	; 0x01
    4360:	80 83       	st	Z, r24
    4362:	64 c0       	rjmp	.+200    	; 0x442c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    4364:	fe 01       	movw	r30, r28
    4366:	e5 5a       	subi	r30, 0xA5	; 165
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	60 81       	ld	r22, Z
    436c:	71 81       	ldd	r23, Z+1	; 0x01
    436e:	82 81       	ldd	r24, Z+2	; 0x02
    4370:	93 81       	ldd	r25, Z+3	; 0x03
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	3f ef       	ldi	r19, 0xFF	; 255
    4376:	4f e7       	ldi	r20, 0x7F	; 127
    4378:	57 e4       	ldi	r21, 0x47	; 71
    437a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    437e:	18 16       	cp	r1, r24
    4380:	0c f0       	brlt	.+2      	; 0x4384 <LCD_displayCharacter+0xbe>
    4382:	43 c0       	rjmp	.+134    	; 0x440a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4384:	fe 01       	movw	r30, r28
    4386:	e1 5a       	subi	r30, 0xA1	; 161
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	60 81       	ld	r22, Z
    438c:	71 81       	ldd	r23, Z+1	; 0x01
    438e:	82 81       	ldd	r24, Z+2	; 0x02
    4390:	93 81       	ldd	r25, Z+3	; 0x03
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e2       	ldi	r20, 0x20	; 32
    4398:	51 e4       	ldi	r21, 0x41	; 65
    439a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	8e 01       	movw	r16, r28
    43a4:	07 5a       	subi	r16, 0xA7	; 167
    43a6:	1f 4f       	sbci	r17, 0xFF	; 255
    43a8:	bc 01       	movw	r22, r24
    43aa:	cd 01       	movw	r24, r26
    43ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	f8 01       	movw	r30, r16
    43b6:	91 83       	std	Z+1, r25	; 0x01
    43b8:	80 83       	st	Z, r24
    43ba:	1f c0       	rjmp	.+62     	; 0x43fa <LCD_displayCharacter+0x134>
    43bc:	fe 01       	movw	r30, r28
    43be:	e9 5a       	subi	r30, 0xA9	; 169
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	80 e9       	ldi	r24, 0x90	; 144
    43c4:	91 e0       	ldi	r25, 0x01	; 1
    43c6:	91 83       	std	Z+1, r25	; 0x01
    43c8:	80 83       	st	Z, r24
    43ca:	fe 01       	movw	r30, r28
    43cc:	e9 5a       	subi	r30, 0xA9	; 169
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	80 81       	ld	r24, Z
    43d2:	91 81       	ldd	r25, Z+1	; 0x01
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <LCD_displayCharacter+0x10e>
    43d8:	fe 01       	movw	r30, r28
    43da:	e9 5a       	subi	r30, 0xA9	; 169
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e2:	de 01       	movw	r26, r28
    43e4:	a7 5a       	subi	r26, 0xA7	; 167
    43e6:	bf 4f       	sbci	r27, 0xFF	; 255
    43e8:	fe 01       	movw	r30, r28
    43ea:	e7 5a       	subi	r30, 0xA7	; 167
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	80 81       	ld	r24, Z
    43f0:	91 81       	ldd	r25, Z+1	; 0x01
    43f2:	01 97       	sbiw	r24, 0x01	; 1
    43f4:	11 96       	adiw	r26, 0x01	; 1
    43f6:	9c 93       	st	X, r25
    43f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fa:	fe 01       	movw	r30, r28
    43fc:	e7 5a       	subi	r30, 0xA7	; 167
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	80 81       	ld	r24, Z
    4402:	91 81       	ldd	r25, Z+1	; 0x01
    4404:	00 97       	sbiw	r24, 0x00	; 0
    4406:	d1 f6       	brne	.-76     	; 0x43bc <LCD_displayCharacter+0xf6>
    4408:	27 c0       	rjmp	.+78     	; 0x4458 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    440a:	8e 01       	movw	r16, r28
    440c:	07 5a       	subi	r16, 0xA7	; 167
    440e:	1f 4f       	sbci	r17, 0xFF	; 255
    4410:	fe 01       	movw	r30, r28
    4412:	e5 5a       	subi	r30, 0xA5	; 165
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	60 81       	ld	r22, Z
    4418:	71 81       	ldd	r23, Z+1	; 0x01
    441a:	82 81       	ldd	r24, Z+2	; 0x02
    441c:	93 81       	ldd	r25, Z+3	; 0x03
    441e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	f8 01       	movw	r30, r16
    4428:	91 83       	std	Z+1, r25	; 0x01
    442a:	80 83       	st	Z, r24
    442c:	de 01       	movw	r26, r28
    442e:	ab 5a       	subi	r26, 0xAB	; 171
    4430:	bf 4f       	sbci	r27, 0xFF	; 255
    4432:	fe 01       	movw	r30, r28
    4434:	e7 5a       	subi	r30, 0xA7	; 167
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	80 81       	ld	r24, Z
    443a:	91 81       	ldd	r25, Z+1	; 0x01
    443c:	8d 93       	st	X+, r24
    443e:	9c 93       	st	X, r25
    4440:	fe 01       	movw	r30, r28
    4442:	eb 5a       	subi	r30, 0xAB	; 171
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	80 81       	ld	r24, Z
    4448:	91 81       	ldd	r25, Z+1	; 0x01
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <LCD_displayCharacter+0x184>
    444e:	fe 01       	movw	r30, r28
    4450:	eb 5a       	subi	r30, 0xAB	; 171
    4452:	ff 4f       	sbci	r31, 0xFF	; 255
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	62 e0       	ldi	r22, 0x02	; 2
    445c:	41 e0       	ldi	r20, 0x01	; 1
    445e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    4462:	fe 01       	movw	r30, r28
    4464:	ef 5a       	subi	r30, 0xAF	; 175
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	a0 e8       	ldi	r26, 0x80	; 128
    446e:	bf e3       	ldi	r27, 0x3F	; 63
    4470:	80 83       	st	Z, r24
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	a2 83       	std	Z+2, r26	; 0x02
    4476:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4478:	8e 01       	movw	r16, r28
    447a:	03 5b       	subi	r16, 0xB3	; 179
    447c:	1f 4f       	sbci	r17, 0xFF	; 255
    447e:	fe 01       	movw	r30, r28
    4480:	ef 5a       	subi	r30, 0xAF	; 175
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	60 81       	ld	r22, Z
    4486:	71 81       	ldd	r23, Z+1	; 0x01
    4488:	82 81       	ldd	r24, Z+2	; 0x02
    448a:	93 81       	ldd	r25, Z+3	; 0x03
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	4a e7       	ldi	r20, 0x7A	; 122
    4492:	55 e4       	ldi	r21, 0x45	; 69
    4494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	f8 01       	movw	r30, r16
    449e:	80 83       	st	Z, r24
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	a2 83       	std	Z+2, r26	; 0x02
    44a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44a6:	fe 01       	movw	r30, r28
    44a8:	e3 5b       	subi	r30, 0xB3	; 179
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	60 81       	ld	r22, Z
    44ae:	71 81       	ldd	r23, Z+1	; 0x01
    44b0:	82 81       	ldd	r24, Z+2	; 0x02
    44b2:	93 81       	ldd	r25, Z+3	; 0x03
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 e8       	ldi	r20, 0x80	; 128
    44ba:	5f e3       	ldi	r21, 0x3F	; 63
    44bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44c0:	88 23       	and	r24, r24
    44c2:	44 f4       	brge	.+16     	; 0x44d4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    44c4:	fe 01       	movw	r30, r28
    44c6:	e5 5b       	subi	r30, 0xB5	; 181
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	80 83       	st	Z, r24
    44d2:	64 c0       	rjmp	.+200    	; 0x459c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    44d4:	fe 01       	movw	r30, r28
    44d6:	e3 5b       	subi	r30, 0xB3	; 179
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	60 81       	ld	r22, Z
    44dc:	71 81       	ldd	r23, Z+1	; 0x01
    44de:	82 81       	ldd	r24, Z+2	; 0x02
    44e0:	93 81       	ldd	r25, Z+3	; 0x03
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	3f ef       	ldi	r19, 0xFF	; 255
    44e6:	4f e7       	ldi	r20, 0x7F	; 127
    44e8:	57 e4       	ldi	r21, 0x47	; 71
    44ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44ee:	18 16       	cp	r1, r24
    44f0:	0c f0       	brlt	.+2      	; 0x44f4 <LCD_displayCharacter+0x22e>
    44f2:	43 c0       	rjmp	.+134    	; 0x457a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f4:	fe 01       	movw	r30, r28
    44f6:	ef 5a       	subi	r30, 0xAF	; 175
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	60 81       	ld	r22, Z
    44fc:	71 81       	ldd	r23, Z+1	; 0x01
    44fe:	82 81       	ldd	r24, Z+2	; 0x02
    4500:	93 81       	ldd	r25, Z+3	; 0x03
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e2       	ldi	r20, 0x20	; 32
    4508:	51 e4       	ldi	r21, 0x41	; 65
    450a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	8e 01       	movw	r16, r28
    4514:	05 5b       	subi	r16, 0xB5	; 181
    4516:	1f 4f       	sbci	r17, 0xFF	; 255
    4518:	bc 01       	movw	r22, r24
    451a:	cd 01       	movw	r24, r26
    451c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	f8 01       	movw	r30, r16
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	80 83       	st	Z, r24
    452a:	1f c0       	rjmp	.+62     	; 0x456a <LCD_displayCharacter+0x2a4>
    452c:	fe 01       	movw	r30, r28
    452e:	e7 5b       	subi	r30, 0xB7	; 183
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	80 e9       	ldi	r24, 0x90	; 144
    4534:	91 e0       	ldi	r25, 0x01	; 1
    4536:	91 83       	std	Z+1, r25	; 0x01
    4538:	80 83       	st	Z, r24
    453a:	fe 01       	movw	r30, r28
    453c:	e7 5b       	subi	r30, 0xB7	; 183
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 81       	ld	r24, Z
    4542:	91 81       	ldd	r25, Z+1	; 0x01
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	f1 f7       	brne	.-4      	; 0x4544 <LCD_displayCharacter+0x27e>
    4548:	fe 01       	movw	r30, r28
    454a:	e7 5b       	subi	r30, 0xB7	; 183
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	91 83       	std	Z+1, r25	; 0x01
    4550:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4552:	de 01       	movw	r26, r28
    4554:	a5 5b       	subi	r26, 0xB5	; 181
    4556:	bf 4f       	sbci	r27, 0xFF	; 255
    4558:	fe 01       	movw	r30, r28
    455a:	e5 5b       	subi	r30, 0xB5	; 181
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	80 81       	ld	r24, Z
    4560:	91 81       	ldd	r25, Z+1	; 0x01
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	11 96       	adiw	r26, 0x01	; 1
    4566:	9c 93       	st	X, r25
    4568:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456a:	fe 01       	movw	r30, r28
    456c:	e5 5b       	subi	r30, 0xB5	; 181
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
    4574:	00 97       	sbiw	r24, 0x00	; 0
    4576:	d1 f6       	brne	.-76     	; 0x452c <LCD_displayCharacter+0x266>
    4578:	27 c0       	rjmp	.+78     	; 0x45c8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    457a:	8e 01       	movw	r16, r28
    457c:	05 5b       	subi	r16, 0xB5	; 181
    457e:	1f 4f       	sbci	r17, 0xFF	; 255
    4580:	fe 01       	movw	r30, r28
    4582:	e3 5b       	subi	r30, 0xB3	; 179
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	60 81       	ld	r22, Z
    4588:	71 81       	ldd	r23, Z+1	; 0x01
    458a:	82 81       	ldd	r24, Z+2	; 0x02
    458c:	93 81       	ldd	r25, Z+3	; 0x03
    458e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	f8 01       	movw	r30, r16
    4598:	91 83       	std	Z+1, r25	; 0x01
    459a:	80 83       	st	Z, r24
    459c:	de 01       	movw	r26, r28
    459e:	a9 5b       	subi	r26, 0xB9	; 185
    45a0:	bf 4f       	sbci	r27, 0xFF	; 255
    45a2:	fe 01       	movw	r30, r28
    45a4:	e5 5b       	subi	r30, 0xB5	; 181
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	80 81       	ld	r24, Z
    45aa:	91 81       	ldd	r25, Z+1	; 0x01
    45ac:	8d 93       	st	X+, r24
    45ae:	9c 93       	st	X, r25
    45b0:	fe 01       	movw	r30, r28
    45b2:	e9 5b       	subi	r30, 0xB9	; 185
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	80 81       	ld	r24, Z
    45b8:	91 81       	ldd	r25, Z+1	; 0x01
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	f1 f7       	brne	.-4      	; 0x45ba <LCD_displayCharacter+0x2f4>
    45be:	fe 01       	movw	r30, r28
    45c0:	e9 5b       	subi	r30, 0xB9	; 185
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	91 83       	std	Z+1, r25	; 0x01
    45c6:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    45c8:	fe 01       	movw	r30, r28
    45ca:	ed 59       	subi	r30, 0x9D	; 157
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	80 81       	ld	r24, Z
    45d0:	88 2f       	mov	r24, r24
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	80 71       	andi	r24, 0x10	; 16
    45d6:	90 70       	andi	r25, 0x00	; 0
    45d8:	95 95       	asr	r25
    45da:	87 95       	ror	r24
    45dc:	95 95       	asr	r25
    45de:	87 95       	ror	r24
    45e0:	95 95       	asr	r25
    45e2:	87 95       	ror	r24
    45e4:	95 95       	asr	r25
    45e6:	87 95       	ror	r24
    45e8:	98 2f       	mov	r25, r24
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	63 e0       	ldi	r22, 0x03	; 3
    45ee:	49 2f       	mov	r20, r25
    45f0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    45f4:	fe 01       	movw	r30, r28
    45f6:	ed 59       	subi	r30, 0x9D	; 157
    45f8:	ff 4f       	sbci	r31, 0xFF	; 255
    45fa:	80 81       	ld	r24, Z
    45fc:	88 2f       	mov	r24, r24
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	80 72       	andi	r24, 0x20	; 32
    4602:	90 70       	andi	r25, 0x00	; 0
    4604:	95 95       	asr	r25
    4606:	87 95       	ror	r24
    4608:	95 95       	asr	r25
    460a:	87 95       	ror	r24
    460c:	95 95       	asr	r25
    460e:	87 95       	ror	r24
    4610:	95 95       	asr	r25
    4612:	87 95       	ror	r24
    4614:	95 95       	asr	r25
    4616:	87 95       	ror	r24
    4618:	98 2f       	mov	r25, r24
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	64 e0       	ldi	r22, 0x04	; 4
    461e:	49 2f       	mov	r20, r25
    4620:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    4624:	fe 01       	movw	r30, r28
    4626:	ed 59       	subi	r30, 0x9D	; 157
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	80 81       	ld	r24, Z
    462c:	88 2f       	mov	r24, r24
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	80 74       	andi	r24, 0x40	; 64
    4632:	90 70       	andi	r25, 0x00	; 0
    4634:	08 2e       	mov	r0, r24
    4636:	89 2f       	mov	r24, r25
    4638:	00 0c       	add	r0, r0
    463a:	88 1f       	adc	r24, r24
    463c:	99 0b       	sbc	r25, r25
    463e:	00 0c       	add	r0, r0
    4640:	88 1f       	adc	r24, r24
    4642:	99 1f       	adc	r25, r25
    4644:	98 2f       	mov	r25, r24
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	65 e0       	ldi	r22, 0x05	; 5
    464a:	49 2f       	mov	r20, r25
    464c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    4650:	fe 01       	movw	r30, r28
    4652:	ed 59       	subi	r30, 0x9D	; 157
    4654:	ff 4f       	sbci	r31, 0xFF	; 255
    4656:	80 81       	ld	r24, Z
    4658:	98 2f       	mov	r25, r24
    465a:	99 1f       	adc	r25, r25
    465c:	99 27       	eor	r25, r25
    465e:	99 1f       	adc	r25, r25
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	66 e0       	ldi	r22, 0x06	; 6
    4664:	49 2f       	mov	r20, r25
    4666:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    466a:	fe 01       	movw	r30, r28
    466c:	ed 5b       	subi	r30, 0xBD	; 189
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	a0 e8       	ldi	r26, 0x80	; 128
    4676:	bf e3       	ldi	r27, 0x3F	; 63
    4678:	80 83       	st	Z, r24
    467a:	91 83       	std	Z+1, r25	; 0x01
    467c:	a2 83       	std	Z+2, r26	; 0x02
    467e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4680:	8e 01       	movw	r16, r28
    4682:	01 5c       	subi	r16, 0xC1	; 193
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	ed 5b       	subi	r30, 0xBD	; 189
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a e7       	ldi	r20, 0x7A	; 122
    469a:	55 e4       	ldi	r21, 0x45	; 69
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	f8 01       	movw	r30, r16
    46a6:	80 83       	st	Z, r24
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	a2 83       	std	Z+2, r26	; 0x02
    46ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46ae:	fe 01       	movw	r30, r28
    46b0:	ff 96       	adiw	r30, 0x3f	; 63
    46b2:	60 81       	ld	r22, Z
    46b4:	71 81       	ldd	r23, Z+1	; 0x01
    46b6:	82 81       	ldd	r24, Z+2	; 0x02
    46b8:	93 81       	ldd	r25, Z+3	; 0x03
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	40 e8       	ldi	r20, 0x80	; 128
    46c0:	5f e3       	ldi	r21, 0x3F	; 63
    46c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c6:	88 23       	and	r24, r24
    46c8:	2c f4       	brge	.+10     	; 0x46d4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    46ca:	81 e0       	ldi	r24, 0x01	; 1
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	9e af       	std	Y+62, r25	; 0x3e
    46d0:	8d af       	std	Y+61, r24	; 0x3d
    46d2:	46 c0       	rjmp	.+140    	; 0x4760 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    46d4:	fe 01       	movw	r30, r28
    46d6:	ff 96       	adiw	r30, 0x3f	; 63
    46d8:	60 81       	ld	r22, Z
    46da:	71 81       	ldd	r23, Z+1	; 0x01
    46dc:	82 81       	ldd	r24, Z+2	; 0x02
    46de:	93 81       	ldd	r25, Z+3	; 0x03
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	3f ef       	ldi	r19, 0xFF	; 255
    46e4:	4f e7       	ldi	r20, 0x7F	; 127
    46e6:	57 e4       	ldi	r21, 0x47	; 71
    46e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ec:	18 16       	cp	r1, r24
    46ee:	64 f5       	brge	.+88     	; 0x4748 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f0:	fe 01       	movw	r30, r28
    46f2:	ed 5b       	subi	r30, 0xBD	; 189
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e2       	ldi	r20, 0x20	; 32
    4704:	51 e4       	ldi	r21, 0x41	; 65
    4706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	bc 01       	movw	r22, r24
    4710:	cd 01       	movw	r24, r26
    4712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	9e af       	std	Y+62, r25	; 0x3e
    471c:	8d af       	std	Y+61, r24	; 0x3d
    471e:	0f c0       	rjmp	.+30     	; 0x473e <LCD_displayCharacter+0x478>
    4720:	80 e9       	ldi	r24, 0x90	; 144
    4722:	91 e0       	ldi	r25, 0x01	; 1
    4724:	9c af       	std	Y+60, r25	; 0x3c
    4726:	8b af       	std	Y+59, r24	; 0x3b
    4728:	8b ad       	ldd	r24, Y+59	; 0x3b
    472a:	9c ad       	ldd	r25, Y+60	; 0x3c
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <LCD_displayCharacter+0x466>
    4730:	9c af       	std	Y+60, r25	; 0x3c
    4732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4734:	8d ad       	ldd	r24, Y+61	; 0x3d
    4736:	9e ad       	ldd	r25, Y+62	; 0x3e
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	9e af       	std	Y+62, r25	; 0x3e
    473c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4740:	9e ad       	ldd	r25, Y+62	; 0x3e
    4742:	00 97       	sbiw	r24, 0x00	; 0
    4744:	69 f7       	brne	.-38     	; 0x4720 <LCD_displayCharacter+0x45a>
    4746:	16 c0       	rjmp	.+44     	; 0x4774 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4748:	fe 01       	movw	r30, r28
    474a:	ff 96       	adiw	r30, 0x3f	; 63
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	9e af       	std	Y+62, r25	; 0x3e
    475e:	8d af       	std	Y+61, r24	; 0x3d
    4760:	8d ad       	ldd	r24, Y+61	; 0x3d
    4762:	9e ad       	ldd	r25, Y+62	; 0x3e
    4764:	9a af       	std	Y+58, r25	; 0x3a
    4766:	89 af       	std	Y+57, r24	; 0x39
    4768:	89 ad       	ldd	r24, Y+57	; 0x39
    476a:	9a ad       	ldd	r25, Y+58	; 0x3a
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	f1 f7       	brne	.-4      	; 0x476c <LCD_displayCharacter+0x4a6>
    4770:	9a af       	std	Y+58, r25	; 0x3a
    4772:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	62 e0       	ldi	r22, 0x02	; 2
    4778:	40 e0       	ldi	r20, 0x00	; 0
    477a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	a0 e8       	ldi	r26, 0x80	; 128
    4784:	bf e3       	ldi	r27, 0x3F	; 63
    4786:	8d ab       	std	Y+53, r24	; 0x35
    4788:	9e ab       	std	Y+54, r25	; 0x36
    478a:	af ab       	std	Y+55, r26	; 0x37
    478c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478e:	6d a9       	ldd	r22, Y+53	; 0x35
    4790:	7e a9       	ldd	r23, Y+54	; 0x36
    4792:	8f a9       	ldd	r24, Y+55	; 0x37
    4794:	98 ad       	ldd	r25, Y+56	; 0x38
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	4a e7       	ldi	r20, 0x7A	; 122
    479c:	55 e4       	ldi	r21, 0x45	; 69
    479e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	89 ab       	std	Y+49, r24	; 0x31
    47a8:	9a ab       	std	Y+50, r25	; 0x32
    47aa:	ab ab       	std	Y+51, r26	; 0x33
    47ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    47ae:	69 a9       	ldd	r22, Y+49	; 0x31
    47b0:	7a a9       	ldd	r23, Y+50	; 0x32
    47b2:	8b a9       	ldd	r24, Y+51	; 0x33
    47b4:	9c a9       	ldd	r25, Y+52	; 0x34
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e8       	ldi	r20, 0x80	; 128
    47bc:	5f e3       	ldi	r21, 0x3F	; 63
    47be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47c2:	88 23       	and	r24, r24
    47c4:	2c f4       	brge	.+10     	; 0x47d0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	98 ab       	std	Y+48, r25	; 0x30
    47cc:	8f a7       	std	Y+47, r24	; 0x2f
    47ce:	3f c0       	rjmp	.+126    	; 0x484e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    47d0:	69 a9       	ldd	r22, Y+49	; 0x31
    47d2:	7a a9       	ldd	r23, Y+50	; 0x32
    47d4:	8b a9       	ldd	r24, Y+51	; 0x33
    47d6:	9c a9       	ldd	r25, Y+52	; 0x34
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	4f e7       	ldi	r20, 0x7F	; 127
    47de:	57 e4       	ldi	r21, 0x47	; 71
    47e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	4c f5       	brge	.+82     	; 0x483a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e8:	6d a9       	ldd	r22, Y+53	; 0x35
    47ea:	7e a9       	ldd	r23, Y+54	; 0x36
    47ec:	8f a9       	ldd	r24, Y+55	; 0x37
    47ee:	98 ad       	ldd	r25, Y+56	; 0x38
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e2       	ldi	r20, 0x20	; 32
    47f6:	51 e4       	ldi	r21, 0x41	; 65
    47f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	bc 01       	movw	r22, r24
    4802:	cd 01       	movw	r24, r26
    4804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	98 ab       	std	Y+48, r25	; 0x30
    480e:	8f a7       	std	Y+47, r24	; 0x2f
    4810:	0f c0       	rjmp	.+30     	; 0x4830 <LCD_displayCharacter+0x56a>
    4812:	80 e9       	ldi	r24, 0x90	; 144
    4814:	91 e0       	ldi	r25, 0x01	; 1
    4816:	9e a7       	std	Y+46, r25	; 0x2e
    4818:	8d a7       	std	Y+45, r24	; 0x2d
    481a:	8d a5       	ldd	r24, Y+45	; 0x2d
    481c:	9e a5       	ldd	r25, Y+46	; 0x2e
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	f1 f7       	brne	.-4      	; 0x481e <LCD_displayCharacter+0x558>
    4822:	9e a7       	std	Y+46, r25	; 0x2e
    4824:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4826:	8f a5       	ldd	r24, Y+47	; 0x2f
    4828:	98 a9       	ldd	r25, Y+48	; 0x30
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	98 ab       	std	Y+48, r25	; 0x30
    482e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4830:	8f a5       	ldd	r24, Y+47	; 0x2f
    4832:	98 a9       	ldd	r25, Y+48	; 0x30
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	69 f7       	brne	.-38     	; 0x4812 <LCD_displayCharacter+0x54c>
    4838:	14 c0       	rjmp	.+40     	; 0x4862 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483a:	69 a9       	ldd	r22, Y+49	; 0x31
    483c:	7a a9       	ldd	r23, Y+50	; 0x32
    483e:	8b a9       	ldd	r24, Y+51	; 0x33
    4840:	9c a9       	ldd	r25, Y+52	; 0x34
    4842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	98 ab       	std	Y+48, r25	; 0x30
    484c:	8f a7       	std	Y+47, r24	; 0x2f
    484e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4850:	98 a9       	ldd	r25, Y+48	; 0x30
    4852:	9c a7       	std	Y+44, r25	; 0x2c
    4854:	8b a7       	std	Y+43, r24	; 0x2b
    4856:	8b a5       	ldd	r24, Y+43	; 0x2b
    4858:	9c a5       	ldd	r25, Y+44	; 0x2c
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <LCD_displayCharacter+0x594>
    485e:	9c a7       	std	Y+44, r25	; 0x2c
    4860:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	62 e0       	ldi	r22, 0x02	; 2
    4866:	41 e0       	ldi	r20, 0x01	; 1
    4868:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	a0 e8       	ldi	r26, 0x80	; 128
    4872:	bf e3       	ldi	r27, 0x3F	; 63
    4874:	8f a3       	std	Y+39, r24	; 0x27
    4876:	98 a7       	std	Y+40, r25	; 0x28
    4878:	a9 a7       	std	Y+41, r26	; 0x29
    487a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    487c:	6f a1       	ldd	r22, Y+39	; 0x27
    487e:	78 a5       	ldd	r23, Y+40	; 0x28
    4880:	89 a5       	ldd	r24, Y+41	; 0x29
    4882:	9a a5       	ldd	r25, Y+42	; 0x2a
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	4a e7       	ldi	r20, 0x7A	; 122
    488a:	55 e4       	ldi	r21, 0x45	; 69
    488c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	8b a3       	std	Y+35, r24	; 0x23
    4896:	9c a3       	std	Y+36, r25	; 0x24
    4898:	ad a3       	std	Y+37, r26	; 0x25
    489a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    489c:	6b a1       	ldd	r22, Y+35	; 0x23
    489e:	7c a1       	ldd	r23, Y+36	; 0x24
    48a0:	8d a1       	ldd	r24, Y+37	; 0x25
    48a2:	9e a1       	ldd	r25, Y+38	; 0x26
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	40 e8       	ldi	r20, 0x80	; 128
    48aa:	5f e3       	ldi	r21, 0x3F	; 63
    48ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48b0:	88 23       	and	r24, r24
    48b2:	2c f4       	brge	.+10     	; 0x48be <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	9a a3       	std	Y+34, r25	; 0x22
    48ba:	89 a3       	std	Y+33, r24	; 0x21
    48bc:	3f c0       	rjmp	.+126    	; 0x493c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    48be:	6b a1       	ldd	r22, Y+35	; 0x23
    48c0:	7c a1       	ldd	r23, Y+36	; 0x24
    48c2:	8d a1       	ldd	r24, Y+37	; 0x25
    48c4:	9e a1       	ldd	r25, Y+38	; 0x26
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	3f ef       	ldi	r19, 0xFF	; 255
    48ca:	4f e7       	ldi	r20, 0x7F	; 127
    48cc:	57 e4       	ldi	r21, 0x47	; 71
    48ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48d2:	18 16       	cp	r1, r24
    48d4:	4c f5       	brge	.+82     	; 0x4928 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48d6:	6f a1       	ldd	r22, Y+39	; 0x27
    48d8:	78 a5       	ldd	r23, Y+40	; 0x28
    48da:	89 a5       	ldd	r24, Y+41	; 0x29
    48dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e2       	ldi	r20, 0x20	; 32
    48e4:	51 e4       	ldi	r21, 0x41	; 65
    48e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	bc 01       	movw	r22, r24
    48f0:	cd 01       	movw	r24, r26
    48f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	9a a3       	std	Y+34, r25	; 0x22
    48fc:	89 a3       	std	Y+33, r24	; 0x21
    48fe:	0f c0       	rjmp	.+30     	; 0x491e <LCD_displayCharacter+0x658>
    4900:	80 e9       	ldi	r24, 0x90	; 144
    4902:	91 e0       	ldi	r25, 0x01	; 1
    4904:	98 a3       	std	Y+32, r25	; 0x20
    4906:	8f 8f       	std	Y+31, r24	; 0x1f
    4908:	8f 8d       	ldd	r24, Y+31	; 0x1f
    490a:	98 a1       	ldd	r25, Y+32	; 0x20
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <LCD_displayCharacter+0x646>
    4910:	98 a3       	std	Y+32, r25	; 0x20
    4912:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4914:	89 a1       	ldd	r24, Y+33	; 0x21
    4916:	9a a1       	ldd	r25, Y+34	; 0x22
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	9a a3       	std	Y+34, r25	; 0x22
    491c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    491e:	89 a1       	ldd	r24, Y+33	; 0x21
    4920:	9a a1       	ldd	r25, Y+34	; 0x22
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	69 f7       	brne	.-38     	; 0x4900 <LCD_displayCharacter+0x63a>
    4926:	14 c0       	rjmp	.+40     	; 0x4950 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4928:	6b a1       	ldd	r22, Y+35	; 0x23
    492a:	7c a1       	ldd	r23, Y+36	; 0x24
    492c:	8d a1       	ldd	r24, Y+37	; 0x25
    492e:	9e a1       	ldd	r25, Y+38	; 0x26
    4930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	9a a3       	std	Y+34, r25	; 0x22
    493a:	89 a3       	std	Y+33, r24	; 0x21
    493c:	89 a1       	ldd	r24, Y+33	; 0x21
    493e:	9a a1       	ldd	r25, Y+34	; 0x22
    4940:	9e 8f       	std	Y+30, r25	; 0x1e
    4942:	8d 8f       	std	Y+29, r24	; 0x1d
    4944:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4946:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	f1 f7       	brne	.-4      	; 0x4948 <LCD_displayCharacter+0x682>
    494c:	9e 8f       	std	Y+30, r25	; 0x1e
    494e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    4950:	fe 01       	movw	r30, r28
    4952:	ed 59       	subi	r30, 0x9D	; 157
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	80 81       	ld	r24, Z
    4958:	98 2f       	mov	r25, r24
    495a:	91 70       	andi	r25, 0x01	; 1
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	63 e0       	ldi	r22, 0x03	; 3
    4960:	49 2f       	mov	r20, r25
    4962:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    4966:	fe 01       	movw	r30, r28
    4968:	ed 59       	subi	r30, 0x9D	; 157
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	80 81       	ld	r24, Z
    496e:	88 2f       	mov	r24, r24
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	82 70       	andi	r24, 0x02	; 2
    4974:	90 70       	andi	r25, 0x00	; 0
    4976:	95 95       	asr	r25
    4978:	87 95       	ror	r24
    497a:	98 2f       	mov	r25, r24
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	64 e0       	ldi	r22, 0x04	; 4
    4980:	49 2f       	mov	r20, r25
    4982:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    4986:	fe 01       	movw	r30, r28
    4988:	ed 59       	subi	r30, 0x9D	; 157
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	80 81       	ld	r24, Z
    498e:	88 2f       	mov	r24, r24
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	84 70       	andi	r24, 0x04	; 4
    4994:	90 70       	andi	r25, 0x00	; 0
    4996:	95 95       	asr	r25
    4998:	87 95       	ror	r24
    499a:	95 95       	asr	r25
    499c:	87 95       	ror	r24
    499e:	98 2f       	mov	r25, r24
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	65 e0       	ldi	r22, 0x05	; 5
    49a4:	49 2f       	mov	r20, r25
    49a6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    49aa:	fe 01       	movw	r30, r28
    49ac:	ed 59       	subi	r30, 0x9D	; 157
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	80 81       	ld	r24, Z
    49b2:	88 2f       	mov	r24, r24
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	88 70       	andi	r24, 0x08	; 8
    49b8:	90 70       	andi	r25, 0x00	; 0
    49ba:	95 95       	asr	r25
    49bc:	87 95       	ror	r24
    49be:	95 95       	asr	r25
    49c0:	87 95       	ror	r24
    49c2:	95 95       	asr	r25
    49c4:	87 95       	ror	r24
    49c6:	98 2f       	mov	r25, r24
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	66 e0       	ldi	r22, 0x06	; 6
    49cc:	49 2f       	mov	r20, r25
    49ce:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	a0 e8       	ldi	r26, 0x80	; 128
    49d8:	bf e3       	ldi	r27, 0x3F	; 63
    49da:	89 8f       	std	Y+25, r24	; 0x19
    49dc:	9a 8f       	std	Y+26, r25	; 0x1a
    49de:	ab 8f       	std	Y+27, r26	; 0x1b
    49e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e2:	69 8d       	ldd	r22, Y+25	; 0x19
    49e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	4a e7       	ldi	r20, 0x7A	; 122
    49f0:	55 e4       	ldi	r21, 0x45	; 69
    49f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	8d 8b       	std	Y+21, r24	; 0x15
    49fc:	9e 8b       	std	Y+22, r25	; 0x16
    49fe:	af 8b       	std	Y+23, r26	; 0x17
    4a00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a02:	6d 89       	ldd	r22, Y+21	; 0x15
    4a04:	7e 89       	ldd	r23, Y+22	; 0x16
    4a06:	8f 89       	ldd	r24, Y+23	; 0x17
    4a08:	98 8d       	ldd	r25, Y+24	; 0x18
    4a0a:	20 e0       	ldi	r18, 0x00	; 0
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	40 e8       	ldi	r20, 0x80	; 128
    4a10:	5f e3       	ldi	r21, 0x3F	; 63
    4a12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a16:	88 23       	and	r24, r24
    4a18:	2c f4       	brge	.+10     	; 0x4a24 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	9c 8b       	std	Y+20, r25	; 0x14
    4a20:	8b 8b       	std	Y+19, r24	; 0x13
    4a22:	3f c0       	rjmp	.+126    	; 0x4aa2 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4a24:	6d 89       	ldd	r22, Y+21	; 0x15
    4a26:	7e 89       	ldd	r23, Y+22	; 0x16
    4a28:	8f 89       	ldd	r24, Y+23	; 0x17
    4a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	3f ef       	ldi	r19, 0xFF	; 255
    4a30:	4f e7       	ldi	r20, 0x7F	; 127
    4a32:	57 e4       	ldi	r21, 0x47	; 71
    4a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a38:	18 16       	cp	r1, r24
    4a3a:	4c f5       	brge	.+82     	; 0x4a8e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    4a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e2       	ldi	r20, 0x20	; 32
    4a4a:	51 e4       	ldi	r21, 0x41	; 65
    4a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	bc 01       	movw	r22, r24
    4a56:	cd 01       	movw	r24, r26
    4a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	9c 8b       	std	Y+20, r25	; 0x14
    4a62:	8b 8b       	std	Y+19, r24	; 0x13
    4a64:	0f c0       	rjmp	.+30     	; 0x4a84 <LCD_displayCharacter+0x7be>
    4a66:	80 e9       	ldi	r24, 0x90	; 144
    4a68:	91 e0       	ldi	r25, 0x01	; 1
    4a6a:	9a 8b       	std	Y+18, r25	; 0x12
    4a6c:	89 8b       	std	Y+17, r24	; 0x11
    4a6e:	89 89       	ldd	r24, Y+17	; 0x11
    4a70:	9a 89       	ldd	r25, Y+18	; 0x12
    4a72:	01 97       	sbiw	r24, 0x01	; 1
    4a74:	f1 f7       	brne	.-4      	; 0x4a72 <LCD_displayCharacter+0x7ac>
    4a76:	9a 8b       	std	Y+18, r25	; 0x12
    4a78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	9c 8b       	std	Y+20, r25	; 0x14
    4a82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a84:	8b 89       	ldd	r24, Y+19	; 0x13
    4a86:	9c 89       	ldd	r25, Y+20	; 0x14
    4a88:	00 97       	sbiw	r24, 0x00	; 0
    4a8a:	69 f7       	brne	.-38     	; 0x4a66 <LCD_displayCharacter+0x7a0>
    4a8c:	14 c0       	rjmp	.+40     	; 0x4ab6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a90:	7e 89       	ldd	r23, Y+22	; 0x16
    4a92:	8f 89       	ldd	r24, Y+23	; 0x17
    4a94:	98 8d       	ldd	r25, Y+24	; 0x18
    4a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	9c 8b       	std	Y+20, r25	; 0x14
    4aa0:	8b 8b       	std	Y+19, r24	; 0x13
    4aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    4aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    4aa6:	98 8b       	std	Y+16, r25	; 0x10
    4aa8:	8f 87       	std	Y+15, r24	; 0x0f
    4aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4aac:	98 89       	ldd	r25, Y+16	; 0x10
    4aae:	01 97       	sbiw	r24, 0x01	; 1
    4ab0:	f1 f7       	brne	.-4      	; 0x4aae <LCD_displayCharacter+0x7e8>
    4ab2:	98 8b       	std	Y+16, r25	; 0x10
    4ab4:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	62 e0       	ldi	r22, 0x02	; 2
    4aba:	40 e0       	ldi	r20, 0x00	; 0
    4abc:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	a0 e8       	ldi	r26, 0x80	; 128
    4ac6:	bf e3       	ldi	r27, 0x3F	; 63
    4ac8:	8b 87       	std	Y+11, r24	; 0x0b
    4aca:	9c 87       	std	Y+12, r25	; 0x0c
    4acc:	ad 87       	std	Y+13, r26	; 0x0d
    4ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	4a e7       	ldi	r20, 0x7A	; 122
    4ade:	55 e4       	ldi	r21, 0x45	; 69
    4ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	8f 83       	std	Y+7, r24	; 0x07
    4aea:	98 87       	std	Y+8, r25	; 0x08
    4aec:	a9 87       	std	Y+9, r26	; 0x09
    4aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4af0:	6f 81       	ldd	r22, Y+7	; 0x07
    4af2:	78 85       	ldd	r23, Y+8	; 0x08
    4af4:	89 85       	ldd	r24, Y+9	; 0x09
    4af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	40 e8       	ldi	r20, 0x80	; 128
    4afe:	5f e3       	ldi	r21, 0x3F	; 63
    4b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b04:	88 23       	and	r24, r24
    4b06:	2c f4       	brge	.+10     	; 0x4b12 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	9e 83       	std	Y+6, r25	; 0x06
    4b0e:	8d 83       	std	Y+5, r24	; 0x05
    4b10:	3f c0       	rjmp	.+126    	; 0x4b90 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    4b12:	6f 81       	ldd	r22, Y+7	; 0x07
    4b14:	78 85       	ldd	r23, Y+8	; 0x08
    4b16:	89 85       	ldd	r24, Y+9	; 0x09
    4b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	3f ef       	ldi	r19, 0xFF	; 255
    4b1e:	4f e7       	ldi	r20, 0x7F	; 127
    4b20:	57 e4       	ldi	r21, 0x47	; 71
    4b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b26:	18 16       	cp	r1, r24
    4b28:	4c f5       	brge	.+82     	; 0x4b7c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e2       	ldi	r20, 0x20	; 32
    4b38:	51 e4       	ldi	r21, 0x41	; 65
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	bc 01       	movw	r22, r24
    4b44:	cd 01       	movw	r24, r26
    4b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	9e 83       	std	Y+6, r25	; 0x06
    4b50:	8d 83       	std	Y+5, r24	; 0x05
    4b52:	0f c0       	rjmp	.+30     	; 0x4b72 <LCD_displayCharacter+0x8ac>
    4b54:	80 e9       	ldi	r24, 0x90	; 144
    4b56:	91 e0       	ldi	r25, 0x01	; 1
    4b58:	9c 83       	std	Y+4, r25	; 0x04
    4b5a:	8b 83       	std	Y+3, r24	; 0x03
    4b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b60:	01 97       	sbiw	r24, 0x01	; 1
    4b62:	f1 f7       	brne	.-4      	; 0x4b60 <LCD_displayCharacter+0x89a>
    4b64:	9c 83       	std	Y+4, r25	; 0x04
    4b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b68:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	9e 83       	std	Y+6, r25	; 0x06
    4b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b72:	8d 81       	ldd	r24, Y+5	; 0x05
    4b74:	9e 81       	ldd	r25, Y+6	; 0x06
    4b76:	00 97       	sbiw	r24, 0x00	; 0
    4b78:	69 f7       	brne	.-38     	; 0x4b54 <LCD_displayCharacter+0x88e>
    4b7a:	14 c0       	rjmp	.+40     	; 0x4ba4 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7e:	78 85       	ldd	r23, Y+8	; 0x08
    4b80:	89 85       	ldd	r24, Y+9	; 0x09
    4b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	9e 83       	std	Y+6, r25	; 0x06
    4b8e:	8d 83       	std	Y+5, r24	; 0x05
    4b90:	8d 81       	ldd	r24, Y+5	; 0x05
    4b92:	9e 81       	ldd	r25, Y+6	; 0x06
    4b94:	9a 83       	std	Y+2, r25	; 0x02
    4b96:	89 83       	std	Y+1, r24	; 0x01
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <LCD_displayCharacter+0x8d6>
    4ba0:	9a 83       	std	Y+2, r25	; 0x02
    4ba2:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, data);  /* Output the data to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    4ba4:	cd 59       	subi	r28, 0x9D	; 157
    4ba6:	df 4f       	sbci	r29, 0xFF	; 255
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	1f 91       	pop	r17
    4bb8:	0f 91       	pop	r16
    4bba:	08 95       	ret

00004bbc <LCD_displayString>:
 * Display a string on the LCD.
 * Parameters  :
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    4bbc:	df 93       	push	r29
    4bbe:	cf 93       	push	r28
    4bc0:	00 d0       	rcall	.+0      	; 0x4bc2 <LCD_displayString+0x6>
    4bc2:	0f 92       	push	r0
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	9b 83       	std	Y+3, r25	; 0x03
    4bca:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    4bcc:	19 82       	std	Y+1, r1	; 0x01
    4bce:	0e c0       	rjmp	.+28     	; 0x4bec <LCD_displayString+0x30>
    while (Str[i] != '\0')
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
    4bd0:	89 81       	ldd	r24, Y+1	; 0x01
    4bd2:	28 2f       	mov	r18, r24
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bda:	fc 01       	movw	r30, r24
    4bdc:	e2 0f       	add	r30, r18
    4bde:	f3 1f       	adc	r31, r19
    4be0:	80 81       	ld	r24, Z
    4be2:	0e 94 63 21 	call	0x42c6	; 0x42c6 <LCD_displayCharacter>
        i++;
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	8f 5f       	subi	r24, 0xFF	; 255
    4bea:	89 83       	std	Y+1, r24	; 0x01
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	28 2f       	mov	r18, r24
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	e2 0f       	add	r30, r18
    4bfa:	f3 1f       	adc	r31, r19
    4bfc:	80 81       	ld	r24, Z
    4bfe:	88 23       	and	r24, r24
    4c00:	39 f7       	brne	.-50     	; 0x4bd0 <LCD_displayString+0x14>
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
        i++;
    }
}
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	0f 90       	pop	r0
    4c08:	cf 91       	pop	r28
    4c0a:	df 91       	pop	r29
    4c0c:	08 95       	ret

00004c0e <LCD_moveCursor>:
 * Parameters  :
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    4c0e:	df 93       	push	r29
    4c10:	cf 93       	push	r28
    4c12:	00 d0       	rcall	.+0      	; 0x4c14 <LCD_moveCursor+0x6>
    4c14:	00 d0       	rcall	.+0      	; 0x4c16 <LCD_moveCursor+0x8>
    4c16:	0f 92       	push	r0
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    4c1c:	8a 83       	std	Y+2, r24	; 0x02
    4c1e:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    /* Calculate the required address in the LCD DDRAM */
    switch (row)
    4c20:	8a 81       	ldd	r24, Y+2	; 0x02
    4c22:	28 2f       	mov	r18, r24
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	3d 83       	std	Y+5, r19	; 0x05
    4c28:	2c 83       	std	Y+4, r18	; 0x04
    4c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c2e:	81 30       	cpi	r24, 0x01	; 1
    4c30:	91 05       	cpc	r25, r1
    4c32:	c1 f0       	breq	.+48     	; 0x4c64 <LCD_moveCursor+0x56>
    4c34:	2c 81       	ldd	r18, Y+4	; 0x04
    4c36:	3d 81       	ldd	r19, Y+5	; 0x05
    4c38:	22 30       	cpi	r18, 0x02	; 2
    4c3a:	31 05       	cpc	r19, r1
    4c3c:	2c f4       	brge	.+10     	; 0x4c48 <LCD_moveCursor+0x3a>
    4c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c40:	9d 81       	ldd	r25, Y+5	; 0x05
    4c42:	00 97       	sbiw	r24, 0x00	; 0
    4c44:	61 f0       	breq	.+24     	; 0x4c5e <LCD_moveCursor+0x50>
    4c46:	19 c0       	rjmp	.+50     	; 0x4c7a <LCD_moveCursor+0x6c>
    4c48:	2c 81       	ldd	r18, Y+4	; 0x04
    4c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    4c4c:	22 30       	cpi	r18, 0x02	; 2
    4c4e:	31 05       	cpc	r19, r1
    4c50:	69 f0       	breq	.+26     	; 0x4c6c <LCD_moveCursor+0x5e>
    4c52:	8c 81       	ldd	r24, Y+4	; 0x04
    4c54:	9d 81       	ldd	r25, Y+5	; 0x05
    4c56:	83 30       	cpi	r24, 0x03	; 3
    4c58:	91 05       	cpc	r25, r1
    4c5a:	61 f0       	breq	.+24     	; 0x4c74 <LCD_moveCursor+0x66>
    4c5c:	0e c0       	rjmp	.+28     	; 0x4c7a <LCD_moveCursor+0x6c>
    {
    case 0:
        lcd_memory_address = col;
    4c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c60:	89 83       	std	Y+1, r24	; 0x01
    4c62:	0b c0       	rjmp	.+22     	; 0x4c7a <LCD_moveCursor+0x6c>
        break;
    case 1:
        lcd_memory_address = col + 0x40;
    4c64:	8b 81       	ldd	r24, Y+3	; 0x03
    4c66:	80 5c       	subi	r24, 0xC0	; 192
    4c68:	89 83       	std	Y+1, r24	; 0x01
    4c6a:	07 c0       	rjmp	.+14     	; 0x4c7a <LCD_moveCursor+0x6c>
        break;
    case 2:
        lcd_memory_address = col + 0x10;
    4c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6e:	80 5f       	subi	r24, 0xF0	; 240
    4c70:	89 83       	std	Y+1, r24	; 0x01
    4c72:	03 c0       	rjmp	.+6      	; 0x4c7a <LCD_moveCursor+0x6c>
        break;
    case 3:
        lcd_memory_address = col + 0x50;
    4c74:	8b 81       	ldd	r24, Y+3	; 0x03
    4c76:	80 5b       	subi	r24, 0xB0	; 176
    4c78:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    /* Move the LCD cursor to this specific address */
    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	80 68       	ori	r24, 0x80	; 128
    4c7e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>
}
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	0f 90       	pop	r0
    4c8c:	cf 91       	pop	r28
    4c8e:	df 91       	pop	r29
    4c90:	08 95       	ret

00004c92 <LCD_displayStringRowColumn>:
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    4c92:	df 93       	push	r29
    4c94:	cf 93       	push	r28
    4c96:	00 d0       	rcall	.+0      	; 0x4c98 <LCD_displayStringRowColumn+0x6>
    4c98:	00 d0       	rcall	.+0      	; 0x4c9a <LCD_displayStringRowColumn+0x8>
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	89 83       	std	Y+1, r24	; 0x01
    4ca0:	6a 83       	std	Y+2, r22	; 0x02
    4ca2:	5c 83       	std	Y+4, r21	; 0x04
    4ca4:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col);  /* Move the cursor to the specified position */
    4ca6:	89 81       	ldd	r24, Y+1	; 0x01
    4ca8:	6a 81       	ldd	r22, Y+2	; 0x02
    4caa:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <LCD_moveCursor>
    LCD_displayString(Str);  /* Display the string */
    4cae:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb2:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <LCD_displayString>
}
    4cb6:	0f 90       	pop	r0
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	cf 91       	pop	r28
    4cc0:	df 91       	pop	r29
    4cc2:	08 95       	ret

00004cc4 <LCD_intgerToString>:
 * Display an integer value on the LCD.
 * Parameters  :
 * - data: The integer value to be displayed.
 */
void LCD_intgerToString(int data)
{
    4cc4:	df 93       	push	r29
    4cc6:	cf 93       	push	r28
    4cc8:	cd b7       	in	r28, 0x3d	; 61
    4cca:	de b7       	in	r29, 0x3e	; 62
    4ccc:	62 97       	sbiw	r28, 0x12	; 18
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	f8 94       	cli
    4cd2:	de bf       	out	0x3e, r29	; 62
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	9a 8b       	std	Y+18, r25	; 0x12
    4cda:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];  /* String to hold the ASCII result */
    itoa(data, buff, 10);  /* Convert the integer to its ASCII representation (base 10) */
    4cdc:	89 89       	ldd	r24, Y+17	; 0x11
    4cde:	9a 89       	ldd	r25, Y+18	; 0x12
    4ce0:	9e 01       	movw	r18, r28
    4ce2:	2f 5f       	subi	r18, 0xFF	; 255
    4ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce6:	b9 01       	movw	r22, r18
    4ce8:	4a e0       	ldi	r20, 0x0A	; 10
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	0e 94 2c 32 	call	0x6458	; 0x6458 <itoa>
    LCD_displayString(buff);  /* Display the string */
    4cf0:	ce 01       	movw	r24, r28
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <LCD_displayString>
}
    4cf8:	62 96       	adiw	r28, 0x12	; 18
    4cfa:	0f b6       	in	r0, 0x3f	; 63
    4cfc:	f8 94       	cli
    4cfe:	de bf       	out	0x3e, r29	; 62
    4d00:	0f be       	out	0x3f, r0	; 63
    4d02:	cd bf       	out	0x3d, r28	; 61
    4d04:	cf 91       	pop	r28
    4d06:	df 91       	pop	r29
    4d08:	08 95       	ret

00004d0a <LCD_clearScreen>:
/*
 * Description :
 * Clear the LCD screen.
 */
void LCD_clearScreen(void)
{
    4d0a:	df 93       	push	r29
    4d0c:	cf 93       	push	r28
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Send clear display command */
    4d12:	81 e0       	ldi	r24, 0x01	; 1
    4d14:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_sendCommand>
}
    4d18:	cf 91       	pop	r28
    4d1a:	df 91       	pop	r29
    4d1c:	08 95       	ret

00004d1e <Buzzer_init>:
 * Description	: source file for the Buzzer driver
 ************************************************************************************/
#include "buzzer.h"

void Buzzer_init(void)
{
    4d1e:	df 93       	push	r29
    4d20:	cf 93       	push	r28
    4d22:	cd b7       	in	r28, 0x3d	; 61
    4d24:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin as output */
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	65 e0       	ldi	r22, 0x05	; 5
    4d2a:	41 e0       	ldi	r20, 0x01	; 1
    4d2c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

    /* Turn off the buzzer initially */
    Buzzer_off();
    4d30:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <Buzzer_off>
}
    4d34:	cf 91       	pop	r28
    4d36:	df 91       	pop	r29
    4d38:	08 95       	ret

00004d3a <Buzzer_on>:

void Buzzer_on(void)
{
    4d3a:	df 93       	push	r29
    4d3c:	cf 93       	push	r28
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    /* Activate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    4d42:	82 e0       	ldi	r24, 0x02	; 2
    4d44:	65 e0       	ldi	r22, 0x05	; 5
    4d46:	41 e0       	ldi	r20, 0x01	; 1
    4d48:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
}
    4d4c:	cf 91       	pop	r28
    4d4e:	df 91       	pop	r29
    4d50:	08 95       	ret

00004d52 <Buzzer_off>:

void Buzzer_off(void)
{
    4d52:	df 93       	push	r29
    4d54:	cf 93       	push	r28
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
    /* Deactivate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    4d5a:	82 e0       	ldi	r24, 0x02	; 2
    4d5c:	65 e0       	ldi	r22, 0x05	; 5
    4d5e:	40 e0       	ldi	r20, 0x00	; 0
    4d60:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
}
    4d64:	cf 91       	pop	r28
    4d66:	df 91       	pop	r29
    4d68:	08 95       	ret

00004d6a <LEDS_init>:
 * Function to initialize LEDs:
 * 1. Set up the LED pins as output pins.
 * 2. Set the initial state of the LEDs based on the connection logic.
 */
void LEDS_init(void)
{
    4d6a:	df 93       	push	r29
    4d6c:	cf 93       	push	r28
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    /* Configure the LED pins as output pins */
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, RED_LED, PIN_OUTPUT);
    4d72:	82 e0       	ldi	r24, 0x02	; 2
    4d74:	60 e0       	ldi	r22, 0x00	; 0
    4d76:	41 e0       	ldi	r20, 0x01	; 1
    4d78:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, GREEN_LED, PIN_OUTPUT);
    4d7c:	82 e0       	ldi	r24, 0x02	; 2
    4d7e:	61 e0       	ldi	r22, 0x01	; 1
    4d80:	41 e0       	ldi	r20, 0x01	; 1
    4d82:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, BLUE_LED, PIN_OUTPUT);
    4d86:	82 e0       	ldi	r24, 0x02	; 2
    4d88:	62 e0       	ldi	r22, 0x02	; 2
    4d8a:	41 e0       	ldi	r20, 0x01	; 1
    4d8c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

#ifdef CONNECTION_POSITIVE_LOGIC
    /* Initialize LEDs to OFF state for positive logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	60 e0       	ldi	r22, 0x00	; 0
    4d94:	40 e0       	ldi	r20, 0x00	; 0
    4d96:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	61 e0       	ldi	r22, 0x01	; 1
    4d9e:	40 e0       	ldi	r20, 0x00	; 0
    4da0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    4da4:	82 e0       	ldi	r24, 0x02	; 2
    4da6:	62 e0       	ldi	r22, 0x02	; 2
    4da8:	40 e0       	ldi	r20, 0x00	; 0
    4daa:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    /* Initialize LEDs to OFF state for negative logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
#endif
}
    4dae:	cf 91       	pop	r28
    4db0:	df 91       	pop	r29
    4db2:	08 95       	ret

00004db4 <LED_on>:
 * Else, put LOGIC LOW (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn on (red, green, blue).
 */
void LED_on(LED_ID id)
{
    4db4:	df 93       	push	r29
    4db6:	cf 93       	push	r28
    4db8:	00 d0       	rcall	.+0      	; 0x4dba <LED_on+0x6>
    4dba:	0f 92       	push	r0
    4dbc:	cd b7       	in	r28, 0x3d	; 61
    4dbe:	de b7       	in	r29, 0x3e	; 62
    4dc0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn on the LED for positive logic */
    switch (id)
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	28 2f       	mov	r18, r24
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	3b 83       	std	Y+3, r19	; 0x03
    4dca:	2a 83       	std	Y+2, r18	; 0x02
    4dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dce:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd0:	81 30       	cpi	r24, 0x01	; 1
    4dd2:	91 05       	cpc	r25, r1
    4dd4:	79 f0       	breq	.+30     	; 0x4df4 <LED_on+0x40>
    4dd6:	2a 81       	ldd	r18, Y+2	; 0x02
    4dd8:	3b 81       	ldd	r19, Y+3	; 0x03
    4dda:	22 30       	cpi	r18, 0x02	; 2
    4ddc:	31 05       	cpc	r19, r1
    4dde:	81 f0       	breq	.+32     	; 0x4e00 <LED_on+0x4c>
    4de0:	8a 81       	ldd	r24, Y+2	; 0x02
    4de2:	9b 81       	ldd	r25, Y+3	; 0x03
    4de4:	00 97       	sbiw	r24, 0x00	; 0
    4de6:	89 f4       	brne	.+34     	; 0x4e0a <LED_on+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    4de8:	82 e0       	ldi	r24, 0x02	; 2
    4dea:	60 e0       	ldi	r22, 0x00	; 0
    4dec:	41 e0       	ldi	r20, 0x01	; 1
    4dee:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    4df2:	0b c0       	rjmp	.+22     	; 0x4e0a <LED_on+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    4df4:	82 e0       	ldi	r24, 0x02	; 2
    4df6:	61 e0       	ldi	r22, 0x01	; 1
    4df8:	41 e0       	ldi	r20, 0x01	; 1
    4dfa:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    4dfe:	05 c0       	rjmp	.+10     	; 0x4e0a <LED_on+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
    4e00:	82 e0       	ldi	r24, 0x02	; 2
    4e02:	62 e0       	ldi	r22, 0x02	; 2
    4e04:	41 e0       	ldi	r20, 0x01	; 1
    4e06:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
        break;
    }
#endif
}
    4e0a:	0f 90       	pop	r0
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	cf 91       	pop	r28
    4e12:	df 91       	pop	r29
    4e14:	08 95       	ret

00004e16 <LED_off>:
 * Else, put LOGIC HIGH (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn off (red, green, blue).
 */
void LED_off(LED_ID id)
{
    4e16:	df 93       	push	r29
    4e18:	cf 93       	push	r28
    4e1a:	00 d0       	rcall	.+0      	; 0x4e1c <LED_off+0x6>
    4e1c:	0f 92       	push	r0
    4e1e:	cd b7       	in	r28, 0x3d	; 61
    4e20:	de b7       	in	r29, 0x3e	; 62
    4e22:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn off the LED for positive logic */
    switch (id)
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	28 2f       	mov	r18, r24
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	3b 83       	std	Y+3, r19	; 0x03
    4e2c:	2a 83       	std	Y+2, r18	; 0x02
    4e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e30:	9b 81       	ldd	r25, Y+3	; 0x03
    4e32:	81 30       	cpi	r24, 0x01	; 1
    4e34:	91 05       	cpc	r25, r1
    4e36:	79 f0       	breq	.+30     	; 0x4e56 <LED_off+0x40>
    4e38:	2a 81       	ldd	r18, Y+2	; 0x02
    4e3a:	3b 81       	ldd	r19, Y+3	; 0x03
    4e3c:	22 30       	cpi	r18, 0x02	; 2
    4e3e:	31 05       	cpc	r19, r1
    4e40:	81 f0       	breq	.+32     	; 0x4e62 <LED_off+0x4c>
    4e42:	8a 81       	ldd	r24, Y+2	; 0x02
    4e44:	9b 81       	ldd	r25, Y+3	; 0x03
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	89 f4       	brne	.+34     	; 0x4e6c <LED_off+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4e4a:	82 e0       	ldi	r24, 0x02	; 2
    4e4c:	60 e0       	ldi	r22, 0x00	; 0
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    4e54:	0b c0       	rjmp	.+22     	; 0x4e6c <LED_off+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    4e56:	82 e0       	ldi	r24, 0x02	; 2
    4e58:	61 e0       	ldi	r22, 0x01	; 1
    4e5a:	40 e0       	ldi	r20, 0x00	; 0
    4e5c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    4e60:	05 c0       	rjmp	.+10     	; 0x4e6c <LED_off+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    4e62:	82 e0       	ldi	r24, 0x02	; 2
    4e64:	62 e0       	ldi	r22, 0x02	; 2
    4e66:	40 e0       	ldi	r20, 0x00	; 0
    4e68:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
        break;
    }
#endif
}
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	cf 91       	pop	r28
    4e74:	df 91       	pop	r29
    4e76:	08 95       	ret

00004e78 <ISR2>:
volatile uint16 g_distanceForward  = 0;
volatile uint16 g_distanceBackward = 0;
volatile uint8  g_selection 	   = 0;

/****************** Interrupt Service Routines ******************/
void ISR2(void) {
    4e78:	df 93       	push	r29
    4e7a:	cf 93       	push	r28
    4e7c:	cd b7       	in	r28, 0x3d	; 61
    4e7e:	de b7       	in	r29, 0x3e	; 62
	Stop();
    4e80:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
}
    4e84:	cf 91       	pop	r28
    4e86:	df 91       	pop	r29
    4e88:	08 95       	ret

00004e8a <ISR1>:

void ISR1(void) {
    4e8a:	df 93       	push	r29
    4e8c:	cf 93       	push	r28
    4e8e:	cd b7       	in	r28, 0x3d	; 61
    4e90:	de b7       	in	r29, 0x3e	; 62
	Stop();
    4e92:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
}
    4e96:	cf 91       	pop	r28
    4e98:	df 91       	pop	r29
    4e9a:	08 95       	ret

00004e9c <main>:

int main(void)
{
    4e9c:	df 93       	push	r29
    4e9e:	cf 93       	push	r28
    4ea0:	cd b7       	in	r28, 0x3d	; 61
    4ea2:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1 << 7);		/* Enable global interrupts */
    4ea4:	af e5       	ldi	r26, 0x5F	; 95
    4ea6:	b0 e0       	ldi	r27, 0x00	; 0
    4ea8:	ef e5       	ldi	r30, 0x5F	; 95
    4eaa:	f0 e0       	ldi	r31, 0x00	; 0
    4eac:	80 81       	ld	r24, Z
    4eae:	80 68       	ori	r24, 0x80	; 128
    4eb0:	8c 93       	st	X, r24

	UART_Init(&config);
    4eb2:	80 e9       	ldi	r24, 0x90	; 144
    4eb4:	91 e0       	ldi	r25, 0x01	; 1
    4eb6:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>
	UART_SetRxCallback(App_Receive);
    4eba:	81 e7       	ldi	r24, 0x71	; 113
    4ebc:	97 e2       	ldi	r25, 0x27	; 39
    4ebe:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <UART_SetRxCallback>

	LCD_init();
    4ec2:	0e 94 36 1c 	call	0x386c	; 0x386c <LCD_init>
	LEDS_init();
    4ec6:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <LEDS_init>
	Buzzer_init();
    4eca:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <Buzzer_init>
	DcMotor_Init(100);
    4ece:	84 e6       	ldi	r24, 0x64	; 100
    4ed0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <DcMotor_Init>

	Ultrasonic_init();
    4ed4:	0e 94 3c 12 	call	0x2478	; 0x2478 <Ultrasonic_init>

	while (1)
	{
		readDistance();			/* Read distances from Three Ultrasonics */
    4ed8:	0e 94 13 28 	call	0x5026	; 0x5026 <readDistance>
		collisionAvoidance();	/* Handle collision avoidance mode  */
    4edc:	0e 94 81 2a 	call	0x5502	; 0x5502 <collisionAvoidance>
    4ee0:	fb cf       	rjmp	.-10     	; 0x4ed8 <main+0x3c>

00004ee2 <App_Receive>:
	}
}

/********************* Functions Definitions *********************/
void App_Receive(uint8 recievedMSG)
{
    4ee2:	df 93       	push	r29
    4ee4:	cf 93       	push	r28
    4ee6:	00 d0       	rcall	.+0      	; 0x4ee8 <App_Receive+0x6>
    4ee8:	0f 92       	push	r0
    4eea:	cd b7       	in	r28, 0x3d	; 61
    4eec:	de b7       	in	r29, 0x3e	; 62
    4eee:	89 83       	std	Y+1, r24	; 0x01
	g_selection = recievedMSG ;
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	80 93 c5 01 	sts	0x01C5, r24
	switch (recievedMSG)
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	28 2f       	mov	r18, r24
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	3b 83       	std	Y+3, r19	; 0x03
    4efe:	2a 83       	std	Y+2, r18	; 0x02
    4f00:	8a 81       	ldd	r24, Y+2	; 0x02
    4f02:	9b 81       	ldd	r25, Y+3	; 0x03
    4f04:	8c 34       	cpi	r24, 0x4C	; 76
    4f06:	91 05       	cpc	r25, r1
    4f08:	09 f4       	brne	.+2      	; 0x4f0c <App_Receive+0x2a>
    4f0a:	47 c0       	rjmp	.+142    	; 0x4f9a <App_Receive+0xb8>
    4f0c:	2a 81       	ldd	r18, Y+2	; 0x02
    4f0e:	3b 81       	ldd	r19, Y+3	; 0x03
    4f10:	2d 34       	cpi	r18, 0x4D	; 77
    4f12:	31 05       	cpc	r19, r1
    4f14:	dc f4       	brge	.+54     	; 0x4f4c <App_Receive+0x6a>
    4f16:	8a 81       	ldd	r24, Y+2	; 0x02
    4f18:	9b 81       	ldd	r25, Y+3	; 0x03
    4f1a:	82 34       	cpi	r24, 0x42	; 66
    4f1c:	91 05       	cpc	r25, r1
    4f1e:	a1 f1       	breq	.+104    	; 0x4f88 <App_Receive+0xa6>
    4f20:	2a 81       	ldd	r18, Y+2	; 0x02
    4f22:	3b 81       	ldd	r19, Y+3	; 0x03
    4f24:	23 34       	cpi	r18, 0x43	; 67
    4f26:	31 05       	cpc	r19, r1
    4f28:	34 f4       	brge	.+12     	; 0x4f36 <App_Receive+0x54>
    4f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2e:	81 34       	cpi	r24, 0x41	; 65
    4f30:	91 05       	cpc	r25, r1
    4f32:	b1 f1       	breq	.+108    	; 0x4fa0 <App_Receive+0xbe>
    4f34:	44 c0       	rjmp	.+136    	; 0x4fbe <App_Receive+0xdc>
    4f36:	2a 81       	ldd	r18, Y+2	; 0x02
    4f38:	3b 81       	ldd	r19, Y+3	; 0x03
    4f3a:	26 34       	cpi	r18, 0x46	; 70
    4f3c:	31 05       	cpc	r19, r1
    4f3e:	09 f1       	breq	.+66     	; 0x4f82 <App_Receive+0xa0>
    4f40:	8a 81       	ldd	r24, Y+2	; 0x02
    4f42:	9b 81       	ldd	r25, Y+3	; 0x03
    4f44:	88 34       	cpi	r24, 0x48	; 72
    4f46:	91 05       	cpc	r25, r1
    4f48:	71 f1       	breq	.+92     	; 0x4fa6 <App_Receive+0xc4>
    4f4a:	39 c0       	rjmp	.+114    	; 0x4fbe <App_Receive+0xdc>
    4f4c:	2a 81       	ldd	r18, Y+2	; 0x02
    4f4e:	3b 81       	ldd	r19, Y+3	; 0x03
    4f50:	20 35       	cpi	r18, 0x50	; 80
    4f52:	31 05       	cpc	r19, r1
    4f54:	59 f1       	breq	.+86     	; 0x4fac <App_Receive+0xca>
    4f56:	8a 81       	ldd	r24, Y+2	; 0x02
    4f58:	9b 81       	ldd	r25, Y+3	; 0x03
    4f5a:	81 35       	cpi	r24, 0x51	; 81
    4f5c:	91 05       	cpc	r25, r1
    4f5e:	34 f4       	brge	.+12     	; 0x4f6c <App_Receive+0x8a>
    4f60:	2a 81       	ldd	r18, Y+2	; 0x02
    4f62:	3b 81       	ldd	r19, Y+3	; 0x03
    4f64:	2d 34       	cpi	r18, 0x4D	; 77
    4f66:	31 05       	cpc	r19, r1
    4f68:	21 f1       	breq	.+72     	; 0x4fb2 <App_Receive+0xd0>
    4f6a:	29 c0       	rjmp	.+82     	; 0x4fbe <App_Receive+0xdc>
    4f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f70:	82 35       	cpi	r24, 0x52	; 82
    4f72:	91 05       	cpc	r25, r1
    4f74:	79 f0       	breq	.+30     	; 0x4f94 <App_Receive+0xb2>
    4f76:	2a 81       	ldd	r18, Y+2	; 0x02
    4f78:	3b 81       	ldd	r19, Y+3	; 0x03
    4f7a:	23 35       	cpi	r18, 0x53	; 83
    4f7c:	31 05       	cpc	r19, r1
    4f7e:	39 f0       	breq	.+14     	; 0x4f8e <App_Receive+0xac>
    4f80:	1e c0       	rjmp	.+60     	; 0x4fbe <App_Receive+0xdc>
	{
	case 'F':
		Forward();		/* Move forward */
    4f82:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Forward>
    4f86:	1b c0       	rjmp	.+54     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'B':
		Backward();		/* Move backward */
    4f88:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <Backward>
    4f8c:	18 c0       	rjmp	.+48     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'S':
		Stop();			/* Stop movement */
    4f8e:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
    4f92:	15 c0       	rjmp	.+42     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'R':
		Right_Forward();	/* Turn right and move forward */
    4f94:	0e 94 1a 19 	call	0x3234	; 0x3234 <Right_Forward>
    4f98:	12 c0       	rjmp	.+36     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'L':
		Left_Forward();		/* Turn left and move forward */
    4f9a:	0e 94 ba 19 	call	0x3374	; 0x3374 <Left_Forward>
    4f9e:	0f c0       	rjmp	.+30     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'A':
		Right_Backward();	/* Turn right and move backward */
    4fa0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <Right_Backward>
    4fa4:	0c c0       	rjmp	.+24     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'H':
		Left_Backward();	/* Turn left and move backward */
    4fa6:	0e 94 96 1b 	call	0x372c	; 0x372c <Left_Backward>
    4faa:	09 c0       	rjmp	.+18     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'P':
		autoParking();		/* Perform auto-parking */
    4fac:	0e 94 ca 2a 	call	0x5594	; 0x5594 <autoParking>
    4fb0:	06 c0       	rjmp	.+12     	; 0x4fbe <App_Receive+0xdc>
		break;
	case 'M':
		DcMotor_Init(motorSpeed(UART_Receive()));	/* Reinitialize motor with new speed */
    4fb2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <UART_Receive>
    4fb6:	0e 94 e5 27 	call	0x4fca	; 0x4fca <motorSpeed>
    4fba:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <DcMotor_Init>
		break;
	}
}
    4fbe:	0f 90       	pop	r0
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	08 95       	ret

00004fca <motorSpeed>:

uint8 motorSpeed(uint8 speed)
{
    4fca:	df 93       	push	r29
    4fcc:	cf 93       	push	r28
    4fce:	00 d0       	rcall	.+0      	; 0x4fd0 <motorSpeed+0x6>
    4fd0:	00 d0       	rcall	.+0      	; 0x4fd2 <motorSpeed+0x8>
    4fd2:	cd b7       	in	r28, 0x3d	; 61
    4fd4:	de b7       	in	r29, 0x3e	; 62
    4fd6:	89 83       	std	Y+1, r24	; 0x01
	switch (speed)
    4fd8:	89 81       	ldd	r24, Y+1	; 0x01
    4fda:	28 2f       	mov	r18, r24
    4fdc:	30 e0       	ldi	r19, 0x00	; 0
    4fde:	3c 83       	std	Y+4, r19	; 0x04
    4fe0:	2b 83       	std	Y+3, r18	; 0x03
    4fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe6:	82 33       	cpi	r24, 0x32	; 50
    4fe8:	91 05       	cpc	r25, r1
    4fea:	69 f0       	breq	.+26     	; 0x5006 <motorSpeed+0x3c>
    4fec:	2b 81       	ldd	r18, Y+3	; 0x03
    4fee:	3c 81       	ldd	r19, Y+4	; 0x04
    4ff0:	23 33       	cpi	r18, 0x33	; 51
    4ff2:	31 05       	cpc	r19, r1
    4ff4:	59 f0       	breq	.+22     	; 0x500c <motorSpeed+0x42>
    4ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    4ffa:	81 33       	cpi	r24, 0x31	; 49
    4ffc:	91 05       	cpc	r25, r1
    4ffe:	49 f4       	brne	.+18     	; 0x5012 <motorSpeed+0x48>
	{
	case '1':
		return MOTOR_SPEED_ONE;		/* Speed level 1 */
    5000:	96 e4       	ldi	r25, 0x46	; 70
    5002:	9a 83       	std	Y+2, r25	; 0x02
    5004:	08 c0       	rjmp	.+16     	; 0x5016 <motorSpeed+0x4c>
		break;
	case '2':
		return MOTOR_SPEED_TWO;		/* Speed level 2 */
    5006:	25 e5       	ldi	r18, 0x55	; 85
    5008:	2a 83       	std	Y+2, r18	; 0x02
    500a:	05 c0       	rjmp	.+10     	; 0x5016 <motorSpeed+0x4c>
		break;
	case '3':
		return MOTOR_MAX_SPEED;		/* Speed level 3 */
    500c:	34 e6       	ldi	r19, 0x64	; 100
    500e:	3a 83       	std	Y+2, r19	; 0x02
    5010:	02 c0       	rjmp	.+4      	; 0x5016 <motorSpeed+0x4c>
		break;
	}

	return MOTOR_MAX_SPEED;			/* Default speed */
    5012:	84 e6       	ldi	r24, 0x64	; 100
    5014:	8a 83       	std	Y+2, r24	; 0x02
    5016:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5018:	0f 90       	pop	r0
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	cf 91       	pop	r28
    5022:	df 91       	pop	r29
    5024:	08 95       	ret

00005026 <readDistance>:

void readDistance(void)
{
    5026:	df 93       	push	r29
    5028:	cf 93       	push	r28
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
    502e:	e0 97       	sbiw	r28, 0x30	; 48
    5030:	0f b6       	in	r0, 0x3f	; 63
    5032:	f8 94       	cli
    5034:	de bf       	out	0x3e, r29	; 62
    5036:	0f be       	out	0x3f, r0	; 63
    5038:	cd bf       	out	0x3d, r28	; 61
	uint16 l_nums[3];

	g_distanceRight = Ultrasonic_readDistance(U_right);
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <Ultrasonic_readDistance>
    5040:	90 93 c0 01 	sts	0x01C0, r25
    5044:	80 93 bf 01 	sts	0x01BF, r24

	LCD_displayStringRowColumn(0, 0, "R:");
    5048:	20 e6       	ldi	r18, 0x60	; 96
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	60 e0       	ldi	r22, 0x00	; 0
    5050:	a9 01       	movw	r20, r18
    5052:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	LCD_moveCursor(0, 2);
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	62 e0       	ldi	r22, 0x02	; 2
    505a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <LCD_moveCursor>
	LCD_intgerToString(g_distanceRight);
    505e:	80 91 bf 01 	lds	r24, 0x01BF
    5062:	90 91 c0 01 	lds	r25, 0x01C0
    5066:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <LCD_intgerToString>

	if (g_distanceRight < 100)
    506a:	80 91 bf 01 	lds	r24, 0x01BF
    506e:	90 91 c0 01 	lds	r25, 0x01C0
    5072:	84 36       	cpi	r24, 0x64	; 100
    5074:	91 05       	cpc	r25, r1
    5076:	38 f4       	brcc	.+14     	; 0x5086 <readDistance+0x60>
	{
		LCD_displayStringRowColumn(0, 5, " ");
    5078:	23 e6       	ldi	r18, 0x63	; 99
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	65 e0       	ldi	r22, 0x05	; 5
    5080:	a9 01       	movw	r20, r18
    5082:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}
	if (g_distanceRight >= 100)
    5086:	80 91 bf 01 	lds	r24, 0x01BF
    508a:	90 91 c0 01 	lds	r25, 0x01C0
    508e:	84 36       	cpi	r24, 0x64	; 100
    5090:	91 05       	cpc	r25, r1
    5092:	38 f0       	brcs	.+14     	; 0x50a2 <readDistance+0x7c>
	{
		LCD_displayStringRowColumn(0, 2, "99 ");
    5094:	25 e6       	ldi	r18, 0x65	; 101
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	62 e0       	ldi	r22, 0x02	; 2
    509c:	a9 01       	movw	r20, r18
    509e:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}
	if (g_distanceRight < 10)
    50a2:	80 91 bf 01 	lds	r24, 0x01BF
    50a6:	90 91 c0 01 	lds	r25, 0x01C0
    50aa:	8a 30       	cpi	r24, 0x0A	; 10
    50ac:	91 05       	cpc	r25, r1
    50ae:	38 f4       	brcc	.+14     	; 0x50be <readDistance+0x98>
	{
		LCD_displayStringRowColumn(0, 3, " ");
    50b0:	23 e6       	ldi	r18, 0x63	; 99
    50b2:	30 e0       	ldi	r19, 0x00	; 0
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	63 e0       	ldi	r22, 0x03	; 3
    50b8:	a9 01       	movw	r20, r18
    50ba:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	a8 ec       	ldi	r26, 0xC8	; 200
    50c4:	b2 e4       	ldi	r27, 0x42	; 66
    50c6:	8f a3       	std	Y+39, r24	; 0x27
    50c8:	98 a7       	std	Y+40, r25	; 0x28
    50ca:	a9 a7       	std	Y+41, r26	; 0x29
    50cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ce:	6f a1       	ldd	r22, Y+39	; 0x27
    50d0:	78 a5       	ldd	r23, Y+40	; 0x28
    50d2:	89 a5       	ldd	r24, Y+41	; 0x29
    50d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	4a e7       	ldi	r20, 0x7A	; 122
    50dc:	55 e4       	ldi	r21, 0x45	; 69
    50de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	8b a3       	std	Y+35, r24	; 0x23
    50e8:	9c a3       	std	Y+36, r25	; 0x24
    50ea:	ad a3       	std	Y+37, r26	; 0x25
    50ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50ee:	6b a1       	ldd	r22, Y+35	; 0x23
    50f0:	7c a1       	ldd	r23, Y+36	; 0x24
    50f2:	8d a1       	ldd	r24, Y+37	; 0x25
    50f4:	9e a1       	ldd	r25, Y+38	; 0x26
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	5f e3       	ldi	r21, 0x3F	; 63
    50fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5102:	88 23       	and	r24, r24
    5104:	2c f4       	brge	.+10     	; 0x5110 <readDistance+0xea>
		__ticks = 1;
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	9a a3       	std	Y+34, r25	; 0x22
    510c:	89 a3       	std	Y+33, r24	; 0x21
    510e:	3f c0       	rjmp	.+126    	; 0x518e <readDistance+0x168>
	else if (__tmp > 65535)
    5110:	6b a1       	ldd	r22, Y+35	; 0x23
    5112:	7c a1       	ldd	r23, Y+36	; 0x24
    5114:	8d a1       	ldd	r24, Y+37	; 0x25
    5116:	9e a1       	ldd	r25, Y+38	; 0x26
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	3f ef       	ldi	r19, 0xFF	; 255
    511c:	4f e7       	ldi	r20, 0x7F	; 127
    511e:	57 e4       	ldi	r21, 0x47	; 71
    5120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5124:	18 16       	cp	r1, r24
    5126:	4c f5       	brge	.+82     	; 0x517a <readDistance+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5128:	6f a1       	ldd	r22, Y+39	; 0x27
    512a:	78 a5       	ldd	r23, Y+40	; 0x28
    512c:	89 a5       	ldd	r24, Y+41	; 0x29
    512e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e2       	ldi	r20, 0x20	; 32
    5136:	51 e4       	ldi	r21, 0x41	; 65
    5138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513c:	dc 01       	movw	r26, r24
    513e:	cb 01       	movw	r24, r22
    5140:	bc 01       	movw	r22, r24
    5142:	cd 01       	movw	r24, r26
    5144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	9a a3       	std	Y+34, r25	; 0x22
    514e:	89 a3       	std	Y+33, r24	; 0x21
    5150:	0f c0       	rjmp	.+30     	; 0x5170 <readDistance+0x14a>
    5152:	80 e9       	ldi	r24, 0x90	; 144
    5154:	91 e0       	ldi	r25, 0x01	; 1
    5156:	98 a3       	std	Y+32, r25	; 0x20
    5158:	8f 8f       	std	Y+31, r24	; 0x1f
    515a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    515c:	98 a1       	ldd	r25, Y+32	; 0x20
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	f1 f7       	brne	.-4      	; 0x515e <readDistance+0x138>
    5162:	98 a3       	std	Y+32, r25	; 0x20
    5164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5166:	89 a1       	ldd	r24, Y+33	; 0x21
    5168:	9a a1       	ldd	r25, Y+34	; 0x22
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	9a a3       	std	Y+34, r25	; 0x22
    516e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5170:	89 a1       	ldd	r24, Y+33	; 0x21
    5172:	9a a1       	ldd	r25, Y+34	; 0x22
    5174:	00 97       	sbiw	r24, 0x00	; 0
    5176:	69 f7       	brne	.-38     	; 0x5152 <readDistance+0x12c>
    5178:	14 c0       	rjmp	.+40     	; 0x51a2 <readDistance+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    517a:	6b a1       	ldd	r22, Y+35	; 0x23
    517c:	7c a1       	ldd	r23, Y+36	; 0x24
    517e:	8d a1       	ldd	r24, Y+37	; 0x25
    5180:	9e a1       	ldd	r25, Y+38	; 0x26
    5182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	9a a3       	std	Y+34, r25	; 0x22
    518c:	89 a3       	std	Y+33, r24	; 0x21
    518e:	89 a1       	ldd	r24, Y+33	; 0x21
    5190:	9a a1       	ldd	r25, Y+34	; 0x22
    5192:	9e 8f       	std	Y+30, r25	; 0x1e
    5194:	8d 8f       	std	Y+29, r24	; 0x1d
    5196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <readDistance+0x174>
    519e:	9e 8f       	std	Y+30, r25	; 0x1e
    51a0:	8d 8f       	std	Y+29, r24	; 0x1d
	}

	_delay_ms(100);

	g_distanceForward = Ultrasonic_readDistance(U_forward);
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <Ultrasonic_readDistance>
    51a8:	90 93 c2 01 	sts	0x01C2, r25
    51ac:	80 93 c1 01 	sts	0x01C1, r24

	LCD_displayStringRowColumn(1, 0, "F:");
    51b0:	29 e6       	ldi	r18, 0x69	; 105
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	a9 01       	movw	r20, r18
    51ba:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 2);
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	62 e0       	ldi	r22, 0x02	; 2
    51c2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <LCD_moveCursor>
	LCD_intgerToString(g_distanceForward);
    51c6:	80 91 c1 01 	lds	r24, 0x01C1
    51ca:	90 91 c2 01 	lds	r25, 0x01C2
    51ce:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <LCD_intgerToString>

	if (g_distanceForward < 100)
    51d2:	80 91 c1 01 	lds	r24, 0x01C1
    51d6:	90 91 c2 01 	lds	r25, 0x01C2
    51da:	84 36       	cpi	r24, 0x64	; 100
    51dc:	91 05       	cpc	r25, r1
    51de:	38 f4       	brcc	.+14     	; 0x51ee <readDistance+0x1c8>
	{
		LCD_displayStringRowColumn(1, 5, " ");
    51e0:	23 e6       	ldi	r18, 0x63	; 99
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	65 e0       	ldi	r22, 0x05	; 5
    51e8:	a9 01       	movw	r20, r18
    51ea:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}
	if (g_distanceForward >= 100)
    51ee:	80 91 c1 01 	lds	r24, 0x01C1
    51f2:	90 91 c2 01 	lds	r25, 0x01C2
    51f6:	84 36       	cpi	r24, 0x64	; 100
    51f8:	91 05       	cpc	r25, r1
    51fa:	38 f0       	brcs	.+14     	; 0x520a <readDistance+0x1e4>
	{
		LCD_displayStringRowColumn(1, 2, "99 ");
    51fc:	25 e6       	ldi	r18, 0x65	; 101
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	62 e0       	ldi	r22, 0x02	; 2
    5204:	a9 01       	movw	r20, r18
    5206:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}
	if (g_distanceForward < 10)
    520a:	80 91 c1 01 	lds	r24, 0x01C1
    520e:	90 91 c2 01 	lds	r25, 0x01C2
    5212:	8a 30       	cpi	r24, 0x0A	; 10
    5214:	91 05       	cpc	r25, r1
    5216:	38 f4       	brcc	.+14     	; 0x5226 <readDistance+0x200>
	{
		LCD_displayStringRowColumn(1, 3, " ");
    5218:	23 e6       	ldi	r18, 0x63	; 99
    521a:	30 e0       	ldi	r19, 0x00	; 0
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	63 e0       	ldi	r22, 0x03	; 3
    5220:	a9 01       	movw	r20, r18
    5222:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	a8 ec       	ldi	r26, 0xC8	; 200
    522c:	b2 e4       	ldi	r27, 0x42	; 66
    522e:	89 8f       	std	Y+25, r24	; 0x19
    5230:	9a 8f       	std	Y+26, r25	; 0x1a
    5232:	ab 8f       	std	Y+27, r26	; 0x1b
    5234:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5236:	69 8d       	ldd	r22, Y+25	; 0x19
    5238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    523a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    523c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	4a e7       	ldi	r20, 0x7A	; 122
    5244:	55 e4       	ldi	r21, 0x45	; 69
    5246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524a:	dc 01       	movw	r26, r24
    524c:	cb 01       	movw	r24, r22
    524e:	8d 8b       	std	Y+21, r24	; 0x15
    5250:	9e 8b       	std	Y+22, r25	; 0x16
    5252:	af 8b       	std	Y+23, r26	; 0x17
    5254:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5256:	6d 89       	ldd	r22, Y+21	; 0x15
    5258:	7e 89       	ldd	r23, Y+22	; 0x16
    525a:	8f 89       	ldd	r24, Y+23	; 0x17
    525c:	98 8d       	ldd	r25, Y+24	; 0x18
    525e:	20 e0       	ldi	r18, 0x00	; 0
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	40 e8       	ldi	r20, 0x80	; 128
    5264:	5f e3       	ldi	r21, 0x3F	; 63
    5266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    526a:	88 23       	and	r24, r24
    526c:	2c f4       	brge	.+10     	; 0x5278 <readDistance+0x252>
		__ticks = 1;
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	9c 8b       	std	Y+20, r25	; 0x14
    5274:	8b 8b       	std	Y+19, r24	; 0x13
    5276:	3f c0       	rjmp	.+126    	; 0x52f6 <readDistance+0x2d0>
	else if (__tmp > 65535)
    5278:	6d 89       	ldd	r22, Y+21	; 0x15
    527a:	7e 89       	ldd	r23, Y+22	; 0x16
    527c:	8f 89       	ldd	r24, Y+23	; 0x17
    527e:	98 8d       	ldd	r25, Y+24	; 0x18
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	3f ef       	ldi	r19, 0xFF	; 255
    5284:	4f e7       	ldi	r20, 0x7F	; 127
    5286:	57 e4       	ldi	r21, 0x47	; 71
    5288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    528c:	18 16       	cp	r1, r24
    528e:	4c f5       	brge	.+82     	; 0x52e2 <readDistance+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5290:	69 8d       	ldd	r22, Y+25	; 0x19
    5292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5298:	20 e0       	ldi	r18, 0x00	; 0
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	40 e2       	ldi	r20, 0x20	; 32
    529e:	51 e4       	ldi	r21, 0x41	; 65
    52a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a4:	dc 01       	movw	r26, r24
    52a6:	cb 01       	movw	r24, r22
    52a8:	bc 01       	movw	r22, r24
    52aa:	cd 01       	movw	r24, r26
    52ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	9c 8b       	std	Y+20, r25	; 0x14
    52b6:	8b 8b       	std	Y+19, r24	; 0x13
    52b8:	0f c0       	rjmp	.+30     	; 0x52d8 <readDistance+0x2b2>
    52ba:	80 e9       	ldi	r24, 0x90	; 144
    52bc:	91 e0       	ldi	r25, 0x01	; 1
    52be:	9a 8b       	std	Y+18, r25	; 0x12
    52c0:	89 8b       	std	Y+17, r24	; 0x11
    52c2:	89 89       	ldd	r24, Y+17	; 0x11
    52c4:	9a 89       	ldd	r25, Y+18	; 0x12
    52c6:	01 97       	sbiw	r24, 0x01	; 1
    52c8:	f1 f7       	brne	.-4      	; 0x52c6 <readDistance+0x2a0>
    52ca:	9a 8b       	std	Y+18, r25	; 0x12
    52cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ce:	8b 89       	ldd	r24, Y+19	; 0x13
    52d0:	9c 89       	ldd	r25, Y+20	; 0x14
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	9c 8b       	std	Y+20, r25	; 0x14
    52d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d8:	8b 89       	ldd	r24, Y+19	; 0x13
    52da:	9c 89       	ldd	r25, Y+20	; 0x14
    52dc:	00 97       	sbiw	r24, 0x00	; 0
    52de:	69 f7       	brne	.-38     	; 0x52ba <readDistance+0x294>
    52e0:	14 c0       	rjmp	.+40     	; 0x530a <readDistance+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e2:	6d 89       	ldd	r22, Y+21	; 0x15
    52e4:	7e 89       	ldd	r23, Y+22	; 0x16
    52e6:	8f 89       	ldd	r24, Y+23	; 0x17
    52e8:	98 8d       	ldd	r25, Y+24	; 0x18
    52ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	9c 8b       	std	Y+20, r25	; 0x14
    52f4:	8b 8b       	std	Y+19, r24	; 0x13
    52f6:	8b 89       	ldd	r24, Y+19	; 0x13
    52f8:	9c 89       	ldd	r25, Y+20	; 0x14
    52fa:	98 8b       	std	Y+16, r25	; 0x10
    52fc:	8f 87       	std	Y+15, r24	; 0x0f
    52fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5300:	98 89       	ldd	r25, Y+16	; 0x10
    5302:	01 97       	sbiw	r24, 0x01	; 1
    5304:	f1 f7       	brne	.-4      	; 0x5302 <readDistance+0x2dc>
    5306:	98 8b       	std	Y+16, r25	; 0x10
    5308:	8f 87       	std	Y+15, r24	; 0x0f
	}

	_delay_ms(100);

	g_distanceBackward = Ultrasonic_readDistance(U_backward);
    530a:	82 e0       	ldi	r24, 0x02	; 2
    530c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <Ultrasonic_readDistance>
    5310:	90 93 c4 01 	sts	0x01C4, r25
    5314:	80 93 c3 01 	sts	0x01C3, r24

	LCD_displayStringRowColumn(1, 6, "B:");
    5318:	2c e6       	ldi	r18, 0x6C	; 108
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	66 e0       	ldi	r22, 0x06	; 6
    5320:	a9 01       	movw	r20, r18
    5322:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 9);
    5326:	81 e0       	ldi	r24, 0x01	; 1
    5328:	69 e0       	ldi	r22, 0x09	; 9
    532a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <LCD_moveCursor>
	LCD_intgerToString(g_distanceBackward);
    532e:	80 91 c3 01 	lds	r24, 0x01C3
    5332:	90 91 c4 01 	lds	r25, 0x01C4
    5336:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <LCD_intgerToString>

	if (g_distanceBackward < 100)
    533a:	80 91 c3 01 	lds	r24, 0x01C3
    533e:	90 91 c4 01 	lds	r25, 0x01C4
    5342:	84 36       	cpi	r24, 0x64	; 100
    5344:	91 05       	cpc	r25, r1
    5346:	38 f4       	brcc	.+14     	; 0x5356 <readDistance+0x330>
	{
		LCD_displayStringRowColumn(1, 12, " ");
    5348:	23 e6       	ldi	r18, 0x63	; 99
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	6c e0       	ldi	r22, 0x0C	; 12
    5350:	a9 01       	movw	r20, r18
    5352:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}
	if (g_distanceBackward >= 100)
    5356:	80 91 c3 01 	lds	r24, 0x01C3
    535a:	90 91 c4 01 	lds	r25, 0x01C4
    535e:	84 36       	cpi	r24, 0x64	; 100
    5360:	91 05       	cpc	r25, r1
    5362:	38 f0       	brcs	.+14     	; 0x5372 <readDistance+0x34c>
	{
		LCD_displayStringRowColumn(1, 9, "99 ");
    5364:	25 e6       	ldi	r18, 0x65	; 101
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	69 e0       	ldi	r22, 0x09	; 9
    536c:	a9 01       	movw	r20, r18
    536e:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}
	if (g_distanceBackward < 10)
    5372:	80 91 c3 01 	lds	r24, 0x01C3
    5376:	90 91 c4 01 	lds	r25, 0x01C4
    537a:	8a 30       	cpi	r24, 0x0A	; 10
    537c:	91 05       	cpc	r25, r1
    537e:	38 f4       	brcc	.+14     	; 0x538e <readDistance+0x368>
	{
		LCD_displayStringRowColumn(1, 10, " ");
    5380:	23 e6       	ldi	r18, 0x63	; 99
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	6a e0       	ldi	r22, 0x0A	; 10
    5388:	a9 01       	movw	r20, r18
    538a:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	a8 ec       	ldi	r26, 0xC8	; 200
    5394:	b2 e4       	ldi	r27, 0x42	; 66
    5396:	8b 87       	std	Y+11, r24	; 0x0b
    5398:	9c 87       	std	Y+12, r25	; 0x0c
    539a:	ad 87       	std	Y+13, r26	; 0x0d
    539c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    539e:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	4a e7       	ldi	r20, 0x7A	; 122
    53ac:	55 e4       	ldi	r21, 0x45	; 69
    53ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b2:	dc 01       	movw	r26, r24
    53b4:	cb 01       	movw	r24, r22
    53b6:	8f 83       	std	Y+7, r24	; 0x07
    53b8:	98 87       	std	Y+8, r25	; 0x08
    53ba:	a9 87       	std	Y+9, r26	; 0x09
    53bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53be:	6f 81       	ldd	r22, Y+7	; 0x07
    53c0:	78 85       	ldd	r23, Y+8	; 0x08
    53c2:	89 85       	ldd	r24, Y+9	; 0x09
    53c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53c6:	20 e0       	ldi	r18, 0x00	; 0
    53c8:	30 e0       	ldi	r19, 0x00	; 0
    53ca:	40 e8       	ldi	r20, 0x80	; 128
    53cc:	5f e3       	ldi	r21, 0x3F	; 63
    53ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53d2:	88 23       	and	r24, r24
    53d4:	2c f4       	brge	.+10     	; 0x53e0 <readDistance+0x3ba>
		__ticks = 1;
    53d6:	81 e0       	ldi	r24, 0x01	; 1
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	9e 83       	std	Y+6, r25	; 0x06
    53dc:	8d 83       	std	Y+5, r24	; 0x05
    53de:	3f c0       	rjmp	.+126    	; 0x545e <readDistance+0x438>
	else if (__tmp > 65535)
    53e0:	6f 81       	ldd	r22, Y+7	; 0x07
    53e2:	78 85       	ldd	r23, Y+8	; 0x08
    53e4:	89 85       	ldd	r24, Y+9	; 0x09
    53e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e8:	20 e0       	ldi	r18, 0x00	; 0
    53ea:	3f ef       	ldi	r19, 0xFF	; 255
    53ec:	4f e7       	ldi	r20, 0x7F	; 127
    53ee:	57 e4       	ldi	r21, 0x47	; 71
    53f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53f4:	18 16       	cp	r1, r24
    53f6:	4c f5       	brge	.+82     	; 0x544a <readDistance+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    53fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    53fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	40 e2       	ldi	r20, 0x20	; 32
    5406:	51 e4       	ldi	r21, 0x41	; 65
    5408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	bc 01       	movw	r22, r24
    5412:	cd 01       	movw	r24, r26
    5414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	9e 83       	std	Y+6, r25	; 0x06
    541e:	8d 83       	std	Y+5, r24	; 0x05
    5420:	0f c0       	rjmp	.+30     	; 0x5440 <readDistance+0x41a>
    5422:	80 e9       	ldi	r24, 0x90	; 144
    5424:	91 e0       	ldi	r25, 0x01	; 1
    5426:	9c 83       	std	Y+4, r25	; 0x04
    5428:	8b 83       	std	Y+3, r24	; 0x03
    542a:	8b 81       	ldd	r24, Y+3	; 0x03
    542c:	9c 81       	ldd	r25, Y+4	; 0x04
    542e:	01 97       	sbiw	r24, 0x01	; 1
    5430:	f1 f7       	brne	.-4      	; 0x542e <readDistance+0x408>
    5432:	9c 83       	std	Y+4, r25	; 0x04
    5434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5436:	8d 81       	ldd	r24, Y+5	; 0x05
    5438:	9e 81       	ldd	r25, Y+6	; 0x06
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	9e 83       	std	Y+6, r25	; 0x06
    543e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5440:	8d 81       	ldd	r24, Y+5	; 0x05
    5442:	9e 81       	ldd	r25, Y+6	; 0x06
    5444:	00 97       	sbiw	r24, 0x00	; 0
    5446:	69 f7       	brne	.-38     	; 0x5422 <readDistance+0x3fc>
    5448:	14 c0       	rjmp	.+40     	; 0x5472 <readDistance+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    544a:	6f 81       	ldd	r22, Y+7	; 0x07
    544c:	78 85       	ldd	r23, Y+8	; 0x08
    544e:	89 85       	ldd	r24, Y+9	; 0x09
    5450:	9a 85       	ldd	r25, Y+10	; 0x0a
    5452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	9e 83       	std	Y+6, r25	; 0x06
    545c:	8d 83       	std	Y+5, r24	; 0x05
    545e:	8d 81       	ldd	r24, Y+5	; 0x05
    5460:	9e 81       	ldd	r25, Y+6	; 0x06
    5462:	9a 83       	std	Y+2, r25	; 0x02
    5464:	89 83       	std	Y+1, r24	; 0x01
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	9a 81       	ldd	r25, Y+2	; 0x02
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	f1 f7       	brne	.-4      	; 0x546a <readDistance+0x444>
    546e:	9a 83       	std	Y+2, r25	; 0x02
    5470:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(100);

	if(g_distanceRight >= 100)
    5472:	80 91 bf 01 	lds	r24, 0x01BF
    5476:	90 91 c0 01 	lds	r25, 0x01C0
    547a:	84 36       	cpi	r24, 0x64	; 100
    547c:	91 05       	cpc	r25, r1
    547e:	30 f0       	brcs	.+12     	; 0x548c <readDistance+0x466>
	{
		g_distanceRight = 99;
    5480:	83 e6       	ldi	r24, 0x63	; 99
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	90 93 c0 01 	sts	0x01C0, r25
    5488:	80 93 bf 01 	sts	0x01BF, r24
	}
	if(g_distanceForward >= 100)
    548c:	80 91 c1 01 	lds	r24, 0x01C1
    5490:	90 91 c2 01 	lds	r25, 0x01C2
    5494:	84 36       	cpi	r24, 0x64	; 100
    5496:	91 05       	cpc	r25, r1
    5498:	30 f0       	brcs	.+12     	; 0x54a6 <readDistance+0x480>
	{
		g_distanceForward = 99;
    549a:	83 e6       	ldi	r24, 0x63	; 99
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	90 93 c2 01 	sts	0x01C2, r25
    54a2:	80 93 c1 01 	sts	0x01C1, r24
	}
	if(g_distanceBackward >= 100)
    54a6:	80 91 c3 01 	lds	r24, 0x01C3
    54aa:	90 91 c4 01 	lds	r25, 0x01C4
    54ae:	84 36       	cpi	r24, 0x64	; 100
    54b0:	91 05       	cpc	r25, r1
    54b2:	30 f0       	brcs	.+12     	; 0x54c0 <readDistance+0x49a>
	{
		g_distanceBackward = 99;
    54b4:	83 e6       	ldi	r24, 0x63	; 99
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	90 93 c4 01 	sts	0x01C4, r25
    54bc:	80 93 c3 01 	sts	0x01C3, r24
	}

	l_nums[0] = g_distanceRight;
    54c0:	80 91 bf 01 	lds	r24, 0x01BF
    54c4:	90 91 c0 01 	lds	r25, 0x01C0
    54c8:	9c a7       	std	Y+44, r25	; 0x2c
    54ca:	8b a7       	std	Y+43, r24	; 0x2b
	l_nums[1] = g_distanceForward;
    54cc:	80 91 c1 01 	lds	r24, 0x01C1
    54d0:	90 91 c2 01 	lds	r25, 0x01C2
    54d4:	9e a7       	std	Y+46, r25	; 0x2e
    54d6:	8d a7       	std	Y+45, r24	; 0x2d
	l_nums[2] = g_distanceBackward;
    54d8:	80 91 c3 01 	lds	r24, 0x01C3
    54dc:	90 91 c4 01 	lds	r25, 0x01C4
    54e0:	98 ab       	std	Y+48, r25	; 0x30
    54e2:	8f a7       	std	Y+47, r24	; 0x2f

	UART_SendNumbersWithDelimiter(l_nums, 3, ',');
    54e4:	ce 01       	movw	r24, r28
    54e6:	8b 96       	adiw	r24, 0x2b	; 43
    54e8:	63 e0       	ldi	r22, 0x03	; 3
    54ea:	4c e2       	ldi	r20, 0x2C	; 44
    54ec:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <UART_SendNumbersWithDelimiter>
}
    54f0:	e0 96       	adiw	r28, 0x30	; 48
    54f2:	0f b6       	in	r0, 0x3f	; 63
    54f4:	f8 94       	cli
    54f6:	de bf       	out	0x3e, r29	; 62
    54f8:	0f be       	out	0x3f, r0	; 63
    54fa:	cd bf       	out	0x3d, r28	; 61
    54fc:	cf 91       	pop	r28
    54fe:	df 91       	pop	r29
    5500:	08 95       	ret

00005502 <collisionAvoidance>:

void collisionAvoidance(void)
{
    5502:	df 93       	push	r29
    5504:	cf 93       	push	r28
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62
	if(g_distanceForward <= 20 && (g_selection == 'F' || g_selection == 'R' || g_selection == 'L'))
    550a:	80 91 c1 01 	lds	r24, 0x01C1
    550e:	90 91 c2 01 	lds	r25, 0x01C2
    5512:	85 31       	cpi	r24, 0x15	; 21
    5514:	91 05       	cpc	r25, r1
    5516:	d0 f4       	brcc	.+52     	; 0x554c <collisionAvoidance+0x4a>
    5518:	80 91 c5 01 	lds	r24, 0x01C5
    551c:	86 34       	cpi	r24, 0x46	; 70
    551e:	41 f0       	breq	.+16     	; 0x5530 <collisionAvoidance+0x2e>
    5520:	80 91 c5 01 	lds	r24, 0x01C5
    5524:	82 35       	cpi	r24, 0x52	; 82
    5526:	21 f0       	breq	.+8      	; 0x5530 <collisionAvoidance+0x2e>
    5528:	80 91 c5 01 	lds	r24, 0x01C5
    552c:	8c 34       	cpi	r24, 0x4C	; 76
    552e:	71 f4       	brne	.+28     	; 0x554c <collisionAvoidance+0x4a>
	{
		if(g_distanceForward <= 10)
    5530:	80 91 c1 01 	lds	r24, 0x01C1
    5534:	90 91 c2 01 	lds	r25, 0x01C2
    5538:	8b 30       	cpi	r24, 0x0B	; 11
    553a:	91 05       	cpc	r25, r1
    553c:	28 f4       	brcc	.+10     	; 0x5548 <collisionAvoidance+0x46>
		{
			Stop();
    553e:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
			Buzzer_off();
    5542:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <Buzzer_off>
    5546:	02 c0       	rjmp	.+4      	; 0x554c <collisionAvoidance+0x4a>
		}
		else
		{
			Buzzer_on();
    5548:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <Buzzer_on>
		}
	}


	if(g_distanceBackward <= 20 && (g_selection == 'B' || g_selection == 'A' || g_selection == 'H'))
    554c:	80 91 c3 01 	lds	r24, 0x01C3
    5550:	90 91 c4 01 	lds	r25, 0x01C4
    5554:	85 31       	cpi	r24, 0x15	; 21
    5556:	91 05       	cpc	r25, r1
    5558:	d0 f4       	brcc	.+52     	; 0x558e <collisionAvoidance+0x8c>
    555a:	80 91 c5 01 	lds	r24, 0x01C5
    555e:	82 34       	cpi	r24, 0x42	; 66
    5560:	41 f0       	breq	.+16     	; 0x5572 <collisionAvoidance+0x70>
    5562:	80 91 c5 01 	lds	r24, 0x01C5
    5566:	81 34       	cpi	r24, 0x41	; 65
    5568:	21 f0       	breq	.+8      	; 0x5572 <collisionAvoidance+0x70>
    556a:	80 91 c5 01 	lds	r24, 0x01C5
    556e:	88 34       	cpi	r24, 0x48	; 72
    5570:	71 f4       	brne	.+28     	; 0x558e <collisionAvoidance+0x8c>
	{
		if(g_distanceBackward <= 10)
    5572:	80 91 c3 01 	lds	r24, 0x01C3
    5576:	90 91 c4 01 	lds	r25, 0x01C4
    557a:	8b 30       	cpi	r24, 0x0B	; 11
    557c:	91 05       	cpc	r25, r1
    557e:	28 f4       	brcc	.+10     	; 0x558a <collisionAvoidance+0x88>
		{
			Stop();
    5580:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
			Buzzer_off();
    5584:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <Buzzer_off>
    5588:	02 c0       	rjmp	.+4      	; 0x558e <collisionAvoidance+0x8c>
		}
		else
		{
			Buzzer_on();
    558a:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <Buzzer_on>
		}
	}
}
    558e:	cf 91       	pop	r28
    5590:	df 91       	pop	r29
    5592:	08 95       	ret

00005594 <autoParking>:

void autoParking (void)
{
    5594:	0f 93       	push	r16
    5596:	1f 93       	push	r17
    5598:	df 93       	push	r29
    559a:	cf 93       	push	r28
    559c:	cd b7       	in	r28, 0x3d	; 61
    559e:	de b7       	in	r29, 0x3e	; 62
    55a0:	cb 59       	subi	r28, 0x9B	; 155
    55a2:	d0 40       	sbci	r29, 0x00	; 0
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
	uint8 l_counter = 0;
    55ae:	fe 01       	movw	r30, r28
    55b0:	e5 56       	subi	r30, 0x65	; 101
    55b2:	ff 4f       	sbci	r31, 0xFF	; 255
    55b4:	10 82       	st	Z, r1

	LCD_clearScreen();
    55b6:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <LCD_clearScreen>
    55ba:	fe 01       	movw	r30, r28
    55bc:	e9 56       	subi	r30, 0x69	; 105
    55be:	ff 4f       	sbci	r31, 0xFF	; 255
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	aa ef       	ldi	r26, 0xFA	; 250
    55c6:	b3 e4       	ldi	r27, 0x43	; 67
    55c8:	80 83       	st	Z, r24
    55ca:	91 83       	std	Z+1, r25	; 0x01
    55cc:	a2 83       	std	Z+2, r26	; 0x02
    55ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d0:	8e 01       	movw	r16, r28
    55d2:	0d 56       	subi	r16, 0x6D	; 109
    55d4:	1f 4f       	sbci	r17, 0xFF	; 255
    55d6:	fe 01       	movw	r30, r28
    55d8:	e9 56       	subi	r30, 0x69	; 105
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	60 81       	ld	r22, Z
    55de:	71 81       	ldd	r23, Z+1	; 0x01
    55e0:	82 81       	ldd	r24, Z+2	; 0x02
    55e2:	93 81       	ldd	r25, Z+3	; 0x03
    55e4:	20 e0       	ldi	r18, 0x00	; 0
    55e6:	30 e0       	ldi	r19, 0x00	; 0
    55e8:	4a e7       	ldi	r20, 0x7A	; 122
    55ea:	55 e4       	ldi	r21, 0x45	; 69
    55ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f0:	dc 01       	movw	r26, r24
    55f2:	cb 01       	movw	r24, r22
    55f4:	f8 01       	movw	r30, r16
    55f6:	80 83       	st	Z, r24
    55f8:	91 83       	std	Z+1, r25	; 0x01
    55fa:	a2 83       	std	Z+2, r26	; 0x02
    55fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55fe:	fe 01       	movw	r30, r28
    5600:	ed 56       	subi	r30, 0x6D	; 109
    5602:	ff 4f       	sbci	r31, 0xFF	; 255
    5604:	60 81       	ld	r22, Z
    5606:	71 81       	ldd	r23, Z+1	; 0x01
    5608:	82 81       	ldd	r24, Z+2	; 0x02
    560a:	93 81       	ldd	r25, Z+3	; 0x03
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	40 e8       	ldi	r20, 0x80	; 128
    5612:	5f e3       	ldi	r21, 0x3F	; 63
    5614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5618:	88 23       	and	r24, r24
    561a:	44 f4       	brge	.+16     	; 0x562c <autoParking+0x98>
		__ticks = 1;
    561c:	fe 01       	movw	r30, r28
    561e:	ef 56       	subi	r30, 0x6F	; 111
    5620:	ff 4f       	sbci	r31, 0xFF	; 255
    5622:	81 e0       	ldi	r24, 0x01	; 1
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	91 83       	std	Z+1, r25	; 0x01
    5628:	80 83       	st	Z, r24
    562a:	64 c0       	rjmp	.+200    	; 0x56f4 <autoParking+0x160>
	else if (__tmp > 65535)
    562c:	fe 01       	movw	r30, r28
    562e:	ed 56       	subi	r30, 0x6D	; 109
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	60 81       	ld	r22, Z
    5634:	71 81       	ldd	r23, Z+1	; 0x01
    5636:	82 81       	ldd	r24, Z+2	; 0x02
    5638:	93 81       	ldd	r25, Z+3	; 0x03
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	3f ef       	ldi	r19, 0xFF	; 255
    563e:	4f e7       	ldi	r20, 0x7F	; 127
    5640:	57 e4       	ldi	r21, 0x47	; 71
    5642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5646:	18 16       	cp	r1, r24
    5648:	0c f0       	brlt	.+2      	; 0x564c <autoParking+0xb8>
    564a:	43 c0       	rjmp	.+134    	; 0x56d2 <autoParking+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    564c:	fe 01       	movw	r30, r28
    564e:	e9 56       	subi	r30, 0x69	; 105
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	60 81       	ld	r22, Z
    5654:	71 81       	ldd	r23, Z+1	; 0x01
    5656:	82 81       	ldd	r24, Z+2	; 0x02
    5658:	93 81       	ldd	r25, Z+3	; 0x03
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	40 e2       	ldi	r20, 0x20	; 32
    5660:	51 e4       	ldi	r21, 0x41	; 65
    5662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5666:	dc 01       	movw	r26, r24
    5668:	cb 01       	movw	r24, r22
    566a:	8e 01       	movw	r16, r28
    566c:	0f 56       	subi	r16, 0x6F	; 111
    566e:	1f 4f       	sbci	r17, 0xFF	; 255
    5670:	bc 01       	movw	r22, r24
    5672:	cd 01       	movw	r24, r26
    5674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5678:	dc 01       	movw	r26, r24
    567a:	cb 01       	movw	r24, r22
    567c:	f8 01       	movw	r30, r16
    567e:	91 83       	std	Z+1, r25	; 0x01
    5680:	80 83       	st	Z, r24
    5682:	1f c0       	rjmp	.+62     	; 0x56c2 <autoParking+0x12e>
    5684:	fe 01       	movw	r30, r28
    5686:	e1 57       	subi	r30, 0x71	; 113
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	80 e9       	ldi	r24, 0x90	; 144
    568c:	91 e0       	ldi	r25, 0x01	; 1
    568e:	91 83       	std	Z+1, r25	; 0x01
    5690:	80 83       	st	Z, r24
    5692:	fe 01       	movw	r30, r28
    5694:	e1 57       	subi	r30, 0x71	; 113
    5696:	ff 4f       	sbci	r31, 0xFF	; 255
    5698:	80 81       	ld	r24, Z
    569a:	91 81       	ldd	r25, Z+1	; 0x01
    569c:	01 97       	sbiw	r24, 0x01	; 1
    569e:	f1 f7       	brne	.-4      	; 0x569c <autoParking+0x108>
    56a0:	fe 01       	movw	r30, r28
    56a2:	e1 57       	subi	r30, 0x71	; 113
    56a4:	ff 4f       	sbci	r31, 0xFF	; 255
    56a6:	91 83       	std	Z+1, r25	; 0x01
    56a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56aa:	de 01       	movw	r26, r28
    56ac:	af 56       	subi	r26, 0x6F	; 111
    56ae:	bf 4f       	sbci	r27, 0xFF	; 255
    56b0:	fe 01       	movw	r30, r28
    56b2:	ef 56       	subi	r30, 0x6F	; 111
    56b4:	ff 4f       	sbci	r31, 0xFF	; 255
    56b6:	80 81       	ld	r24, Z
    56b8:	91 81       	ldd	r25, Z+1	; 0x01
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	11 96       	adiw	r26, 0x01	; 1
    56be:	9c 93       	st	X, r25
    56c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c2:	fe 01       	movw	r30, r28
    56c4:	ef 56       	subi	r30, 0x6F	; 111
    56c6:	ff 4f       	sbci	r31, 0xFF	; 255
    56c8:	80 81       	ld	r24, Z
    56ca:	91 81       	ldd	r25, Z+1	; 0x01
    56cc:	00 97       	sbiw	r24, 0x00	; 0
    56ce:	d1 f6       	brne	.-76     	; 0x5684 <autoParking+0xf0>
    56d0:	27 c0       	rjmp	.+78     	; 0x5720 <autoParking+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56d2:	8e 01       	movw	r16, r28
    56d4:	0f 56       	subi	r16, 0x6F	; 111
    56d6:	1f 4f       	sbci	r17, 0xFF	; 255
    56d8:	fe 01       	movw	r30, r28
    56da:	ed 56       	subi	r30, 0x6D	; 109
    56dc:	ff 4f       	sbci	r31, 0xFF	; 255
    56de:	60 81       	ld	r22, Z
    56e0:	71 81       	ldd	r23, Z+1	; 0x01
    56e2:	82 81       	ldd	r24, Z+2	; 0x02
    56e4:	93 81       	ldd	r25, Z+3	; 0x03
    56e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	f8 01       	movw	r30, r16
    56f0:	91 83       	std	Z+1, r25	; 0x01
    56f2:	80 83       	st	Z, r24
    56f4:	de 01       	movw	r26, r28
    56f6:	a3 57       	subi	r26, 0x73	; 115
    56f8:	bf 4f       	sbci	r27, 0xFF	; 255
    56fa:	fe 01       	movw	r30, r28
    56fc:	ef 56       	subi	r30, 0x6F	; 111
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	80 81       	ld	r24, Z
    5702:	91 81       	ldd	r25, Z+1	; 0x01
    5704:	8d 93       	st	X+, r24
    5706:	9c 93       	st	X, r25
    5708:	fe 01       	movw	r30, r28
    570a:	e3 57       	subi	r30, 0x73	; 115
    570c:	ff 4f       	sbci	r31, 0xFF	; 255
    570e:	80 81       	ld	r24, Z
    5710:	91 81       	ldd	r25, Z+1	; 0x01
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	f1 f7       	brne	.-4      	; 0x5712 <autoParking+0x17e>
    5716:	fe 01       	movw	r30, r28
    5718:	e3 57       	subi	r30, 0x73	; 115
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	91 83       	std	Z+1, r25	; 0x01
    571e:	80 83       	st	Z, r24

	_delay_ms(500);

	readDistance();
    5720:	0e 94 13 28 	call	0x5026	; 0x5026 <readDistance>

	Forward();
    5724:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Forward>
    5728:	f4 c5       	rjmp	.+3048   	; 0x6312 <autoParking+0xd7e>

	while (30 <= g_distanceRight)
	{
		readDistance();
    572a:	0e 94 13 28 	call	0x5026	; 0x5026 <readDistance>
		collisionAvoidance();
    572e:	0e 94 81 2a 	call	0x5502	; 0x5502 <collisionAvoidance>
    5732:	fe 01       	movw	r30, r28
    5734:	e7 57       	subi	r30, 0x77	; 119
    5736:	ff 4f       	sbci	r31, 0xFF	; 255
    5738:	80 e0       	ldi	r24, 0x00	; 0
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	a8 ec       	ldi	r26, 0xC8	; 200
    573e:	b2 e4       	ldi	r27, 0x42	; 66
    5740:	80 83       	st	Z, r24
    5742:	91 83       	std	Z+1, r25	; 0x01
    5744:	a2 83       	std	Z+2, r26	; 0x02
    5746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5748:	8e 01       	movw	r16, r28
    574a:	0b 57       	subi	r16, 0x7B	; 123
    574c:	1f 4f       	sbci	r17, 0xFF	; 255
    574e:	fe 01       	movw	r30, r28
    5750:	e7 57       	subi	r30, 0x77	; 119
    5752:	ff 4f       	sbci	r31, 0xFF	; 255
    5754:	60 81       	ld	r22, Z
    5756:	71 81       	ldd	r23, Z+1	; 0x01
    5758:	82 81       	ldd	r24, Z+2	; 0x02
    575a:	93 81       	ldd	r25, Z+3	; 0x03
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	4a e7       	ldi	r20, 0x7A	; 122
    5762:	55 e4       	ldi	r21, 0x45	; 69
    5764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	f8 01       	movw	r30, r16
    576e:	80 83       	st	Z, r24
    5770:	91 83       	std	Z+1, r25	; 0x01
    5772:	a2 83       	std	Z+2, r26	; 0x02
    5774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5776:	fe 01       	movw	r30, r28
    5778:	eb 57       	subi	r30, 0x7B	; 123
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	60 81       	ld	r22, Z
    577e:	71 81       	ldd	r23, Z+1	; 0x01
    5780:	82 81       	ldd	r24, Z+2	; 0x02
    5782:	93 81       	ldd	r25, Z+3	; 0x03
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	30 e0       	ldi	r19, 0x00	; 0
    5788:	40 e8       	ldi	r20, 0x80	; 128
    578a:	5f e3       	ldi	r21, 0x3F	; 63
    578c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5790:	88 23       	and	r24, r24
    5792:	44 f4       	brge	.+16     	; 0x57a4 <autoParking+0x210>
		__ticks = 1;
    5794:	fe 01       	movw	r30, r28
    5796:	ed 57       	subi	r30, 0x7D	; 125
    5798:	ff 4f       	sbci	r31, 0xFF	; 255
    579a:	81 e0       	ldi	r24, 0x01	; 1
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	91 83       	std	Z+1, r25	; 0x01
    57a0:	80 83       	st	Z, r24
    57a2:	64 c0       	rjmp	.+200    	; 0x586c <autoParking+0x2d8>
	else if (__tmp > 65535)
    57a4:	fe 01       	movw	r30, r28
    57a6:	eb 57       	subi	r30, 0x7B	; 123
    57a8:	ff 4f       	sbci	r31, 0xFF	; 255
    57aa:	60 81       	ld	r22, Z
    57ac:	71 81       	ldd	r23, Z+1	; 0x01
    57ae:	82 81       	ldd	r24, Z+2	; 0x02
    57b0:	93 81       	ldd	r25, Z+3	; 0x03
    57b2:	20 e0       	ldi	r18, 0x00	; 0
    57b4:	3f ef       	ldi	r19, 0xFF	; 255
    57b6:	4f e7       	ldi	r20, 0x7F	; 127
    57b8:	57 e4       	ldi	r21, 0x47	; 71
    57ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57be:	18 16       	cp	r1, r24
    57c0:	0c f0       	brlt	.+2      	; 0x57c4 <autoParking+0x230>
    57c2:	43 c0       	rjmp	.+134    	; 0x584a <autoParking+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57c4:	fe 01       	movw	r30, r28
    57c6:	e7 57       	subi	r30, 0x77	; 119
    57c8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ca:	60 81       	ld	r22, Z
    57cc:	71 81       	ldd	r23, Z+1	; 0x01
    57ce:	82 81       	ldd	r24, Z+2	; 0x02
    57d0:	93 81       	ldd	r25, Z+3	; 0x03
    57d2:	20 e0       	ldi	r18, 0x00	; 0
    57d4:	30 e0       	ldi	r19, 0x00	; 0
    57d6:	40 e2       	ldi	r20, 0x20	; 32
    57d8:	51 e4       	ldi	r21, 0x41	; 65
    57da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57de:	dc 01       	movw	r26, r24
    57e0:	cb 01       	movw	r24, r22
    57e2:	8e 01       	movw	r16, r28
    57e4:	0d 57       	subi	r16, 0x7D	; 125
    57e6:	1f 4f       	sbci	r17, 0xFF	; 255
    57e8:	bc 01       	movw	r22, r24
    57ea:	cd 01       	movw	r24, r26
    57ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f0:	dc 01       	movw	r26, r24
    57f2:	cb 01       	movw	r24, r22
    57f4:	f8 01       	movw	r30, r16
    57f6:	91 83       	std	Z+1, r25	; 0x01
    57f8:	80 83       	st	Z, r24
    57fa:	1f c0       	rjmp	.+62     	; 0x583a <autoParking+0x2a6>
    57fc:	fe 01       	movw	r30, r28
    57fe:	ef 57       	subi	r30, 0x7F	; 127
    5800:	ff 4f       	sbci	r31, 0xFF	; 255
    5802:	80 e9       	ldi	r24, 0x90	; 144
    5804:	91 e0       	ldi	r25, 0x01	; 1
    5806:	91 83       	std	Z+1, r25	; 0x01
    5808:	80 83       	st	Z, r24
    580a:	fe 01       	movw	r30, r28
    580c:	ef 57       	subi	r30, 0x7F	; 127
    580e:	ff 4f       	sbci	r31, 0xFF	; 255
    5810:	80 81       	ld	r24, Z
    5812:	91 81       	ldd	r25, Z+1	; 0x01
    5814:	01 97       	sbiw	r24, 0x01	; 1
    5816:	f1 f7       	brne	.-4      	; 0x5814 <autoParking+0x280>
    5818:	fe 01       	movw	r30, r28
    581a:	ef 57       	subi	r30, 0x7F	; 127
    581c:	ff 4f       	sbci	r31, 0xFF	; 255
    581e:	91 83       	std	Z+1, r25	; 0x01
    5820:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5822:	de 01       	movw	r26, r28
    5824:	ad 57       	subi	r26, 0x7D	; 125
    5826:	bf 4f       	sbci	r27, 0xFF	; 255
    5828:	fe 01       	movw	r30, r28
    582a:	ed 57       	subi	r30, 0x7D	; 125
    582c:	ff 4f       	sbci	r31, 0xFF	; 255
    582e:	80 81       	ld	r24, Z
    5830:	91 81       	ldd	r25, Z+1	; 0x01
    5832:	01 97       	sbiw	r24, 0x01	; 1
    5834:	11 96       	adiw	r26, 0x01	; 1
    5836:	9c 93       	st	X, r25
    5838:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    583a:	fe 01       	movw	r30, r28
    583c:	ed 57       	subi	r30, 0x7D	; 125
    583e:	ff 4f       	sbci	r31, 0xFF	; 255
    5840:	80 81       	ld	r24, Z
    5842:	91 81       	ldd	r25, Z+1	; 0x01
    5844:	00 97       	sbiw	r24, 0x00	; 0
    5846:	d1 f6       	brne	.-76     	; 0x57fc <autoParking+0x268>
    5848:	27 c0       	rjmp	.+78     	; 0x5898 <autoParking+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    584a:	8e 01       	movw	r16, r28
    584c:	0d 57       	subi	r16, 0x7D	; 125
    584e:	1f 4f       	sbci	r17, 0xFF	; 255
    5850:	fe 01       	movw	r30, r28
    5852:	eb 57       	subi	r30, 0x7B	; 123
    5854:	ff 4f       	sbci	r31, 0xFF	; 255
    5856:	60 81       	ld	r22, Z
    5858:	71 81       	ldd	r23, Z+1	; 0x01
    585a:	82 81       	ldd	r24, Z+2	; 0x02
    585c:	93 81       	ldd	r25, Z+3	; 0x03
    585e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5862:	dc 01       	movw	r26, r24
    5864:	cb 01       	movw	r24, r22
    5866:	f8 01       	movw	r30, r16
    5868:	91 83       	std	Z+1, r25	; 0x01
    586a:	80 83       	st	Z, r24
    586c:	de 01       	movw	r26, r28
    586e:	a1 58       	subi	r26, 0x81	; 129
    5870:	bf 4f       	sbci	r27, 0xFF	; 255
    5872:	fe 01       	movw	r30, r28
    5874:	ed 57       	subi	r30, 0x7D	; 125
    5876:	ff 4f       	sbci	r31, 0xFF	; 255
    5878:	80 81       	ld	r24, Z
    587a:	91 81       	ldd	r25, Z+1	; 0x01
    587c:	8d 93       	st	X+, r24
    587e:	9c 93       	st	X, r25
    5880:	fe 01       	movw	r30, r28
    5882:	e1 58       	subi	r30, 0x81	; 129
    5884:	ff 4f       	sbci	r31, 0xFF	; 255
    5886:	80 81       	ld	r24, Z
    5888:	91 81       	ldd	r25, Z+1	; 0x01
    588a:	01 97       	sbiw	r24, 0x01	; 1
    588c:	f1 f7       	brne	.-4      	; 0x588a <autoParking+0x2f6>
    588e:	fe 01       	movw	r30, r28
    5890:	e1 58       	subi	r30, 0x81	; 129
    5892:	ff 4f       	sbci	r31, 0xFF	; 255
    5894:	91 83       	std	Z+1, r25	; 0x01
    5896:	80 83       	st	Z, r24

		_delay_ms(100);

		l_counter++;
    5898:	de 01       	movw	r26, r28
    589a:	a5 56       	subi	r26, 0x65	; 101
    589c:	bf 4f       	sbci	r27, 0xFF	; 255
    589e:	fe 01       	movw	r30, r28
    58a0:	e5 56       	subi	r30, 0x65	; 101
    58a2:	ff 4f       	sbci	r31, 0xFF	; 255
    58a4:	80 81       	ld	r24, Z
    58a6:	8f 5f       	subi	r24, 0xFF	; 255
    58a8:	8c 93       	st	X, r24
		if (5 < l_counter)
    58aa:	fe 01       	movw	r30, r28
    58ac:	e5 56       	subi	r30, 0x65	; 101
    58ae:	ff 4f       	sbci	r31, 0xFF	; 255
    58b0:	80 81       	ld	r24, Z
    58b2:	86 30       	cpi	r24, 0x06	; 6
    58b4:	08 f4       	brcc	.+2      	; 0x58b8 <autoParking+0x324>
    58b6:	2d c5       	rjmp	.+2650   	; 0x6312 <autoParking+0xd7e>
		{
			LCD_displayStringRowColumn(1, 0, "SPACE Available");
    58b8:	2f e6       	ldi	r18, 0x6F	; 111
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	81 e0       	ldi	r24, 0x01	; 1
    58be:	60 e0       	ldi	r22, 0x00	; 0
    58c0:	a9 01       	movw	r20, r18
    58c2:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>

			Stop();
    58c6:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
    58ca:	fe 01       	movw	r30, r28
    58cc:	e5 58       	subi	r30, 0x85	; 133
    58ce:	ff 4f       	sbci	r31, 0xFF	; 255
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	aa ef       	ldi	r26, 0xFA	; 250
    58d6:	b3 e4       	ldi	r27, 0x43	; 67
    58d8:	80 83       	st	Z, r24
    58da:	91 83       	std	Z+1, r25	; 0x01
    58dc:	a2 83       	std	Z+2, r26	; 0x02
    58de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58e0:	8e 01       	movw	r16, r28
    58e2:	09 58       	subi	r16, 0x89	; 137
    58e4:	1f 4f       	sbci	r17, 0xFF	; 255
    58e6:	fe 01       	movw	r30, r28
    58e8:	e5 58       	subi	r30, 0x85	; 133
    58ea:	ff 4f       	sbci	r31, 0xFF	; 255
    58ec:	60 81       	ld	r22, Z
    58ee:	71 81       	ldd	r23, Z+1	; 0x01
    58f0:	82 81       	ldd	r24, Z+2	; 0x02
    58f2:	93 81       	ldd	r25, Z+3	; 0x03
    58f4:	20 e0       	ldi	r18, 0x00	; 0
    58f6:	30 e0       	ldi	r19, 0x00	; 0
    58f8:	4a e7       	ldi	r20, 0x7A	; 122
    58fa:	55 e4       	ldi	r21, 0x45	; 69
    58fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5900:	dc 01       	movw	r26, r24
    5902:	cb 01       	movw	r24, r22
    5904:	f8 01       	movw	r30, r16
    5906:	80 83       	st	Z, r24
    5908:	91 83       	std	Z+1, r25	; 0x01
    590a:	a2 83       	std	Z+2, r26	; 0x02
    590c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    590e:	fe 01       	movw	r30, r28
    5910:	e9 58       	subi	r30, 0x89	; 137
    5912:	ff 4f       	sbci	r31, 0xFF	; 255
    5914:	60 81       	ld	r22, Z
    5916:	71 81       	ldd	r23, Z+1	; 0x01
    5918:	82 81       	ldd	r24, Z+2	; 0x02
    591a:	93 81       	ldd	r25, Z+3	; 0x03
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	40 e8       	ldi	r20, 0x80	; 128
    5922:	5f e3       	ldi	r21, 0x3F	; 63
    5924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5928:	88 23       	and	r24, r24
    592a:	44 f4       	brge	.+16     	; 0x593c <autoParking+0x3a8>
		__ticks = 1;
    592c:	fe 01       	movw	r30, r28
    592e:	eb 58       	subi	r30, 0x8B	; 139
    5930:	ff 4f       	sbci	r31, 0xFF	; 255
    5932:	81 e0       	ldi	r24, 0x01	; 1
    5934:	90 e0       	ldi	r25, 0x00	; 0
    5936:	91 83       	std	Z+1, r25	; 0x01
    5938:	80 83       	st	Z, r24
    593a:	64 c0       	rjmp	.+200    	; 0x5a04 <autoParking+0x470>
	else if (__tmp > 65535)
    593c:	fe 01       	movw	r30, r28
    593e:	e9 58       	subi	r30, 0x89	; 137
    5940:	ff 4f       	sbci	r31, 0xFF	; 255
    5942:	60 81       	ld	r22, Z
    5944:	71 81       	ldd	r23, Z+1	; 0x01
    5946:	82 81       	ldd	r24, Z+2	; 0x02
    5948:	93 81       	ldd	r25, Z+3	; 0x03
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	3f ef       	ldi	r19, 0xFF	; 255
    594e:	4f e7       	ldi	r20, 0x7F	; 127
    5950:	57 e4       	ldi	r21, 0x47	; 71
    5952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5956:	18 16       	cp	r1, r24
    5958:	0c f0       	brlt	.+2      	; 0x595c <autoParking+0x3c8>
    595a:	43 c0       	rjmp	.+134    	; 0x59e2 <autoParking+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    595c:	fe 01       	movw	r30, r28
    595e:	e5 58       	subi	r30, 0x85	; 133
    5960:	ff 4f       	sbci	r31, 0xFF	; 255
    5962:	60 81       	ld	r22, Z
    5964:	71 81       	ldd	r23, Z+1	; 0x01
    5966:	82 81       	ldd	r24, Z+2	; 0x02
    5968:	93 81       	ldd	r25, Z+3	; 0x03
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	40 e2       	ldi	r20, 0x20	; 32
    5970:	51 e4       	ldi	r21, 0x41	; 65
    5972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5976:	dc 01       	movw	r26, r24
    5978:	cb 01       	movw	r24, r22
    597a:	8e 01       	movw	r16, r28
    597c:	0b 58       	subi	r16, 0x8B	; 139
    597e:	1f 4f       	sbci	r17, 0xFF	; 255
    5980:	bc 01       	movw	r22, r24
    5982:	cd 01       	movw	r24, r26
    5984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5988:	dc 01       	movw	r26, r24
    598a:	cb 01       	movw	r24, r22
    598c:	f8 01       	movw	r30, r16
    598e:	91 83       	std	Z+1, r25	; 0x01
    5990:	80 83       	st	Z, r24
    5992:	1f c0       	rjmp	.+62     	; 0x59d2 <autoParking+0x43e>
    5994:	fe 01       	movw	r30, r28
    5996:	ed 58       	subi	r30, 0x8D	; 141
    5998:	ff 4f       	sbci	r31, 0xFF	; 255
    599a:	80 e9       	ldi	r24, 0x90	; 144
    599c:	91 e0       	ldi	r25, 0x01	; 1
    599e:	91 83       	std	Z+1, r25	; 0x01
    59a0:	80 83       	st	Z, r24
    59a2:	fe 01       	movw	r30, r28
    59a4:	ed 58       	subi	r30, 0x8D	; 141
    59a6:	ff 4f       	sbci	r31, 0xFF	; 255
    59a8:	80 81       	ld	r24, Z
    59aa:	91 81       	ldd	r25, Z+1	; 0x01
    59ac:	01 97       	sbiw	r24, 0x01	; 1
    59ae:	f1 f7       	brne	.-4      	; 0x59ac <autoParking+0x418>
    59b0:	fe 01       	movw	r30, r28
    59b2:	ed 58       	subi	r30, 0x8D	; 141
    59b4:	ff 4f       	sbci	r31, 0xFF	; 255
    59b6:	91 83       	std	Z+1, r25	; 0x01
    59b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59ba:	de 01       	movw	r26, r28
    59bc:	ab 58       	subi	r26, 0x8B	; 139
    59be:	bf 4f       	sbci	r27, 0xFF	; 255
    59c0:	fe 01       	movw	r30, r28
    59c2:	eb 58       	subi	r30, 0x8B	; 139
    59c4:	ff 4f       	sbci	r31, 0xFF	; 255
    59c6:	80 81       	ld	r24, Z
    59c8:	91 81       	ldd	r25, Z+1	; 0x01
    59ca:	01 97       	sbiw	r24, 0x01	; 1
    59cc:	11 96       	adiw	r26, 0x01	; 1
    59ce:	9c 93       	st	X, r25
    59d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59d2:	fe 01       	movw	r30, r28
    59d4:	eb 58       	subi	r30, 0x8B	; 139
    59d6:	ff 4f       	sbci	r31, 0xFF	; 255
    59d8:	80 81       	ld	r24, Z
    59da:	91 81       	ldd	r25, Z+1	; 0x01
    59dc:	00 97       	sbiw	r24, 0x00	; 0
    59de:	d1 f6       	brne	.-76     	; 0x5994 <autoParking+0x400>
    59e0:	27 c0       	rjmp	.+78     	; 0x5a30 <autoParking+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59e2:	8e 01       	movw	r16, r28
    59e4:	0b 58       	subi	r16, 0x8B	; 139
    59e6:	1f 4f       	sbci	r17, 0xFF	; 255
    59e8:	fe 01       	movw	r30, r28
    59ea:	e9 58       	subi	r30, 0x89	; 137
    59ec:	ff 4f       	sbci	r31, 0xFF	; 255
    59ee:	60 81       	ld	r22, Z
    59f0:	71 81       	ldd	r23, Z+1	; 0x01
    59f2:	82 81       	ldd	r24, Z+2	; 0x02
    59f4:	93 81       	ldd	r25, Z+3	; 0x03
    59f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59fa:	dc 01       	movw	r26, r24
    59fc:	cb 01       	movw	r24, r22
    59fe:	f8 01       	movw	r30, r16
    5a00:	91 83       	std	Z+1, r25	; 0x01
    5a02:	80 83       	st	Z, r24
    5a04:	de 01       	movw	r26, r28
    5a06:	af 58       	subi	r26, 0x8F	; 143
    5a08:	bf 4f       	sbci	r27, 0xFF	; 255
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	eb 58       	subi	r30, 0x8B	; 139
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	80 81       	ld	r24, Z
    5a12:	91 81       	ldd	r25, Z+1	; 0x01
    5a14:	8d 93       	st	X+, r24
    5a16:	9c 93       	st	X, r25
    5a18:	fe 01       	movw	r30, r28
    5a1a:	ef 58       	subi	r30, 0x8F	; 143
    5a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1e:	80 81       	ld	r24, Z
    5a20:	91 81       	ldd	r25, Z+1	; 0x01
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	f1 f7       	brne	.-4      	; 0x5a22 <autoParking+0x48e>
    5a26:	fe 01       	movw	r30, r28
    5a28:	ef 58       	subi	r30, 0x8F	; 143
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	91 83       	std	Z+1, r25	; 0x01
    5a2e:	80 83       	st	Z, r24
    5a30:	fe 01       	movw	r30, r28
    5a32:	e3 59       	subi	r30, 0x93	; 147
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	aa ef       	ldi	r26, 0xFA	; 250
    5a3c:	b3 e4       	ldi	r27, 0x43	; 67
    5a3e:	80 83       	st	Z, r24
    5a40:	91 83       	std	Z+1, r25	; 0x01
    5a42:	a2 83       	std	Z+2, r26	; 0x02
    5a44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a46:	8e 01       	movw	r16, r28
    5a48:	07 59       	subi	r16, 0x97	; 151
    5a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a4c:	fe 01       	movw	r30, r28
    5a4e:	e3 59       	subi	r30, 0x93	; 147
    5a50:	ff 4f       	sbci	r31, 0xFF	; 255
    5a52:	60 81       	ld	r22, Z
    5a54:	71 81       	ldd	r23, Z+1	; 0x01
    5a56:	82 81       	ldd	r24, Z+2	; 0x02
    5a58:	93 81       	ldd	r25, Z+3	; 0x03
    5a5a:	20 e0       	ldi	r18, 0x00	; 0
    5a5c:	30 e0       	ldi	r19, 0x00	; 0
    5a5e:	4a e7       	ldi	r20, 0x7A	; 122
    5a60:	55 e4       	ldi	r21, 0x45	; 69
    5a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	80 83       	st	Z, r24
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	a2 83       	std	Z+2, r26	; 0x02
    5a72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a74:	fe 01       	movw	r30, r28
    5a76:	e7 59       	subi	r30, 0x97	; 151
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	60 81       	ld	r22, Z
    5a7c:	71 81       	ldd	r23, Z+1	; 0x01
    5a7e:	82 81       	ldd	r24, Z+2	; 0x02
    5a80:	93 81       	ldd	r25, Z+3	; 0x03
    5a82:	20 e0       	ldi	r18, 0x00	; 0
    5a84:	30 e0       	ldi	r19, 0x00	; 0
    5a86:	40 e8       	ldi	r20, 0x80	; 128
    5a88:	5f e3       	ldi	r21, 0x3F	; 63
    5a8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a8e:	88 23       	and	r24, r24
    5a90:	44 f4       	brge	.+16     	; 0x5aa2 <autoParking+0x50e>
		__ticks = 1;
    5a92:	fe 01       	movw	r30, r28
    5a94:	e9 59       	subi	r30, 0x99	; 153
    5a96:	ff 4f       	sbci	r31, 0xFF	; 255
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	91 83       	std	Z+1, r25	; 0x01
    5a9e:	80 83       	st	Z, r24
    5aa0:	64 c0       	rjmp	.+200    	; 0x5b6a <autoParking+0x5d6>
	else if (__tmp > 65535)
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	e7 59       	subi	r30, 0x97	; 151
    5aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa8:	60 81       	ld	r22, Z
    5aaa:	71 81       	ldd	r23, Z+1	; 0x01
    5aac:	82 81       	ldd	r24, Z+2	; 0x02
    5aae:	93 81       	ldd	r25, Z+3	; 0x03
    5ab0:	20 e0       	ldi	r18, 0x00	; 0
    5ab2:	3f ef       	ldi	r19, 0xFF	; 255
    5ab4:	4f e7       	ldi	r20, 0x7F	; 127
    5ab6:	57 e4       	ldi	r21, 0x47	; 71
    5ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5abc:	18 16       	cp	r1, r24
    5abe:	0c f0       	brlt	.+2      	; 0x5ac2 <autoParking+0x52e>
    5ac0:	43 c0       	rjmp	.+134    	; 0x5b48 <autoParking+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ac2:	fe 01       	movw	r30, r28
    5ac4:	e3 59       	subi	r30, 0x93	; 147
    5ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac8:	60 81       	ld	r22, Z
    5aca:	71 81       	ldd	r23, Z+1	; 0x01
    5acc:	82 81       	ldd	r24, Z+2	; 0x02
    5ace:	93 81       	ldd	r25, Z+3	; 0x03
    5ad0:	20 e0       	ldi	r18, 0x00	; 0
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	40 e2       	ldi	r20, 0x20	; 32
    5ad6:	51 e4       	ldi	r21, 0x41	; 65
    5ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5adc:	dc 01       	movw	r26, r24
    5ade:	cb 01       	movw	r24, r22
    5ae0:	8e 01       	movw	r16, r28
    5ae2:	09 59       	subi	r16, 0x99	; 153
    5ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae6:	bc 01       	movw	r22, r24
    5ae8:	cd 01       	movw	r24, r26
    5aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aee:	dc 01       	movw	r26, r24
    5af0:	cb 01       	movw	r24, r22
    5af2:	f8 01       	movw	r30, r16
    5af4:	91 83       	std	Z+1, r25	; 0x01
    5af6:	80 83       	st	Z, r24
    5af8:	1f c0       	rjmp	.+62     	; 0x5b38 <autoParking+0x5a4>
    5afa:	fe 01       	movw	r30, r28
    5afc:	eb 59       	subi	r30, 0x9B	; 155
    5afe:	ff 4f       	sbci	r31, 0xFF	; 255
    5b00:	80 e9       	ldi	r24, 0x90	; 144
    5b02:	91 e0       	ldi	r25, 0x01	; 1
    5b04:	91 83       	std	Z+1, r25	; 0x01
    5b06:	80 83       	st	Z, r24
    5b08:	fe 01       	movw	r30, r28
    5b0a:	eb 59       	subi	r30, 0x9B	; 155
    5b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0e:	80 81       	ld	r24, Z
    5b10:	91 81       	ldd	r25, Z+1	; 0x01
    5b12:	01 97       	sbiw	r24, 0x01	; 1
    5b14:	f1 f7       	brne	.-4      	; 0x5b12 <autoParking+0x57e>
    5b16:	fe 01       	movw	r30, r28
    5b18:	eb 59       	subi	r30, 0x9B	; 155
    5b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1c:	91 83       	std	Z+1, r25	; 0x01
    5b1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b20:	de 01       	movw	r26, r28
    5b22:	a9 59       	subi	r26, 0x99	; 153
    5b24:	bf 4f       	sbci	r27, 0xFF	; 255
    5b26:	fe 01       	movw	r30, r28
    5b28:	e9 59       	subi	r30, 0x99	; 153
    5b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2c:	80 81       	ld	r24, Z
    5b2e:	91 81       	ldd	r25, Z+1	; 0x01
    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	11 96       	adiw	r26, 0x01	; 1
    5b34:	9c 93       	st	X, r25
    5b36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b38:	fe 01       	movw	r30, r28
    5b3a:	e9 59       	subi	r30, 0x99	; 153
    5b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3e:	80 81       	ld	r24, Z
    5b40:	91 81       	ldd	r25, Z+1	; 0x01
    5b42:	00 97       	sbiw	r24, 0x00	; 0
    5b44:	d1 f6       	brne	.-76     	; 0x5afa <autoParking+0x566>
    5b46:	27 c0       	rjmp	.+78     	; 0x5b96 <autoParking+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b48:	8e 01       	movw	r16, r28
    5b4a:	09 59       	subi	r16, 0x99	; 153
    5b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b4e:	fe 01       	movw	r30, r28
    5b50:	e7 59       	subi	r30, 0x97	; 151
    5b52:	ff 4f       	sbci	r31, 0xFF	; 255
    5b54:	60 81       	ld	r22, Z
    5b56:	71 81       	ldd	r23, Z+1	; 0x01
    5b58:	82 81       	ldd	r24, Z+2	; 0x02
    5b5a:	93 81       	ldd	r25, Z+3	; 0x03
    5b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b60:	dc 01       	movw	r26, r24
    5b62:	cb 01       	movw	r24, r22
    5b64:	f8 01       	movw	r30, r16
    5b66:	91 83       	std	Z+1, r25	; 0x01
    5b68:	80 83       	st	Z, r24
    5b6a:	de 01       	movw	r26, r28
    5b6c:	ad 59       	subi	r26, 0x9D	; 157
    5b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    5b70:	fe 01       	movw	r30, r28
    5b72:	e9 59       	subi	r30, 0x99	; 153
    5b74:	ff 4f       	sbci	r31, 0xFF	; 255
    5b76:	80 81       	ld	r24, Z
    5b78:	91 81       	ldd	r25, Z+1	; 0x01
    5b7a:	8d 93       	st	X+, r24
    5b7c:	9c 93       	st	X, r25
    5b7e:	fe 01       	movw	r30, r28
    5b80:	ed 59       	subi	r30, 0x9D	; 157
    5b82:	ff 4f       	sbci	r31, 0xFF	; 255
    5b84:	80 81       	ld	r24, Z
    5b86:	91 81       	ldd	r25, Z+1	; 0x01
    5b88:	01 97       	sbiw	r24, 0x01	; 1
    5b8a:	f1 f7       	brne	.-4      	; 0x5b88 <autoParking+0x5f4>
    5b8c:	fe 01       	movw	r30, r28
    5b8e:	ed 59       	subi	r30, 0x9D	; 157
    5b90:	ff 4f       	sbci	r31, 0xFF	; 255
    5b92:	91 83       	std	Z+1, r25	; 0x01
    5b94:	80 83       	st	Z, r24

			_delay_ms(500);
			_delay_ms(500);

			Left_Forward_Parking();
    5b96:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <Left_Forward_Parking>
    5b9a:	fe 01       	movw	r30, r28
    5b9c:	e1 5a       	subi	r30, 0xA1	; 161
    5b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba0:	80 e0       	ldi	r24, 0x00	; 0
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	aa ef       	ldi	r26, 0xFA	; 250
    5ba6:	b3 e4       	ldi	r27, 0x43	; 67
    5ba8:	80 83       	st	Z, r24
    5baa:	91 83       	std	Z+1, r25	; 0x01
    5bac:	a2 83       	std	Z+2, r26	; 0x02
    5bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bb0:	8e 01       	movw	r16, r28
    5bb2:	05 5a       	subi	r16, 0xA5	; 165
    5bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bb6:	fe 01       	movw	r30, r28
    5bb8:	e1 5a       	subi	r30, 0xA1	; 161
    5bba:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbc:	60 81       	ld	r22, Z
    5bbe:	71 81       	ldd	r23, Z+1	; 0x01
    5bc0:	82 81       	ldd	r24, Z+2	; 0x02
    5bc2:	93 81       	ldd	r25, Z+3	; 0x03
    5bc4:	20 e0       	ldi	r18, 0x00	; 0
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	4a e7       	ldi	r20, 0x7A	; 122
    5bca:	55 e4       	ldi	r21, 0x45	; 69
    5bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bd0:	dc 01       	movw	r26, r24
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	f8 01       	movw	r30, r16
    5bd6:	80 83       	st	Z, r24
    5bd8:	91 83       	std	Z+1, r25	; 0x01
    5bda:	a2 83       	std	Z+2, r26	; 0x02
    5bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bde:	fe 01       	movw	r30, r28
    5be0:	e5 5a       	subi	r30, 0xA5	; 165
    5be2:	ff 4f       	sbci	r31, 0xFF	; 255
    5be4:	60 81       	ld	r22, Z
    5be6:	71 81       	ldd	r23, Z+1	; 0x01
    5be8:	82 81       	ldd	r24, Z+2	; 0x02
    5bea:	93 81       	ldd	r25, Z+3	; 0x03
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	30 e0       	ldi	r19, 0x00	; 0
    5bf0:	40 e8       	ldi	r20, 0x80	; 128
    5bf2:	5f e3       	ldi	r21, 0x3F	; 63
    5bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bf8:	88 23       	and	r24, r24
    5bfa:	44 f4       	brge	.+16     	; 0x5c0c <autoParking+0x678>
		__ticks = 1;
    5bfc:	fe 01       	movw	r30, r28
    5bfe:	e7 5a       	subi	r30, 0xA7	; 167
    5c00:	ff 4f       	sbci	r31, 0xFF	; 255
    5c02:	81 e0       	ldi	r24, 0x01	; 1
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	91 83       	std	Z+1, r25	; 0x01
    5c08:	80 83       	st	Z, r24
    5c0a:	64 c0       	rjmp	.+200    	; 0x5cd4 <autoParking+0x740>
	else if (__tmp > 65535)
    5c0c:	fe 01       	movw	r30, r28
    5c0e:	e5 5a       	subi	r30, 0xA5	; 165
    5c10:	ff 4f       	sbci	r31, 0xFF	; 255
    5c12:	60 81       	ld	r22, Z
    5c14:	71 81       	ldd	r23, Z+1	; 0x01
    5c16:	82 81       	ldd	r24, Z+2	; 0x02
    5c18:	93 81       	ldd	r25, Z+3	; 0x03
    5c1a:	20 e0       	ldi	r18, 0x00	; 0
    5c1c:	3f ef       	ldi	r19, 0xFF	; 255
    5c1e:	4f e7       	ldi	r20, 0x7F	; 127
    5c20:	57 e4       	ldi	r21, 0x47	; 71
    5c22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c26:	18 16       	cp	r1, r24
    5c28:	0c f0       	brlt	.+2      	; 0x5c2c <autoParking+0x698>
    5c2a:	43 c0       	rjmp	.+134    	; 0x5cb2 <autoParking+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c2c:	fe 01       	movw	r30, r28
    5c2e:	e1 5a       	subi	r30, 0xA1	; 161
    5c30:	ff 4f       	sbci	r31, 0xFF	; 255
    5c32:	60 81       	ld	r22, Z
    5c34:	71 81       	ldd	r23, Z+1	; 0x01
    5c36:	82 81       	ldd	r24, Z+2	; 0x02
    5c38:	93 81       	ldd	r25, Z+3	; 0x03
    5c3a:	20 e0       	ldi	r18, 0x00	; 0
    5c3c:	30 e0       	ldi	r19, 0x00	; 0
    5c3e:	40 e2       	ldi	r20, 0x20	; 32
    5c40:	51 e4       	ldi	r21, 0x41	; 65
    5c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c46:	dc 01       	movw	r26, r24
    5c48:	cb 01       	movw	r24, r22
    5c4a:	8e 01       	movw	r16, r28
    5c4c:	07 5a       	subi	r16, 0xA7	; 167
    5c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c50:	bc 01       	movw	r22, r24
    5c52:	cd 01       	movw	r24, r26
    5c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c58:	dc 01       	movw	r26, r24
    5c5a:	cb 01       	movw	r24, r22
    5c5c:	f8 01       	movw	r30, r16
    5c5e:	91 83       	std	Z+1, r25	; 0x01
    5c60:	80 83       	st	Z, r24
    5c62:	1f c0       	rjmp	.+62     	; 0x5ca2 <autoParking+0x70e>
    5c64:	fe 01       	movw	r30, r28
    5c66:	e9 5a       	subi	r30, 0xA9	; 169
    5c68:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6a:	80 e9       	ldi	r24, 0x90	; 144
    5c6c:	91 e0       	ldi	r25, 0x01	; 1
    5c6e:	91 83       	std	Z+1, r25	; 0x01
    5c70:	80 83       	st	Z, r24
    5c72:	fe 01       	movw	r30, r28
    5c74:	e9 5a       	subi	r30, 0xA9	; 169
    5c76:	ff 4f       	sbci	r31, 0xFF	; 255
    5c78:	80 81       	ld	r24, Z
    5c7a:	91 81       	ldd	r25, Z+1	; 0x01
    5c7c:	01 97       	sbiw	r24, 0x01	; 1
    5c7e:	f1 f7       	brne	.-4      	; 0x5c7c <autoParking+0x6e8>
    5c80:	fe 01       	movw	r30, r28
    5c82:	e9 5a       	subi	r30, 0xA9	; 169
    5c84:	ff 4f       	sbci	r31, 0xFF	; 255
    5c86:	91 83       	std	Z+1, r25	; 0x01
    5c88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c8a:	de 01       	movw	r26, r28
    5c8c:	a7 5a       	subi	r26, 0xA7	; 167
    5c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    5c90:	fe 01       	movw	r30, r28
    5c92:	e7 5a       	subi	r30, 0xA7	; 167
    5c94:	ff 4f       	sbci	r31, 0xFF	; 255
    5c96:	80 81       	ld	r24, Z
    5c98:	91 81       	ldd	r25, Z+1	; 0x01
    5c9a:	01 97       	sbiw	r24, 0x01	; 1
    5c9c:	11 96       	adiw	r26, 0x01	; 1
    5c9e:	9c 93       	st	X, r25
    5ca0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ca2:	fe 01       	movw	r30, r28
    5ca4:	e7 5a       	subi	r30, 0xA7	; 167
    5ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca8:	80 81       	ld	r24, Z
    5caa:	91 81       	ldd	r25, Z+1	; 0x01
    5cac:	00 97       	sbiw	r24, 0x00	; 0
    5cae:	d1 f6       	brne	.-76     	; 0x5c64 <autoParking+0x6d0>
    5cb0:	27 c0       	rjmp	.+78     	; 0x5d00 <autoParking+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cb2:	8e 01       	movw	r16, r28
    5cb4:	07 5a       	subi	r16, 0xA7	; 167
    5cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb8:	fe 01       	movw	r30, r28
    5cba:	e5 5a       	subi	r30, 0xA5	; 165
    5cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cbe:	60 81       	ld	r22, Z
    5cc0:	71 81       	ldd	r23, Z+1	; 0x01
    5cc2:	82 81       	ldd	r24, Z+2	; 0x02
    5cc4:	93 81       	ldd	r25, Z+3	; 0x03
    5cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	cb 01       	movw	r24, r22
    5cce:	f8 01       	movw	r30, r16
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	80 83       	st	Z, r24
    5cd4:	de 01       	movw	r26, r28
    5cd6:	ab 5a       	subi	r26, 0xAB	; 171
    5cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    5cda:	fe 01       	movw	r30, r28
    5cdc:	e7 5a       	subi	r30, 0xA7	; 167
    5cde:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce0:	80 81       	ld	r24, Z
    5ce2:	91 81       	ldd	r25, Z+1	; 0x01
    5ce4:	8d 93       	st	X+, r24
    5ce6:	9c 93       	st	X, r25
    5ce8:	fe 01       	movw	r30, r28
    5cea:	eb 5a       	subi	r30, 0xAB	; 171
    5cec:	ff 4f       	sbci	r31, 0xFF	; 255
    5cee:	80 81       	ld	r24, Z
    5cf0:	91 81       	ldd	r25, Z+1	; 0x01
    5cf2:	01 97       	sbiw	r24, 0x01	; 1
    5cf4:	f1 f7       	brne	.-4      	; 0x5cf2 <autoParking+0x75e>
    5cf6:	fe 01       	movw	r30, r28
    5cf8:	eb 5a       	subi	r30, 0xAB	; 171
    5cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfc:	91 83       	std	Z+1, r25	; 0x01
    5cfe:	80 83       	st	Z, r24

			_delay_ms(500);

			Stop();
    5d00:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
    5d04:	fe 01       	movw	r30, r28
    5d06:	ef 5a       	subi	r30, 0xAF	; 175
    5d08:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0a:	80 e0       	ldi	r24, 0x00	; 0
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	aa ef       	ldi	r26, 0xFA	; 250
    5d10:	b3 e4       	ldi	r27, 0x43	; 67
    5d12:	80 83       	st	Z, r24
    5d14:	91 83       	std	Z+1, r25	; 0x01
    5d16:	a2 83       	std	Z+2, r26	; 0x02
    5d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d1a:	8e 01       	movw	r16, r28
    5d1c:	03 5b       	subi	r16, 0xB3	; 179
    5d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d20:	fe 01       	movw	r30, r28
    5d22:	ef 5a       	subi	r30, 0xAF	; 175
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	60 81       	ld	r22, Z
    5d28:	71 81       	ldd	r23, Z+1	; 0x01
    5d2a:	82 81       	ldd	r24, Z+2	; 0x02
    5d2c:	93 81       	ldd	r25, Z+3	; 0x03
    5d2e:	20 e0       	ldi	r18, 0x00	; 0
    5d30:	30 e0       	ldi	r19, 0x00	; 0
    5d32:	4a e7       	ldi	r20, 0x7A	; 122
    5d34:	55 e4       	ldi	r21, 0x45	; 69
    5d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d3a:	dc 01       	movw	r26, r24
    5d3c:	cb 01       	movw	r24, r22
    5d3e:	f8 01       	movw	r30, r16
    5d40:	80 83       	st	Z, r24
    5d42:	91 83       	std	Z+1, r25	; 0x01
    5d44:	a2 83       	std	Z+2, r26	; 0x02
    5d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d48:	fe 01       	movw	r30, r28
    5d4a:	e3 5b       	subi	r30, 0xB3	; 179
    5d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4e:	60 81       	ld	r22, Z
    5d50:	71 81       	ldd	r23, Z+1	; 0x01
    5d52:	82 81       	ldd	r24, Z+2	; 0x02
    5d54:	93 81       	ldd	r25, Z+3	; 0x03
    5d56:	20 e0       	ldi	r18, 0x00	; 0
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	40 e8       	ldi	r20, 0x80	; 128
    5d5c:	5f e3       	ldi	r21, 0x3F	; 63
    5d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d62:	88 23       	and	r24, r24
    5d64:	44 f4       	brge	.+16     	; 0x5d76 <autoParking+0x7e2>
		__ticks = 1;
    5d66:	fe 01       	movw	r30, r28
    5d68:	e5 5b       	subi	r30, 0xB5	; 181
    5d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	91 83       	std	Z+1, r25	; 0x01
    5d72:	80 83       	st	Z, r24
    5d74:	64 c0       	rjmp	.+200    	; 0x5e3e <autoParking+0x8aa>
	else if (__tmp > 65535)
    5d76:	fe 01       	movw	r30, r28
    5d78:	e3 5b       	subi	r30, 0xB3	; 179
    5d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7c:	60 81       	ld	r22, Z
    5d7e:	71 81       	ldd	r23, Z+1	; 0x01
    5d80:	82 81       	ldd	r24, Z+2	; 0x02
    5d82:	93 81       	ldd	r25, Z+3	; 0x03
    5d84:	20 e0       	ldi	r18, 0x00	; 0
    5d86:	3f ef       	ldi	r19, 0xFF	; 255
    5d88:	4f e7       	ldi	r20, 0x7F	; 127
    5d8a:	57 e4       	ldi	r21, 0x47	; 71
    5d8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d90:	18 16       	cp	r1, r24
    5d92:	0c f0       	brlt	.+2      	; 0x5d96 <autoParking+0x802>
    5d94:	43 c0       	rjmp	.+134    	; 0x5e1c <autoParking+0x888>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d96:	fe 01       	movw	r30, r28
    5d98:	ef 5a       	subi	r30, 0xAF	; 175
    5d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9c:	60 81       	ld	r22, Z
    5d9e:	71 81       	ldd	r23, Z+1	; 0x01
    5da0:	82 81       	ldd	r24, Z+2	; 0x02
    5da2:	93 81       	ldd	r25, Z+3	; 0x03
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	40 e2       	ldi	r20, 0x20	; 32
    5daa:	51 e4       	ldi	r21, 0x41	; 65
    5dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5db0:	dc 01       	movw	r26, r24
    5db2:	cb 01       	movw	r24, r22
    5db4:	8e 01       	movw	r16, r28
    5db6:	05 5b       	subi	r16, 0xB5	; 181
    5db8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dba:	bc 01       	movw	r22, r24
    5dbc:	cd 01       	movw	r24, r26
    5dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dc2:	dc 01       	movw	r26, r24
    5dc4:	cb 01       	movw	r24, r22
    5dc6:	f8 01       	movw	r30, r16
    5dc8:	91 83       	std	Z+1, r25	; 0x01
    5dca:	80 83       	st	Z, r24
    5dcc:	1f c0       	rjmp	.+62     	; 0x5e0c <autoParking+0x878>
    5dce:	fe 01       	movw	r30, r28
    5dd0:	e7 5b       	subi	r30, 0xB7	; 183
    5dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd4:	80 e9       	ldi	r24, 0x90	; 144
    5dd6:	91 e0       	ldi	r25, 0x01	; 1
    5dd8:	91 83       	std	Z+1, r25	; 0x01
    5dda:	80 83       	st	Z, r24
    5ddc:	fe 01       	movw	r30, r28
    5dde:	e7 5b       	subi	r30, 0xB7	; 183
    5de0:	ff 4f       	sbci	r31, 0xFF	; 255
    5de2:	80 81       	ld	r24, Z
    5de4:	91 81       	ldd	r25, Z+1	; 0x01
    5de6:	01 97       	sbiw	r24, 0x01	; 1
    5de8:	f1 f7       	brne	.-4      	; 0x5de6 <autoParking+0x852>
    5dea:	fe 01       	movw	r30, r28
    5dec:	e7 5b       	subi	r30, 0xB7	; 183
    5dee:	ff 4f       	sbci	r31, 0xFF	; 255
    5df0:	91 83       	std	Z+1, r25	; 0x01
    5df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df4:	de 01       	movw	r26, r28
    5df6:	a5 5b       	subi	r26, 0xB5	; 181
    5df8:	bf 4f       	sbci	r27, 0xFF	; 255
    5dfa:	fe 01       	movw	r30, r28
    5dfc:	e5 5b       	subi	r30, 0xB5	; 181
    5dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5e00:	80 81       	ld	r24, Z
    5e02:	91 81       	ldd	r25, Z+1	; 0x01
    5e04:	01 97       	sbiw	r24, 0x01	; 1
    5e06:	11 96       	adiw	r26, 0x01	; 1
    5e08:	9c 93       	st	X, r25
    5e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e0c:	fe 01       	movw	r30, r28
    5e0e:	e5 5b       	subi	r30, 0xB5	; 181
    5e10:	ff 4f       	sbci	r31, 0xFF	; 255
    5e12:	80 81       	ld	r24, Z
    5e14:	91 81       	ldd	r25, Z+1	; 0x01
    5e16:	00 97       	sbiw	r24, 0x00	; 0
    5e18:	d1 f6       	brne	.-76     	; 0x5dce <autoParking+0x83a>
    5e1a:	27 c0       	rjmp	.+78     	; 0x5e6a <autoParking+0x8d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e1c:	8e 01       	movw	r16, r28
    5e1e:	05 5b       	subi	r16, 0xB5	; 181
    5e20:	1f 4f       	sbci	r17, 0xFF	; 255
    5e22:	fe 01       	movw	r30, r28
    5e24:	e3 5b       	subi	r30, 0xB3	; 179
    5e26:	ff 4f       	sbci	r31, 0xFF	; 255
    5e28:	60 81       	ld	r22, Z
    5e2a:	71 81       	ldd	r23, Z+1	; 0x01
    5e2c:	82 81       	ldd	r24, Z+2	; 0x02
    5e2e:	93 81       	ldd	r25, Z+3	; 0x03
    5e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e34:	dc 01       	movw	r26, r24
    5e36:	cb 01       	movw	r24, r22
    5e38:	f8 01       	movw	r30, r16
    5e3a:	91 83       	std	Z+1, r25	; 0x01
    5e3c:	80 83       	st	Z, r24
    5e3e:	de 01       	movw	r26, r28
    5e40:	a9 5b       	subi	r26, 0xB9	; 185
    5e42:	bf 4f       	sbci	r27, 0xFF	; 255
    5e44:	fe 01       	movw	r30, r28
    5e46:	e5 5b       	subi	r30, 0xB5	; 181
    5e48:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4a:	80 81       	ld	r24, Z
    5e4c:	91 81       	ldd	r25, Z+1	; 0x01
    5e4e:	8d 93       	st	X+, r24
    5e50:	9c 93       	st	X, r25
    5e52:	fe 01       	movw	r30, r28
    5e54:	e9 5b       	subi	r30, 0xB9	; 185
    5e56:	ff 4f       	sbci	r31, 0xFF	; 255
    5e58:	80 81       	ld	r24, Z
    5e5a:	91 81       	ldd	r25, Z+1	; 0x01
    5e5c:	01 97       	sbiw	r24, 0x01	; 1
    5e5e:	f1 f7       	brne	.-4      	; 0x5e5c <autoParking+0x8c8>
    5e60:	fe 01       	movw	r30, r28
    5e62:	e9 5b       	subi	r30, 0xB9	; 185
    5e64:	ff 4f       	sbci	r31, 0xFF	; 255
    5e66:	91 83       	std	Z+1, r25	; 0x01
    5e68:	80 83       	st	Z, r24

			_delay_ms(500);

			Backward();
    5e6a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <Backward>
    5e6e:	fe 01       	movw	r30, r28
    5e70:	ed 5b       	subi	r30, 0xBD	; 189
    5e72:	ff 4f       	sbci	r31, 0xFF	; 255
    5e74:	80 e0       	ldi	r24, 0x00	; 0
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	aa ef       	ldi	r26, 0xFA	; 250
    5e7a:	b3 e4       	ldi	r27, 0x43	; 67
    5e7c:	80 83       	st	Z, r24
    5e7e:	91 83       	std	Z+1, r25	; 0x01
    5e80:	a2 83       	std	Z+2, r26	; 0x02
    5e82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e84:	8e 01       	movw	r16, r28
    5e86:	01 5c       	subi	r16, 0xC1	; 193
    5e88:	1f 4f       	sbci	r17, 0xFF	; 255
    5e8a:	fe 01       	movw	r30, r28
    5e8c:	ed 5b       	subi	r30, 0xBD	; 189
    5e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e90:	60 81       	ld	r22, Z
    5e92:	71 81       	ldd	r23, Z+1	; 0x01
    5e94:	82 81       	ldd	r24, Z+2	; 0x02
    5e96:	93 81       	ldd	r25, Z+3	; 0x03
    5e98:	20 e0       	ldi	r18, 0x00	; 0
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	4a e7       	ldi	r20, 0x7A	; 122
    5e9e:	55 e4       	ldi	r21, 0x45	; 69
    5ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ea4:	dc 01       	movw	r26, r24
    5ea6:	cb 01       	movw	r24, r22
    5ea8:	f8 01       	movw	r30, r16
    5eaa:	80 83       	st	Z, r24
    5eac:	91 83       	std	Z+1, r25	; 0x01
    5eae:	a2 83       	std	Z+2, r26	; 0x02
    5eb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	ff 96       	adiw	r30, 0x3f	; 63
    5eb6:	60 81       	ld	r22, Z
    5eb8:	71 81       	ldd	r23, Z+1	; 0x01
    5eba:	82 81       	ldd	r24, Z+2	; 0x02
    5ebc:	93 81       	ldd	r25, Z+3	; 0x03
    5ebe:	20 e0       	ldi	r18, 0x00	; 0
    5ec0:	30 e0       	ldi	r19, 0x00	; 0
    5ec2:	40 e8       	ldi	r20, 0x80	; 128
    5ec4:	5f e3       	ldi	r21, 0x3F	; 63
    5ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5eca:	88 23       	and	r24, r24
    5ecc:	2c f4       	brge	.+10     	; 0x5ed8 <autoParking+0x944>
		__ticks = 1;
    5ece:	81 e0       	ldi	r24, 0x01	; 1
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	9e af       	std	Y+62, r25	; 0x3e
    5ed4:	8d af       	std	Y+61, r24	; 0x3d
    5ed6:	46 c0       	rjmp	.+140    	; 0x5f64 <autoParking+0x9d0>
	else if (__tmp > 65535)
    5ed8:	fe 01       	movw	r30, r28
    5eda:	ff 96       	adiw	r30, 0x3f	; 63
    5edc:	60 81       	ld	r22, Z
    5ede:	71 81       	ldd	r23, Z+1	; 0x01
    5ee0:	82 81       	ldd	r24, Z+2	; 0x02
    5ee2:	93 81       	ldd	r25, Z+3	; 0x03
    5ee4:	20 e0       	ldi	r18, 0x00	; 0
    5ee6:	3f ef       	ldi	r19, 0xFF	; 255
    5ee8:	4f e7       	ldi	r20, 0x7F	; 127
    5eea:	57 e4       	ldi	r21, 0x47	; 71
    5eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ef0:	18 16       	cp	r1, r24
    5ef2:	64 f5       	brge	.+88     	; 0x5f4c <autoParking+0x9b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ef4:	fe 01       	movw	r30, r28
    5ef6:	ed 5b       	subi	r30, 0xBD	; 189
    5ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    5efa:	60 81       	ld	r22, Z
    5efc:	71 81       	ldd	r23, Z+1	; 0x01
    5efe:	82 81       	ldd	r24, Z+2	; 0x02
    5f00:	93 81       	ldd	r25, Z+3	; 0x03
    5f02:	20 e0       	ldi	r18, 0x00	; 0
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	40 e2       	ldi	r20, 0x20	; 32
    5f08:	51 e4       	ldi	r21, 0x41	; 65
    5f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f0e:	dc 01       	movw	r26, r24
    5f10:	cb 01       	movw	r24, r22
    5f12:	bc 01       	movw	r22, r24
    5f14:	cd 01       	movw	r24, r26
    5f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f1a:	dc 01       	movw	r26, r24
    5f1c:	cb 01       	movw	r24, r22
    5f1e:	9e af       	std	Y+62, r25	; 0x3e
    5f20:	8d af       	std	Y+61, r24	; 0x3d
    5f22:	0f c0       	rjmp	.+30     	; 0x5f42 <autoParking+0x9ae>
    5f24:	80 e9       	ldi	r24, 0x90	; 144
    5f26:	91 e0       	ldi	r25, 0x01	; 1
    5f28:	9c af       	std	Y+60, r25	; 0x3c
    5f2a:	8b af       	std	Y+59, r24	; 0x3b
    5f2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    5f2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5f30:	01 97       	sbiw	r24, 0x01	; 1
    5f32:	f1 f7       	brne	.-4      	; 0x5f30 <autoParking+0x99c>
    5f34:	9c af       	std	Y+60, r25	; 0x3c
    5f36:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f38:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f3c:	01 97       	sbiw	r24, 0x01	; 1
    5f3e:	9e af       	std	Y+62, r25	; 0x3e
    5f40:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f46:	00 97       	sbiw	r24, 0x00	; 0
    5f48:	69 f7       	brne	.-38     	; 0x5f24 <autoParking+0x990>
    5f4a:	16 c0       	rjmp	.+44     	; 0x5f78 <autoParking+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f4c:	fe 01       	movw	r30, r28
    5f4e:	ff 96       	adiw	r30, 0x3f	; 63
    5f50:	60 81       	ld	r22, Z
    5f52:	71 81       	ldd	r23, Z+1	; 0x01
    5f54:	82 81       	ldd	r24, Z+2	; 0x02
    5f56:	93 81       	ldd	r25, Z+3	; 0x03
    5f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f5c:	dc 01       	movw	r26, r24
    5f5e:	cb 01       	movw	r24, r22
    5f60:	9e af       	std	Y+62, r25	; 0x3e
    5f62:	8d af       	std	Y+61, r24	; 0x3d
    5f64:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f66:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f68:	9a af       	std	Y+58, r25	; 0x3a
    5f6a:	89 af       	std	Y+57, r24	; 0x39
    5f6c:	89 ad       	ldd	r24, Y+57	; 0x39
    5f6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5f70:	01 97       	sbiw	r24, 0x01	; 1
    5f72:	f1 f7       	brne	.-4      	; 0x5f70 <autoParking+0x9dc>
    5f74:	9a af       	std	Y+58, r25	; 0x3a
    5f76:	89 af       	std	Y+57, r24	; 0x39
    5f78:	80 e0       	ldi	r24, 0x00	; 0
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
    5f7c:	aa ef       	ldi	r26, 0xFA	; 250
    5f7e:	b3 e4       	ldi	r27, 0x43	; 67
    5f80:	8d ab       	std	Y+53, r24	; 0x35
    5f82:	9e ab       	std	Y+54, r25	; 0x36
    5f84:	af ab       	std	Y+55, r26	; 0x37
    5f86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f88:	6d a9       	ldd	r22, Y+53	; 0x35
    5f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    5f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    5f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	4a e7       	ldi	r20, 0x7A	; 122
    5f96:	55 e4       	ldi	r21, 0x45	; 69
    5f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	89 ab       	std	Y+49, r24	; 0x31
    5fa2:	9a ab       	std	Y+50, r25	; 0x32
    5fa4:	ab ab       	std	Y+51, r26	; 0x33
    5fa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    5faa:	7a a9       	ldd	r23, Y+50	; 0x32
    5fac:	8b a9       	ldd	r24, Y+51	; 0x33
    5fae:	9c a9       	ldd	r25, Y+52	; 0x34
    5fb0:	20 e0       	ldi	r18, 0x00	; 0
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	40 e8       	ldi	r20, 0x80	; 128
    5fb6:	5f e3       	ldi	r21, 0x3F	; 63
    5fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fbc:	88 23       	and	r24, r24
    5fbe:	2c f4       	brge	.+10     	; 0x5fca <autoParking+0xa36>
		__ticks = 1;
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	98 ab       	std	Y+48, r25	; 0x30
    5fc6:	8f a7       	std	Y+47, r24	; 0x2f
    5fc8:	3f c0       	rjmp	.+126    	; 0x6048 <autoParking+0xab4>
	else if (__tmp > 65535)
    5fca:	69 a9       	ldd	r22, Y+49	; 0x31
    5fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    5fce:	8b a9       	ldd	r24, Y+51	; 0x33
    5fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    5fd2:	20 e0       	ldi	r18, 0x00	; 0
    5fd4:	3f ef       	ldi	r19, 0xFF	; 255
    5fd6:	4f e7       	ldi	r20, 0x7F	; 127
    5fd8:	57 e4       	ldi	r21, 0x47	; 71
    5fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fde:	18 16       	cp	r1, r24
    5fe0:	4c f5       	brge	.+82     	; 0x6034 <autoParking+0xaa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe2:	6d a9       	ldd	r22, Y+53	; 0x35
    5fe4:	7e a9       	ldd	r23, Y+54	; 0x36
    5fe6:	8f a9       	ldd	r24, Y+55	; 0x37
    5fe8:	98 ad       	ldd	r25, Y+56	; 0x38
    5fea:	20 e0       	ldi	r18, 0x00	; 0
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	40 e2       	ldi	r20, 0x20	; 32
    5ff0:	51 e4       	ldi	r21, 0x41	; 65
    5ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	bc 01       	movw	r22, r24
    5ffc:	cd 01       	movw	r24, r26
    5ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6002:	dc 01       	movw	r26, r24
    6004:	cb 01       	movw	r24, r22
    6006:	98 ab       	std	Y+48, r25	; 0x30
    6008:	8f a7       	std	Y+47, r24	; 0x2f
    600a:	0f c0       	rjmp	.+30     	; 0x602a <autoParking+0xa96>
    600c:	80 e9       	ldi	r24, 0x90	; 144
    600e:	91 e0       	ldi	r25, 0x01	; 1
    6010:	9e a7       	std	Y+46, r25	; 0x2e
    6012:	8d a7       	std	Y+45, r24	; 0x2d
    6014:	8d a5       	ldd	r24, Y+45	; 0x2d
    6016:	9e a5       	ldd	r25, Y+46	; 0x2e
    6018:	01 97       	sbiw	r24, 0x01	; 1
    601a:	f1 f7       	brne	.-4      	; 0x6018 <autoParking+0xa84>
    601c:	9e a7       	std	Y+46, r25	; 0x2e
    601e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6020:	8f a5       	ldd	r24, Y+47	; 0x2f
    6022:	98 a9       	ldd	r25, Y+48	; 0x30
    6024:	01 97       	sbiw	r24, 0x01	; 1
    6026:	98 ab       	std	Y+48, r25	; 0x30
    6028:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    602a:	8f a5       	ldd	r24, Y+47	; 0x2f
    602c:	98 a9       	ldd	r25, Y+48	; 0x30
    602e:	00 97       	sbiw	r24, 0x00	; 0
    6030:	69 f7       	brne	.-38     	; 0x600c <autoParking+0xa78>
    6032:	14 c0       	rjmp	.+40     	; 0x605c <autoParking+0xac8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6034:	69 a9       	ldd	r22, Y+49	; 0x31
    6036:	7a a9       	ldd	r23, Y+50	; 0x32
    6038:	8b a9       	ldd	r24, Y+51	; 0x33
    603a:	9c a9       	ldd	r25, Y+52	; 0x34
    603c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6040:	dc 01       	movw	r26, r24
    6042:	cb 01       	movw	r24, r22
    6044:	98 ab       	std	Y+48, r25	; 0x30
    6046:	8f a7       	std	Y+47, r24	; 0x2f
    6048:	8f a5       	ldd	r24, Y+47	; 0x2f
    604a:	98 a9       	ldd	r25, Y+48	; 0x30
    604c:	9c a7       	std	Y+44, r25	; 0x2c
    604e:	8b a7       	std	Y+43, r24	; 0x2b
    6050:	8b a5       	ldd	r24, Y+43	; 0x2b
    6052:	9c a5       	ldd	r25, Y+44	; 0x2c
    6054:	01 97       	sbiw	r24, 0x01	; 1
    6056:	f1 f7       	brne	.-4      	; 0x6054 <autoParking+0xac0>
    6058:	9c a7       	std	Y+44, r25	; 0x2c
    605a:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(500);
			_delay_ms(500);

			Stop();
    605c:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
    6060:	80 e0       	ldi	r24, 0x00	; 0
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	aa ef       	ldi	r26, 0xFA	; 250
    6066:	b3 e4       	ldi	r27, 0x43	; 67
    6068:	8f a3       	std	Y+39, r24	; 0x27
    606a:	98 a7       	std	Y+40, r25	; 0x28
    606c:	a9 a7       	std	Y+41, r26	; 0x29
    606e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6070:	6f a1       	ldd	r22, Y+39	; 0x27
    6072:	78 a5       	ldd	r23, Y+40	; 0x28
    6074:	89 a5       	ldd	r24, Y+41	; 0x29
    6076:	9a a5       	ldd	r25, Y+42	; 0x2a
    6078:	20 e0       	ldi	r18, 0x00	; 0
    607a:	30 e0       	ldi	r19, 0x00	; 0
    607c:	4a e7       	ldi	r20, 0x7A	; 122
    607e:	55 e4       	ldi	r21, 0x45	; 69
    6080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6084:	dc 01       	movw	r26, r24
    6086:	cb 01       	movw	r24, r22
    6088:	8b a3       	std	Y+35, r24	; 0x23
    608a:	9c a3       	std	Y+36, r25	; 0x24
    608c:	ad a3       	std	Y+37, r26	; 0x25
    608e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6090:	6b a1       	ldd	r22, Y+35	; 0x23
    6092:	7c a1       	ldd	r23, Y+36	; 0x24
    6094:	8d a1       	ldd	r24, Y+37	; 0x25
    6096:	9e a1       	ldd	r25, Y+38	; 0x26
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	40 e8       	ldi	r20, 0x80	; 128
    609e:	5f e3       	ldi	r21, 0x3F	; 63
    60a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60a4:	88 23       	and	r24, r24
    60a6:	2c f4       	brge	.+10     	; 0x60b2 <autoParking+0xb1e>
		__ticks = 1;
    60a8:	81 e0       	ldi	r24, 0x01	; 1
    60aa:	90 e0       	ldi	r25, 0x00	; 0
    60ac:	9a a3       	std	Y+34, r25	; 0x22
    60ae:	89 a3       	std	Y+33, r24	; 0x21
    60b0:	3f c0       	rjmp	.+126    	; 0x6130 <autoParking+0xb9c>
	else if (__tmp > 65535)
    60b2:	6b a1       	ldd	r22, Y+35	; 0x23
    60b4:	7c a1       	ldd	r23, Y+36	; 0x24
    60b6:	8d a1       	ldd	r24, Y+37	; 0x25
    60b8:	9e a1       	ldd	r25, Y+38	; 0x26
    60ba:	20 e0       	ldi	r18, 0x00	; 0
    60bc:	3f ef       	ldi	r19, 0xFF	; 255
    60be:	4f e7       	ldi	r20, 0x7F	; 127
    60c0:	57 e4       	ldi	r21, 0x47	; 71
    60c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60c6:	18 16       	cp	r1, r24
    60c8:	4c f5       	brge	.+82     	; 0x611c <autoParking+0xb88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60ca:	6f a1       	ldd	r22, Y+39	; 0x27
    60cc:	78 a5       	ldd	r23, Y+40	; 0x28
    60ce:	89 a5       	ldd	r24, Y+41	; 0x29
    60d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	40 e2       	ldi	r20, 0x20	; 32
    60d8:	51 e4       	ldi	r21, 0x41	; 65
    60da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60de:	dc 01       	movw	r26, r24
    60e0:	cb 01       	movw	r24, r22
    60e2:	bc 01       	movw	r22, r24
    60e4:	cd 01       	movw	r24, r26
    60e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	9a a3       	std	Y+34, r25	; 0x22
    60f0:	89 a3       	std	Y+33, r24	; 0x21
    60f2:	0f c0       	rjmp	.+30     	; 0x6112 <autoParking+0xb7e>
    60f4:	80 e9       	ldi	r24, 0x90	; 144
    60f6:	91 e0       	ldi	r25, 0x01	; 1
    60f8:	98 a3       	std	Y+32, r25	; 0x20
    60fa:	8f 8f       	std	Y+31, r24	; 0x1f
    60fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60fe:	98 a1       	ldd	r25, Y+32	; 0x20
    6100:	01 97       	sbiw	r24, 0x01	; 1
    6102:	f1 f7       	brne	.-4      	; 0x6100 <autoParking+0xb6c>
    6104:	98 a3       	std	Y+32, r25	; 0x20
    6106:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6108:	89 a1       	ldd	r24, Y+33	; 0x21
    610a:	9a a1       	ldd	r25, Y+34	; 0x22
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	9a a3       	std	Y+34, r25	; 0x22
    6110:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6112:	89 a1       	ldd	r24, Y+33	; 0x21
    6114:	9a a1       	ldd	r25, Y+34	; 0x22
    6116:	00 97       	sbiw	r24, 0x00	; 0
    6118:	69 f7       	brne	.-38     	; 0x60f4 <autoParking+0xb60>
    611a:	14 c0       	rjmp	.+40     	; 0x6144 <autoParking+0xbb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    611c:	6b a1       	ldd	r22, Y+35	; 0x23
    611e:	7c a1       	ldd	r23, Y+36	; 0x24
    6120:	8d a1       	ldd	r24, Y+37	; 0x25
    6122:	9e a1       	ldd	r25, Y+38	; 0x26
    6124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6128:	dc 01       	movw	r26, r24
    612a:	cb 01       	movw	r24, r22
    612c:	9a a3       	std	Y+34, r25	; 0x22
    612e:	89 a3       	std	Y+33, r24	; 0x21
    6130:	89 a1       	ldd	r24, Y+33	; 0x21
    6132:	9a a1       	ldd	r25, Y+34	; 0x22
    6134:	9e 8f       	std	Y+30, r25	; 0x1e
    6136:	8d 8f       	std	Y+29, r24	; 0x1d
    6138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    613a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    613c:	01 97       	sbiw	r24, 0x01	; 1
    613e:	f1 f7       	brne	.-4      	; 0x613c <autoParking+0xba8>
    6140:	9e 8f       	std	Y+30, r25	; 0x1e
    6142:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(500);

			Left_Backward();
    6144:	0e 94 96 1b 	call	0x372c	; 0x372c <Left_Backward>
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	af e2       	ldi	r26, 0x2F	; 47
    614e:	b4 e4       	ldi	r27, 0x44	; 68
    6150:	89 8f       	std	Y+25, r24	; 0x19
    6152:	9a 8f       	std	Y+26, r25	; 0x1a
    6154:	ab 8f       	std	Y+27, r26	; 0x1b
    6156:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6158:	69 8d       	ldd	r22, Y+25	; 0x19
    615a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    615c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    615e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6160:	20 e0       	ldi	r18, 0x00	; 0
    6162:	30 e0       	ldi	r19, 0x00	; 0
    6164:	4a e7       	ldi	r20, 0x7A	; 122
    6166:	55 e4       	ldi	r21, 0x45	; 69
    6168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    616c:	dc 01       	movw	r26, r24
    616e:	cb 01       	movw	r24, r22
    6170:	8d 8b       	std	Y+21, r24	; 0x15
    6172:	9e 8b       	std	Y+22, r25	; 0x16
    6174:	af 8b       	std	Y+23, r26	; 0x17
    6176:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6178:	6d 89       	ldd	r22, Y+21	; 0x15
    617a:	7e 89       	ldd	r23, Y+22	; 0x16
    617c:	8f 89       	ldd	r24, Y+23	; 0x17
    617e:	98 8d       	ldd	r25, Y+24	; 0x18
    6180:	20 e0       	ldi	r18, 0x00	; 0
    6182:	30 e0       	ldi	r19, 0x00	; 0
    6184:	40 e8       	ldi	r20, 0x80	; 128
    6186:	5f e3       	ldi	r21, 0x3F	; 63
    6188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    618c:	88 23       	and	r24, r24
    618e:	2c f4       	brge	.+10     	; 0x619a <autoParking+0xc06>
		__ticks = 1;
    6190:	81 e0       	ldi	r24, 0x01	; 1
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	9c 8b       	std	Y+20, r25	; 0x14
    6196:	8b 8b       	std	Y+19, r24	; 0x13
    6198:	3f c0       	rjmp	.+126    	; 0x6218 <autoParking+0xc84>
	else if (__tmp > 65535)
    619a:	6d 89       	ldd	r22, Y+21	; 0x15
    619c:	7e 89       	ldd	r23, Y+22	; 0x16
    619e:	8f 89       	ldd	r24, Y+23	; 0x17
    61a0:	98 8d       	ldd	r25, Y+24	; 0x18
    61a2:	20 e0       	ldi	r18, 0x00	; 0
    61a4:	3f ef       	ldi	r19, 0xFF	; 255
    61a6:	4f e7       	ldi	r20, 0x7F	; 127
    61a8:	57 e4       	ldi	r21, 0x47	; 71
    61aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61ae:	18 16       	cp	r1, r24
    61b0:	4c f5       	brge	.+82     	; 0x6204 <autoParking+0xc70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61b2:	69 8d       	ldd	r22, Y+25	; 0x19
    61b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61ba:	20 e0       	ldi	r18, 0x00	; 0
    61bc:	30 e0       	ldi	r19, 0x00	; 0
    61be:	40 e2       	ldi	r20, 0x20	; 32
    61c0:	51 e4       	ldi	r21, 0x41	; 65
    61c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61c6:	dc 01       	movw	r26, r24
    61c8:	cb 01       	movw	r24, r22
    61ca:	bc 01       	movw	r22, r24
    61cc:	cd 01       	movw	r24, r26
    61ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61d2:	dc 01       	movw	r26, r24
    61d4:	cb 01       	movw	r24, r22
    61d6:	9c 8b       	std	Y+20, r25	; 0x14
    61d8:	8b 8b       	std	Y+19, r24	; 0x13
    61da:	0f c0       	rjmp	.+30     	; 0x61fa <autoParking+0xc66>
    61dc:	80 e9       	ldi	r24, 0x90	; 144
    61de:	91 e0       	ldi	r25, 0x01	; 1
    61e0:	9a 8b       	std	Y+18, r25	; 0x12
    61e2:	89 8b       	std	Y+17, r24	; 0x11
    61e4:	89 89       	ldd	r24, Y+17	; 0x11
    61e6:	9a 89       	ldd	r25, Y+18	; 0x12
    61e8:	01 97       	sbiw	r24, 0x01	; 1
    61ea:	f1 f7       	brne	.-4      	; 0x61e8 <autoParking+0xc54>
    61ec:	9a 8b       	std	Y+18, r25	; 0x12
    61ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61f0:	8b 89       	ldd	r24, Y+19	; 0x13
    61f2:	9c 89       	ldd	r25, Y+20	; 0x14
    61f4:	01 97       	sbiw	r24, 0x01	; 1
    61f6:	9c 8b       	std	Y+20, r25	; 0x14
    61f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61fa:	8b 89       	ldd	r24, Y+19	; 0x13
    61fc:	9c 89       	ldd	r25, Y+20	; 0x14
    61fe:	00 97       	sbiw	r24, 0x00	; 0
    6200:	69 f7       	brne	.-38     	; 0x61dc <autoParking+0xc48>
    6202:	14 c0       	rjmp	.+40     	; 0x622c <autoParking+0xc98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6204:	6d 89       	ldd	r22, Y+21	; 0x15
    6206:	7e 89       	ldd	r23, Y+22	; 0x16
    6208:	8f 89       	ldd	r24, Y+23	; 0x17
    620a:	98 8d       	ldd	r25, Y+24	; 0x18
    620c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6210:	dc 01       	movw	r26, r24
    6212:	cb 01       	movw	r24, r22
    6214:	9c 8b       	std	Y+20, r25	; 0x14
    6216:	8b 8b       	std	Y+19, r24	; 0x13
    6218:	8b 89       	ldd	r24, Y+19	; 0x13
    621a:	9c 89       	ldd	r25, Y+20	; 0x14
    621c:	98 8b       	std	Y+16, r25	; 0x10
    621e:	8f 87       	std	Y+15, r24	; 0x0f
    6220:	8f 85       	ldd	r24, Y+15	; 0x0f
    6222:	98 89       	ldd	r25, Y+16	; 0x10
    6224:	01 97       	sbiw	r24, 0x01	; 1
    6226:	f1 f7       	brne	.-4      	; 0x6224 <autoParking+0xc90>
    6228:	98 8b       	std	Y+16, r25	; 0x10
    622a:	8f 87       	std	Y+15, r24	; 0x0f
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	af e2       	ldi	r26, 0x2F	; 47
    6232:	b4 e4       	ldi	r27, 0x44	; 68
    6234:	8b 87       	std	Y+11, r24	; 0x0b
    6236:	9c 87       	std	Y+12, r25	; 0x0c
    6238:	ad 87       	std	Y+13, r26	; 0x0d
    623a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    623c:	6b 85       	ldd	r22, Y+11	; 0x0b
    623e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6240:	8d 85       	ldd	r24, Y+13	; 0x0d
    6242:	9e 85       	ldd	r25, Y+14	; 0x0e
    6244:	20 e0       	ldi	r18, 0x00	; 0
    6246:	30 e0       	ldi	r19, 0x00	; 0
    6248:	4a e7       	ldi	r20, 0x7A	; 122
    624a:	55 e4       	ldi	r21, 0x45	; 69
    624c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6250:	dc 01       	movw	r26, r24
    6252:	cb 01       	movw	r24, r22
    6254:	8f 83       	std	Y+7, r24	; 0x07
    6256:	98 87       	std	Y+8, r25	; 0x08
    6258:	a9 87       	std	Y+9, r26	; 0x09
    625a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    625c:	6f 81       	ldd	r22, Y+7	; 0x07
    625e:	78 85       	ldd	r23, Y+8	; 0x08
    6260:	89 85       	ldd	r24, Y+9	; 0x09
    6262:	9a 85       	ldd	r25, Y+10	; 0x0a
    6264:	20 e0       	ldi	r18, 0x00	; 0
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	40 e8       	ldi	r20, 0x80	; 128
    626a:	5f e3       	ldi	r21, 0x3F	; 63
    626c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6270:	88 23       	and	r24, r24
    6272:	2c f4       	brge	.+10     	; 0x627e <autoParking+0xcea>
		__ticks = 1;
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	9e 83       	std	Y+6, r25	; 0x06
    627a:	8d 83       	std	Y+5, r24	; 0x05
    627c:	3f c0       	rjmp	.+126    	; 0x62fc <autoParking+0xd68>
	else if (__tmp > 65535)
    627e:	6f 81       	ldd	r22, Y+7	; 0x07
    6280:	78 85       	ldd	r23, Y+8	; 0x08
    6282:	89 85       	ldd	r24, Y+9	; 0x09
    6284:	9a 85       	ldd	r25, Y+10	; 0x0a
    6286:	20 e0       	ldi	r18, 0x00	; 0
    6288:	3f ef       	ldi	r19, 0xFF	; 255
    628a:	4f e7       	ldi	r20, 0x7F	; 127
    628c:	57 e4       	ldi	r21, 0x47	; 71
    628e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6292:	18 16       	cp	r1, r24
    6294:	4c f5       	brge	.+82     	; 0x62e8 <autoParking+0xd54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6296:	6b 85       	ldd	r22, Y+11	; 0x0b
    6298:	7c 85       	ldd	r23, Y+12	; 0x0c
    629a:	8d 85       	ldd	r24, Y+13	; 0x0d
    629c:	9e 85       	ldd	r25, Y+14	; 0x0e
    629e:	20 e0       	ldi	r18, 0x00	; 0
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	40 e2       	ldi	r20, 0x20	; 32
    62a4:	51 e4       	ldi	r21, 0x41	; 65
    62a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62aa:	dc 01       	movw	r26, r24
    62ac:	cb 01       	movw	r24, r22
    62ae:	bc 01       	movw	r22, r24
    62b0:	cd 01       	movw	r24, r26
    62b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b6:	dc 01       	movw	r26, r24
    62b8:	cb 01       	movw	r24, r22
    62ba:	9e 83       	std	Y+6, r25	; 0x06
    62bc:	8d 83       	std	Y+5, r24	; 0x05
    62be:	0f c0       	rjmp	.+30     	; 0x62de <autoParking+0xd4a>
    62c0:	80 e9       	ldi	r24, 0x90	; 144
    62c2:	91 e0       	ldi	r25, 0x01	; 1
    62c4:	9c 83       	std	Y+4, r25	; 0x04
    62c6:	8b 83       	std	Y+3, r24	; 0x03
    62c8:	8b 81       	ldd	r24, Y+3	; 0x03
    62ca:	9c 81       	ldd	r25, Y+4	; 0x04
    62cc:	01 97       	sbiw	r24, 0x01	; 1
    62ce:	f1 f7       	brne	.-4      	; 0x62cc <autoParking+0xd38>
    62d0:	9c 83       	std	Y+4, r25	; 0x04
    62d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62d4:	8d 81       	ldd	r24, Y+5	; 0x05
    62d6:	9e 81       	ldd	r25, Y+6	; 0x06
    62d8:	01 97       	sbiw	r24, 0x01	; 1
    62da:	9e 83       	std	Y+6, r25	; 0x06
    62dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62de:	8d 81       	ldd	r24, Y+5	; 0x05
    62e0:	9e 81       	ldd	r25, Y+6	; 0x06
    62e2:	00 97       	sbiw	r24, 0x00	; 0
    62e4:	69 f7       	brne	.-38     	; 0x62c0 <autoParking+0xd2c>
    62e6:	1d c0       	rjmp	.+58     	; 0x6322 <autoParking+0xd8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62e8:	6f 81       	ldd	r22, Y+7	; 0x07
    62ea:	78 85       	ldd	r23, Y+8	; 0x08
    62ec:	89 85       	ldd	r24, Y+9	; 0x09
    62ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    62f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62f4:	dc 01       	movw	r26, r24
    62f6:	cb 01       	movw	r24, r22
    62f8:	9e 83       	std	Y+6, r25	; 0x06
    62fa:	8d 83       	std	Y+5, r24	; 0x05
    62fc:	8d 81       	ldd	r24, Y+5	; 0x05
    62fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6300:	9a 83       	std	Y+2, r25	; 0x02
    6302:	89 83       	std	Y+1, r24	; 0x01
    6304:	89 81       	ldd	r24, Y+1	; 0x01
    6306:	9a 81       	ldd	r25, Y+2	; 0x02
    6308:	01 97       	sbiw	r24, 0x01	; 1
    630a:	f1 f7       	brne	.-4      	; 0x6308 <autoParking+0xd74>
    630c:	9a 83       	std	Y+2, r25	; 0x02
    630e:	89 83       	std	Y+1, r24	; 0x01
    6310:	08 c0       	rjmp	.+16     	; 0x6322 <autoParking+0xd8e>

	readDistance();

	Forward();

	while (30 <= g_distanceRight)
    6312:	80 91 bf 01 	lds	r24, 0x01BF
    6316:	90 91 c0 01 	lds	r25, 0x01C0
    631a:	8e 31       	cpi	r24, 0x1E	; 30
    631c:	91 05       	cpc	r25, r1
    631e:	08 f0       	brcs	.+2      	; 0x6322 <autoParking+0xd8e>
    6320:	04 ca       	rjmp	.-3064   	; 0x572a <autoParking+0x196>
			_delay_ms(700);

			break;
		}
	}
	if (5 > l_counter)
    6322:	fe 01       	movw	r30, r28
    6324:	e5 56       	subi	r30, 0x65	; 101
    6326:	ff 4f       	sbci	r31, 0xFF	; 255
    6328:	80 81       	ld	r24, Z
    632a:	85 30       	cpi	r24, 0x05	; 5
    632c:	38 f4       	brcc	.+14     	; 0x633c <autoParking+0xda8>
	{
		LCD_displayStringRowColumn(1, 0, "NO SPACE");
    632e:	2f e7       	ldi	r18, 0x7F	; 127
    6330:	30 e0       	ldi	r19, 0x00	; 0
    6332:	81 e0       	ldi	r24, 0x01	; 1
    6334:	60 e0       	ldi	r22, 0x00	; 0
    6336:	a9 01       	movw	r20, r18
    6338:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LCD_displayStringRowColumn>
	}

	Stop();
    633c:	0e 94 0b 19 	call	0x3216	; 0x3216 <Stop>
}
    6340:	c5 56       	subi	r28, 0x65	; 101
    6342:	df 4f       	sbci	r29, 0xFF	; 255
    6344:	0f b6       	in	r0, 0x3f	; 63
    6346:	f8 94       	cli
    6348:	de bf       	out	0x3e, r29	; 62
    634a:	0f be       	out	0x3f, r0	; 63
    634c:	cd bf       	out	0x3d, r28	; 61
    634e:	cf 91       	pop	r28
    6350:	df 91       	pop	r29
    6352:	1f 91       	pop	r17
    6354:	0f 91       	pop	r16
    6356:	08 95       	ret

00006358 <__divmodhi4>:
    6358:	97 fb       	bst	r25, 7
    635a:	09 2e       	mov	r0, r25
    635c:	07 26       	eor	r0, r23
    635e:	0a d0       	rcall	.+20     	; 0x6374 <__divmodhi4_neg1>
    6360:	77 fd       	sbrc	r23, 7
    6362:	04 d0       	rcall	.+8      	; 0x636c <__divmodhi4_neg2>
    6364:	2e d0       	rcall	.+92     	; 0x63c2 <__udivmodhi4>
    6366:	06 d0       	rcall	.+12     	; 0x6374 <__divmodhi4_neg1>
    6368:	00 20       	and	r0, r0
    636a:	1a f4       	brpl	.+6      	; 0x6372 <__divmodhi4_exit>

0000636c <__divmodhi4_neg2>:
    636c:	70 95       	com	r23
    636e:	61 95       	neg	r22
    6370:	7f 4f       	sbci	r23, 0xFF	; 255

00006372 <__divmodhi4_exit>:
    6372:	08 95       	ret

00006374 <__divmodhi4_neg1>:
    6374:	f6 f7       	brtc	.-4      	; 0x6372 <__divmodhi4_exit>
    6376:	90 95       	com	r25
    6378:	81 95       	neg	r24
    637a:	9f 4f       	sbci	r25, 0xFF	; 255
    637c:	08 95       	ret

0000637e <__udivmodsi4>:
    637e:	a1 e2       	ldi	r26, 0x21	; 33
    6380:	1a 2e       	mov	r1, r26
    6382:	aa 1b       	sub	r26, r26
    6384:	bb 1b       	sub	r27, r27
    6386:	fd 01       	movw	r30, r26
    6388:	0d c0       	rjmp	.+26     	; 0x63a4 <__udivmodsi4_ep>

0000638a <__udivmodsi4_loop>:
    638a:	aa 1f       	adc	r26, r26
    638c:	bb 1f       	adc	r27, r27
    638e:	ee 1f       	adc	r30, r30
    6390:	ff 1f       	adc	r31, r31
    6392:	a2 17       	cp	r26, r18
    6394:	b3 07       	cpc	r27, r19
    6396:	e4 07       	cpc	r30, r20
    6398:	f5 07       	cpc	r31, r21
    639a:	20 f0       	brcs	.+8      	; 0x63a4 <__udivmodsi4_ep>
    639c:	a2 1b       	sub	r26, r18
    639e:	b3 0b       	sbc	r27, r19
    63a0:	e4 0b       	sbc	r30, r20
    63a2:	f5 0b       	sbc	r31, r21

000063a4 <__udivmodsi4_ep>:
    63a4:	66 1f       	adc	r22, r22
    63a6:	77 1f       	adc	r23, r23
    63a8:	88 1f       	adc	r24, r24
    63aa:	99 1f       	adc	r25, r25
    63ac:	1a 94       	dec	r1
    63ae:	69 f7       	brne	.-38     	; 0x638a <__udivmodsi4_loop>
    63b0:	60 95       	com	r22
    63b2:	70 95       	com	r23
    63b4:	80 95       	com	r24
    63b6:	90 95       	com	r25
    63b8:	9b 01       	movw	r18, r22
    63ba:	ac 01       	movw	r20, r24
    63bc:	bd 01       	movw	r22, r26
    63be:	cf 01       	movw	r24, r30
    63c0:	08 95       	ret

000063c2 <__udivmodhi4>:
    63c2:	aa 1b       	sub	r26, r26
    63c4:	bb 1b       	sub	r27, r27
    63c6:	51 e1       	ldi	r21, 0x11	; 17
    63c8:	07 c0       	rjmp	.+14     	; 0x63d8 <__udivmodhi4_ep>

000063ca <__udivmodhi4_loop>:
    63ca:	aa 1f       	adc	r26, r26
    63cc:	bb 1f       	adc	r27, r27
    63ce:	a6 17       	cp	r26, r22
    63d0:	b7 07       	cpc	r27, r23
    63d2:	10 f0       	brcs	.+4      	; 0x63d8 <__udivmodhi4_ep>
    63d4:	a6 1b       	sub	r26, r22
    63d6:	b7 0b       	sbc	r27, r23

000063d8 <__udivmodhi4_ep>:
    63d8:	88 1f       	adc	r24, r24
    63da:	99 1f       	adc	r25, r25
    63dc:	5a 95       	dec	r21
    63de:	a9 f7       	brne	.-22     	; 0x63ca <__udivmodhi4_loop>
    63e0:	80 95       	com	r24
    63e2:	90 95       	com	r25
    63e4:	bc 01       	movw	r22, r24
    63e6:	cd 01       	movw	r24, r26
    63e8:	08 95       	ret

000063ea <__prologue_saves__>:
    63ea:	2f 92       	push	r2
    63ec:	3f 92       	push	r3
    63ee:	4f 92       	push	r4
    63f0:	5f 92       	push	r5
    63f2:	6f 92       	push	r6
    63f4:	7f 92       	push	r7
    63f6:	8f 92       	push	r8
    63f8:	9f 92       	push	r9
    63fa:	af 92       	push	r10
    63fc:	bf 92       	push	r11
    63fe:	cf 92       	push	r12
    6400:	df 92       	push	r13
    6402:	ef 92       	push	r14
    6404:	ff 92       	push	r15
    6406:	0f 93       	push	r16
    6408:	1f 93       	push	r17
    640a:	cf 93       	push	r28
    640c:	df 93       	push	r29
    640e:	cd b7       	in	r28, 0x3d	; 61
    6410:	de b7       	in	r29, 0x3e	; 62
    6412:	ca 1b       	sub	r28, r26
    6414:	db 0b       	sbc	r29, r27
    6416:	0f b6       	in	r0, 0x3f	; 63
    6418:	f8 94       	cli
    641a:	de bf       	out	0x3e, r29	; 62
    641c:	0f be       	out	0x3f, r0	; 63
    641e:	cd bf       	out	0x3d, r28	; 61
    6420:	09 94       	ijmp

00006422 <__epilogue_restores__>:
    6422:	2a 88       	ldd	r2, Y+18	; 0x12
    6424:	39 88       	ldd	r3, Y+17	; 0x11
    6426:	48 88       	ldd	r4, Y+16	; 0x10
    6428:	5f 84       	ldd	r5, Y+15	; 0x0f
    642a:	6e 84       	ldd	r6, Y+14	; 0x0e
    642c:	7d 84       	ldd	r7, Y+13	; 0x0d
    642e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6430:	9b 84       	ldd	r9, Y+11	; 0x0b
    6432:	aa 84       	ldd	r10, Y+10	; 0x0a
    6434:	b9 84       	ldd	r11, Y+9	; 0x09
    6436:	c8 84       	ldd	r12, Y+8	; 0x08
    6438:	df 80       	ldd	r13, Y+7	; 0x07
    643a:	ee 80       	ldd	r14, Y+6	; 0x06
    643c:	fd 80       	ldd	r15, Y+5	; 0x05
    643e:	0c 81       	ldd	r16, Y+4	; 0x04
    6440:	1b 81       	ldd	r17, Y+3	; 0x03
    6442:	aa 81       	ldd	r26, Y+2	; 0x02
    6444:	b9 81       	ldd	r27, Y+1	; 0x01
    6446:	ce 0f       	add	r28, r30
    6448:	d1 1d       	adc	r29, r1
    644a:	0f b6       	in	r0, 0x3f	; 63
    644c:	f8 94       	cli
    644e:	de bf       	out	0x3e, r29	; 62
    6450:	0f be       	out	0x3f, r0	; 63
    6452:	cd bf       	out	0x3d, r28	; 61
    6454:	ed 01       	movw	r28, r26
    6456:	08 95       	ret

00006458 <itoa>:
    6458:	fb 01       	movw	r30, r22
    645a:	9f 01       	movw	r18, r30
    645c:	e8 94       	clt
    645e:	42 30       	cpi	r20, 0x02	; 2
    6460:	c4 f0       	brlt	.+48     	; 0x6492 <itoa+0x3a>
    6462:	45 32       	cpi	r20, 0x25	; 37
    6464:	b4 f4       	brge	.+44     	; 0x6492 <itoa+0x3a>
    6466:	4a 30       	cpi	r20, 0x0A	; 10
    6468:	29 f4       	brne	.+10     	; 0x6474 <itoa+0x1c>
    646a:	97 fb       	bst	r25, 7
    646c:	1e f4       	brtc	.+6      	; 0x6474 <itoa+0x1c>
    646e:	90 95       	com	r25
    6470:	81 95       	neg	r24
    6472:	9f 4f       	sbci	r25, 0xFF	; 255
    6474:	64 2f       	mov	r22, r20
    6476:	77 27       	eor	r23, r23
    6478:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <__udivmodhi4>
    647c:	80 5d       	subi	r24, 0xD0	; 208
    647e:	8a 33       	cpi	r24, 0x3A	; 58
    6480:	0c f0       	brlt	.+2      	; 0x6484 <itoa+0x2c>
    6482:	89 5d       	subi	r24, 0xD9	; 217
    6484:	81 93       	st	Z+, r24
    6486:	cb 01       	movw	r24, r22
    6488:	00 97       	sbiw	r24, 0x00	; 0
    648a:	a1 f7       	brne	.-24     	; 0x6474 <itoa+0x1c>
    648c:	16 f4       	brtc	.+4      	; 0x6492 <itoa+0x3a>
    648e:	5d e2       	ldi	r21, 0x2D	; 45
    6490:	51 93       	st	Z+, r21
    6492:	10 82       	st	Z, r1
    6494:	c9 01       	movw	r24, r18
    6496:	0c 94 4d 32 	jmp	0x649a	; 0x649a <strrev>

0000649a <strrev>:
    649a:	dc 01       	movw	r26, r24
    649c:	fc 01       	movw	r30, r24
    649e:	67 2f       	mov	r22, r23
    64a0:	71 91       	ld	r23, Z+
    64a2:	77 23       	and	r23, r23
    64a4:	e1 f7       	brne	.-8      	; 0x649e <strrev+0x4>
    64a6:	32 97       	sbiw	r30, 0x02	; 2
    64a8:	04 c0       	rjmp	.+8      	; 0x64b2 <strrev+0x18>
    64aa:	7c 91       	ld	r23, X
    64ac:	6d 93       	st	X+, r22
    64ae:	70 83       	st	Z, r23
    64b0:	62 91       	ld	r22, -Z
    64b2:	ae 17       	cp	r26, r30
    64b4:	bf 07       	cpc	r27, r31
    64b6:	c8 f3       	brcs	.-14     	; 0x64aa <strrev+0x10>
    64b8:	08 95       	ret

000064ba <_exit>:
    64ba:	f8 94       	cli

000064bc <__stop_program>:
    64bc:	ff cf       	rjmp	.-2      	; 0x64bc <__stop_program>
