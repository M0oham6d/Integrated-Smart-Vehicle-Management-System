
AVR_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000559c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000559c  00005630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080018c  0080018c  0000575c  2**0
                  ALLOC
  3 .stab         00005ac0  00000000  00000000  0000575c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002bf3  00000000  00000000  0000b21c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000de0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000dfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000105ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011932  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00012fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001392c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__vector_1>
       8:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_2>
       c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_3>
      10:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_4>
      14:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_5>
      18:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_6>
      1c:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_9>
      28:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_10>
      2c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 26 	call	0x4dda	; 0x4dda <main>
      8a:	0c 94 cc 2a 	jmp	0x5598	; 0x5598 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 2a 	jmp	0x54e8	; 0x54e8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 90 2a 	jmp	0x5520	; 0x5520 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 58       	subi	r30, 0x89	; 137
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
/* Callbacks */
static void (*RxCallback)(uint8) = 0;
static void (*TxCallback)(void) = 0;

void UART_Init(UART_ConfigType *config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
    /* Set baud rate */
    uint16 ubrr = (F_CPU / (16 * config->baudRate)) - 1;
     e46:	ed 81       	ldd	r30, Y+5	; 0x05
     e48:	fe 81       	ldd	r31, Y+6	; 0x06
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	a2 81       	ldd	r26, Z+2	; 0x02
     e50:	b3 81       	ldd	r27, Z+3	; 0x03
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	9c 01       	movw	r18, r24
     e74:	ad 01       	movw	r20, r26
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	94 e2       	ldi	r25, 0x24	; 36
     e7a:	a4 ef       	ldi	r26, 0xF4	; 244
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 2e 2a 	call	0x545c	; 0x545c <__udivmodsi4>
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
    UBRRH = (uint8)(ubrr >> 8);
     e90:	e0 e4       	ldi	r30, 0x40	; 64
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	89 2f       	mov	r24, r25
     e9a:	99 27       	eor	r25, r25
     e9c:	80 83       	st	Z, r24
    UBRRL = (uint8)ubrr;
     e9e:	e9 e2       	ldi	r30, 0x29	; 41
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	80 83       	st	Z, r24

    /* Set frame format */
    uint8 ucsrb = (1 << RXEN) | (1 << TXEN);  /* Enable RX and TX */
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 ucsrc = (1 << URSEL);	/* URSEL must be 1 when writing to UCSRC */
     eaa:	80 e8       	ldi	r24, 0x80	; 128
     eac:	89 83       	std	Y+1, r24	; 0x01

    /* Data bits */
    switch (config->dataBits)
     eae:	ed 81       	ldd	r30, Y+5	; 0x05
     eb0:	fe 81       	ldd	r31, Y+6	; 0x06
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	38 87       	std	Y+8, r19	; 0x08
     eba:	2f 83       	std	Y+7, r18	; 0x07
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	87 30       	cpi	r24, 0x07	; 7
     ec2:	91 05       	cpc	r25, r1
     ec4:	f9 f0       	breq	.+62     	; 0xf04 <UART_Init+0xd6>
     ec6:	2f 81       	ldd	r18, Y+7	; 0x07
     ec8:	38 85       	ldd	r19, Y+8	; 0x08
     eca:	28 30       	cpi	r18, 0x08	; 8
     ecc:	31 05       	cpc	r19, r1
     ece:	5c f4       	brge	.+22     	; 0xee6 <UART_Init+0xb8>
     ed0:	8f 81       	ldd	r24, Y+7	; 0x07
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	85 30       	cpi	r24, 0x05	; 5
     ed6:	91 05       	cpc	r25, r1
     ed8:	19 f1       	breq	.+70     	; 0xf20 <UART_Init+0xf2>
     eda:	2f 81       	ldd	r18, Y+7	; 0x07
     edc:	38 85       	ldd	r19, Y+8	; 0x08
     ede:	26 30       	cpi	r18, 0x06	; 6
     ee0:	31 05       	cpc	r19, r1
     ee2:	61 f0       	breq	.+24     	; 0xefc <UART_Init+0xce>
     ee4:	1d c0       	rjmp	.+58     	; 0xf20 <UART_Init+0xf2>
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	91 05       	cpc	r25, r1
     eee:	71 f0       	breq	.+28     	; 0xf0c <UART_Init+0xde>
     ef0:	2f 81       	ldd	r18, Y+7	; 0x07
     ef2:	38 85       	ldd	r19, Y+8	; 0x08
     ef4:	29 30       	cpi	r18, 0x09	; 9
     ef6:	31 05       	cpc	r19, r1
     ef8:	69 f0       	breq	.+26     	; 0xf14 <UART_Init+0xe6>
     efa:	12 c0       	rjmp	.+36     	; 0xf20 <UART_Init+0xf2>
    {
        case 5: ucsrc |= (0 << UCSZ0) | (0 << UCSZ1); break;
        case 6: ucsrc |= (1 << UCSZ0) | (0 << UCSZ1); break;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <UART_Init+0xf2>
        case 7: ucsrc |= (0 << UCSZ0) | (1 << UCSZ1); break;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	84 60       	ori	r24, 0x04	; 4
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <UART_Init+0xf2>
        case 8: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); break;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	86 60       	ori	r24, 0x06	; 6
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <UART_Init+0xf2>
        case 9: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); ucsrb |= (1 << UCSZ2); break;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	86 60       	ori	r24, 0x06	; 6
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	8a 83       	std	Y+2, r24	; 0x02
    }

    if (config->parity == 1) ucsrc |= (1 << UPM1);	/* Even parity */
     f20:	ed 81       	ldd	r30, Y+5	; 0x05
     f22:	fe 81       	ldd	r31, Y+6	; 0x06
     f24:	85 81       	ldd	r24, Z+5	; 0x05
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	21 f4       	brne	.+8      	; 0xf32 <UART_Init+0x104>
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 62       	ori	r24, 0x20	; 32
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <UART_Init+0x114>
    else if (config->parity == 2) ucsrc |= (1 << UPM1) | (1 << UPM0);	/* Odd parity */
     f32:	ed 81       	ldd	r30, Y+5	; 0x05
     f34:	fe 81       	ldd	r31, Y+6	; 0x06
     f36:	85 81       	ldd	r24, Z+5	; 0x05
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	19 f4       	brne	.+6      	; 0xf42 <UART_Init+0x114>
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 63       	ori	r24, 0x30	; 48
     f40:	89 83       	std	Y+1, r24	; 0x01

    if (config->stopBits == 2) ucsrc |= (1 << USBS);	/* Stop bits */
     f42:	ed 81       	ldd	r30, Y+5	; 0x05
     f44:	fe 81       	ldd	r31, Y+6	; 0x06
     f46:	86 81       	ldd	r24, Z+6	; 0x06
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	19 f4       	brne	.+6      	; 0xf52 <UART_Init+0x124>
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	89 83       	std	Y+1, r24	; 0x01

    // Apply configurations
    UCSRB = ucsrb;
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	80 83       	st	Z, r24
    UCSRC = ucsrc;
     f5a:	e0 e4       	ldi	r30, 0x40	; 64
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	80 83       	st	Z, r24

    sei();		/* Enable Global Interrupts */
     f62:	78 94       	sei
}
     f64:	28 96       	adiw	r28, 0x08	; 8
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <UART_Transmit>:

/* Transmit data */
void UART_Transmit (uint8 data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1 << UDRE)));  // Wait for empty transmit buffer
     f82:	eb e2       	ldi	r30, 0x2B	; 43
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 72       	andi	r24, 0x20	; 32
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	b9 f3       	breq	.-18     	; 0xf82 <UART_Transmit+0xc>
    UDR = data;
     f94:	ec e2       	ldi	r30, 0x2C	; 44
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_Receive>:

/* Receive data */
uint8 UART_Receive (void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
    while (!(UCSRA & (1 << RXC)));  // Wait for data to be received
     fac:	eb e2       	ldi	r30, 0x2B	; 43
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	dc f7       	brge	.-10     	; 0xfac <UART_Receive+0x8>
    return UDR;
     fb6:	ec e2       	ldi	r30, 0x2C	; 44
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <UART_SetRxCallback>:

/* Set RX callback */
void UART_SetRxCallback(void (*callback)(uint8))
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <UART_SetRxCallback+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
    RxCallback = callback;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	90 93 8d 01 	sts	0x018D, r25
     fd8:	80 93 8c 01 	sts	0x018C, r24
    UCSRB |= (1 << RXCIE);		/* Enable RX interrupt */
     fdc:	aa e2       	ldi	r26, 0x2A	; 42
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ea e2       	ldi	r30, 0x2A	; 42
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <UART_SetTxCallback>:

/* Set TX callback */
void UART_SetTxCallback(void (*callback)(void))
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <UART_SetTxCallback+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    TxCallback = callback;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	90 93 8f 01 	sts	0x018F, r25
    100a:	80 93 8e 01 	sts	0x018E, r24
    UCSRB |= (1 << TXCIE);		/* Enable TX interrupt */
    100e:	aa e2       	ldi	r26, 0x2A	; 42
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ea e2       	ldi	r30, 0x2A	; 42
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <__vector_13>:

ISR (USART_RXC_vect)		/* ISR for RX complete */
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    if (RxCallback)
    1050:	80 91 8c 01 	lds	r24, 0x018C
    1054:	90 91 8d 01 	lds	r25, 0x018D
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	41 f0       	breq	.+16     	; 0x106c <__vector_13+0x46>
    {
        RxCallback(UDR);
    105c:	e0 91 8c 01 	lds	r30, 0x018C
    1060:	f0 91 8d 01 	lds	r31, 0x018D
    1064:	ac e2       	ldi	r26, 0x2C	; 44
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	8c 91       	ld	r24, X
    106a:	09 95       	icall
    }
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_15>:

ISR (USART_TXC_vect)		/* ISR for TX complete */
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    if (TxCallback)
    10bc:	80 91 8e 01 	lds	r24, 0x018E
    10c0:	90 91 8f 01 	lds	r25, 0x018F
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <__vector_15+0x40>
    {
        TxCallback();
    10c8:	e0 91 8e 01 	lds	r30, 0x018E
    10cc:	f0 91 8f 01 	lds	r31, 0x018F
    10d0:	09 95       	icall
    }
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <__vector_11>:
 *******************************************************************************/
/*
 * ISR For Timer0 Overflow
 */
ISR(TIMER0_OVF_vect)
{
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    1122:	80 91 90 01 	lds	r24, 0x0190
    1126:	90 91 91 01 	lds	r25, 0x0191
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	29 f0       	breq	.+10     	; 0x1138 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer0)();
    112e:	e0 91 90 01 	lds	r30, 0x0190
    1132:	f0 91 91 01 	lds	r31, 0x0191
    1136:	09 95       	icall
	}
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_10>:

/*
 * ISR For Timer0 Compare Match
 */
ISR(TIMER0_COMP_vect)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    1188:	80 91 90 01 	lds	r24, 0x0190
    118c:	90 91 91 01 	lds	r25, 0x0191
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	29 f0       	breq	.+10     	; 0x119e <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer0)();
    1194:	e0 91 90 01 	lds	r30, 0x0190
    1198:	f0 91 91 01 	lds	r31, 0x0191
    119c:	09 95       	icall
	}
}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_9>:

/*
 * ISR For Timer1 Overflow
 */
ISR(TIMER1_OVF_vect)
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    11ee:	80 91 92 01 	lds	r24, 0x0192
    11f2:	90 91 93 01 	lds	r25, 0x0193
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	29 f0       	breq	.+10     	; 0x1204 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer1)();
    11fa:	e0 91 92 01 	lds	r30, 0x0192
    11fe:	f0 91 93 01 	lds	r31, 0x0193
    1202:	09 95       	icall
	}
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_7>:

/*
 * ISR For Timer1 Compare Match A
 */
ISR(TIMER1_COMPA_vect)
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    1254:	80 91 92 01 	lds	r24, 0x0192
    1258:	90 91 93 01 	lds	r25, 0x0193
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer1)();
    1260:	e0 91 92 01 	lds	r30, 0x0192
    1264:	f0 91 93 01 	lds	r31, 0x0193
    1268:	09 95       	icall
	}
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_5>:

/*
 * ISR For Timer2 Overflow
 */
ISR(TIMER2_OVF_vect)
{
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    12ba:	80 91 94 01 	lds	r24, 0x0194
    12be:	90 91 95 01 	lds	r25, 0x0195
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer2)();
    12c6:	e0 91 94 01 	lds	r30, 0x0194
    12ca:	f0 91 95 01 	lds	r31, 0x0195
    12ce:	09 95       	icall
	}
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_4>:

/*
 * ISR For Timer2 Compare Match
 */
ISR(TIMER2_COMP_vect)
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    1320:	80 91 94 01 	lds	r24, 0x0194
    1324:	90 91 95 01 	lds	r25, 0x0195
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f0       	breq	.+10     	; 0x1336 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer2)();
    132c:	e0 91 94 01 	lds	r30, 0x0194
    1330:	f0 91 95 01 	lds	r31, 0x0195
    1334:	09 95       	icall
	}
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <Timer_init>:
/*
 * Function to initialize the Timer driver.
 * Config_Ptr: Pointer to the Timer configuration structure.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <Timer_init+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <Timer_init+0x8>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    136c:	e9 81       	ldd	r30, Y+1	; 0x01
    136e:	fa 81       	ldd	r31, Y+2	; 0x02
    1370:	84 81       	ldd	r24, Z+4	; 0x04
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3c 83       	std	Y+4, r19	; 0x04
    1378:	2b 83       	std	Y+3, r18	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <Timer_init+0x2a>
    1384:	47 c0       	rjmp	.+142    	; 0x1414 <Timer_init+0xb8>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <Timer_init+0x36>
    1390:	85 c0       	rjmp	.+266    	; 0x149c <Timer_init+0x140>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	09 f0       	breq	.+2      	; 0x139c <Timer_init+0x40>
    139a:	bb c0       	rjmp	.+374    	; 0x1512 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS00 & CS01 & CS02.
		 */
		TCCR0 = (1<<FOC0) | ((Config_Ptr->timer_mode)<<WGM01) | ((Config_Ptr->timer_clock)<<CS00);
    139c:	a3 e5       	ldi	r26, 0x53	; 83
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 81       	ldd	r30, Y+1	; 0x01
    13a2:	fa 81       	ldd	r31, Y+2	; 0x02
    13a4:	86 81       	ldd	r24, Z+6	; 0x06
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	98 2f       	mov	r25, r24
    13b8:	90 68       	ori	r25, 0x80	; 128
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	85 81       	ldd	r24, Z+5	; 0x05
    13c0:	89 2b       	or	r24, r25
    13c2:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT0 */
		TCNT0 = Config_Ptr->timer_InitialValue;
    13c4:	a2 e5       	ldi	r26, 0x52	; 82
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ca:	fa 81       	ldd	r31, Y+2	; 0x02
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    13d2:	e9 81       	ldd	r30, Y+1	; 0x01
    13d4:	fa 81       	ldd	r31, Y+2	; 0x02
    13d6:	86 81       	ldd	r24, Z+6	; 0x06
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	39 f4       	brne	.+14     	; 0x13ea <Timer_init+0x8e>
		{
			/* Set Output Compare Register – OCR0 */
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    13dc:	ac e5       	ldi	r26, 0x5C	; 92
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e9 81       	ldd	r30, Y+1	; 0x01
    13e2:	fa 81       	ldd	r31, Y+2	; 0x02
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	93 81       	ldd	r25, Z+3	; 0x03
    13e8:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	86 81       	ldd	r24, Z+6	; 0x06
    13f0:	88 23       	and	r24, r24
    13f2:	41 f4       	brne	.+16     	; 0x1404 <Timer_init+0xa8>
		{
			TIMSK |= (1<<TOIE0);
    13f4:	a9 e5       	ldi	r26, 0x59	; 89
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e9 e5       	ldi	r30, 0x59	; 89
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	8c 93       	st	X, r24
    1402:	87 c0       	rjmp	.+270    	; 0x1512 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE0);
    1404:	a9 e5       	ldi	r26, 0x59	; 89
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e9 e5       	ldi	r30, 0x59	; 89
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	8c 93       	st	X, r24
    1412:	7f c0       	rjmp	.+254    	; 0x1512 <Timer_init+0x1b6>
		 * The FOC1A/FOC1B = 1 when the WGM13:0 bits specifies a non-PWM mode.
		 * Normal mode WGM10 = 0, WGM11 = 0, WGM12 = 0; WGM13 = 0
		 * Compare mode WGM10 = 0, WGM11 = 0, WGM12 = 1; WGM13 = 0
		 * Set clock as we need from CS10 & CS11 & CS12.
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1414:	ef e4       	ldi	r30, 0x4F	; 79
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8c e0       	ldi	r24, 0x0C	; 12
    141a:	80 83       	st	Z, r24
		TCCR1B = ((Config_Ptr->timer_mode)<<WGM12) | ((Config_Ptr->timer_clock)<<CS10);
    141c:	ae e4       	ldi	r26, 0x4E	; 78
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	86 81       	ldd	r24, Z+6	; 0x06
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	98 2f       	mov	r25, r24
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	85 81       	ldd	r24, Z+5	; 0x05
    143e:	89 2b       	or	r24, r25
    1440:	8c 93       	st	X, r24

		/* Set Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = Config_Ptr->timer_InitialValue;
    1442:	ac e4       	ldi	r26, 0x4C	; 76
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e9 81       	ldd	r30, Y+1	; 0x01
    1448:	fa 81       	ldd	r31, Y+2	; 0x02
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	9c 93       	st	X, r25
    1452:	8e 93       	st	-X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	86 81       	ldd	r24, Z+6	; 0x06
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	51 f4       	brne	.+20     	; 0x1472 <Timer_init+0x116>
		{
			/* Set Output Compare Register 1 A – OCR1AH and OCR1AL */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    145e:	ea e4       	ldi	r30, 0x4A	; 74
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	a9 81       	ldd	r26, Y+1	; 0x01
    1464:	ba 81       	ldd	r27, Y+2	; 0x02
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	8d 91       	ld	r24, X+
    146a:	9c 91       	ld	r25, X
    146c:	13 97       	sbiw	r26, 0x03	; 3
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	86 81       	ldd	r24, Z+6	; 0x06
    1478:	88 23       	and	r24, r24
    147a:	41 f4       	brne	.+16     	; 0x148c <Timer_init+0x130>
		{
			TIMSK |= (1<<TOIE1);
    147c:	a9 e5       	ldi	r26, 0x59	; 89
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 e5       	ldi	r30, 0x59	; 89
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	84 60       	ori	r24, 0x04	; 4
    1488:	8c 93       	st	X, r24
    148a:	43 c0       	rjmp	.+134    	; 0x1512 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE1A);
    148c:	a9 e5       	ldi	r26, 0x59	; 89
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e9 e5       	ldi	r30, 0x59	; 89
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 61       	ori	r24, 0x10	; 16
    1498:	8c 93       	st	X, r24
    149a:	3b c0       	rjmp	.+118    	; 0x1512 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS20 & CS21 & CS22.
		 */
		TCCR2 = (1<<FOC2) | ((Config_Ptr->timer_mode)<<WGM21) | ((Config_Ptr->timer_clock)<<CS20);
    149c:	a5 e4       	ldi	r26, 0x45	; 69
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e9 81       	ldd	r30, Y+1	; 0x01
    14a2:	fa 81       	ldd	r31, Y+2	; 0x02
    14a4:	86 81       	ldd	r24, Z+6	; 0x06
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	98 2f       	mov	r25, r24
    14b8:	90 68       	ori	r25, 0x80	; 128
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	85 81       	ldd	r24, Z+5	; 0x05
    14c0:	89 2b       	or	r24, r25
    14c2:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT2 */
		TCNT2 = Config_Ptr->timer_InitialValue;
    14c4:	a4 e4       	ldi	r26, 0x44	; 68
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    14d2:	e9 81       	ldd	r30, Y+1	; 0x01
    14d4:	fa 81       	ldd	r31, Y+2	; 0x02
    14d6:	86 81       	ldd	r24, Z+6	; 0x06
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	39 f4       	brne	.+14     	; 0x14ea <Timer_init+0x18e>
		{
			/* Set Output Compare Register – OCR2 */
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    14dc:	a3 e4       	ldi	r26, 0x43	; 67
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	fa 81       	ldd	r31, Y+2	; 0x02
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	86 81       	ldd	r24, Z+6	; 0x06
    14f0:	88 23       	and	r24, r24
    14f2:	41 f4       	brne	.+16     	; 0x1504 <Timer_init+0x1a8>
		{
			TIMSK |= (1<<TOIE2);
    14f4:	a9 e5       	ldi	r26, 0x59	; 89
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e9 e5       	ldi	r30, 0x59	; 89
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c 93       	st	X, r24
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE2);
    1504:	a9 e5       	ldi	r26, 0x59	; 89
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e9 e5       	ldi	r30, 0x59	; 89
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 68       	ori	r24, 0x80	; 128
    1510:	8c 93       	st	X, r24
		}
		break;
	}
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <Timer_deInit>:
/*
 * Function to disable the Timer via Timer_ID.
 * timer_type: The ID of the timer to be disabled.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <Timer_deInit+0x6>
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3b 83       	std	Y+3, r19	; 0x03
    1536:	2a 83       	std	Y+2, r18	; 0x02
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	11 f1       	breq	.+68     	; 0x1586 <Timer_deInit+0x66>
    1542:	2a 81       	ldd	r18, Y+2	; 0x02
    1544:	3b 81       	ldd	r19, Y+3	; 0x03
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	d1 f1       	breq	.+116    	; 0x15c0 <Timer_deInit+0xa0>
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	09 f0       	breq	.+2      	; 0x1556 <Timer_deInit+0x36>
    1554:	4c c0       	rjmp	.+152    	; 0x15ee <Timer_deInit+0xce>
	case TIMER0_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR0 = 0;
    1556:	e3 e5       	ldi	r30, 0x53	; 83
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT0 */
		TCNT0 = 0;
    155c:	e2 e5       	ldi	r30, 0x52	; 82
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR0 */
		OCR0 = 0;
    1562:	ec e5       	ldi	r30, 0x5C	; 92
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE0);
    1568:	a9 e5       	ldi	r26, 0x59	; 89
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e9 e5       	ldi	r30, 0x59	; 89
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8e 7f       	andi	r24, 0xFE	; 254
    1574:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    1576:	a9 e5       	ldi	r26, 0x59	; 89
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e9 e5       	ldi	r30, 0x59	; 89
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8d 7f       	andi	r24, 0xFD	; 253
    1582:	8c 93       	st	X, r24
    1584:	34 c0       	rjmp	.+104    	; 0x15ee <Timer_deInit+0xce>
	case TIMER1_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR1A = 0;
    1586:	ef e4       	ldi	r30, 0x4F	; 79
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
		TCCR1B = 0;
    158c:	ee e4       	ldi	r30, 0x4E	; 78
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	10 82       	st	Z, r1

		/* Reset Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = 0;
    1592:	ec e4       	ldi	r30, 0x4C	; 76
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	11 82       	std	Z+1, r1	; 0x01
    1598:	10 82       	st	Z, r1

		/* Reset Output Compare Register 1 A – OCR1AH and OCR1AL */
		OCR1A = 0;
    159a:	ea e4       	ldi	r30, 0x4A	; 74
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	11 82       	std	Z+1, r1	; 0x01
    15a0:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE1);
    15a2:	a9 e5       	ldi	r26, 0x59	; 89
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 e5       	ldi	r30, 0x59	; 89
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8b 7f       	andi	r24, 0xFB	; 251
    15ae:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    15b0:	a9 e5       	ldi	r26, 0x59	; 89
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 e5       	ldi	r30, 0x59	; 89
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 7e       	andi	r24, 0xEF	; 239
    15bc:	8c 93       	st	X, r24
    15be:	17 c0       	rjmp	.+46     	; 0x15ee <Timer_deInit+0xce>
	case TIMER2_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR2 = 0;
    15c0:	e5 e4       	ldi	r30, 0x45	; 69
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT2 */
		TCNT2 = 0;
    15c6:	e4 e4       	ldi	r30, 0x44	; 68
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR2 */
		OCR2 = 0;
    15cc:	e3 e4       	ldi	r30, 0x43	; 67
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE2);
    15d2:	a9 e5       	ldi	r26, 0x59	; 89
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e9 e5       	ldi	r30, 0x59	; 89
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 7b       	andi	r24, 0xBF	; 191
    15de:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    15e0:	a9 e5       	ldi	r26, 0x59	; 89
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e9 e5       	ldi	r30, 0x59	; 89
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 77       	andi	r24, 0x7F	; 127
    15ec:	8c 93       	st	X, r24
		break;
	}
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <Timer_getTimerValue>:
 * Function to get the Timer Value.
 * timer_type: The ID of the timer to get the value from.
 * Returns: The current value of the timer.
 */
uint16 Timer_getTimerValue(Timer_ID_Type timer_type)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	27 97       	sbiw	r28, 0x07	; 7
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	3d 83       	std	Y+5, r19	; 0x05
    1618:	2c 83       	std	Y+4, r18	; 0x04
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	89 f0       	breq	.+34     	; 0x1646 <Timer_getTimerValue+0x4c>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	99 f0       	breq	.+38     	; 0x1654 <Timer_getTimerValue+0x5a>
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	b9 f4       	brne	.+46     	; 0x1664 <Timer_getTimerValue+0x6a>
	{
	case TIMER0_ID:
		return TCNT0;
    1636:	e2 e5       	ldi	r30, 0x52	; 82
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3b 83       	std	Y+3, r19	; 0x03
    1642:	2a 83       	std	Y+2, r18	; 0x02
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <Timer_getTimerValue+0x6c>
		break;
	case TIMER1_ID:
		return TCNT1;
    1646:	ec e4       	ldi	r30, 0x4C	; 76
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	9b 83       	std	Y+3, r25	; 0x03
    1650:	8a 83       	std	Y+2, r24	; 0x02
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <Timer_getTimerValue+0x6c>
		break;
	case TIMER2_ID:
		return TCNT2;
    1654:	e4 e4       	ldi	r30, 0x44	; 68
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3b 83       	std	Y+3, r19	; 0x03
    1660:	2a 83       	std	Y+2, r18	; 0x02
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <Timer_getTimerValue+0x6c>
    1664:	04 c0       	rjmp	.+8      	; 0x166e <Timer_getTimerValue+0x74>
		break;
	}
}
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	9b 81       	ldd	r25, Y+3	; 0x03
    166a:	9f 83       	std	Y+7, r25	; 0x07
    166c:	8e 83       	std	Y+6, r24	; 0x06
    166e:	8e 81       	ldd	r24, Y+6	; 0x06
    1670:	9f 81       	ldd	r25, Y+7	; 0x07
    1672:	27 96       	adiw	r28, 0x07	; 7
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <Timer_setCallBack>:
 * Function to set the Call Back function address to the required Timer.
 * a_ptr: Pointer to the callback function.
 * timer_type: The ID of the timer to set the callback for.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_type)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <Timer_setCallBack+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <Timer_setCallBack+0x8>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3d 83       	std	Y+5, r19	; 0x05
    16a0:	2c 83       	std	Y+4, r18	; 0x04
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	81 f0       	breq	.+32     	; 0x16cc <Timer_setCallBack+0x48>
    16ac:	2c 81       	ldd	r18, Y+4	; 0x04
    16ae:	3d 81       	ldd	r19, Y+5	; 0x05
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	91 f0       	breq	.+36     	; 0x16da <Timer_setCallBack+0x56>
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	a1 f4       	brne	.+40     	; 0x16e6 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_timer0 = a_ptr;
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	90 93 91 01 	sts	0x0191, r25
    16c6:	80 93 90 01 	sts	0x0190, r24
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_timer1 = a_ptr;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	90 93 93 01 	sts	0x0193, r25
    16d4:	80 93 92 01 	sts	0x0192, r24
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_timer2 = a_ptr;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	90 93 95 01 	sts	0x0195, r25
    16e2:	80 93 94 01 	sts	0x0194, r24
		break;
	}
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <PWM_Timer0_Start>:
 * Function to initialize Timer0 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer0_Start(const Timer_Configuration * Config_Ptr)
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <PWM_Timer0_Start+0xa>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = 0;  /* Set Timer Initial value to 0. */
    1708:	e2 e5       	ldi	r30, 0x52	; 82
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR0) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR0 is calculated as:
     * OCR0 = (duty_cycle * 255) / 100
     */
    OCR0  = (Config_Ptr->duty_cycle * 255) / 100;
    170e:	0c e5       	ldi	r16, 0x5C	; 92
    1710:	10 e0       	ldi	r17, 0x00	; 0
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	48 2f       	mov	r20, r24
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	ca 01       	movw	r24, r20
    171e:	9c 01       	movw	r18, r24
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	c9 01       	movw	r24, r18
    1726:	96 95       	lsr	r25
    1728:	98 2f       	mov	r25, r24
    172a:	88 27       	eor	r24, r24
    172c:	97 95       	ror	r25
    172e:	87 95       	ror	r24
    1730:	82 1b       	sub	r24, r18
    1732:	93 0b       	sbc	r25, r19
    1734:	84 0f       	add	r24, r20
    1736:	95 1f       	adc	r25, r21
    1738:	24 e6       	ldi	r18, 0x64	; 100
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	b9 01       	movw	r22, r18
    173e:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divmodhi4>
    1742:	cb 01       	movw	r24, r22
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24

    /* Set PB3/OC0 as output pin (DDRB |= (1<<PB3)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRB  = DDRB | (1<<PB3);
    1748:	a7 e3       	ldi	r26, 0x37	; 55
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e7 e3       	ldi	r30, 0x37	; 55
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	88 60       	ori	r24, 0x08	; 8
    1754:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM01:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC0 on compare match.
     *    - INVERTING: Set OC0 on compare match.
     * 3. Set clock source (CS02:0) as per Config_Ptr->timer_clock.
     */
    TCCR0 = (1<<WGM00) | (1<<WGM01) | ((Config_Ptr->mode)<<COM00) | ((Config_Ptr->timer_clock)<<CS00);
    1756:	a3 e5       	ldi	r26, 0x53	; 83
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e9 81       	ldd	r30, Y+1	; 0x01
    175c:	fa 81       	ldd	r31, Y+2	; 0x02
    175e:	80 81       	ld	r24, Z
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	82 95       	swap	r24
    1766:	92 95       	swap	r25
    1768:	90 7f       	andi	r25, 0xF0	; 240
    176a:	98 27       	eor	r25, r24
    176c:	80 7f       	andi	r24, 0xF0	; 240
    176e:	98 27       	eor	r25, r24
    1770:	98 2f       	mov	r25, r24
    1772:	98 64       	ori	r25, 0x48	; 72
    1774:	e9 81       	ldd	r30, Y+1	; 0x01
    1776:	fa 81       	ldd	r31, Y+2	; 0x02
    1778:	81 81       	ldd	r24, Z+1	; 0x01
    177a:	89 2b       	or	r24, r25
    177c:	8c 93       	st	X, r24
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <PWM_Timer2_Start>:
 * Function to initialize Timer2 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer2_Start(const Timer_Configuration * Config_Ptr)
{
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <PWM_Timer2_Start+0xa>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = 0;  /* Set Timer Initial value to 0. */
    179e:	e4 e4       	ldi	r30, 0x44	; 68
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR2) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR2 is calculated as:
     * OCR2 = (duty_cycle * 255) / 100
     */
    OCR2  = (Config_Ptr->duty_cycle * 255) / 100;
    17a4:	03 e4       	ldi	r16, 0x43	; 67
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	48 2f       	mov	r20, r24
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	ca 01       	movw	r24, r20
    17b4:	9c 01       	movw	r18, r24
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	c9 01       	movw	r24, r18
    17bc:	96 95       	lsr	r25
    17be:	98 2f       	mov	r25, r24
    17c0:	88 27       	eor	r24, r24
    17c2:	97 95       	ror	r25
    17c4:	87 95       	ror	r24
    17c6:	82 1b       	sub	r24, r18
    17c8:	93 0b       	sbc	r25, r19
    17ca:	84 0f       	add	r24, r20
    17cc:	95 1f       	adc	r25, r21
    17ce:	24 e6       	ldi	r18, 0x64	; 100
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	b9 01       	movw	r22, r18
    17d4:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divmodhi4>
    17d8:	cb 01       	movw	r24, r22
    17da:	f8 01       	movw	r30, r16
    17dc:	80 83       	st	Z, r24

    /* Set PD7/OC2 as output pin (DDRD |= (1<<PD7)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRD  = DDRD | (1<<PD7);
    17de:	a1 e3       	ldi	r26, 0x31	; 49
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e1 e3       	ldi	r30, 0x31	; 49
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 68       	ori	r24, 0x80	; 128
    17ea:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM21:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC2 on compare match.
     *    - INVERTING: Set OC2 on compare match.
     * 3. Set clock source (CS22:0) as per Config_Ptr->timer_clock.
     */
    TCCR2 = (1<<WGM20) | (1<<WGM21) | ((Config_Ptr->mode)<<COM20) | ((Config_Ptr->timer_clock)<<CS20);
    17ec:	a5 e4       	ldi	r26, 0x45	; 69
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 81       	ldd	r30, Y+1	; 0x01
    17f2:	fa 81       	ldd	r31, Y+2	; 0x02
    17f4:	80 81       	ld	r24, Z
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	82 95       	swap	r24
    17fc:	92 95       	swap	r25
    17fe:	90 7f       	andi	r25, 0xF0	; 240
    1800:	98 27       	eor	r25, r24
    1802:	80 7f       	andi	r24, 0xF0	; 240
    1804:	98 27       	eor	r25, r24
    1806:	98 2f       	mov	r25, r24
    1808:	98 64       	ori	r25, 0x48	; 72
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	81 81       	ldd	r24, Z+1	; 0x01
    1810:	89 2b       	or	r24, r25
    1812:	8c 93       	st	X, r24
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <__vector_6>:
 * Description :
 * Interrupt Service Routine for Timer1 Input Capture Event.
 * This ISR is triggered when an edge is detected on the ICP1/PD6 pin.
 */
ISR(TIMER1_CAPT_vect)
{
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
    184c:	80 91 96 01 	lds	r24, 0x0196
    1850:	90 91 97 01 	lds	r25, 0x0197
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	29 f0       	breq	.+10     	; 0x1862 <__vector_6+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr)();  /* Another method: g_callBackPtr(); */
    1858:	e0 91 96 01 	lds	r30, 0x0196
    185c:	f0 91 97 01 	lds	r31, 0x0197
    1860:	09 95       	icall
    }
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	7f 91       	pop	r23
    1874:	6f 91       	pop	r22
    1876:	5f 91       	pop	r21
    1878:	4f 91       	pop	r20
    187a:	3f 91       	pop	r19
    187c:	2f 91       	pop	r18
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <ICU_init>:
 * 4. Initialize Timer1 Registers.
 * Parameters  :
 * - Config_Ptr: Pointer to the ICU configuration structure.
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <ICU_init+0x6>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    /* Configure ICP1/PD6 as an input pin (DDRD &= ~(1<<PD6)) */
    DDRD &= ~(1<<PD6);
    1896:	a1 e3       	ldi	r26, 0x31	; 49
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e1 e3       	ldi	r30, 0x31	; 49
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8f 7b       	andi	r24, 0xBF	; 191
    18a2:	8c 93       	st	X, r24

    /* Timer1 always operates in Normal Mode (WGM13:0 = 0000) */
    TCCR1A = (1<<FOC1A) | (1<<FOC1B);  /* Force Output Compare for non-PWM mode */
    18a4:	ef e4       	ldi	r30, 0x4F	; 79
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8c e0       	ldi	r24, 0x0C	; 12
    18aa:	80 83       	st	Z, r24

    /*
     * Insert the required clock value in the first three bits (CS10, CS11, and CS12)
     * of the TCCR1B Register.
     */
    TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    18ac:	ae e4       	ldi	r26, 0x4E	; 78
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ee e4       	ldi	r30, 0x4E	; 78
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	98 2f       	mov	r25, r24
    18b8:	98 7f       	andi	r25, 0xF8	; 248
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	80 81       	ld	r24, Z
    18c0:	89 2b       	or	r24, r25
    18c2:	8c 93       	st	X, r24
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    18c4:	ae e4       	ldi	r26, 0x4E	; 78
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ee e4       	ldi	r30, 0x4E	; 78
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	28 2f       	mov	r18, r24
    18d0:	2f 7b       	andi	r18, 0xBF	; 191
    18d2:	e9 81       	ldd	r30, Y+1	; 0x01
    18d4:	fa 81       	ldd	r31, Y+2	; 0x02
    18d6:	81 81       	ldd	r24, Z+1	; 0x01
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	00 24       	eor	r0, r0
    18de:	96 95       	lsr	r25
    18e0:	87 95       	ror	r24
    18e2:	07 94       	ror	r0
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	07 94       	ror	r0
    18ea:	98 2f       	mov	r25, r24
    18ec:	80 2d       	mov	r24, r0
    18ee:	82 2b       	or	r24, r18
    18f0:	8c 93       	st	X, r24

    /* Initialize Timer1 counter value to 0 */
    TCNT1 = 0;
    18f2:	ec e4       	ldi	r30, 0x4C	; 76
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	11 82       	std	Z+1, r1	; 0x01
    18f8:	10 82       	st	Z, r1

    /* Initialize the Input Capture Register (ICR1) to 0 */
    ICR1 = 0;
    18fa:	e6 e4       	ldi	r30, 0x46	; 70
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	11 82       	std	Z+1, r1	; 0x01
    1900:	10 82       	st	Z, r1

    /* Enable the Input Capture interrupt to generate an interrupt when an edge is detected on ICP1/PD6 pin */
    TIMSK |= (1<<TICIE1);
    1902:	a9 e5       	ldi	r26, 0x59	; 89
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e9 e5       	ldi	r30, 0x59	; 89
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 62       	ori	r24, 0x20	; 32
    190e:	8c 93       	st	X, r24

    /* Enable global interrupts (SREG |= (1<<7)) */
    SREG |= (1<<7);
    1910:	af e5       	ldi	r26, 0x5F	; 95
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ef e5       	ldi	r30, 0x5F	; 95
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	8c 93       	st	X, r24
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <ICU_setCallBack>:
 * Function to set the callback function address.
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <ICU_setCallBack+0x6>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
    /* Save the address of the callback function in a global variable */
    g_callBackPtr = a_ptr;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	90 93 97 01 	sts	0x0197, r25
    193e:	80 93 96 01 	sts	0x0196, r24
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <ICU_setEdgeDetectionType>:
 * Function to set the required edge detection.
 * Parameters  :
 * - a_edgeType: The edge detection type (FALLING or RAISING).
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1958:	ae e4       	ldi	r26, 0x4E	; 78
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ee e4       	ldi	r30, 0x4E	; 78
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	28 2f       	mov	r18, r24
    1964:	2f 7b       	andi	r18, 0xBF	; 191
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	00 24       	eor	r0, r0
    196e:	96 95       	lsr	r25
    1970:	87 95       	ror	r24
    1972:	07 94       	ror	r0
    1974:	96 95       	lsr	r25
    1976:	87 95       	ror	r24
    1978:	07 94       	ror	r0
    197a:	98 2f       	mov	r25, r24
    197c:	80 2d       	mov	r24, r0
    197e:	82 2b       	or	r24, r18
    1980:	8c 93       	st	X, r24
}
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <ICU_getInputCaptureValue>:
 * The value is stored in the Input Capture Register (ICR1).
 * Returns     :
 * - The captured value from ICR1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1992:	e6 e4       	ldi	r30, 0x46	; 70
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
}
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <ICU_clearTimerValue>:
/*
 * Description :
 * Function to clear the Timer1 value to start counting from ZERO.
 */
void ICU_clearTimerValue(void)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    19a8:	ec e4       	ldi	r30, 0x4C	; 76
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	11 82       	std	Z+1, r1	; 0x01
    19ae:	10 82       	st	Z, r1
}
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <ICU_deInit>:
/*
 * Description :
 * Function to disable Timer1 to stop the ICU driver.
 */
void ICU_deInit(void)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    /* Clear all Timer1/ICU registers */
    TCCR1A = 0;
    19be:	ef e4       	ldi	r30, 0x4F	; 79
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	10 82       	st	Z, r1
    TCCR1B = 0;
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	10 82       	st	Z, r1
    TCNT1 = 0;
    19ca:	ec e4       	ldi	r30, 0x4C	; 76
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	11 82       	std	Z+1, r1	; 0x01
    19d0:	10 82       	st	Z, r1
    ICR1 = 0;
    19d2:	e6 e4       	ldi	r30, 0x46	; 70
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	11 82       	std	Z+1, r1	; 0x01
    19d8:	10 82       	st	Z, r1

    /* Disable the Input Capture interrupt */
    TIMSK &= ~(1<<TICIE1);
    19da:	a9 e5       	ldi	r26, 0x59	; 89
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e9 e5       	ldi	r30, 0x59	; 89
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7d       	andi	r24, 0xDF	; 223
    19e6:	8c 93       	st	X, r24

    /* Reset the global callback pointer to NULL */
    g_callBackPtr = NULL_PTR;
    19e8:	10 92 97 01 	sts	0x0197, r1
    19ec:	10 92 96 01 	sts	0x0196, r1
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <GPIO_setupPinDirection>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - direction: The direction of the pin (PIN_INPUT or PIN_OUTPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <GPIO_setupPinDirection+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <GPIO_setupPinDirection+0x8>
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	6a 83       	std	Y+2, r22	; 0x02
    1a08:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	88 30       	cpi	r24, 0x08	; 8
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <GPIO_setupPinDirection+0x1c>
    1a10:	d5 c0       	rjmp	.+426    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <GPIO_setupPinDirection+0x24>
    1a18:	d1 c0       	rjmp	.+418    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Setup the pin direction as required */
        switch (port_num)
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	3d 83       	std	Y+5, r19	; 0x05
    1a22:	2c 83       	std	Y+4, r18	; 0x04
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <GPIO_setupPinDirection+0x3a>
    1a2e:	43 c0       	rjmp	.+134    	; 0x1ab6 <GPIO_setupPinDirection+0xc0>
    1a30:	2c 81       	ldd	r18, Y+4	; 0x04
    1a32:	3d 81       	ldd	r19, Y+5	; 0x05
    1a34:	22 30       	cpi	r18, 0x02	; 2
    1a36:	31 05       	cpc	r19, r1
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <GPIO_setupPinDirection+0x4e>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <GPIO_setupPinDirection+0x68>
    1a42:	bc c0       	rjmp	.+376    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <GPIO_setupPinDirection+0x5a>
    1a4e:	5f c0       	rjmp	.+190    	; 0x1b0e <GPIO_setupPinDirection+0x118>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <GPIO_setupPinDirection+0x66>
    1a5a:	85 c0       	rjmp	.+266    	; 0x1b66 <GPIO_setupPinDirection+0x170>
    1a5c:	af c0       	rjmp	.+350    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
        {
        case PORTA_ID:
            if (direction == PIN_OUTPUT)
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	a1 f4       	brne	.+40     	; 0x1a8c <GPIO_setupPinDirection+0x96>
            {
                SET_BIT(DDRA, pin_num);  /* Set pin as output */
    1a64:	aa e3       	ldi	r26, 0x3A	; 58
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ea e3       	ldi	r30, 0x3A	; 58
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <GPIO_setupPinDirection+0x8c>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <GPIO_setupPinDirection+0x88>
    1a86:	84 2b       	or	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	98 c0       	rjmp	.+304    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRA, pin_num);  /* Set pin as input */
    1a8c:	aa e3       	ldi	r26, 0x3A	; 58
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ea e3       	ldi	r30, 0x3A	; 58
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <GPIO_setupPinDirection+0xb4>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <GPIO_setupPinDirection+0xb0>
    1aae:	80 95       	com	r24
    1ab0:	84 23       	and	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	83 c0       	rjmp	.+262    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTB_ID:
            if (direction == PIN_OUTPUT)
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	a1 f4       	brne	.+40     	; 0x1ae4 <GPIO_setupPinDirection+0xee>
            {
                SET_BIT(DDRB, pin_num);  /* Set pin as output */
    1abc:	a7 e3       	ldi	r26, 0x37	; 55
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e7 e3       	ldi	r30, 0x37	; 55
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <GPIO_setupPinDirection+0xe4>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <GPIO_setupPinDirection+0xe0>
    1ade:	84 2b       	or	r24, r20
    1ae0:	8c 93       	st	X, r24
    1ae2:	6c c0       	rjmp	.+216    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRB, pin_num);  /* Set pin as input */
    1ae4:	a7 e3       	ldi	r26, 0x37	; 55
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e7 e3       	ldi	r30, 0x37	; 55
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <GPIO_setupPinDirection+0x10c>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <GPIO_setupPinDirection+0x108>
    1b06:	80 95       	com	r24
    1b08:	84 23       	and	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	57 c0       	rjmp	.+174    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTC_ID:
            if (direction == PIN_OUTPUT)
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	a1 f4       	brne	.+40     	; 0x1b3c <GPIO_setupPinDirection+0x146>
            {
                SET_BIT(DDRC, pin_num);  /* Set pin as output */
    1b14:	a4 e3       	ldi	r26, 0x34	; 52
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e4 e3       	ldi	r30, 0x34	; 52
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <GPIO_setupPinDirection+0x13c>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <GPIO_setupPinDirection+0x138>
    1b36:	84 2b       	or	r24, r20
    1b38:	8c 93       	st	X, r24
    1b3a:	40 c0       	rjmp	.+128    	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRC, pin_num);  /* Set pin as input */
    1b3c:	a4 e3       	ldi	r26, 0x34	; 52
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e4 e3       	ldi	r30, 0x34	; 52
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	48 2f       	mov	r20, r24
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 2e       	mov	r0, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <GPIO_setupPinDirection+0x164>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <GPIO_setupPinDirection+0x160>
    1b5e:	80 95       	com	r24
    1b60:	84 23       	and	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	2b c0       	rjmp	.+86     	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTD_ID:
            if (direction == PIN_OUTPUT)
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	a1 f4       	brne	.+40     	; 0x1b94 <GPIO_setupPinDirection+0x19e>
            {
                SET_BIT(DDRD, pin_num);  /* Set pin as output */
    1b6c:	a1 e3       	ldi	r26, 0x31	; 49
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e1 e3       	ldi	r30, 0x31	; 49
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <GPIO_setupPinDirection+0x194>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <GPIO_setupPinDirection+0x190>
    1b8e:	84 2b       	or	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRD, pin_num);  /* Set pin as input */
    1b94:	a1 e3       	ldi	r26, 0x31	; 49
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e1 e3       	ldi	r30, 0x31	; 49
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <GPIO_setupPinDirection+0x1bc>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <GPIO_setupPinDirection+0x1b8>
    1bb6:	80 95       	com	r24
    1bb8:	84 23       	and	r24, r20
    1bba:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <GPIO_writePin>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - value: The value to write (Logic High or Logic Low).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <GPIO_writePin+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <GPIO_writePin+0x8>
    1bd4:	0f 92       	push	r0
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	6a 83       	std	Y+2, r22	; 0x02
    1bde:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	88 30       	cpi	r24, 0x08	; 8
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <GPIO_writePin+0x1c>
    1be6:	d5 c0       	rjmp	.+426    	; 0x1d92 <GPIO_writePin+0x1c6>
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	84 30       	cpi	r24, 0x04	; 4
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <GPIO_writePin+0x24>
    1bee:	d1 c0       	rjmp	.+418    	; 0x1d92 <GPIO_writePin+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Write the pin value as required */
        switch (port_num)
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	3d 83       	std	Y+5, r19	; 0x05
    1bf8:	2c 83       	std	Y+4, r18	; 0x04
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	91 05       	cpc	r25, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <GPIO_writePin+0x3a>
    1c04:	43 c0       	rjmp	.+134    	; 0x1c8c <GPIO_writePin+0xc0>
    1c06:	2c 81       	ldd	r18, Y+4	; 0x04
    1c08:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0a:	22 30       	cpi	r18, 0x02	; 2
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <GPIO_writePin+0x4e>
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	71 f0       	breq	.+28     	; 0x1c34 <GPIO_writePin+0x68>
    1c18:	bc c0       	rjmp	.+376    	; 0x1d92 <GPIO_writePin+0x1c6>
    1c1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	31 05       	cpc	r19, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <GPIO_writePin+0x5a>
    1c24:	5f c0       	rjmp	.+190    	; 0x1ce4 <GPIO_writePin+0x118>
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <GPIO_writePin+0x66>
    1c30:	85 c0       	rjmp	.+266    	; 0x1d3c <GPIO_writePin+0x170>
    1c32:	af c0       	rjmp	.+350    	; 0x1d92 <GPIO_writePin+0x1c6>
        {
        case PORTA_ID:
            if (value == LOGIC_HIGH)
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	a1 f4       	brne	.+40     	; 0x1c62 <GPIO_writePin+0x96>
            {
                SET_BIT(PORTA, pin_num);  /* Set pin to Logic High */
    1c3a:	ab e3       	ldi	r26, 0x3B	; 59
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	eb e3       	ldi	r30, 0x3B	; 59
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <GPIO_writePin+0x8c>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <GPIO_writePin+0x88>
    1c5c:	84 2b       	or	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	98 c0       	rjmp	.+304    	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTA, pin_num);  /* Set pin to Logic Low */
    1c62:	ab e3       	ldi	r26, 0x3B	; 59
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	eb e3       	ldi	r30, 0x3B	; 59
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_writePin+0xb4>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_writePin+0xb0>
    1c84:	80 95       	com	r24
    1c86:	84 23       	and	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	83 c0       	rjmp	.+262    	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTB_ID:
            if (value == LOGIC_HIGH)
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	a1 f4       	brne	.+40     	; 0x1cba <GPIO_writePin+0xee>
            {
                SET_BIT(PORTB, pin_num);  /* Set pin to Logic High */
    1c92:	a8 e3       	ldi	r26, 0x38	; 56
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e8 e3       	ldi	r30, 0x38	; 56
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <GPIO_writePin+0xe4>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <GPIO_writePin+0xe0>
    1cb4:	84 2b       	or	r24, r20
    1cb6:	8c 93       	st	X, r24
    1cb8:	6c c0       	rjmp	.+216    	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTB, pin_num);  /* Set pin to Logic Low */
    1cba:	a8 e3       	ldi	r26, 0x38	; 56
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e8 e3       	ldi	r30, 0x38	; 56
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <GPIO_writePin+0x10c>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <GPIO_writePin+0x108>
    1cdc:	80 95       	com	r24
    1cde:	84 23       	and	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	57 c0       	rjmp	.+174    	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTC_ID:
            if (value == LOGIC_HIGH)
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	a1 f4       	brne	.+40     	; 0x1d12 <GPIO_writePin+0x146>
            {
                SET_BIT(PORTC, pin_num);  /* Set pin to Logic High */
    1cea:	a5 e3       	ldi	r26, 0x35	; 53
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e5 e3       	ldi	r30, 0x35	; 53
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <GPIO_writePin+0x13c>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <GPIO_writePin+0x138>
    1d0c:	84 2b       	or	r24, r20
    1d0e:	8c 93       	st	X, r24
    1d10:	40 c0       	rjmp	.+128    	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTC, pin_num);  /* Set pin to Logic Low */
    1d12:	a5 e3       	ldi	r26, 0x35	; 53
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e5 e3       	ldi	r30, 0x35	; 53
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 2e       	mov	r0, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <GPIO_writePin+0x164>
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <GPIO_writePin+0x160>
    1d34:	80 95       	com	r24
    1d36:	84 23       	and	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	2b c0       	rjmp	.+86     	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTD_ID:
            if (value == LOGIC_HIGH)
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	a1 f4       	brne	.+40     	; 0x1d6a <GPIO_writePin+0x19e>
            {
                SET_BIT(PORTD, pin_num);  /* Set pin to Logic High */
    1d42:	a2 e3       	ldi	r26, 0x32	; 50
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e2 e3       	ldi	r30, 0x32	; 50
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <GPIO_writePin+0x194>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <GPIO_writePin+0x190>
    1d64:	84 2b       	or	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTD, pin_num);  /* Set pin to Logic Low */
    1d6a:	a2 e3       	ldi	r26, 0x32	; 50
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e2 e3       	ldi	r30, 0x32	; 50
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <GPIO_writePin+0x1bc>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <GPIO_writePin+0x1b8>
    1d8c:	80 95       	com	r24
    1d8e:	84 23       	and	r24, r20
    1d90:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <GPIO_readPin>:
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * Returns     :
 * - The value of the pin (Logic High or Logic Low).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <GPIO_readPin+0x6>
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <GPIO_readPin+0x8>
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    1db4:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, return Logic Low.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 30       	cpi	r24, 0x08	; 8
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <GPIO_readPin+0x1c>
    1dbc:	84 c0       	rjmp	.+264    	; 0x1ec6 <GPIO_readPin+0x124>
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <GPIO_readPin+0x24>
    1dc4:	80 c0       	rjmp	.+256    	; 0x1ec6 <GPIO_readPin+0x124>
        /* Do Nothing */
    }
    else
    {
        /* Read the pin value as required */
        switch (port_num)
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3d 83       	std	Y+5, r19	; 0x05
    1dce:	2c 83       	std	Y+4, r18	; 0x04
    1dd0:	4c 81       	ldd	r20, Y+4	; 0x04
    1dd2:	5d 81       	ldd	r21, Y+5	; 0x05
    1dd4:	41 30       	cpi	r20, 0x01	; 1
    1dd6:	51 05       	cpc	r21, r1
    1dd8:	79 f1       	breq	.+94     	; 0x1e38 <GPIO_readPin+0x96>
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	91 05       	cpc	r25, r1
    1de2:	34 f4       	brge	.+12     	; 0x1df0 <GPIO_readPin+0x4e>
    1de4:	2c 81       	ldd	r18, Y+4	; 0x04
    1de6:	3d 81       	ldd	r19, Y+5	; 0x05
    1de8:	21 15       	cp	r18, r1
    1dea:	31 05       	cpc	r19, r1
    1dec:	69 f0       	breq	.+26     	; 0x1e08 <GPIO_readPin+0x66>
    1dee:	6b c0       	rjmp	.+214    	; 0x1ec6 <GPIO_readPin+0x124>
    1df0:	4c 81       	ldd	r20, Y+4	; 0x04
    1df2:	5d 81       	ldd	r21, Y+5	; 0x05
    1df4:	42 30       	cpi	r20, 0x02	; 2
    1df6:	51 05       	cpc	r21, r1
    1df8:	b9 f1       	breq	.+110    	; 0x1e68 <GPIO_readPin+0xc6>
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfe:	83 30       	cpi	r24, 0x03	; 3
    1e00:	91 05       	cpc	r25, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <GPIO_readPin+0x64>
    1e04:	49 c0       	rjmp	.+146    	; 0x1e98 <GPIO_readPin+0xf6>
    1e06:	5f c0       	rjmp	.+190    	; 0x1ec6 <GPIO_readPin+0x124>
        {
        case PORTA_ID:
            if (BIT_IS_SET(PINA, pin_num))  /* Check if the pin is Logic High */
    1e08:	e9 e3       	ldi	r30, 0x39	; 57
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a9 01       	movw	r20, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <GPIO_readPin+0x7e>
    1e1c:	55 95       	asr	r21
    1e1e:	47 95       	ror	r20
    1e20:	8a 95       	dec	r24
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <GPIO_readPin+0x7a>
    1e24:	ca 01       	movw	r24, r20
    1e26:	81 70       	andi	r24, 0x01	; 1
    1e28:	90 70       	andi	r25, 0x00	; 0
    1e2a:	88 23       	and	r24, r24
    1e2c:	19 f0       	breq	.+6      	; 0x1e34 <GPIO_readPin+0x92>
            {
                pin_value = LOGIC_HIGH;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	49 c0       	rjmp	.+146    	; 0x1ec6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1e34:	19 82       	std	Y+1, r1	; 0x01
    1e36:	47 c0       	rjmp	.+142    	; 0x1ec6 <GPIO_readPin+0x124>
            }
            break;
        case PORTB_ID:
            if (BIT_IS_SET(PINB, pin_num))  /* Check if the pin is Logic High */
    1e38:	e6 e3       	ldi	r30, 0x36	; 54
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a9 01       	movw	r20, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <GPIO_readPin+0xae>
    1e4c:	55 95       	asr	r21
    1e4e:	47 95       	ror	r20
    1e50:	8a 95       	dec	r24
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <GPIO_readPin+0xaa>
    1e54:	ca 01       	movw	r24, r20
    1e56:	81 70       	andi	r24, 0x01	; 1
    1e58:	90 70       	andi	r25, 0x00	; 0
    1e5a:	88 23       	and	r24, r24
    1e5c:	19 f0       	breq	.+6      	; 0x1e64 <GPIO_readPin+0xc2>
            {
                pin_value = LOGIC_HIGH;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	31 c0       	rjmp	.+98     	; 0x1ec6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1e64:	19 82       	std	Y+1, r1	; 0x01
    1e66:	2f c0       	rjmp	.+94     	; 0x1ec6 <GPIO_readPin+0x124>
            }
            break;
        case PORTC_ID:
            if (BIT_IS_SET(PINC, pin_num))  /* Check if the pin is Logic High */
    1e68:	e3 e3       	ldi	r30, 0x33	; 51
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <GPIO_readPin+0xde>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <GPIO_readPin+0xda>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	90 70       	andi	r25, 0x00	; 0
    1e8a:	88 23       	and	r24, r24
    1e8c:	19 f0       	breq	.+6      	; 0x1e94 <GPIO_readPin+0xf2>
            {
                pin_value = LOGIC_HIGH;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	19 c0       	rjmp	.+50     	; 0x1ec6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	17 c0       	rjmp	.+46     	; 0x1ec6 <GPIO_readPin+0x124>
            }
            break;
        case PORTD_ID:
            if (BIT_IS_SET(PIND, pin_num))  /* Check if the pin is Logic High */
    1e98:	e0 e3       	ldi	r30, 0x30	; 48
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_readPin+0x10e>
    1eac:	55 95       	asr	r21
    1eae:	47 95       	ror	r20
    1eb0:	8a 95       	dec	r24
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_readPin+0x10a>
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	90 70       	andi	r25, 0x00	; 0
    1eba:	88 23       	and	r24, r24
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <GPIO_readPin+0x122>
            {
                pin_value = LOGIC_HIGH;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
            }
            break;
        }
    }

    return pin_value;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <GPIO_setupPortDirection>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - direction: The direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <GPIO_setupPortDirection+0x6>
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <GPIO_setupPortDirection+0x8>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	84 30       	cpi	r24, 0x04	; 4
    1eec:	90 f5       	brcc	.+100    	; 0x1f52 <GPIO_setupPortDirection+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Setup the port direction as required */
        switch (port_num)
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3c 83       	std	Y+4, r19	; 0x04
    1ef6:	2b 83       	std	Y+3, r18	; 0x03
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	91 05       	cpc	r25, r1
    1f00:	d1 f0       	breq	.+52     	; 0x1f36 <GPIO_setupPortDirection+0x5e>
    1f02:	2b 81       	ldd	r18, Y+3	; 0x03
    1f04:	3c 81       	ldd	r19, Y+4	; 0x04
    1f06:	22 30       	cpi	r18, 0x02	; 2
    1f08:	31 05       	cpc	r19, r1
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <GPIO_setupPortDirection+0x3e>
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <GPIO_setupPortDirection+0x54>
    1f14:	1e c0       	rjmp	.+60     	; 0x1f52 <GPIO_setupPortDirection+0x7a>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	81 f0       	breq	.+32     	; 0x1f40 <GPIO_setupPortDirection+0x68>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	91 05       	cpc	r25, r1
    1f28:	81 f0       	breq	.+32     	; 0x1f4a <GPIO_setupPortDirection+0x72>
    1f2a:	13 c0       	rjmp	.+38     	; 0x1f52 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;  /* Set port A direction */
    1f2c:	ea e3       	ldi	r30, 0x3A	; 58
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	80 83       	st	Z, r24
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;  /* Set port B direction */
    1f36:	e7 e3       	ldi	r30, 0x37	; 55
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	80 83       	st	Z, r24
    1f3e:	09 c0       	rjmp	.+18     	; 0x1f52 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;  /* Set port C direction */
    1f40:	e4 e3       	ldi	r30, 0x34	; 52
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	80 83       	st	Z, r24
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;  /* Set port D direction */
    1f4a:	e1 e3       	ldi	r30, 0x31	; 49
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	80 83       	st	Z, r24
            break;
        }
    }
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <GPIO_writePort>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - value: The value to write on the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <GPIO_writePort+0x6>
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <GPIO_writePort+0x8>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	84 30       	cpi	r24, 0x04	; 4
    1f74:	90 f5       	brcc	.+100    	; 0x1fda <GPIO_writePort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Write the port value as required */
        switch (port_num)
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3c 83       	std	Y+4, r19	; 0x04
    1f7e:	2b 83       	std	Y+3, r18	; 0x03
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	91 05       	cpc	r25, r1
    1f88:	d1 f0       	breq	.+52     	; 0x1fbe <GPIO_writePort+0x5e>
    1f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8e:	22 30       	cpi	r18, 0x02	; 2
    1f90:	31 05       	cpc	r19, r1
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <GPIO_writePort+0x3e>
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	61 f0       	breq	.+24     	; 0x1fb4 <GPIO_writePort+0x54>
    1f9c:	1e c0       	rjmp	.+60     	; 0x1fda <GPIO_writePort+0x7a>
    1f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	81 f0       	breq	.+32     	; 0x1fc8 <GPIO_writePort+0x68>
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	91 05       	cpc	r25, r1
    1fb0:	81 f0       	breq	.+32     	; 0x1fd2 <GPIO_writePort+0x72>
    1fb2:	13 c0       	rjmp	.+38     	; 0x1fda <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;  /* Write value to port A */
    1fb4:	eb e3       	ldi	r30, 0x3B	; 59
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	80 83       	st	Z, r24
    1fbc:	0e c0       	rjmp	.+28     	; 0x1fda <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;  /* Write value to port B */
    1fbe:	e8 e3       	ldi	r30, 0x38	; 56
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	80 83       	st	Z, r24
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;  /* Write value to port C */
    1fc8:	e5 e3       	ldi	r30, 0x35	; 53
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	80 83       	st	Z, r24
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;  /* Write value to port D */
    1fd2:	e2 e3       	ldi	r30, 0x32	; 50
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	80 83       	st	Z, r24
            break;
        }
    }
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <GPIO_readPort>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * Returns     :
 * - The value of the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <GPIO_readPort+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <GPIO_readPort+0x8>
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
    1ff6:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number is invalid.
     * If invalid, return ZERO.
     */
    if (port_num >= NUM_OF_PORTS)
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	84 30       	cpi	r24, 0x04	; 4
    1ffc:	90 f5       	brcc	.+100    	; 0x2062 <GPIO_readPort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Read the port value as required */
        switch (port_num)
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3c 83       	std	Y+4, r19	; 0x04
    2006:	2b 83       	std	Y+3, r18	; 0x03
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	91 05       	cpc	r25, r1
    2010:	d1 f0       	breq	.+52     	; 0x2046 <GPIO_readPort+0x5e>
    2012:	2b 81       	ldd	r18, Y+3	; 0x03
    2014:	3c 81       	ldd	r19, Y+4	; 0x04
    2016:	22 30       	cpi	r18, 0x02	; 2
    2018:	31 05       	cpc	r19, r1
    201a:	2c f4       	brge	.+10     	; 0x2026 <GPIO_readPort+0x3e>
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	61 f0       	breq	.+24     	; 0x203c <GPIO_readPort+0x54>
    2024:	1e c0       	rjmp	.+60     	; 0x2062 <GPIO_readPort+0x7a>
    2026:	2b 81       	ldd	r18, Y+3	; 0x03
    2028:	3c 81       	ldd	r19, Y+4	; 0x04
    202a:	22 30       	cpi	r18, 0x02	; 2
    202c:	31 05       	cpc	r19, r1
    202e:	81 f0       	breq	.+32     	; 0x2050 <GPIO_readPort+0x68>
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	83 30       	cpi	r24, 0x03	; 3
    2036:	91 05       	cpc	r25, r1
    2038:	81 f0       	breq	.+32     	; 0x205a <GPIO_readPort+0x72>
    203a:	13 c0       	rjmp	.+38     	; 0x2062 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            value = PINA;  /* Read value from port A */
    203c:	e9 e3       	ldi	r30, 0x39	; 57
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	0e c0       	rjmp	.+28     	; 0x2062 <GPIO_readPort+0x7a>
            break;
        case PORTB_ID:
            value = PINB;  /* Read value from port B */
    2046:	e6 e3       	ldi	r30, 0x36	; 54
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	09 c0       	rjmp	.+18     	; 0x2062 <GPIO_readPort+0x7a>
            break;
        case PORTC_ID:
            value = PINC;  /* Read value from port C */
    2050:	e3 e3       	ldi	r30, 0x33	; 51
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	04 c0       	rjmp	.+8      	; 0x2062 <GPIO_readPort+0x7a>
            break;
        case PORTD_ID:
            value = PIND;  /* Read value from port D */
    205a:	e0 e3       	ldi	r30, 0x30	; 48
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return value;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <__vector_1>:
 * Description :
 * Interrupt Service Routine for INT0.
 * This ISR is called when an interrupt is triggered on INT0.
 */
ISR(INT0_vect)
{
    2072:	1f 92       	push	r1
    2074:	0f 92       	push	r0
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	0f 92       	push	r0
    207a:	11 24       	eor	r1, r1
    207c:	2f 93       	push	r18
    207e:	3f 93       	push	r19
    2080:	4f 93       	push	r20
    2082:	5f 93       	push	r21
    2084:	6f 93       	push	r22
    2086:	7f 93       	push	r23
    2088:	8f 93       	push	r24
    208a:	9f 93       	push	r25
    208c:	af 93       	push	r26
    208e:	bf 93       	push	r27
    2090:	ef 93       	push	r30
    2092:	ff 93       	push	r31
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT0 != NULL_PTR)
    209c:	80 91 98 01 	lds	r24, 0x0198
    20a0:	90 91 99 01 	lds	r25, 0x0199
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <__vector_1+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT0)();
    20a8:	e0 91 98 01 	lds	r30, 0x0198
    20ac:	f0 91 99 01 	lds	r31, 0x0199
    20b0:	09 95       	icall
    }
}
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	ff 91       	pop	r31
    20b8:	ef 91       	pop	r30
    20ba:	bf 91       	pop	r27
    20bc:	af 91       	pop	r26
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	7f 91       	pop	r23
    20c4:	6f 91       	pop	r22
    20c6:	5f 91       	pop	r21
    20c8:	4f 91       	pop	r20
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_2>:
 * Description :
 * Interrupt Service Routine for INT1.
 * This ISR is called when an interrupt is triggered on INT1.
 */
ISR(INT1_vect)
{
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT1 != NULL_PTR)
    2102:	80 91 9a 01 	lds	r24, 0x019A
    2106:	90 91 9b 01 	lds	r25, 0x019B
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	29 f0       	breq	.+10     	; 0x2118 <__vector_2+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT1)();
    210e:	e0 91 9a 01 	lds	r30, 0x019A
    2112:	f0 91 9b 01 	lds	r31, 0x019B
    2116:	09 95       	icall
    }
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	ff 91       	pop	r31
    211e:	ef 91       	pop	r30
    2120:	bf 91       	pop	r27
    2122:	af 91       	pop	r26
    2124:	9f 91       	pop	r25
    2126:	8f 91       	pop	r24
    2128:	7f 91       	pop	r23
    212a:	6f 91       	pop	r22
    212c:	5f 91       	pop	r21
    212e:	4f 91       	pop	r20
    2130:	3f 91       	pop	r19
    2132:	2f 91       	pop	r18
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_3>:
 * Description :
 * Interrupt Service Routine for INT2.
 * This ISR is called when an interrupt is triggered on INT2.
 */
ISR(INT2_vect)
{
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	4f 93       	push	r20
    214e:	5f 93       	push	r21
    2150:	6f 93       	push	r22
    2152:	7f 93       	push	r23
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	af 93       	push	r26
    215a:	bf 93       	push	r27
    215c:	ef 93       	push	r30
    215e:	ff 93       	push	r31
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT2 != NULL_PTR)
    2168:	80 91 9c 01 	lds	r24, 0x019C
    216c:	90 91 9d 01 	lds	r25, 0x019D
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	29 f0       	breq	.+10     	; 0x217e <__vector_3+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT2)();
    2174:	e0 91 9c 01 	lds	r30, 0x019C
    2178:	f0 91 9d 01 	lds	r31, 0x019D
    217c:	09 95       	icall
    }
}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	ff 91       	pop	r31
    2184:	ef 91       	pop	r30
    2186:	bf 91       	pop	r27
    2188:	af 91       	pop	r26
    218a:	9f 91       	pop	r25
    218c:	8f 91       	pop	r24
    218e:	7f 91       	pop	r23
    2190:	6f 91       	pop	r22
    2192:	5f 91       	pop	r21
    2194:	4f 91       	pop	r20
    2196:	3f 91       	pop	r19
    2198:	2f 91       	pop	r18
    219a:	0f 90       	pop	r0
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	0f 90       	pop	r0
    21a0:	1f 90       	pop	r1
    21a2:	18 95       	reti

000021a4 <external_interrupt_init>:
 * This function configures the interrupt sense control and enables the interrupt.
 * Parameters  :
 * - a_ptr: Pointer to the external interrupt configuration structure.
 */
void external_interrupt_init(const EXT_INT_ConfigType * a_ptr)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <external_interrupt_init+0x6>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <external_interrupt_init+0x8>
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    switch (a_ptr->INT_ID)
    21b4:	e9 81       	ldd	r30, Y+1	; 0x01
    21b6:	fa 81       	ldd	r31, Y+2	; 0x02
    21b8:	80 81       	ld	r24, Z
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	3c 83       	std	Y+4, r19	; 0x04
    21c0:	2b 83       	std	Y+3, r18	; 0x03
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	91 05       	cpc	r25, r1
    21ca:	31 f1       	breq	.+76     	; 0x2218 <external_interrupt_init+0x74>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <external_interrupt_init+0x34>
    21d6:	41 c0       	rjmp	.+130    	; 0x225a <external_interrupt_init+0xb6>
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	09 f0       	breq	.+2      	; 0x21e2 <external_interrupt_init+0x3e>
    21e0:	5e c0       	rjmp	.+188    	; 0x229e <external_interrupt_init+0xfa>
    {
    case INT_0:
        DDRD &= (~(1 << PD2));  /* Configure INT0/PD2 as input pin */
    21e2:	a1 e3       	ldi	r26, 0x31	; 49
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e1 e3       	ldi	r30, 0x31	; 49
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8b 7f       	andi	r24, 0xFB	; 251
    21ee:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT0:
         * - Falling edge: ISC00 = 0, ISC01 = 1
         * - Rising edge: ISC00 = 1, ISC01 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC00 | 1 << ISC01)) | ((a_ptr->INT_Sense) << ISC00);
    21f0:	a5 e5       	ldi	r26, 0x55	; 85
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e5       	ldi	r30, 0x55	; 85
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	98 2f       	mov	r25, r24
    21fc:	9c 7f       	andi	r25, 0xFC	; 252
    21fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2200:	fa 81       	ldd	r31, Y+2	; 0x02
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	89 2b       	or	r24, r25
    2206:	8c 93       	st	X, r24

        /* Enable external interrupt INT0 */
        GICR |= (1 << INT0);
    2208:	ab e5       	ldi	r26, 0x5B	; 91
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	eb e5       	ldi	r30, 0x5B	; 91
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 64       	ori	r24, 0x40	; 64
    2214:	8c 93       	st	X, r24
    2216:	43 c0       	rjmp	.+134    	; 0x229e <external_interrupt_init+0xfa>
        break;

    case INT_1:
        DDRD &= (~(1 << PD3));  /* Configure INT1/PD3 as input pin */
    2218:	a1 e3       	ldi	r26, 0x31	; 49
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e1 e3       	ldi	r30, 0x31	; 49
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	87 7f       	andi	r24, 0xF7	; 247
    2224:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT1:
         * - Falling edge: ISC10 = 0, ISC11 = 1
         * - Rising edge: ISC10 = 1, ISC11 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC10 | 1 << ISC11)) | ((a_ptr->INT_Sense) << ISC10);
    2226:	a5 e5       	ldi	r26, 0x55	; 85
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e5 e5       	ldi	r30, 0x55	; 85
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	28 2f       	mov	r18, r24
    2232:	23 7f       	andi	r18, 0xF3	; 243
    2234:	e9 81       	ldd	r30, Y+1	; 0x01
    2236:	fa 81       	ldd	r31, Y+2	; 0x02
    2238:	81 81       	ldd	r24, Z+1	; 0x01
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	82 2b       	or	r24, r18
    2248:	8c 93       	st	X, r24

        /* Enable external interrupt INT1 */
        GICR |= (1 << INT1);
    224a:	ab e5       	ldi	r26, 0x5B	; 91
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	eb e5       	ldi	r30, 0x5B	; 91
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 68       	ori	r24, 0x80	; 128
    2256:	8c 93       	st	X, r24
    2258:	22 c0       	rjmp	.+68     	; 0x229e <external_interrupt_init+0xfa>
        break;

    case INT_2:
        DDRB &= (~(1 << PB2));  /* Configure INT2/PB2 as input pin */
    225a:	a7 e3       	ldi	r26, 0x37	; 55
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e7 e3       	ldi	r30, 0x37	; 55
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8b 7f       	andi	r24, 0xFB	; 251
    2266:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT2:
         * - Falling edge: ISC2 = 0
         * - Rising edge: ISC2 = 1
         */
        if (a_ptr->INT_Sense == RISING_EDGE_INT2) {
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	81 81       	ldd	r24, Z+1	; 0x01
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	41 f4       	brne	.+16     	; 0x2282 <external_interrupt_init+0xde>
            MCUCSR |= (1 << ISC2);
    2272:	a4 e5       	ldi	r26, 0x54	; 84
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e4 e5       	ldi	r30, 0x54	; 84
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	80 64       	ori	r24, 0x40	; 64
    227e:	8c 93       	st	X, r24
    2280:	07 c0       	rjmp	.+14     	; 0x2290 <external_interrupt_init+0xec>
        } else {
            MCUCSR &= ~(1 << ISC2);
    2282:	a4 e5       	ldi	r26, 0x54	; 84
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e4 e5       	ldi	r30, 0x54	; 84
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 7b       	andi	r24, 0xBF	; 191
    228e:	8c 93       	st	X, r24
        }

        /* Enable external interrupt INT2 */
        GICR |= (1 << INT2);
    2290:	ab e5       	ldi	r26, 0x5B	; 91
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	eb e5       	ldi	r30, 0x5B	; 91
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 62       	ori	r24, 0x20	; 32
    229c:	8c 93       	st	X, r24
        break;
    }
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <external_interrupt_deinit>:
 * This function disables the specified external interrupt.
 * Parameters  :
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_deinit(EXT_INT_Type INT_ID)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <external_interrupt_deinit+0x6>
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
    switch (INT_ID)
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	3b 83       	std	Y+3, r19	; 0x03
    22c2:	2a 83       	std	Y+2, r18	; 0x02
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	9b 81       	ldd	r25, Y+3	; 0x03
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	c1 f0       	breq	.+48     	; 0x22fe <external_interrupt_deinit+0x52>
    22ce:	2a 81       	ldd	r18, Y+2	; 0x02
    22d0:	3b 81       	ldd	r19, Y+3	; 0x03
    22d2:	22 30       	cpi	r18, 0x02	; 2
    22d4:	31 05       	cpc	r19, r1
    22d6:	11 f1       	breq	.+68     	; 0x231c <external_interrupt_deinit+0x70>
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	61 f5       	brne	.+88     	; 0x2338 <external_interrupt_deinit+0x8c>
    {
    case INT_0:
        /* Clear the sense control bits for INT0 */
        MCUCR &= ~(1 << ISC00) & ~(1 << ISC01);
    22e0:	a5 e5       	ldi	r26, 0x55	; 85
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e5 e5       	ldi	r30, 0x55	; 85
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8c 7f       	andi	r24, 0xFC	; 252
    22ec:	8c 93       	st	X, r24

        /* Disable external interrupt INT0 */
        GICR &= ~(1 << INT0);
    22ee:	ab e5       	ldi	r26, 0x5B	; 91
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	eb e5       	ldi	r30, 0x5B	; 91
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	8f 7b       	andi	r24, 0xBF	; 191
    22fa:	8c 93       	st	X, r24
    22fc:	1d c0       	rjmp	.+58     	; 0x2338 <external_interrupt_deinit+0x8c>
        break;

    case INT_1:
        /* Clear the sense control bits for INT1 */
        MCUCR &= ~(1 << ISC10) & ~(1 << ISC11);
    22fe:	a5 e5       	ldi	r26, 0x55	; 85
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e5 e5       	ldi	r30, 0x55	; 85
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	83 7f       	andi	r24, 0xF3	; 243
    230a:	8c 93       	st	X, r24

        /* Disable external interrupt INT1 */
        GICR &= ~(1 << INT1);
    230c:	ab e5       	ldi	r26, 0x5B	; 91
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	eb e5       	ldi	r30, 0x5B	; 91
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 77       	andi	r24, 0x7F	; 127
    2318:	8c 93       	st	X, r24
    231a:	0e c0       	rjmp	.+28     	; 0x2338 <external_interrupt_deinit+0x8c>
        break;

    case INT_2:
        /* Clear the sense control bit for INT2 */
        MCUCSR &= ~(1 << ISC2);
    231c:	a4 e5       	ldi	r26, 0x54	; 84
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e4 e5       	ldi	r30, 0x54	; 84
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8f 7b       	andi	r24, 0xBF	; 191
    2328:	8c 93       	st	X, r24

        /* Disable external interrupt INT2 */
        GICR &= ~(1 << INT2);
    232a:	ab e5       	ldi	r26, 0x5B	; 91
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	eb e5       	ldi	r30, 0x5B	; 91
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8f 7d       	andi	r24, 0xDF	; 223
    2336:	8c 93       	st	X, r24
        break;
    }
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <external_interrupt_setCallBack>:
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_setCallBack(void(*a_ptr)(void), EXT_INT_Type INT_ID)
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <external_interrupt_setCallBack+0x6>
    234a:	00 d0       	rcall	.+0      	; 0x234c <external_interrupt_setCallBack+0x8>
    234c:	0f 92       	push	r0
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	6b 83       	std	Y+3, r22	; 0x03
    switch (INT_ID)
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	3d 83       	std	Y+5, r19	; 0x05
    2360:	2c 83       	std	Y+4, r18	; 0x04
    2362:	8c 81       	ldd	r24, Y+4	; 0x04
    2364:	9d 81       	ldd	r25, Y+5	; 0x05
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	91 05       	cpc	r25, r1
    236a:	81 f0       	breq	.+32     	; 0x238c <external_interrupt_setCallBack+0x48>
    236c:	2c 81       	ldd	r18, Y+4	; 0x04
    236e:	3d 81       	ldd	r19, Y+5	; 0x05
    2370:	22 30       	cpi	r18, 0x02	; 2
    2372:	31 05       	cpc	r19, r1
    2374:	91 f0       	breq	.+36     	; 0x239a <external_interrupt_setCallBack+0x56>
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	a1 f4       	brne	.+40     	; 0x23a6 <external_interrupt_setCallBack+0x62>
    {
    case INT_0:
        g_callBackPtr_INT0 = a_ptr;  /* Set callback for INT0 */
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	90 93 99 01 	sts	0x0199, r25
    2386:	80 93 98 01 	sts	0x0198, r24
    238a:	0d c0       	rjmp	.+26     	; 0x23a6 <external_interrupt_setCallBack+0x62>
        break;
    case INT_1:
        g_callBackPtr_INT1 = a_ptr;  /* Set callback for INT1 */
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	90 93 9b 01 	sts	0x019B, r25
    2394:	80 93 9a 01 	sts	0x019A, r24
    2398:	06 c0       	rjmp	.+12     	; 0x23a6 <external_interrupt_setCallBack+0x62>
        break;
    case INT_2:
        g_callBackPtr_INT2 = a_ptr;  /* Set callback for INT2 */
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	90 93 9d 01 	sts	0x019D, r25
    23a2:	80 93 9c 01 	sts	0x019C, r24
        break;
    }
}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <Ultrasonic_init>:

/*******************************************************************************
 *                      	Functions Definitions                              *
 *******************************************************************************/
void Ultrasonic_init(void)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <Ultrasonic_init+0x6>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <Ultrasonic_init+0x8>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, RISING_EDGE};
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	8a 83       	std	Y+2, r24	; 0x02
	external_interrupt_setCallBack(Ultrasonic_edgeProcessing_INT0, INT_0); /* Set the callback function for INT0 */
    23c8:	8f e7       	ldi	r24, 0x7F	; 127
    23ca:	95 e1       	ldi	r25, 0x15	; 21
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	0e 94 a2 11 	call	0x2344	; 0x2344 <external_interrupt_setCallBack>
	external_interrupt_init(&EXT_INT0_Configrations);	/* Initialize INT0 with the specified configuration */
    23d2:	ce 01       	movw	r24, r28
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <external_interrupt_init>

	EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, RISING_EDGE};
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	8b 83       	std	Y+3, r24	; 0x03
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	8c 83       	std	Y+4, r24	; 0x04
	external_interrupt_setCallBack(Ultrasonic_edgeProcessing_INT2, INT_1); /* Set the callback function for INT2 */
    23e2:	87 ee       	ldi	r24, 0xE7	; 231
    23e4:	95 e1       	ldi	r25, 0x15	; 21
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	0e 94 a2 11 	call	0x2344	; 0x2344 <external_interrupt_setCallBack>
	external_interrupt_init(&EXT_INT2_Configrations);	/* Initialize INT2 with the specified configuration */
    23ec:	ce 01       	movw	r24, r28
    23ee:	03 96       	adiw	r24, 0x03	; 3
    23f0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <external_interrupt_init>

	/* Set up pin direction for trigger pin as output */
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, PIN_OUTPUT);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	65 e0       	ldi	r22, 0x05	; 5
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, PIN_OUTPUT);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	66 e0       	ldi	r22, 0x06	; 6
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, PIN_OUTPUT);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	67 e0       	ldi	r22, 0x07	; 7
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <Ultrasonic_Trigger>:

static void Ultrasonic_Trigger(Ultrasonic ultrasonic)
{
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	cb 54       	subi	r28, 0x4B	; 75
    242e:	d0 40       	sbci	r29, 0x00	; 0
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	fe 01       	movw	r30, r28
    243c:	e7 5b       	subi	r30, 0xB7	; 183
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 83       	st	Z, r24
	switch(ultrasonic)
    2442:	fe 01       	movw	r30, r28
    2444:	e7 5b       	subi	r30, 0xB7	; 183
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	2c 96       	adiw	r28, 0x0c	; 12
    2450:	3f af       	std	Y+63, r19	; 0x3f
    2452:	2e af       	std	Y+62, r18	; 0x3e
    2454:	2c 97       	sbiw	r28, 0x0c	; 12
    2456:	2c 96       	adiw	r28, 0x0c	; 12
    2458:	8e ad       	ldd	r24, Y+62	; 0x3e
    245a:	9f ad       	ldd	r25, Y+63	; 0x3f
    245c:	2c 97       	sbiw	r28, 0x0c	; 12
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	91 05       	cpc	r25, r1
    2462:	89 f0       	breq	.+34     	; 0x2486 <Ultrasonic_Trigger+0x66>
    2464:	2c 96       	adiw	r28, 0x0c	; 12
    2466:	ee ad       	ldd	r30, Y+62	; 0x3e
    2468:	ff ad       	ldd	r31, Y+63	; 0x3f
    246a:	2c 97       	sbiw	r28, 0x0c	; 12
    246c:	e2 30       	cpi	r30, 0x02	; 2
    246e:	f1 05       	cpc	r31, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <Ultrasonic_Trigger+0x54>
    2472:	ba c1       	rjmp	.+884    	; 0x27e8 <Ultrasonic_Trigger+0x3c8>
    2474:	2c 96       	adiw	r28, 0x0c	; 12
    2476:	2e ad       	ldd	r18, Y+62	; 0x3e
    2478:	3f ad       	ldd	r19, Y+63	; 0x3f
    247a:	2c 97       	sbiw	r28, 0x0c	; 12
    247c:	21 15       	cp	r18, r1
    247e:	31 05       	cpc	r19, r1
    2480:	09 f4       	brne	.+2      	; 0x2484 <Ultrasonic_Trigger+0x64>
    2482:	e9 c0       	rjmp	.+466    	; 0x2656 <Ultrasonic_Trigger+0x236>
    2484:	79 c2       	rjmp	.+1266   	; 0x2978 <Ultrasonic_Trigger+0x558>
	{
	case U_right:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, LOGIC_HIGH);
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	65 e0       	ldi	r22, 0x05	; 5
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2490:	fe 01       	movw	r30, r28
    2492:	eb 5b       	subi	r30, 0xBB	; 187
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e2       	ldi	r26, 0x20	; 32
    249c:	b1 e4       	ldi	r27, 0x41	; 65
    249e:	80 83       	st	Z, r24
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	a2 83       	std	Z+2, r26	; 0x02
    24a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24a6:	8e 01       	movw	r16, r28
    24a8:	0f 5b       	subi	r16, 0xBF	; 191
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	eb 5b       	subi	r30, 0xBB	; 187
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	2b ea       	ldi	r18, 0xAB	; 171
    24bc:	3a ea       	ldi	r19, 0xAA	; 170
    24be:	4a ea       	ldi	r20, 0xAA	; 170
    24c0:	50 e4       	ldi	r21, 0x40	; 64
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d4:	fe 01       	movw	r30, r28
    24d6:	ef 5b       	subi	r30, 0xBF	; 191
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	34 f4       	brge	.+12     	; 0x24fe <Ultrasonic_Trigger+0xde>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	fe 01       	movw	r30, r28
    24f6:	e0 5c       	subi	r30, 0xC0	; 192
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 83       	st	Z, r24
    24fc:	9d c0       	rjmp	.+314    	; 0x2638 <Ultrasonic_Trigger+0x218>
	else if (__tmp > 255)
    24fe:	fe 01       	movw	r30, r28
    2500:	ef 5b       	subi	r30, 0xBF	; 191
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4f e7       	ldi	r20, 0x7F	; 127
    2512:	53 e4       	ldi	r21, 0x43	; 67
    2514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2518:	18 16       	cp	r1, r24
    251a:	0c f0       	brlt	.+2      	; 0x251e <Ultrasonic_Trigger+0xfe>
    251c:	7e c0       	rjmp	.+252    	; 0x261a <Ultrasonic_Trigger+0x1fa>
	{
		_delay_ms(__us / 1000.0);
    251e:	fe 01       	movw	r30, r28
    2520:	eb 5b       	subi	r30, 0xBB	; 187
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a e7       	ldi	r20, 0x7A	; 122
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8c af       	std	Y+60, r24	; 0x3c
    253e:	9d af       	std	Y+61, r25	; 0x3d
    2540:	ae af       	std	Y+62, r26	; 0x3e
    2542:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6c ad       	ldd	r22, Y+60	; 0x3c
    2546:	7d ad       	ldd	r23, Y+61	; 0x3d
    2548:	8e ad       	ldd	r24, Y+62	; 0x3e
    254a:	9f ad       	ldd	r25, Y+63	; 0x3f
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a e7       	ldi	r20, 0x7A	; 122
    2552:	55 e4       	ldi	r21, 0x45	; 69
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	88 af       	std	Y+56, r24	; 0x38
    255e:	99 af       	std	Y+57, r25	; 0x39
    2560:	aa af       	std	Y+58, r26	; 0x3a
    2562:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2564:	68 ad       	ldd	r22, Y+56	; 0x38
    2566:	79 ad       	ldd	r23, Y+57	; 0x39
    2568:	8a ad       	ldd	r24, Y+58	; 0x3a
    256a:	9b ad       	ldd	r25, Y+59	; 0x3b
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	2c f4       	brge	.+10     	; 0x2586 <Ultrasonic_Trigger+0x166>
		__ticks = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9f ab       	std	Y+55, r25	; 0x37
    2582:	8e ab       	std	Y+54, r24	; 0x36
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <Ultrasonic_Trigger+0x1e4>
	else if (__tmp > 65535)
    2586:	68 ad       	ldd	r22, Y+56	; 0x38
    2588:	79 ad       	ldd	r23, Y+57	; 0x39
    258a:	8a ad       	ldd	r24, Y+58	; 0x3a
    258c:	9b ad       	ldd	r25, Y+59	; 0x3b
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	4c f5       	brge	.+82     	; 0x25f0 <Ultrasonic_Trigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	6c ad       	ldd	r22, Y+60	; 0x3c
    25a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    25a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    25a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9f ab       	std	Y+55, r25	; 0x37
    25c4:	8e ab       	std	Y+54, r24	; 0x36
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <Ultrasonic_Trigger+0x1c6>
    25c8:	80 e9       	ldi	r24, 0x90	; 144
    25ca:	91 e0       	ldi	r25, 0x01	; 1
    25cc:	9d ab       	std	Y+53, r25	; 0x35
    25ce:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25d0:	8c a9       	ldd	r24, Y+52	; 0x34
    25d2:	9d a9       	ldd	r25, Y+53	; 0x35
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <Ultrasonic_Trigger+0x1b4>
    25d8:	9d ab       	std	Y+53, r25	; 0x35
    25da:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	8e a9       	ldd	r24, Y+54	; 0x36
    25de:	9f a9       	ldd	r25, Y+55	; 0x37
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	9f ab       	std	Y+55, r25	; 0x37
    25e4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	8e a9       	ldd	r24, Y+54	; 0x36
    25e8:	9f a9       	ldd	r25, Y+55	; 0x37
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <Ultrasonic_Trigger+0x1a8>
    25ee:	2d c0       	rjmp	.+90     	; 0x264a <Ultrasonic_Trigger+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	68 ad       	ldd	r22, Y+56	; 0x38
    25f2:	79 ad       	ldd	r23, Y+57	; 0x39
    25f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    25f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	9f ab       	std	Y+55, r25	; 0x37
    2602:	8e ab       	std	Y+54, r24	; 0x36
    2604:	8e a9       	ldd	r24, Y+54	; 0x36
    2606:	9f a9       	ldd	r25, Y+55	; 0x37
    2608:	9b ab       	std	Y+51, r25	; 0x33
    260a:	8a ab       	std	Y+50, r24	; 0x32
    260c:	8a a9       	ldd	r24, Y+50	; 0x32
    260e:	9b a9       	ldd	r25, Y+51	; 0x33
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <Ultrasonic_Trigger+0x1f0>
    2614:	9b ab       	std	Y+51, r25	; 0x33
    2616:	8a ab       	std	Y+50, r24	; 0x32
    2618:	18 c0       	rjmp	.+48     	; 0x264a <Ultrasonic_Trigger+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    261a:	fe 01       	movw	r30, r28
    261c:	ef 5b       	subi	r30, 0xBF	; 191
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	fe 01       	movw	r30, r28
    2632:	e0 5c       	subi	r30, 0xC0	; 192
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 83       	st	Z, r24
    2638:	fe 01       	movw	r30, r28
    263a:	e0 5c       	subi	r30, 0xC0	; 192
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2642:	89 a9       	ldd	r24, Y+49	; 0x31
    2644:	8a 95       	dec	r24
    2646:	f1 f7       	brne	.-4      	; 0x2644 <Ultrasonic_Trigger+0x224>
    2648:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, LOGIC_LOW);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	65 e0       	ldi	r22, 0x05	; 5
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2654:	91 c1       	rjmp	.+802    	; 0x2978 <Ultrasonic_Trigger+0x558>
		break;

	case U_forward:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, LOGIC_HIGH);
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	66 e0       	ldi	r22, 0x06	; 6
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a0 e2       	ldi	r26, 0x20	; 32
    2666:	b1 e4       	ldi	r27, 0x41	; 65
    2668:	8d a7       	std	Y+45, r24	; 0x2d
    266a:	9e a7       	std	Y+46, r25	; 0x2e
    266c:	af a7       	std	Y+47, r26	; 0x2f
    266e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2670:	6d a5       	ldd	r22, Y+45	; 0x2d
    2672:	7e a5       	ldd	r23, Y+46	; 0x2e
    2674:	8f a5       	ldd	r24, Y+47	; 0x2f
    2676:	98 a9       	ldd	r25, Y+48	; 0x30
    2678:	2b ea       	ldi	r18, 0xAB	; 171
    267a:	3a ea       	ldi	r19, 0xAA	; 170
    267c:	4a ea       	ldi	r20, 0xAA	; 170
    267e:	50 e4       	ldi	r21, 0x40	; 64
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	89 a7       	std	Y+41, r24	; 0x29
    268a:	9a a7       	std	Y+42, r25	; 0x2a
    268c:	ab a7       	std	Y+43, r26	; 0x2b
    268e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2690:	69 a5       	ldd	r22, Y+41	; 0x29
    2692:	7a a5       	ldd	r23, Y+42	; 0x2a
    2694:	8b a5       	ldd	r24, Y+43	; 0x2b
    2696:	9c a5       	ldd	r25, Y+44	; 0x2c
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	1c f4       	brge	.+6      	; 0x26ae <Ultrasonic_Trigger+0x28e>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	88 a7       	std	Y+40, r24	; 0x28
    26ac:	91 c0       	rjmp	.+290    	; 0x27d0 <Ultrasonic_Trigger+0x3b0>
	else if (__tmp > 255)
    26ae:	69 a5       	ldd	r22, Y+41	; 0x29
    26b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    26b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	53 e4       	ldi	r21, 0x43	; 67
    26be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	0c f0       	brlt	.+2      	; 0x26c8 <Ultrasonic_Trigger+0x2a8>
    26c6:	7b c0       	rjmp	.+246    	; 0x27be <Ultrasonic_Trigger+0x39e>
	{
		_delay_ms(__us / 1000.0);
    26c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    26ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    26cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ce:	98 a9       	ldd	r25, Y+48	; 0x30
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4a e7       	ldi	r20, 0x7A	; 122
    26d6:	54 e4       	ldi	r21, 0x44	; 68
    26d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	8c a3       	std	Y+36, r24	; 0x24
    26e2:	9d a3       	std	Y+37, r25	; 0x25
    26e4:	ae a3       	std	Y+38, r26	; 0x26
    26e6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	6c a1       	ldd	r22, Y+36	; 0x24
    26ea:	7d a1       	ldd	r23, Y+37	; 0x25
    26ec:	8e a1       	ldd	r24, Y+38	; 0x26
    26ee:	9f a1       	ldd	r25, Y+39	; 0x27
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a e7       	ldi	r20, 0x7A	; 122
    26f6:	55 e4       	ldi	r21, 0x45	; 69
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	88 a3       	std	Y+32, r24	; 0x20
    2702:	99 a3       	std	Y+33, r25	; 0x21
    2704:	aa a3       	std	Y+34, r26	; 0x22
    2706:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2708:	68 a1       	ldd	r22, Y+32	; 0x20
    270a:	79 a1       	ldd	r23, Y+33	; 0x21
    270c:	8a a1       	ldd	r24, Y+34	; 0x22
    270e:	9b a1       	ldd	r25, Y+35	; 0x23
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271c:	88 23       	and	r24, r24
    271e:	2c f4       	brge	.+10     	; 0x272a <Ultrasonic_Trigger+0x30a>
		__ticks = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9f 8f       	std	Y+31, r25	; 0x1f
    2726:	8e 8f       	std	Y+30, r24	; 0x1e
    2728:	3f c0       	rjmp	.+126    	; 0x27a8 <Ultrasonic_Trigger+0x388>
	else if (__tmp > 65535)
    272a:	68 a1       	ldd	r22, Y+32	; 0x20
    272c:	79 a1       	ldd	r23, Y+33	; 0x21
    272e:	8a a1       	ldd	r24, Y+34	; 0x22
    2730:	9b a1       	ldd	r25, Y+35	; 0x23
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	4c f5       	brge	.+82     	; 0x2794 <Ultrasonic_Trigger+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2742:	6c a1       	ldd	r22, Y+36	; 0x24
    2744:	7d a1       	ldd	r23, Y+37	; 0x25
    2746:	8e a1       	ldd	r24, Y+38	; 0x26
    2748:	9f a1       	ldd	r25, Y+39	; 0x27
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e2       	ldi	r20, 0x20	; 32
    2750:	51 e4       	ldi	r21, 0x41	; 65
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9f 8f       	std	Y+31, r25	; 0x1f
    2768:	8e 8f       	std	Y+30, r24	; 0x1e
    276a:	0f c0       	rjmp	.+30     	; 0x278a <Ultrasonic_Trigger+0x36a>
    276c:	80 e9       	ldi	r24, 0x90	; 144
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	9d 8f       	std	Y+29, r25	; 0x1d
    2772:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2774:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2776:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <Ultrasonic_Trigger+0x358>
    277c:	9d 8f       	std	Y+29, r25	; 0x1d
    277e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2780:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2782:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	9f 8f       	std	Y+31, r25	; 0x1f
    2788:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    278c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	69 f7       	brne	.-38     	; 0x276c <Ultrasonic_Trigger+0x34c>
    2792:	24 c0       	rjmp	.+72     	; 0x27dc <Ultrasonic_Trigger+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2794:	68 a1       	ldd	r22, Y+32	; 0x20
    2796:	79 a1       	ldd	r23, Y+33	; 0x21
    2798:	8a a1       	ldd	r24, Y+34	; 0x22
    279a:	9b a1       	ldd	r25, Y+35	; 0x23
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9f 8f       	std	Y+31, r25	; 0x1f
    27a6:	8e 8f       	std	Y+30, r24	; 0x1e
    27a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ac:	9b 8f       	std	Y+27, r25	; 0x1b
    27ae:	8a 8f       	std	Y+26, r24	; 0x1a
    27b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <Ultrasonic_Trigger+0x394>
    27b8:	9b 8f       	std	Y+27, r25	; 0x1b
    27ba:	8a 8f       	std	Y+26, r24	; 0x1a
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <Ultrasonic_Trigger+0x3bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27be:	69 a5       	ldd	r22, Y+41	; 0x29
    27c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    27c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	88 a7       	std	Y+40, r24	; 0x28
    27d0:	88 a5       	ldd	r24, Y+40	; 0x28
    27d2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27d4:	89 8d       	ldd	r24, Y+25	; 0x19
    27d6:	8a 95       	dec	r24
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <Ultrasonic_Trigger+0x3b6>
    27da:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, LOGIC_LOW);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	66 e0       	ldi	r22, 0x06	; 6
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    27e6:	c8 c0       	rjmp	.+400    	; 0x2978 <Ultrasonic_Trigger+0x558>
		break;

	case U_backward:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, LOGIC_HIGH);
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	67 e0       	ldi	r22, 0x07	; 7
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e2       	ldi	r26, 0x20	; 32
    27f8:	b1 e4       	ldi	r27, 0x41	; 65
    27fa:	8d 8b       	std	Y+21, r24	; 0x15
    27fc:	9e 8b       	std	Y+22, r25	; 0x16
    27fe:	af 8b       	std	Y+23, r26	; 0x17
    2800:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	2b ea       	ldi	r18, 0xAB	; 171
    280c:	3a ea       	ldi	r19, 0xAA	; 170
    280e:	4a ea       	ldi	r20, 0xAA	; 170
    2810:	50 e4       	ldi	r21, 0x40	; 64
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	89 8b       	std	Y+17, r24	; 0x11
    281c:	9a 8b       	std	Y+18, r25	; 0x12
    281e:	ab 8b       	std	Y+19, r26	; 0x13
    2820:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2822:	69 89       	ldd	r22, Y+17	; 0x11
    2824:	7a 89       	ldd	r23, Y+18	; 0x12
    2826:	8b 89       	ldd	r24, Y+19	; 0x13
    2828:	9c 89       	ldd	r25, Y+20	; 0x14
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	1c f4       	brge	.+6      	; 0x2840 <Ultrasonic_Trigger+0x420>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	88 8b       	std	Y+16, r24	; 0x10
    283e:	91 c0       	rjmp	.+290    	; 0x2962 <Ultrasonic_Trigger+0x542>
	else if (__tmp > 255)
    2840:	69 89       	ldd	r22, Y+17	; 0x11
    2842:	7a 89       	ldd	r23, Y+18	; 0x12
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	53 e4       	ldi	r21, 0x43	; 67
    2850:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	0c f0       	brlt	.+2      	; 0x285a <Ultrasonic_Trigger+0x43a>
    2858:	7b c0       	rjmp	.+246    	; 0x2950 <Ultrasonic_Trigger+0x530>
	{
		_delay_ms(__us / 1000.0);
    285a:	6d 89       	ldd	r22, Y+21	; 0x15
    285c:	7e 89       	ldd	r23, Y+22	; 0x16
    285e:	8f 89       	ldd	r24, Y+23	; 0x17
    2860:	98 8d       	ldd	r25, Y+24	; 0x18
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a e7       	ldi	r20, 0x7A	; 122
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8c 87       	std	Y+12, r24	; 0x0c
    2874:	9d 87       	std	Y+13, r25	; 0x0d
    2876:	ae 87       	std	Y+14, r26	; 0x0e
    2878:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	6c 85       	ldd	r22, Y+12	; 0x0c
    287c:	7d 85       	ldd	r23, Y+13	; 0x0d
    287e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2880:	9f 85       	ldd	r25, Y+15	; 0x0f
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a e7       	ldi	r20, 0x7A	; 122
    2888:	55 e4       	ldi	r21, 0x45	; 69
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	88 87       	std	Y+8, r24	; 0x08
    2894:	99 87       	std	Y+9, r25	; 0x09
    2896:	aa 87       	std	Y+10, r26	; 0x0a
    2898:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    289a:	68 85       	ldd	r22, Y+8	; 0x08
    289c:	79 85       	ldd	r23, Y+9	; 0x09
    289e:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <Ultrasonic_Trigger+0x49c>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9f 83       	std	Y+7, r25	; 0x07
    28b8:	8e 83       	std	Y+6, r24	; 0x06
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <Ultrasonic_Trigger+0x51a>
	else if (__tmp > 65535)
    28bc:	68 85       	ldd	r22, Y+8	; 0x08
    28be:	79 85       	ldd	r23, Y+9	; 0x09
    28c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <Ultrasonic_Trigger+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    28d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    28d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28da:	9f 85       	ldd	r25, Y+15	; 0x0f
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9f 83       	std	Y+7, r25	; 0x07
    28fa:	8e 83       	std	Y+6, r24	; 0x06
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <Ultrasonic_Trigger+0x4fc>
    28fe:	80 e9       	ldi	r24, 0x90	; 144
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	9d 83       	std	Y+5, r25	; 0x05
    2904:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <Ultrasonic_Trigger+0x4ea>
    290e:	9d 83       	std	Y+5, r25	; 0x05
    2910:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	8e 81       	ldd	r24, Y+6	; 0x06
    2914:	9f 81       	ldd	r25, Y+7	; 0x07
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9f 83       	std	Y+7, r25	; 0x07
    291a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	9f 81       	ldd	r25, Y+7	; 0x07
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <Ultrasonic_Trigger+0x4de>
    2924:	24 c0       	rjmp	.+72     	; 0x296e <Ultrasonic_Trigger+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	68 85       	ldd	r22, Y+8	; 0x08
    2928:	79 85       	ldd	r23, Y+9	; 0x09
    292a:	8a 85       	ldd	r24, Y+10	; 0x0a
    292c:	9b 85       	ldd	r25, Y+11	; 0x0b
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9f 83       	std	Y+7, r25	; 0x07
    2938:	8e 83       	std	Y+6, r24	; 0x06
    293a:	8e 81       	ldd	r24, Y+6	; 0x06
    293c:	9f 81       	ldd	r25, Y+7	; 0x07
    293e:	9b 83       	std	Y+3, r25	; 0x03
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <Ultrasonic_Trigger+0x526>
    294a:	9b 83       	std	Y+3, r25	; 0x03
    294c:	8a 83       	std	Y+2, r24	; 0x02
    294e:	0f c0       	rjmp	.+30     	; 0x296e <Ultrasonic_Trigger+0x54e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2950:	69 89       	ldd	r22, Y+17	; 0x11
    2952:	7a 89       	ldd	r23, Y+18	; 0x12
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	88 8b       	std	Y+16, r24	; 0x10
    2962:	88 89       	ldd	r24, Y+16	; 0x10
    2964:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	8a 95       	dec	r24
    296a:	f1 f7       	brne	.-4      	; 0x2968 <Ultrasonic_Trigger+0x548>
    296c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, LOGIC_LOW);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	67 e0       	ldi	r22, 0x07	; 7
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
		break;

	}

}
    2978:	c5 5b       	subi	r28, 0xB5	; 181
    297a:	df 4f       	sbci	r29, 0xFF	; 255
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance (Ultrasonic ultrasonic)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	27 97       	sbiw	r28, 0x07	; 7
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	89 83       	std	Y+1, r24	; 0x01
	switch(ultrasonic)
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	3d 83       	std	Y+5, r19	; 0x05
    29ae:	2c 83       	std	Y+4, r18	; 0x04
    29b0:	8c 81       	ldd	r24, Y+4	; 0x04
    29b2:	9d 81       	ldd	r25, Y+5	; 0x05
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	91 05       	cpc	r25, r1
    29b8:	59 f0       	breq	.+22     	; 0x29d0 <Ultrasonic_readDistance+0x40>
    29ba:	2c 81       	ldd	r18, Y+4	; 0x04
    29bc:	3d 81       	ldd	r19, Y+5	; 0x05
    29be:	22 30       	cpi	r18, 0x02	; 2
    29c0:	31 05       	cpc	r19, r1
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <Ultrasonic_readDistance+0x36>
    29c4:	5f c0       	rjmp	.+190    	; 0x2a84 <Ultrasonic_readDistance+0xf4>
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	71 f1       	breq	.+92     	; 0x2a2a <Ultrasonic_readDistance+0x9a>
    29ce:	87 c0       	rjmp	.+270    	; 0x2ade <Ultrasonic_readDistance+0x14e>
	{
	case U_right:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_right);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	0e 94 10 12 	call	0x2420	; 0x2420 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT0 * 1.088) + 1;
    29d6:	80 91 9e 01 	lds	r24, 0x019E
    29da:	90 91 9f 01 	lds	r25, 0x019F
    29de:	cc 01       	movw	r24, r24
    29e0:	a0 e0       	ldi	r26, 0x00	; 0
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	26 e9       	ldi	r18, 0x96	; 150
    29f6:	33 e4       	ldi	r19, 0x43	; 67
    29f8:	4b e8       	ldi	r20, 0x8B	; 139
    29fa:	5f e3       	ldi	r21, 0x3F	; 63
    29fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9b 83       	std	Y+3, r25	; 0x03
    2a26:	8a 83       	std	Y+2, r24	; 0x02
    2a28:	5b c0       	rjmp	.+182    	; 0x2ae0 <Ultrasonic_readDistance+0x150>
		break;

	case U_forward:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_forward);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	0e 94 10 12 	call	0x2420	; 0x2420 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT1 * 1.088) + 1;
    2a30:	80 91 a1 01 	lds	r24, 0x01A1
    2a34:	90 91 a2 01 	lds	r25, 0x01A2
    2a38:	cc 01       	movw	r24, r24
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	26 e9       	ldi	r18, 0x96	; 150
    2a50:	33 e4       	ldi	r19, 0x43	; 67
    2a52:	4b e8       	ldi	r20, 0x8B	; 139
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e8       	ldi	r20, 0x80	; 128
    2a68:	5f e3       	ldi	r21, 0x3F	; 63
    2a6a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9b 83       	std	Y+3, r25	; 0x03
    2a80:	8a 83       	std	Y+2, r24	; 0x02
    2a82:	2e c0       	rjmp	.+92     	; 0x2ae0 <Ultrasonic_readDistance+0x150>
		break;

	case U_backward:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_backward);
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	0e 94 10 12 	call	0x2420	; 0x2420 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT0 * 1.088) + 1;
    2a8a:	80 91 9e 01 	lds	r24, 0x019E
    2a8e:	90 91 9f 01 	lds	r25, 0x019F
    2a92:	cc 01       	movw	r24, r24
    2a94:	a0 e0       	ldi	r26, 0x00	; 0
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	26 e9       	ldi	r18, 0x96	; 150
    2aaa:	33 e4       	ldi	r19, 0x43	; 67
    2aac:	4b e8       	ldi	r20, 0x8B	; 139
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9b 83       	std	Y+3, r25	; 0x03
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	01 c0       	rjmp	.+2      	; 0x2ae0 <Ultrasonic_readDistance+0x150>
    2ade:	04 c0       	rjmp	.+8      	; 0x2ae8 <Ultrasonic_readDistance+0x158>
		break;
	}
}
    2ae0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ae2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae4:	3f 83       	std	Y+7, r19	; 0x07
    2ae6:	2e 83       	std	Y+6, r18	; 0x06
    2ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aea:	9f 81       	ldd	r25, Y+7	; 0x07
    2aec:	27 96       	adiw	r28, 0x07	; 7
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <Ultrasonic_edgeProcessing_INT0>:

static void Ultrasonic_edgeProcessing_INT0(void)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	60 97       	sbiw	r28, 0x10	; 16
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_INT0++; 	// Increment edge count
    2b12:	80 91 a0 01 	lds	r24, 0x01A0
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	80 93 a0 01 	sts	0x01A0, r24

	if (1 == g_edgeTime_INT0) {
    2b1c:	80 91 a0 01 	lds	r24, 0x01A0
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	91 f5       	brne	.+100    	; 0x2b88 <Ultrasonic_edgeProcessing_INT0+0x8a>
		/* Rising edge detected */
		Timer_deInit(TIMER1_ID); // De-initialize Timer1
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	0e 94 90 0a 	call	0x1520	; 0x1520 <Timer_deInit>

		external_interrupt_deinit(INT_0); // De-initialize INT2
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	0e 94 56 11 	call	0x22ac	; 0x22ac <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, FALLING_EDGE}; // Configure INT2 for falling edge detection
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	8a 83       	std	Y+2, r24	; 0x02
		external_interrupt_init(&EXT_INT0_Configrations); // Reinitialize INT2 with the new configuration
    2b36:	ce 01       	movw	r24, r28
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER1_ID, F_CPU_1024, NORMAL_MODE}; // Configure Timer1
    2b3e:	ce 01       	movw	r24, r28
    2b40:	03 96       	adiw	r24, 0x03	; 3
    2b42:	9d 87       	std	Y+13, r25	; 0x0d
    2b44:	8c 87       	std	Y+12, r24	; 0x0c
    2b46:	ee e7       	ldi	r30, 0x7E	; 126
    2b48:	f1 e0       	ldi	r31, 0x01	; 1
    2b4a:	ff 87       	std	Y+15, r31	; 0x0f
    2b4c:	ee 87       	std	Y+14, r30	; 0x0e
    2b4e:	f7 e0       	ldi	r31, 0x07	; 7
    2b50:	f8 8b       	std	Y+16, r31	; 0x10
    2b52:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b54:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b56:	00 80       	ld	r0, Z
    2b58:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	9f 87       	std	Y+15, r25	; 0x0f
    2b60:	8e 87       	std	Y+14, r24	; 0x0e
    2b62:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b64:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b66:	00 82       	st	Z, r0
    2b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	9d 87       	std	Y+13, r25	; 0x0d
    2b70:	8c 87       	std	Y+12, r24	; 0x0c
    2b72:	98 89       	ldd	r25, Y+16	; 0x10
    2b74:	91 50       	subi	r25, 0x01	; 1
    2b76:	98 8b       	std	Y+16, r25	; 0x10
    2b78:	e8 89       	ldd	r30, Y+16	; 0x10
    2b7a:	ee 23       	and	r30, r30
    2b7c:	51 f7       	brne	.-44     	; 0x2b52 <Ultrasonic_edgeProcessing_INT0+0x54>
		Timer_init(&Timer_Configrations); // Initialize Timer1
    2b7e:	ce 01       	movw	r24, r28
    2b80:	03 96       	adiw	r24, 0x03	; 3
    2b82:	0e 94 ae 09 	call	0x135c	; 0x135c <Timer_init>
    2b86:	1a c0       	rjmp	.+52     	; 0x2bbc <Ultrasonic_edgeProcessing_INT0+0xbe>

	} else if (2 == g_edgeTime_INT0) {
    2b88:	80 91 a0 01 	lds	r24, 0x01A0
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	b1 f4       	brne	.+44     	; 0x2bbc <Ultrasonic_edgeProcessing_INT0+0xbe>
		/* Falling edge detected */
		g_highTime_INT0 = Timer_getTimerValue(TIMER1_ID); // Calculate pulse width
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Timer_getTimerValue>
    2b96:	90 93 9f 01 	sts	0x019F, r25
    2b9a:	80 93 9e 01 	sts	0x019E, r24

		Timer_deInit(TIMER1_ID);	/* De-initialize Timer1 */
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	0e 94 90 0a 	call	0x1520	; 0x1520 <Timer_deInit>

		external_interrupt_deinit(INT_0);	/* De-initialize INT2 */
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	0e 94 56 11 	call	0x22ac	; 0x22ac <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, RISING_EDGE};	/* Configure INT2 for rising edge detection */
    2baa:	1a 86       	std	Y+10, r1	; 0x0a
    2bac:	83 e0       	ldi	r24, 0x03	; 3
    2bae:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT0_Configrations);	/* Reinitialize INT2 with the new configuration */
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	0a 96       	adiw	r24, 0x0a	; 10
    2bb4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <external_interrupt_init>

		g_edgeTime_INT0 = 0;		/* Reset edge count */
    2bb8:	10 92 a0 01 	sts	0x01A0, r1
	}
}
    2bbc:	60 96       	adiw	r28, 0x10	; 16
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <Ultrasonic_edgeProcessing_INT2>:

static void Ultrasonic_edgeProcessing_INT2(void)
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	60 97       	sbiw	r28, 0x10	; 16
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_INT1++; 	// Increment edge count
    2be2:	80 91 a3 01 	lds	r24, 0x01A3
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	80 93 a3 01 	sts	0x01A3, r24

	if (1 == g_edgeTime_INT1) {
    2bec:	80 91 a3 01 	lds	r24, 0x01A3
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	99 f5       	brne	.+102    	; 0x2c5a <Ultrasonic_edgeProcessing_INT2+0x8c>
		/* Rising edge detected */
		Timer_deInit(TIMER1_ID); // De-initialize Timer1
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	0e 94 90 0a 	call	0x1520	; 0x1520 <Timer_deInit>

		external_interrupt_deinit(INT_1); // De-initialize INT2
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	0e 94 56 11 	call	0x22ac	; 0x22ac <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, FALLING_EDGE}; // Configure INT2 for falling edge detection
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	8a 83       	std	Y+2, r24	; 0x02
		external_interrupt_init(&EXT_INT2_Configrations); // Reinitialize INT2 with the new configuration
    2c08:	ce 01       	movw	r24, r28
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER1_ID, F_CPU_1024, NORMAL_MODE}; // Configure Timer1
    2c10:	ce 01       	movw	r24, r28
    2c12:	03 96       	adiw	r24, 0x03	; 3
    2c14:	9d 87       	std	Y+13, r25	; 0x0d
    2c16:	8c 87       	std	Y+12, r24	; 0x0c
    2c18:	e5 e8       	ldi	r30, 0x85	; 133
    2c1a:	f1 e0       	ldi	r31, 0x01	; 1
    2c1c:	ff 87       	std	Y+15, r31	; 0x0f
    2c1e:	ee 87       	std	Y+14, r30	; 0x0e
    2c20:	f7 e0       	ldi	r31, 0x07	; 7
    2c22:	f8 8b       	std	Y+16, r31	; 0x10
    2c24:	ee 85       	ldd	r30, Y+14	; 0x0e
    2c26:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c28:	00 80       	ld	r0, Z
    2c2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	9f 87       	std	Y+15, r25	; 0x0f
    2c32:	8e 87       	std	Y+14, r24	; 0x0e
    2c34:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c36:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c38:	00 82       	st	Z, r0
    2c3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	9d 87       	std	Y+13, r25	; 0x0d
    2c42:	8c 87       	std	Y+12, r24	; 0x0c
    2c44:	98 89       	ldd	r25, Y+16	; 0x10
    2c46:	91 50       	subi	r25, 0x01	; 1
    2c48:	98 8b       	std	Y+16, r25	; 0x10
    2c4a:	e8 89       	ldd	r30, Y+16	; 0x10
    2c4c:	ee 23       	and	r30, r30
    2c4e:	51 f7       	brne	.-44     	; 0x2c24 <Ultrasonic_edgeProcessing_INT2+0x56>
		Timer_init(&Timer_Configrations); // Initialize Timer1
    2c50:	ce 01       	movw	r24, r28
    2c52:	03 96       	adiw	r24, 0x03	; 3
    2c54:	0e 94 ae 09 	call	0x135c	; 0x135c <Timer_init>
    2c58:	1b c0       	rjmp	.+54     	; 0x2c90 <Ultrasonic_edgeProcessing_INT2+0xc2>

	} else if (2 == g_edgeTime_INT1) {
    2c5a:	80 91 a3 01 	lds	r24, 0x01A3
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	b9 f4       	brne	.+46     	; 0x2c90 <Ultrasonic_edgeProcessing_INT2+0xc2>
		/* Falling edge detected */
		g_highTime_INT1 = Timer_getTimerValue(TIMER1_ID); // Calculate pulse width
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Timer_getTimerValue>
    2c68:	90 93 a2 01 	sts	0x01A2, r25
    2c6c:	80 93 a1 01 	sts	0x01A1, r24

		Timer_deInit(TIMER1_ID);	/* De-initialize Timer1 */
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	0e 94 90 0a 	call	0x1520	; 0x1520 <Timer_deInit>

		external_interrupt_deinit(INT_1);	/* De-initialize INT2 */
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 56 11 	call	0x22ac	; 0x22ac <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, RISING_EDGE};	/* Configure INT2 for rising edge detection */
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	8a 87       	std	Y+10, r24	; 0x0a
    2c80:	83 e0       	ldi	r24, 0x03	; 3
    2c82:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT2_Configrations);	/* Reinitialize INT2 with the new configuration */
    2c84:	ce 01       	movw	r24, r28
    2c86:	0a 96       	adiw	r24, 0x0a	; 10
    2c88:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <external_interrupt_init>

		g_edgeTime_INT1 = 0;		/* Reset edge count */
    2c8c:	10 92 a3 01 	sts	0x01A3, r1
	}
}
    2c90:	60 96       	adiw	r28, 0x10	; 16
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <PIR_init>:
 * Description :
 * Function to initialize the PIR sensor.
 * This function sets up the necessary pin directions for the PIR sensor.
 */
void PIR_init(void)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    /* Configure PIR sensor 0 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR0_PIN, PIN_INPUT);
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>

    /* Configure PIR sensor 1 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR1_PIN, PIN_INPUT);
    2cb4:	83 e0       	ldi	r24, 0x03	; 3
    2cb6:	63 e0       	ldi	r22, 0x03	; 3
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
}
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <PIR_ReadValue1>:
 * Function to read the value from PIR sensor 0.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue1(void)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 0 */
    return GPIO_readPin(PIR_PORT, PIR0_PIN);
    2ccc:	83 e0       	ldi	r24, 0x03	; 3
    2cce:	62 e0       	ldi	r22, 0x02	; 2
    2cd0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <GPIO_readPin>
}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <PIR_ReadValue2>:
 * Function to read the value from PIR sensor 1.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue2(void)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 1 */
    return GPIO_readPin(PIR_PORT, PIR1_PIN);
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	63 e0       	ldi	r22, 0x03	; 3
    2ce6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <GPIO_readPin>
}
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <Handel_Max_Speed>:
 * Static function to handle the maximum speed of the motor.
 * Parameters  :
 * - speed: The maximum speed to be set.
 */
static void Handel_Max_Speed(uint8 speed)
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    max_Speed = speed;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	80 93 a4 01 	sts	0x01A4, r24
}
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <DcMotor_Init>:
 * This function sets up the necessary pin directions and stops the motor initially.
 * Parameters  :
 * - MAXSPEED: The maximum speed of the motor (0 to 100).
 */
void DcMotor_Init(uint8 MAXSPEED)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	0f 92       	push	r0
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	89 83       	std	Y+1, r24	; 0x01
    /* Set the maximum speed */
    Handel_Max_Speed(MAXSPEED);
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Handel_Max_Speed>

    /* For motor 1 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT1, PIN_OUTPUT);  /* Set INT1 as output */
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	64 e0       	ldi	r22, 0x04	; 4
    2d20:	41 e0       	ldi	r20, 0x01	; 1
    2d22:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT2, PIN_OUTPUT);  /* Set INT2 as output */
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	63 e0       	ldi	r22, 0x03	; 3
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE1_PORT_CONNECTION, ENABLE1_PIN, PIN_OUTPUT);  /* Set Enable1 as output */
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	63 e0       	ldi	r22, 0x03	; 3
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>

    /* For motor 2 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT3, PIN_OUTPUT);  /* Set INT3 as output */
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	66 e0       	ldi	r22, 0x06	; 6
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT4, PIN_OUTPUT);  /* Set INT4 as output */
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	67 e0       	ldi	r22, 0x07	; 7
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE2_PORT_CONNECTION, ENABLE2_PIN, PIN_OUTPUT);  /* Set Enable2 as output */
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	67 e0       	ldi	r22, 0x07	; 7
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>

    /* Stop the motor at the beginning */
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	64 e0       	ldi	r22, 0x04	; 4
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	63 e0       	ldi	r22, 0x03	; 3
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	66 e0       	ldi	r22, 0x06	; 6
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	67 e0       	ldi	r22, 0x07	; 7
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
}
    2d80:	0f 90       	pop	r0
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <DcMotor1_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor1_Rotate(DcMotor_State state, uint8 speed)
{
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	27 97       	sbiw	r28, 0x07	; 7
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	8c 83       	std	Y+4, r24	; 0x04
    2d9e:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 1 */
	Timer_Configuration configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	8a 83       	std	Y+2, r24	; 0x02
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer0_Start(&configrations);
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <PWM_Timer0_Start>

    /* Control motor 1 direction */
    switch (state)
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3f 83       	std	Y+7, r19	; 0x07
    2dbc:	2e 83       	std	Y+6, r18	; 0x06
    2dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	a1 f0       	breq	.+40     	; 0x2df0 <DcMotor1_Rotate+0x68>
    2dc8:	2e 81       	ldd	r18, Y+6	; 0x06
    2dca:	3f 81       	ldd	r19, Y+7	; 0x07
    2dcc:	22 30       	cpi	r18, 0x02	; 2
    2dce:	31 05       	cpc	r19, r1
    2dd0:	d1 f0       	breq	.+52     	; 0x2e06 <DcMotor1_Rotate+0x7e>
    2dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	01 f5       	brne	.+64     	; 0x2e1a <DcMotor1_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	64 e0       	ldi	r22, 0x04	; 4
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	63 e0       	ldi	r22, 0x03	; 3
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2dee:	15 c0       	rjmp	.+42     	; 0x2e1a <DcMotor1_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_HIGH);
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2dfa:	82 e0       	ldi	r24, 0x02	; 2
    2dfc:	63 e0       	ldi	r22, 0x03	; 3
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2e04:	0a c0       	rjmp	.+20     	; 0x2e1a <DcMotor1_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	64 e0       	ldi	r22, 0x04	; 4
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_HIGH);
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	63 e0       	ldi	r22, 0x03	; 3
    2e14:	41 e0       	ldi	r20, 0x01	; 1
    2e16:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        break;
    }
}
    2e1a:	27 96       	adiw	r28, 0x07	; 7
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <DcMotor2_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor2_Rotate(DcMotor_State state, uint8 speed)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	27 97       	sbiw	r28, 0x07	; 7
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	8c 83       	std	Y+4, r24	; 0x04
    2e42:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 2 */
	Timer_Configuration configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	8a 83       	std	Y+2, r24	; 0x02
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer2_Start(&configrations);
    2e50:	ce 01       	movw	r24, r28
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	0e 94 c6 0b 	call	0x178c	; 0x178c <PWM_Timer2_Start>

    /* Control motor 2 direction */
    switch (state)
    2e58:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	3f 83       	std	Y+7, r19	; 0x07
    2e60:	2e 83       	std	Y+6, r18	; 0x06
    2e62:	8e 81       	ldd	r24, Y+6	; 0x06
    2e64:	9f 81       	ldd	r25, Y+7	; 0x07
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	91 05       	cpc	r25, r1
    2e6a:	a1 f0       	breq	.+40     	; 0x2e94 <DcMotor2_Rotate+0x68>
    2e6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e70:	22 30       	cpi	r18, 0x02	; 2
    2e72:	31 05       	cpc	r19, r1
    2e74:	d1 f0       	breq	.+52     	; 0x2eaa <DcMotor2_Rotate+0x7e>
    2e76:	8e 81       	ldd	r24, Y+6	; 0x06
    2e78:	9f 81       	ldd	r25, Y+7	; 0x07
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	01 f5       	brne	.+64     	; 0x2ebe <DcMotor2_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	66 e0       	ldi	r22, 0x06	; 6
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	67 e0       	ldi	r22, 0x07	; 7
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2e92:	15 c0       	rjmp	.+42     	; 0x2ebe <DcMotor2_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_HIGH);
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	66 e0       	ldi	r22, 0x06	; 6
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	67 e0       	ldi	r22, 0x07	; 7
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    2ea8:	0a c0       	rjmp	.+20     	; 0x2ebe <DcMotor2_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	66 e0       	ldi	r22, 0x06	; 6
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_HIGH);
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	67 e0       	ldi	r22, 0x07	; 7
    2eb8:	41 e0       	ldi	r20, 0x01	; 1
    2eba:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
        break;
    }
}
    2ebe:	27 96       	adiw	r28, 0x07	; 7
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <Forward>:
 * Description :
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	60 97       	sbiw	r28, 0x10	; 16
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    2ee4:	18 8a       	std	Y+16, r1	; 0x10
    2ee6:	1f 86       	std	Y+15, r1	; 0x0f
    2ee8:	81 c0       	rjmp	.+258    	; 0x2fec <Forward+0x11c>
    {
        DcMotor1_Rotate(CCW, i);
    2eea:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eec:	82 e0       	ldi	r24, 0x02	; 2
    2eee:	69 2f       	mov	r22, r25
    2ef0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    2ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	69 2f       	mov	r22, r25
    2efa:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	a0 e0       	ldi	r26, 0x00	; 0
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	8b 87       	std	Y+11, r24	; 0x0b
    2f08:	9c 87       	std	Y+12, r25	; 0x0c
    2f0a:	ad 87       	std	Y+13, r26	; 0x0d
    2f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	4a e7       	ldi	r20, 0x7A	; 122
    2f1c:	55 e4       	ldi	r21, 0x45	; 69
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	8f 83       	std	Y+7, r24	; 0x07
    2f28:	98 87       	std	Y+8, r25	; 0x08
    2f2a:	a9 87       	std	Y+9, r26	; 0x09
    2f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	5f e3       	ldi	r21, 0x3F	; 63
    2f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <Forward+0x80>
		__ticks = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <Forward+0xfe>
	else if (__tmp > 65535)
    2f50:	6f 81       	ldd	r22, Y+7	; 0x07
    2f52:	78 85       	ldd	r23, Y+8	; 0x08
    2f54:	89 85       	ldd	r24, Y+9	; 0x09
    2f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	3f ef       	ldi	r19, 0xFF	; 255
    2f5c:	4f e7       	ldi	r20, 0x7F	; 127
    2f5e:	57 e4       	ldi	r21, 0x47	; 71
    2f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f64:	18 16       	cp	r1, r24
    2f66:	4c f5       	brge	.+82     	; 0x2fba <Forward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e2       	ldi	r20, 0x20	; 32
    2f76:	51 e4       	ldi	r21, 0x41	; 65
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	9e 83       	std	Y+6, r25	; 0x06
    2f8e:	8d 83       	std	Y+5, r24	; 0x05
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <Forward+0xe0>
    2f92:	80 e9       	ldi	r24, 0x90	; 144
    2f94:	91 e0       	ldi	r25, 0x01	; 1
    2f96:	9c 83       	std	Y+4, r25	; 0x04
    2f98:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <Forward+0xce>
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	69 f7       	brne	.-38     	; 0x2f92 <Forward+0xc2>
    2fb8:	14 c0       	rjmp	.+40     	; 0x2fe2 <Forward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fba:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbc:	78 85       	ldd	r23, Y+8	; 0x08
    2fbe:	89 85       	ldd	r24, Y+9	; 0x09
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
    2fce:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd2:	9a 83       	std	Y+2, r25	; 0x02
    2fd4:	89 83       	std	Y+1, r24	; 0x01
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <Forward+0x10a>
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    2fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe4:	98 89       	ldd	r25, Y+16	; 0x10
    2fe6:	0a 96       	adiw	r24, 0x0a	; 10
    2fe8:	98 8b       	std	Y+16, r25	; 0x10
    2fea:	8f 87       	std	Y+15, r24	; 0x0f
    2fec:	80 91 a4 01 	lds	r24, 0x01A4
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff6:	98 89       	ldd	r25, Y+16	; 0x10
    2ff8:	28 17       	cp	r18, r24
    2ffa:	39 07       	cpc	r19, r25
    2ffc:	0c f0       	brlt	.+2      	; 0x3000 <Forward+0x130>
    2ffe:	75 cf       	rjmp	.-278    	; 0x2eea <Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3000:	60 96       	adiw	r28, 0x10	; 16
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <Backward>:
 * Description :
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	60 97       	sbiw	r28, 0x10	; 16
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    3026:	18 8a       	std	Y+16, r1	; 0x10
    3028:	1f 86       	std	Y+15, r1	; 0x0f
    302a:	81 c0       	rjmp	.+258    	; 0x312e <Backward+0x11c>
    {
        DcMotor1_Rotate(CW, i);
    302c:	9f 85       	ldd	r25, Y+15	; 0x0f
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	69 2f       	mov	r22, r25
    3032:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    3036:	9f 85       	ldd	r25, Y+15	; 0x0f
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	69 2f       	mov	r22, r25
    303c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	a0 e0       	ldi	r26, 0x00	; 0
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	8b 87       	std	Y+11, r24	; 0x0b
    304a:	9c 87       	std	Y+12, r25	; 0x0c
    304c:	ad 87       	std	Y+13, r26	; 0x0d
    304e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	6b 85       	ldd	r22, Y+11	; 0x0b
    3052:	7c 85       	ldd	r23, Y+12	; 0x0c
    3054:	8d 85       	ldd	r24, Y+13	; 0x0d
    3056:	9e 85       	ldd	r25, Y+14	; 0x0e
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a e7       	ldi	r20, 0x7A	; 122
    305e:	55 e4       	ldi	r21, 0x45	; 69
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8f 83       	std	Y+7, r24	; 0x07
    306a:	98 87       	std	Y+8, r25	; 0x08
    306c:	a9 87       	std	Y+9, r26	; 0x09
    306e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3070:	6f 81       	ldd	r22, Y+7	; 0x07
    3072:	78 85       	ldd	r23, Y+8	; 0x08
    3074:	89 85       	ldd	r24, Y+9	; 0x09
    3076:	9a 85       	ldd	r25, Y+10	; 0x0a
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	2c f4       	brge	.+10     	; 0x3092 <Backward+0x80>
		__ticks = 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <Backward+0xfe>
	else if (__tmp > 65535)
    3092:	6f 81       	ldd	r22, Y+7	; 0x07
    3094:	78 85       	ldd	r23, Y+8	; 0x08
    3096:	89 85       	ldd	r24, Y+9	; 0x09
    3098:	9a 85       	ldd	r25, Y+10	; 0x0a
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	4c f5       	brge	.+82     	; 0x30fc <Backward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <Backward+0xe0>
    30d4:	80 e9       	ldi	r24, 0x90	; 144
    30d6:	91 e0       	ldi	r25, 0x01	; 1
    30d8:	9c 83       	std	Y+4, r25	; 0x04
    30da:	8b 83       	std	Y+3, r24	; 0x03
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9c 81       	ldd	r25, Y+4	; 0x04
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <Backward+0xce>
    30e4:	9c 83       	std	Y+4, r25	; 0x04
    30e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f2:	8d 81       	ldd	r24, Y+5	; 0x05
    30f4:	9e 81       	ldd	r25, Y+6	; 0x06
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <Backward+0xc2>
    30fa:	14 c0       	rjmp	.+40     	; 0x3124 <Backward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	6f 81       	ldd	r22, Y+7	; 0x07
    30fe:	78 85       	ldd	r23, Y+8	; 0x08
    3100:	89 85       	ldd	r24, Y+9	; 0x09
    3102:	9a 85       	ldd	r25, Y+10	; 0x0a
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9e 83       	std	Y+6, r25	; 0x06
    310e:	8d 83       	std	Y+5, r24	; 0x05
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	9e 81       	ldd	r25, Y+6	; 0x06
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <Backward+0x10a>
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    3124:	8f 85       	ldd	r24, Y+15	; 0x0f
    3126:	98 89       	ldd	r25, Y+16	; 0x10
    3128:	0a 96       	adiw	r24, 0x0a	; 10
    312a:	98 8b       	std	Y+16, r25	; 0x10
    312c:	8f 87       	std	Y+15, r24	; 0x0f
    312e:	80 91 a4 01 	lds	r24, 0x01A4
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	8f 85       	ldd	r24, Y+15	; 0x0f
    3138:	98 89       	ldd	r25, Y+16	; 0x10
    313a:	28 17       	cp	r18, r24
    313c:	39 07       	cpc	r19, r25
    313e:	0c f0       	brlt	.+2      	; 0x3142 <Backward+0x130>
    3140:	75 cf       	rjmp	.-278    	; 0x302c <Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3142:	60 96       	adiw	r28, 0x10	; 16
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <Stop>:
 * Description :
 * Function to stop the car.
 * This function stops both motors.
 */
void Stop(void)
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    DcMotor1_Rotate(STOP, MOTOR_STOP);
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
    DcMotor2_Rotate(STOP, MOTOR_STOP);
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
}
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <Right_Forward>:
 * Description :
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	60 97       	sbiw	r28, 0x10	; 16
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    3186:	18 8a       	std	Y+16, r1	; 0x10
    3188:	1f 86       	std	Y+15, r1	; 0x0f
    318a:	80 c0       	rjmp	.+256    	; 0x328c <Right_Forward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    3194:	9f 85       	ldd	r25, Y+15	; 0x0f
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	69 2f       	mov	r22, r25
    319a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	a0 e0       	ldi	r26, 0x00	; 0
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	8b 87       	std	Y+11, r24	; 0x0b
    31a8:	9c 87       	std	Y+12, r25	; 0x0c
    31aa:	ad 87       	std	Y+13, r26	; 0x0d
    31ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	4a e7       	ldi	r20, 0x7A	; 122
    31bc:	55 e4       	ldi	r21, 0x45	; 69
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	8f 83       	std	Y+7, r24	; 0x07
    31c8:	98 87       	std	Y+8, r25	; 0x08
    31ca:	a9 87       	std	Y+9, r26	; 0x09
    31cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ce:	6f 81       	ldd	r22, Y+7	; 0x07
    31d0:	78 85       	ldd	r23, Y+8	; 0x08
    31d2:	89 85       	ldd	r24, Y+9	; 0x09
    31d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e2:	88 23       	and	r24, r24
    31e4:	2c f4       	brge	.+10     	; 0x31f0 <Right_Forward+0x7e>
		__ticks = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9e 83       	std	Y+6, r25	; 0x06
    31ec:	8d 83       	std	Y+5, r24	; 0x05
    31ee:	3f c0       	rjmp	.+126    	; 0x326e <Right_Forward+0xfc>
	else if (__tmp > 65535)
    31f0:	6f 81       	ldd	r22, Y+7	; 0x07
    31f2:	78 85       	ldd	r23, Y+8	; 0x08
    31f4:	89 85       	ldd	r24, Y+9	; 0x09
    31f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	3f ef       	ldi	r19, 0xFF	; 255
    31fc:	4f e7       	ldi	r20, 0x7F	; 127
    31fe:	57 e4       	ldi	r21, 0x47	; 71
    3200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3204:	18 16       	cp	r1, r24
    3206:	4c f5       	brge	.+82     	; 0x325a <Right_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3208:	6b 85       	ldd	r22, Y+11	; 0x0b
    320a:	7c 85       	ldd	r23, Y+12	; 0x0c
    320c:	8d 85       	ldd	r24, Y+13	; 0x0d
    320e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e2       	ldi	r20, 0x20	; 32
    3216:	51 e4       	ldi	r21, 0x41	; 65
    3218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9e 83       	std	Y+6, r25	; 0x06
    322e:	8d 83       	std	Y+5, r24	; 0x05
    3230:	0f c0       	rjmp	.+30     	; 0x3250 <Right_Forward+0xde>
    3232:	80 e9       	ldi	r24, 0x90	; 144
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	9c 83       	std	Y+4, r25	; 0x04
    3238:	8b 83       	std	Y+3, r24	; 0x03
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	9c 81       	ldd	r25, Y+4	; 0x04
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <Right_Forward+0xcc>
    3242:	9c 83       	std	Y+4, r25	; 0x04
    3244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3246:	8d 81       	ldd	r24, Y+5	; 0x05
    3248:	9e 81       	ldd	r25, Y+6	; 0x06
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3250:	8d 81       	ldd	r24, Y+5	; 0x05
    3252:	9e 81       	ldd	r25, Y+6	; 0x06
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	69 f7       	brne	.-38     	; 0x3232 <Right_Forward+0xc0>
    3258:	14 c0       	rjmp	.+40     	; 0x3282 <Right_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <Right_Forward+0x108>
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    3282:	8f 85       	ldd	r24, Y+15	; 0x0f
    3284:	98 89       	ldd	r25, Y+16	; 0x10
    3286:	0a 96       	adiw	r24, 0x0a	; 10
    3288:	98 8b       	std	Y+16, r25	; 0x10
    328a:	8f 87       	std	Y+15, r24	; 0x0f
    328c:	80 91 a4 01 	lds	r24, 0x01A4
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8f 85       	ldd	r24, Y+15	; 0x0f
    3296:	98 89       	ldd	r25, Y+16	; 0x10
    3298:	28 17       	cp	r18, r24
    329a:	39 07       	cpc	r19, r25
    329c:	0c f0       	brlt	.+2      	; 0x32a0 <Right_Forward+0x12e>
    329e:	76 cf       	rjmp	.-276    	; 0x318c <Right_Forward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    32a0:	60 96       	adiw	r28, 0x10	; 16
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <Left_Forward>:
 * Description :
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	60 97       	sbiw	r28, 0x10	; 16
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    32c6:	18 8a       	std	Y+16, r1	; 0x10
    32c8:	1f 86       	std	Y+15, r1	; 0x0f
    32ca:	80 c0       	rjmp	.+256    	; 0x33cc <Left_Forward+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    32cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	69 2f       	mov	r22, r25
    32d2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	a0 e0       	ldi	r26, 0x00	; 0
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	8b 87       	std	Y+11, r24	; 0x0b
    32e8:	9c 87       	std	Y+12, r25	; 0x0c
    32ea:	ad 87       	std	Y+13, r26	; 0x0d
    32ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	4a e7       	ldi	r20, 0x7A	; 122
    32fc:	55 e4       	ldi	r21, 0x45	; 69
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	8f 83       	std	Y+7, r24	; 0x07
    3308:	98 87       	std	Y+8, r25	; 0x08
    330a:	a9 87       	std	Y+9, r26	; 0x09
    330c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    330e:	6f 81       	ldd	r22, Y+7	; 0x07
    3310:	78 85       	ldd	r23, Y+8	; 0x08
    3312:	89 85       	ldd	r24, Y+9	; 0x09
    3314:	9a 85       	ldd	r25, Y+10	; 0x0a
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e8       	ldi	r20, 0x80	; 128
    331c:	5f e3       	ldi	r21, 0x3F	; 63
    331e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3322:	88 23       	and	r24, r24
    3324:	2c f4       	brge	.+10     	; 0x3330 <Left_Forward+0x7e>
		__ticks = 1;
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	3f c0       	rjmp	.+126    	; 0x33ae <Left_Forward+0xfc>
	else if (__tmp > 65535)
    3330:	6f 81       	ldd	r22, Y+7	; 0x07
    3332:	78 85       	ldd	r23, Y+8	; 0x08
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	3f ef       	ldi	r19, 0xFF	; 255
    333c:	4f e7       	ldi	r20, 0x7F	; 127
    333e:	57 e4       	ldi	r21, 0x47	; 71
    3340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3344:	18 16       	cp	r1, r24
    3346:	4c f5       	brge	.+82     	; 0x339a <Left_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3348:	6b 85       	ldd	r22, Y+11	; 0x0b
    334a:	7c 85       	ldd	r23, Y+12	; 0x0c
    334c:	8d 85       	ldd	r24, Y+13	; 0x0d
    334e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e2       	ldi	r20, 0x20	; 32
    3356:	51 e4       	ldi	r21, 0x41	; 65
    3358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	bc 01       	movw	r22, r24
    3362:	cd 01       	movw	r24, r26
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    3370:	0f c0       	rjmp	.+30     	; 0x3390 <Left_Forward+0xde>
    3372:	80 e9       	ldi	r24, 0x90	; 144
    3374:	91 e0       	ldi	r25, 0x01	; 1
    3376:	9c 83       	std	Y+4, r25	; 0x04
    3378:	8b 83       	std	Y+3, r24	; 0x03
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	f1 f7       	brne	.-4      	; 0x337e <Left_Forward+0xcc>
    3382:	9c 83       	std	Y+4, r25	; 0x04
    3384:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3386:	8d 81       	ldd	r24, Y+5	; 0x05
    3388:	9e 81       	ldd	r25, Y+6	; 0x06
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	9e 83       	std	Y+6, r25	; 0x06
    338e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	69 f7       	brne	.-38     	; 0x3372 <Left_Forward+0xc0>
    3398:	14 c0       	rjmp	.+40     	; 0x33c2 <Left_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339a:	6f 81       	ldd	r22, Y+7	; 0x07
    339c:	78 85       	ldd	r23, Y+8	; 0x08
    339e:	89 85       	ldd	r24, Y+9	; 0x09
    33a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	8d 83       	std	Y+5, r24	; 0x05
    33ae:	8d 81       	ldd	r24, Y+5	; 0x05
    33b0:	9e 81       	ldd	r25, Y+6	; 0x06
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <Left_Forward+0x108>
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    33c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c4:	98 89       	ldd	r25, Y+16	; 0x10
    33c6:	0a 96       	adiw	r24, 0x0a	; 10
    33c8:	98 8b       	std	Y+16, r25	; 0x10
    33ca:	8f 87       	std	Y+15, r24	; 0x0f
    33cc:	80 91 a4 01 	lds	r24, 0x01A4
    33d0:	28 2f       	mov	r18, r24
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d6:	98 89       	ldd	r25, Y+16	; 0x10
    33d8:	28 17       	cp	r18, r24
    33da:	39 07       	cpc	r19, r25
    33dc:	0c f0       	brlt	.+2      	; 0x33e0 <Left_Forward+0x12e>
    33de:	76 cf       	rjmp	.-276    	; 0x32cc <Left_Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    33e0:	60 96       	adiw	r28, 0x10	; 16
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <Left_Forward_Parking>:
 * Description :
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(void)
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	60 97       	sbiw	r28, 0x10	; 16
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= MOTOR_MAX_SPEED; i = i + 10)
    3406:	18 8a       	std	Y+16, r1	; 0x10
    3408:	1f 86       	std	Y+15, r1	; 0x0f
    340a:	80 c0       	rjmp	.+256    	; 0x350c <Left_Forward_Parking+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    340c:	9f 85       	ldd	r25, Y+15	; 0x0f
    340e:	82 e0       	ldi	r24, 0x02	; 2
    3410:	69 2f       	mov	r22, r25
    3412:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	8b 87       	std	Y+11, r24	; 0x0b
    3428:	9c 87       	std	Y+12, r25	; 0x0c
    342a:	ad 87       	std	Y+13, r26	; 0x0d
    342c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3430:	7c 85       	ldd	r23, Y+12	; 0x0c
    3432:	8d 85       	ldd	r24, Y+13	; 0x0d
    3434:	9e 85       	ldd	r25, Y+14	; 0x0e
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	4a e7       	ldi	r20, 0x7A	; 122
    343c:	55 e4       	ldi	r21, 0x45	; 69
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	8f 83       	std	Y+7, r24	; 0x07
    3448:	98 87       	std	Y+8, r25	; 0x08
    344a:	a9 87       	std	Y+9, r26	; 0x09
    344c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    344e:	6f 81       	ldd	r22, Y+7	; 0x07
    3450:	78 85       	ldd	r23, Y+8	; 0x08
    3452:	89 85       	ldd	r24, Y+9	; 0x09
    3454:	9a 85       	ldd	r25, Y+10	; 0x0a
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	40 e8       	ldi	r20, 0x80	; 128
    345c:	5f e3       	ldi	r21, 0x3F	; 63
    345e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3462:	88 23       	and	r24, r24
    3464:	2c f4       	brge	.+10     	; 0x3470 <Left_Forward_Parking+0x7e>
		__ticks = 1;
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9e 83       	std	Y+6, r25	; 0x06
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	3f c0       	rjmp	.+126    	; 0x34ee <Left_Forward_Parking+0xfc>
	else if (__tmp > 65535)
    3470:	6f 81       	ldd	r22, Y+7	; 0x07
    3472:	78 85       	ldd	r23, Y+8	; 0x08
    3474:	89 85       	ldd	r24, Y+9	; 0x09
    3476:	9a 85       	ldd	r25, Y+10	; 0x0a
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	3f ef       	ldi	r19, 0xFF	; 255
    347c:	4f e7       	ldi	r20, 0x7F	; 127
    347e:	57 e4       	ldi	r21, 0x47	; 71
    3480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3484:	18 16       	cp	r1, r24
    3486:	4c f5       	brge	.+82     	; 0x34da <Left_Forward_Parking+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3488:	6b 85       	ldd	r22, Y+11	; 0x0b
    348a:	7c 85       	ldd	r23, Y+12	; 0x0c
    348c:	8d 85       	ldd	r24, Y+13	; 0x0d
    348e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e2       	ldi	r20, 0x20	; 32
    3496:	51 e4       	ldi	r21, 0x41	; 65
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	0f c0       	rjmp	.+30     	; 0x34d0 <Left_Forward_Parking+0xde>
    34b2:	80 e9       	ldi	r24, 0x90	; 144
    34b4:	91 e0       	ldi	r25, 0x01	; 1
    34b6:	9c 83       	std	Y+4, r25	; 0x04
    34b8:	8b 83       	std	Y+3, r24	; 0x03
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <Left_Forward_Parking+0xcc>
    34c2:	9c 83       	std	Y+4, r25	; 0x04
    34c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	69 f7       	brne	.-38     	; 0x34b2 <Left_Forward_Parking+0xc0>
    34d8:	14 c0       	rjmp	.+40     	; 0x3502 <Left_Forward_Parking+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34da:	6f 81       	ldd	r22, Y+7	; 0x07
    34dc:	78 85       	ldd	r23, Y+8	; 0x08
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	9e 81       	ldd	r25, Y+6	; 0x06
    34f2:	9a 83       	std	Y+2, r25	; 0x02
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	f1 f7       	brne	.-4      	; 0x34fa <Left_Forward_Parking+0x108>
    34fe:	9a 83       	std	Y+2, r25	; 0x02
    3500:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(void)
{
    for (int i = 0; i <= MOTOR_MAX_SPEED; i = i + 10)
    3502:	8f 85       	ldd	r24, Y+15	; 0x0f
    3504:	98 89       	ldd	r25, Y+16	; 0x10
    3506:	0a 96       	adiw	r24, 0x0a	; 10
    3508:	98 8b       	std	Y+16, r25	; 0x10
    350a:	8f 87       	std	Y+15, r24	; 0x0f
    350c:	8f 85       	ldd	r24, Y+15	; 0x0f
    350e:	98 89       	ldd	r25, Y+16	; 0x10
    3510:	85 36       	cpi	r24, 0x65	; 101
    3512:	91 05       	cpc	r25, r1
    3514:	0c f4       	brge	.+2      	; 0x3518 <Left_Forward_Parking+0x126>
    3516:	7a cf       	rjmp	.-268    	; 0x340c <Left_Forward_Parking+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    3518:	60 96       	adiw	r28, 0x10	; 16
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <Right_Backward>:
 * Description :
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	60 97       	sbiw	r28, 0x10	; 16
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    353e:	18 8a       	std	Y+16, r1	; 0x10
    3540:	1f 86       	std	Y+15, r1	; 0x0f
    3542:	80 c0       	rjmp	.+256    	; 0x3644 <Right_Backward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    354c:	9f 85       	ldd	r25, Y+15	; 0x0f
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	69 2f       	mov	r22, r25
    3552:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	a0 e0       	ldi	r26, 0x00	; 0
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	8b 87       	std	Y+11, r24	; 0x0b
    3560:	9c 87       	std	Y+12, r25	; 0x0c
    3562:	ad 87       	std	Y+13, r26	; 0x0d
    3564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3566:	6b 85       	ldd	r22, Y+11	; 0x0b
    3568:	7c 85       	ldd	r23, Y+12	; 0x0c
    356a:	8d 85       	ldd	r24, Y+13	; 0x0d
    356c:	9e 85       	ldd	r25, Y+14	; 0x0e
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	4a e7       	ldi	r20, 0x7A	; 122
    3574:	55 e4       	ldi	r21, 0x45	; 69
    3576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	8f 83       	std	Y+7, r24	; 0x07
    3580:	98 87       	std	Y+8, r25	; 0x08
    3582:	a9 87       	std	Y+9, r26	; 0x09
    3584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3586:	6f 81       	ldd	r22, Y+7	; 0x07
    3588:	78 85       	ldd	r23, Y+8	; 0x08
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	9a 85       	ldd	r25, Y+10	; 0x0a
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e8       	ldi	r20, 0x80	; 128
    3594:	5f e3       	ldi	r21, 0x3F	; 63
    3596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    359a:	88 23       	and	r24, r24
    359c:	2c f4       	brge	.+10     	; 0x35a8 <Right_Backward+0x7e>
		__ticks = 1;
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
    35a6:	3f c0       	rjmp	.+126    	; 0x3626 <Right_Backward+0xfc>
	else if (__tmp > 65535)
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	4f e7       	ldi	r20, 0x7F	; 127
    35b6:	57 e4       	ldi	r21, 0x47	; 71
    35b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35bc:	18 16       	cp	r1, r24
    35be:	4c f5       	brge	.+82     	; 0x3612 <Right_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e2       	ldi	r20, 0x20	; 32
    35ce:	51 e4       	ldi	r21, 0x41	; 65
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	0f c0       	rjmp	.+30     	; 0x3608 <Right_Backward+0xde>
    35ea:	80 e9       	ldi	r24, 0x90	; 144
    35ec:	91 e0       	ldi	r25, 0x01	; 1
    35ee:	9c 83       	std	Y+4, r25	; 0x04
    35f0:	8b 83       	std	Y+3, r24	; 0x03
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <Right_Backward+0xcc>
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	69 f7       	brne	.-38     	; 0x35ea <Right_Backward+0xc0>
    3610:	14 c0       	rjmp	.+40     	; 0x363a <Right_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3612:	6f 81       	ldd	r22, Y+7	; 0x07
    3614:	78 85       	ldd	r23, Y+8	; 0x08
    3616:	89 85       	ldd	r24, Y+9	; 0x09
    3618:	9a 85       	ldd	r25, Y+10	; 0x0a
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	9a 81       	ldd	r25, Y+2	; 0x02
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <Right_Backward+0x108>
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	98 89       	ldd	r25, Y+16	; 0x10
    363e:	0a 96       	adiw	r24, 0x0a	; 10
    3640:	98 8b       	std	Y+16, r25	; 0x10
    3642:	8f 87       	std	Y+15, r24	; 0x0f
    3644:	80 91 a4 01 	lds	r24, 0x01A4
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	8f 85       	ldd	r24, Y+15	; 0x0f
    364e:	98 89       	ldd	r25, Y+16	; 0x10
    3650:	28 17       	cp	r18, r24
    3652:	39 07       	cpc	r19, r25
    3654:	0c f0       	brlt	.+2      	; 0x3658 <Right_Backward+0x12e>
    3656:	76 cf       	rjmp	.-276    	; 0x3544 <Right_Backward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3658:	60 96       	adiw	r28, 0x10	; 16
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <Left_Backward>:
 * Description :
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	60 97       	sbiw	r28, 0x10	; 16
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    367e:	18 8a       	std	Y+16, r1	; 0x10
    3680:	1f 86       	std	Y+15, r1	; 0x0f
    3682:	80 c0       	rjmp	.+256    	; 0x3784 <Left_Backward+0x11a>
    {
        DcMotor1_Rotate(CW, i);
    3684:	9f 85       	ldd	r25, Y+15	; 0x0f
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	69 2f       	mov	r22, r25
    368a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <DcMotor2_Rotate>
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	a0 e0       	ldi	r26, 0x00	; 0
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	8b 87       	std	Y+11, r24	; 0x0b
    36a0:	9c 87       	std	Y+12, r25	; 0x0c
    36a2:	ad 87       	std	Y+13, r26	; 0x0d
    36a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    36aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	4a e7       	ldi	r20, 0x7A	; 122
    36b4:	55 e4       	ldi	r21, 0x45	; 69
    36b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	8f 83       	std	Y+7, r24	; 0x07
    36c0:	98 87       	std	Y+8, r25	; 0x08
    36c2:	a9 87       	std	Y+9, r26	; 0x09
    36c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36c6:	6f 81       	ldd	r22, Y+7	; 0x07
    36c8:	78 85       	ldd	r23, Y+8	; 0x08
    36ca:	89 85       	ldd	r24, Y+9	; 0x09
    36cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e8       	ldi	r20, 0x80	; 128
    36d4:	5f e3       	ldi	r21, 0x3F	; 63
    36d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36da:	88 23       	and	r24, r24
    36dc:	2c f4       	brge	.+10     	; 0x36e8 <Left_Backward+0x7e>
		__ticks = 1;
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	9e 83       	std	Y+6, r25	; 0x06
    36e4:	8d 83       	std	Y+5, r24	; 0x05
    36e6:	3f c0       	rjmp	.+126    	; 0x3766 <Left_Backward+0xfc>
	else if (__tmp > 65535)
    36e8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ea:	78 85       	ldd	r23, Y+8	; 0x08
    36ec:	89 85       	ldd	r24, Y+9	; 0x09
    36ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	3f ef       	ldi	r19, 0xFF	; 255
    36f4:	4f e7       	ldi	r20, 0x7F	; 127
    36f6:	57 e4       	ldi	r21, 0x47	; 71
    36f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36fc:	18 16       	cp	r1, r24
    36fe:	4c f5       	brge	.+82     	; 0x3752 <Left_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3700:	6b 85       	ldd	r22, Y+11	; 0x0b
    3702:	7c 85       	ldd	r23, Y+12	; 0x0c
    3704:	8d 85       	ldd	r24, Y+13	; 0x0d
    3706:	9e 85       	ldd	r25, Y+14	; 0x0e
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e2       	ldi	r20, 0x20	; 32
    370e:	51 e4       	ldi	r21, 0x41	; 65
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	bc 01       	movw	r22, r24
    371a:	cd 01       	movw	r24, r26
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	9e 83       	std	Y+6, r25	; 0x06
    3726:	8d 83       	std	Y+5, r24	; 0x05
    3728:	0f c0       	rjmp	.+30     	; 0x3748 <Left_Backward+0xde>
    372a:	80 e9       	ldi	r24, 0x90	; 144
    372c:	91 e0       	ldi	r25, 0x01	; 1
    372e:	9c 83       	std	Y+4, r25	; 0x04
    3730:	8b 83       	std	Y+3, r24	; 0x03
    3732:	8b 81       	ldd	r24, Y+3	; 0x03
    3734:	9c 81       	ldd	r25, Y+4	; 0x04
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	f1 f7       	brne	.-4      	; 0x3736 <Left_Backward+0xcc>
    373a:	9c 83       	std	Y+4, r25	; 0x04
    373c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	9e 81       	ldd	r25, Y+6	; 0x06
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	9e 83       	std	Y+6, r25	; 0x06
    3746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3748:	8d 81       	ldd	r24, Y+5	; 0x05
    374a:	9e 81       	ldd	r25, Y+6	; 0x06
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	69 f7       	brne	.-38     	; 0x372a <Left_Backward+0xc0>
    3750:	14 c0       	rjmp	.+40     	; 0x377a <Left_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3752:	6f 81       	ldd	r22, Y+7	; 0x07
    3754:	78 85       	ldd	r23, Y+8	; 0x08
    3756:	89 85       	ldd	r24, Y+9	; 0x09
    3758:	9a 85       	ldd	r25, Y+10	; 0x0a
    375a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	9e 83       	std	Y+6, r25	; 0x06
    3764:	8d 83       	std	Y+5, r24	; 0x05
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	9e 81       	ldd	r25, Y+6	; 0x06
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	f1 f7       	brne	.-4      	; 0x3772 <Left_Backward+0x108>
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    377a:	8f 85       	ldd	r24, Y+15	; 0x0f
    377c:	98 89       	ldd	r25, Y+16	; 0x10
    377e:	0a 96       	adiw	r24, 0x0a	; 10
    3780:	98 8b       	std	Y+16, r25	; 0x10
    3782:	8f 87       	std	Y+15, r24	; 0x0f
    3784:	80 91 a4 01 	lds	r24, 0x01A4
    3788:	28 2f       	mov	r18, r24
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	8f 85       	ldd	r24, Y+15	; 0x0f
    378e:	98 89       	ldd	r25, Y+16	; 0x10
    3790:	28 17       	cp	r18, r24
    3792:	39 07       	cpc	r19, r25
    3794:	0c f0       	brlt	.+2      	; 0x3798 <Left_Backward+0x12e>
    3796:	76 cf       	rjmp	.-276    	; 0x3684 <Left_Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    3798:	60 96       	adiw	r28, 0x10	; 16
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions using the GPIO driver.
 * 2. Setup the LCD Data Mode (4-bits or 8-bits).
 */
void LCD_init(void)
{
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	2e 97       	sbiw	r28, 0x0e	; 14
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    /* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	41 e0       	ldi	r20, 0x01	; 1
    37c4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	62 e0       	ldi	r22, 0x02	; 2
    37cc:	41 e0       	ldi	r20, 0x01	; 1
    37ce:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	a0 ea       	ldi	r26, 0xA0	; 160
    37d8:	b1 e4       	ldi	r27, 0x41	; 65
    37da:	8b 87       	std	Y+11, r24	; 0x0b
    37dc:	9c 87       	std	Y+12, r25	; 0x0c
    37de:	ad 87       	std	Y+13, r26	; 0x0d
    37e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	4a e7       	ldi	r20, 0x7A	; 122
    37f0:	55 e4       	ldi	r21, 0x45	; 69
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	8f 83       	std	Y+7, r24	; 0x07
    37fc:	98 87       	std	Y+8, r25	; 0x08
    37fe:	a9 87       	std	Y+9, r26	; 0x09
    3800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3802:	6f 81       	ldd	r22, Y+7	; 0x07
    3804:	78 85       	ldd	r23, Y+8	; 0x08
    3806:	89 85       	ldd	r24, Y+9	; 0x09
    3808:	9a 85       	ldd	r25, Y+10	; 0x0a
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e8       	ldi	r20, 0x80	; 128
    3810:	5f e3       	ldi	r21, 0x3F	; 63
    3812:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3816:	88 23       	and	r24, r24
    3818:	2c f4       	brge	.+10     	; 0x3824 <LCD_init+0x7a>
		__ticks = 1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	9e 83       	std	Y+6, r25	; 0x06
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	3f c0       	rjmp	.+126    	; 0x38a2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3824:	6f 81       	ldd	r22, Y+7	; 0x07
    3826:	78 85       	ldd	r23, Y+8	; 0x08
    3828:	89 85       	ldd	r24, Y+9	; 0x09
    382a:	9a 85       	ldd	r25, Y+10	; 0x0a
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	3f ef       	ldi	r19, 0xFF	; 255
    3830:	4f e7       	ldi	r20, 0x7F	; 127
    3832:	57 e4       	ldi	r21, 0x47	; 71
    3834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3838:	18 16       	cp	r1, r24
    383a:	4c f5       	brge	.+82     	; 0x388e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383c:	6b 85       	ldd	r22, Y+11	; 0x0b
    383e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3840:	8d 85       	ldd	r24, Y+13	; 0x0d
    3842:	9e 85       	ldd	r25, Y+14	; 0x0e
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e2       	ldi	r20, 0x20	; 32
    384a:	51 e4       	ldi	r21, 0x41	; 65
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
    3864:	0f c0       	rjmp	.+30     	; 0x3884 <LCD_init+0xda>
    3866:	80 e9       	ldi	r24, 0x90	; 144
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	9c 81       	ldd	r25, Y+4	; 0x04
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	f1 f7       	brne	.-4      	; 0x3872 <LCD_init+0xc8>
    3876:	9c 83       	std	Y+4, r25	; 0x04
    3878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	9e 83       	std	Y+6, r25	; 0x06
    3882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	9e 81       	ldd	r25, Y+6	; 0x06
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	69 f7       	brne	.-38     	; 0x3866 <LCD_init+0xbc>
    388c:	14 c0       	rjmp	.+40     	; 0x38b6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	6f 81       	ldd	r22, Y+7	; 0x07
    3890:	78 85       	ldd	r23, Y+8	; 0x08
    3892:	89 85       	ldd	r24, Y+9	; 0x09
    3894:	9a 85       	ldd	r25, Y+10	; 0x0a
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9e 83       	std	Y+6, r25	; 0x06
    38a0:	8d 83       	std	Y+5, r24	; 0x05
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	9a 81       	ldd	r25, Y+2	; 0x02
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <LCD_init+0x104>
    38b2:	9a 83       	std	Y+2, r25	; 0x02
    38b4:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(20);  /* LCD Power ON delay (always > 15ms) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Configure 4 pins in the data port as output pins */
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	63 e0       	ldi	r22, 0x03	; 3
    38ba:	41 e0       	ldi	r20, 0x01	; 1
    38bc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	64 e0       	ldi	r22, 0x04	; 4
    38c4:	41 e0       	ldi	r20, 0x01	; 1
    38c6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	65 e0       	ldi	r22, 0x05	; 5
    38ce:	41 e0       	ldi	r20, 0x01	; 1
    38d0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	66 e0       	ldi	r22, 0x06	; 6
    38d8:	41 e0       	ldi	r20, 0x01	; 1
    38da:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>

    /* Send initialization commands for 4-bit mode */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    38de:	83 e3       	ldi	r24, 0x33	; 51
    38e0:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    38e4:	82 e3       	ldi	r24, 0x32	; 50
    38e6:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>

    /* Set 2-line LCD, 4-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    38ea:	88 e2       	ldi	r24, 0x28	; 40
    38ec:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>

    /* Set 2-line LCD, 8-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif

    LCD_sendCommand(LCD_CURSOR_OFF);  /* Turn cursor off */
    38f0:	8c e0       	ldi	r24, 0x0C	; 12
    38f2:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Clear LCD at the beginning */
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>
}
    38fc:	2e 96       	adiw	r28, 0x0e	; 14
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <LCD_sendCommand>:
 * Send a command to the LCD.
 * Parameters  :
 * - command: The command to be sent.
 */
void LCD_sendCommand(uint8 command)
{
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	c3 56       	subi	r28, 0x63	; 99
    391c:	d0 40       	sbci	r29, 0x00	; 0
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	fe 01       	movw	r30, r28
    392a:	ed 59       	subi	r30, 0x9D	; 157
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);  /* Instruction Mode (RS = 0) */
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	61 e0       	ldi	r22, 0x01	; 1
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    393a:	fe 01       	movw	r30, r28
    393c:	e1 5a       	subi	r30, 0xA1	; 161
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	a0 e8       	ldi	r26, 0x80	; 128
    3946:	bf e3       	ldi	r27, 0x3F	; 63
    3948:	80 83       	st	Z, r24
    394a:	91 83       	std	Z+1, r25	; 0x01
    394c:	a2 83       	std	Z+2, r26	; 0x02
    394e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3950:	8e 01       	movw	r16, r28
    3952:	05 5a       	subi	r16, 0xA5	; 165
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	fe 01       	movw	r30, r28
    3958:	e1 5a       	subi	r30, 0xA1	; 161
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	4a e7       	ldi	r20, 0x7A	; 122
    396a:	55 e4       	ldi	r21, 0x45	; 69
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	f8 01       	movw	r30, r16
    3976:	80 83       	st	Z, r24
    3978:	91 83       	std	Z+1, r25	; 0x01
    397a:	a2 83       	std	Z+2, r26	; 0x02
    397c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    397e:	fe 01       	movw	r30, r28
    3980:	e5 5a       	subi	r30, 0xA5	; 165
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	60 81       	ld	r22, Z
    3986:	71 81       	ldd	r23, Z+1	; 0x01
    3988:	82 81       	ldd	r24, Z+2	; 0x02
    398a:	93 81       	ldd	r25, Z+3	; 0x03
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e8       	ldi	r20, 0x80	; 128
    3992:	5f e3       	ldi	r21, 0x3F	; 63
    3994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3998:	88 23       	and	r24, r24
    399a:	44 f4       	brge	.+16     	; 0x39ac <LCD_sendCommand+0x9e>
		__ticks = 1;
    399c:	fe 01       	movw	r30, r28
    399e:	e7 5a       	subi	r30, 0xA7	; 167
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
    39aa:	64 c0       	rjmp	.+200    	; 0x3a74 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    39ac:	fe 01       	movw	r30, r28
    39ae:	e5 5a       	subi	r30, 0xA5	; 165
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	60 81       	ld	r22, Z
    39b4:	71 81       	ldd	r23, Z+1	; 0x01
    39b6:	82 81       	ldd	r24, Z+2	; 0x02
    39b8:	93 81       	ldd	r25, Z+3	; 0x03
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	3f ef       	ldi	r19, 0xFF	; 255
    39be:	4f e7       	ldi	r20, 0x7F	; 127
    39c0:	57 e4       	ldi	r21, 0x47	; 71
    39c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c6:	18 16       	cp	r1, r24
    39c8:	0c f0       	brlt	.+2      	; 0x39cc <LCD_sendCommand+0xbe>
    39ca:	43 c0       	rjmp	.+134    	; 0x3a52 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39cc:	fe 01       	movw	r30, r28
    39ce:	e1 5a       	subi	r30, 0xA1	; 161
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	60 81       	ld	r22, Z
    39d4:	71 81       	ldd	r23, Z+1	; 0x01
    39d6:	82 81       	ldd	r24, Z+2	; 0x02
    39d8:	93 81       	ldd	r25, Z+3	; 0x03
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e2       	ldi	r20, 0x20	; 32
    39e0:	51 e4       	ldi	r21, 0x41	; 65
    39e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	8e 01       	movw	r16, r28
    39ec:	07 5a       	subi	r16, 0xA7	; 167
    39ee:	1f 4f       	sbci	r17, 0xFF	; 255
    39f0:	bc 01       	movw	r22, r24
    39f2:	cd 01       	movw	r24, r26
    39f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	f8 01       	movw	r30, r16
    39fe:	91 83       	std	Z+1, r25	; 0x01
    3a00:	80 83       	st	Z, r24
    3a02:	1f c0       	rjmp	.+62     	; 0x3a42 <LCD_sendCommand+0x134>
    3a04:	fe 01       	movw	r30, r28
    3a06:	e9 5a       	subi	r30, 0xA9	; 169
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 e9       	ldi	r24, 0x90	; 144
    3a0c:	91 e0       	ldi	r25, 0x01	; 1
    3a0e:	91 83       	std	Z+1, r25	; 0x01
    3a10:	80 83       	st	Z, r24
    3a12:	fe 01       	movw	r30, r28
    3a14:	e9 5a       	subi	r30, 0xA9	; 169
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <LCD_sendCommand+0x10e>
    3a20:	fe 01       	movw	r30, r28
    3a22:	e9 5a       	subi	r30, 0xA9	; 169
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2a:	de 01       	movw	r26, r28
    3a2c:	a7 5a       	subi	r26, 0xA7	; 167
    3a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a30:	fe 01       	movw	r30, r28
    3a32:	e7 5a       	subi	r30, 0xA7	; 167
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	80 81       	ld	r24, Z
    3a38:	91 81       	ldd	r25, Z+1	; 0x01
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	11 96       	adiw	r26, 0x01	; 1
    3a3e:	9c 93       	st	X, r25
    3a40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a42:	fe 01       	movw	r30, r28
    3a44:	e7 5a       	subi	r30, 0xA7	; 167
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	80 81       	ld	r24, Z
    3a4a:	91 81       	ldd	r25, Z+1	; 0x01
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	d1 f6       	brne	.-76     	; 0x3a04 <LCD_sendCommand+0xf6>
    3a50:	27 c0       	rjmp	.+78     	; 0x3aa0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	8e 01       	movw	r16, r28
    3a54:	07 5a       	subi	r16, 0xA7	; 167
    3a56:	1f 4f       	sbci	r17, 0xFF	; 255
    3a58:	fe 01       	movw	r30, r28
    3a5a:	e5 5a       	subi	r30, 0xA5	; 165
    3a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5e:	60 81       	ld	r22, Z
    3a60:	71 81       	ldd	r23, Z+1	; 0x01
    3a62:	82 81       	ldd	r24, Z+2	; 0x02
    3a64:	93 81       	ldd	r25, Z+3	; 0x03
    3a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	f8 01       	movw	r30, r16
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
    3a74:	de 01       	movw	r26, r28
    3a76:	ab 5a       	subi	r26, 0xAB	; 171
    3a78:	bf 4f       	sbci	r27, 0xFF	; 255
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e7 5a       	subi	r30, 0xA7	; 167
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 81       	ld	r24, Z
    3a82:	91 81       	ldd	r25, Z+1	; 0x01
    3a84:	8d 93       	st	X+, r24
    3a86:	9c 93       	st	X, r25
    3a88:	fe 01       	movw	r30, r28
    3a8a:	eb 5a       	subi	r30, 0xAB	; 171
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <LCD_sendCommand+0x184>
    3a96:	fe 01       	movw	r30, r28
    3a98:	eb 5a       	subi	r30, 0xAB	; 171
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	91 83       	std	Z+1, r25	; 0x01
    3a9e:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	62 e0       	ldi	r22, 0x02	; 2
    3aa4:	41 e0       	ldi	r20, 0x01	; 1
    3aa6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    3aaa:	fe 01       	movw	r30, r28
    3aac:	ef 5a       	subi	r30, 0xAF	; 175
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	a0 e8       	ldi	r26, 0x80	; 128
    3ab6:	bf e3       	ldi	r27, 0x3F	; 63
    3ab8:	80 83       	st	Z, r24
    3aba:	91 83       	std	Z+1, r25	; 0x01
    3abc:	a2 83       	std	Z+2, r26	; 0x02
    3abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac0:	8e 01       	movw	r16, r28
    3ac2:	03 5b       	subi	r16, 0xB3	; 179
    3ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	ef 5a       	subi	r30, 0xAF	; 175
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	60 81       	ld	r22, Z
    3ace:	71 81       	ldd	r23, Z+1	; 0x01
    3ad0:	82 81       	ldd	r24, Z+2	; 0x02
    3ad2:	93 81       	ldd	r25, Z+3	; 0x03
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	4a e7       	ldi	r20, 0x7A	; 122
    3ada:	55 e4       	ldi	r21, 0x45	; 69
    3adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	f8 01       	movw	r30, r16
    3ae6:	80 83       	st	Z, r24
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	a2 83       	std	Z+2, r26	; 0x02
    3aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aee:	fe 01       	movw	r30, r28
    3af0:	e3 5b       	subi	r30, 0xB3	; 179
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	60 81       	ld	r22, Z
    3af6:	71 81       	ldd	r23, Z+1	; 0x01
    3af8:	82 81       	ldd	r24, Z+2	; 0x02
    3afa:	93 81       	ldd	r25, Z+3	; 0x03
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	40 e8       	ldi	r20, 0x80	; 128
    3b02:	5f e3       	ldi	r21, 0x3F	; 63
    3b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b08:	88 23       	and	r24, r24
    3b0a:	44 f4       	brge	.+16     	; 0x3b1c <LCD_sendCommand+0x20e>
		__ticks = 1;
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e5 5b       	subi	r30, 0xB5	; 181
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	80 83       	st	Z, r24
    3b1a:	64 c0       	rjmp	.+200    	; 0x3be4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e3 5b       	subi	r30, 0xB3	; 179
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	60 81       	ld	r22, Z
    3b24:	71 81       	ldd	r23, Z+1	; 0x01
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	93 81       	ldd	r25, Z+3	; 0x03
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	3f ef       	ldi	r19, 0xFF	; 255
    3b2e:	4f e7       	ldi	r20, 0x7F	; 127
    3b30:	57 e4       	ldi	r21, 0x47	; 71
    3b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b36:	18 16       	cp	r1, r24
    3b38:	0c f0       	brlt	.+2      	; 0x3b3c <LCD_sendCommand+0x22e>
    3b3a:	43 c0       	rjmp	.+134    	; 0x3bc2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	ef 5a       	subi	r30, 0xAF	; 175
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	60 81       	ld	r22, Z
    3b44:	71 81       	ldd	r23, Z+1	; 0x01
    3b46:	82 81       	ldd	r24, Z+2	; 0x02
    3b48:	93 81       	ldd	r25, Z+3	; 0x03
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	40 e2       	ldi	r20, 0x20	; 32
    3b50:	51 e4       	ldi	r21, 0x41	; 65
    3b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	8e 01       	movw	r16, r28
    3b5c:	05 5b       	subi	r16, 0xB5	; 181
    3b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b60:	bc 01       	movw	r22, r24
    3b62:	cd 01       	movw	r24, r26
    3b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	f8 01       	movw	r30, r16
    3b6e:	91 83       	std	Z+1, r25	; 0x01
    3b70:	80 83       	st	Z, r24
    3b72:	1f c0       	rjmp	.+62     	; 0x3bb2 <LCD_sendCommand+0x2a4>
    3b74:	fe 01       	movw	r30, r28
    3b76:	e7 5b       	subi	r30, 0xB7	; 183
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 e9       	ldi	r24, 0x90	; 144
    3b7c:	91 e0       	ldi	r25, 0x01	; 1
    3b7e:	91 83       	std	Z+1, r25	; 0x01
    3b80:	80 83       	st	Z, r24
    3b82:	fe 01       	movw	r30, r28
    3b84:	e7 5b       	subi	r30, 0xB7	; 183
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <LCD_sendCommand+0x27e>
    3b90:	fe 01       	movw	r30, r28
    3b92:	e7 5b       	subi	r30, 0xB7	; 183
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	91 83       	std	Z+1, r25	; 0x01
    3b98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b9a:	de 01       	movw	r26, r28
    3b9c:	a5 5b       	subi	r26, 0xB5	; 181
    3b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e5 5b       	subi	r30, 0xB5	; 181
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	80 81       	ld	r24, Z
    3ba8:	91 81       	ldd	r25, Z+1	; 0x01
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	11 96       	adiw	r26, 0x01	; 1
    3bae:	9c 93       	st	X, r25
    3bb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e5 5b       	subi	r30, 0xB5	; 181
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	80 81       	ld	r24, Z
    3bba:	91 81       	ldd	r25, Z+1	; 0x01
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	d1 f6       	brne	.-76     	; 0x3b74 <LCD_sendCommand+0x266>
    3bc0:	27 c0       	rjmp	.+78     	; 0x3c10 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc2:	8e 01       	movw	r16, r28
    3bc4:	05 5b       	subi	r16, 0xB5	; 181
    3bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e3 5b       	subi	r30, 0xB3	; 179
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	82 81       	ldd	r24, Z+2	; 0x02
    3bd4:	93 81       	ldd	r25, Z+3	; 0x03
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	f8 01       	movw	r30, r16
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
    3be4:	de 01       	movw	r26, r28
    3be6:	a9 5b       	subi	r26, 0xB9	; 185
    3be8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bea:	fe 01       	movw	r30, r28
    3bec:	e5 5b       	subi	r30, 0xB5	; 181
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	8d 93       	st	X+, r24
    3bf6:	9c 93       	st	X, r25
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e9 5b       	subi	r30, 0xB9	; 185
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <LCD_sendCommand+0x2f4>
    3c06:	fe 01       	movw	r30, r28
    3c08:	e9 5b       	subi	r30, 0xB9	; 185
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    3c10:	fe 01       	movw	r30, r28
    3c12:	ed 59       	subi	r30, 0x9D	; 157
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 81       	ld	r24, Z
    3c18:	88 2f       	mov	r24, r24
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	80 71       	andi	r24, 0x10	; 16
    3c1e:	90 70       	andi	r25, 0x00	; 0
    3c20:	95 95       	asr	r25
    3c22:	87 95       	ror	r24
    3c24:	95 95       	asr	r25
    3c26:	87 95       	ror	r24
    3c28:	95 95       	asr	r25
    3c2a:	87 95       	ror	r24
    3c2c:	95 95       	asr	r25
    3c2e:	87 95       	ror	r24
    3c30:	98 2f       	mov	r25, r24
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	63 e0       	ldi	r22, 0x03	; 3
    3c36:	49 2f       	mov	r20, r25
    3c38:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	ed 59       	subi	r30, 0x9D	; 157
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	80 81       	ld	r24, Z
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	80 72       	andi	r24, 0x20	; 32
    3c4a:	90 70       	andi	r25, 0x00	; 0
    3c4c:	95 95       	asr	r25
    3c4e:	87 95       	ror	r24
    3c50:	95 95       	asr	r25
    3c52:	87 95       	ror	r24
    3c54:	95 95       	asr	r25
    3c56:	87 95       	ror	r24
    3c58:	95 95       	asr	r25
    3c5a:	87 95       	ror	r24
    3c5c:	95 95       	asr	r25
    3c5e:	87 95       	ror	r24
    3c60:	98 2f       	mov	r25, r24
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	64 e0       	ldi	r22, 0x04	; 4
    3c66:	49 2f       	mov	r20, r25
    3c68:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	ed 59       	subi	r30, 0x9D	; 157
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	88 2f       	mov	r24, r24
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	80 74       	andi	r24, 0x40	; 64
    3c7a:	90 70       	andi	r25, 0x00	; 0
    3c7c:	08 2e       	mov	r0, r24
    3c7e:	89 2f       	mov	r24, r25
    3c80:	00 0c       	add	r0, r0
    3c82:	88 1f       	adc	r24, r24
    3c84:	99 0b       	sbc	r25, r25
    3c86:	00 0c       	add	r0, r0
    3c88:	88 1f       	adc	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	98 2f       	mov	r25, r24
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	65 e0       	ldi	r22, 0x05	; 5
    3c92:	49 2f       	mov	r20, r25
    3c94:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ed 59       	subi	r30, 0x9D	; 157
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	80 81       	ld	r24, Z
    3ca0:	98 2f       	mov	r25, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	99 27       	eor	r25, r25
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	66 e0       	ldi	r22, 0x06	; 6
    3cac:	49 2f       	mov	r20, r25
    3cae:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	ed 5b       	subi	r30, 0xBD	; 189
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	a0 e8       	ldi	r26, 0x80	; 128
    3cbe:	bf e3       	ldi	r27, 0x3F	; 63
    3cc0:	80 83       	st	Z, r24
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	a2 83       	std	Z+2, r26	; 0x02
    3cc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc8:	8e 01       	movw	r16, r28
    3cca:	01 5c       	subi	r16, 0xC1	; 193
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ed 5b       	subi	r30, 0xBD	; 189
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	60 81       	ld	r22, Z
    3cd6:	71 81       	ldd	r23, Z+1	; 0x01
    3cd8:	82 81       	ldd	r24, Z+2	; 0x02
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	4a e7       	ldi	r20, 0x7A	; 122
    3ce2:	55 e4       	ldi	r21, 0x45	; 69
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	f8 01       	movw	r30, r16
    3cee:	80 83       	st	Z, r24
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	a2 83       	std	Z+2, r26	; 0x02
    3cf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	ff 96       	adiw	r30, 0x3f	; 63
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e8       	ldi	r20, 0x80	; 128
    3d08:	5f e3       	ldi	r21, 0x3F	; 63
    3d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d0e:	88 23       	and	r24, r24
    3d10:	2c f4       	brge	.+10     	; 0x3d1c <LCD_sendCommand+0x40e>
		__ticks = 1;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	9e af       	std	Y+62, r25	; 0x3e
    3d18:	8d af       	std	Y+61, r24	; 0x3d
    3d1a:	46 c0       	rjmp	.+140    	; 0x3da8 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	ff 96       	adiw	r30, 0x3f	; 63
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	3f ef       	ldi	r19, 0xFF	; 255
    3d2c:	4f e7       	ldi	r20, 0x7F	; 127
    3d2e:	57 e4       	ldi	r21, 0x47	; 71
    3d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d34:	18 16       	cp	r1, r24
    3d36:	64 f5       	brge	.+88     	; 0x3d90 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d38:	fe 01       	movw	r30, r28
    3d3a:	ed 5b       	subi	r30, 0xBD	; 189
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	93 81       	ldd	r25, Z+3	; 0x03
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	40 e2       	ldi	r20, 0x20	; 32
    3d4c:	51 e4       	ldi	r21, 0x41	; 65
    3d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	9e af       	std	Y+62, r25	; 0x3e
    3d64:	8d af       	std	Y+61, r24	; 0x3d
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <LCD_sendCommand+0x478>
    3d68:	80 e9       	ldi	r24, 0x90	; 144
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	9c af       	std	Y+60, r25	; 0x3c
    3d6e:	8b af       	std	Y+59, r24	; 0x3b
    3d70:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d72:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <LCD_sendCommand+0x466>
    3d78:	9c af       	std	Y+60, r25	; 0x3c
    3d7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	9e af       	std	Y+62, r25	; 0x3e
    3d84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d86:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d88:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	69 f7       	brne	.-38     	; 0x3d68 <LCD_sendCommand+0x45a>
    3d8e:	16 c0       	rjmp	.+44     	; 0x3dbc <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d90:	fe 01       	movw	r30, r28
    3d92:	ff 96       	adiw	r30, 0x3f	; 63
    3d94:	60 81       	ld	r22, Z
    3d96:	71 81       	ldd	r23, Z+1	; 0x01
    3d98:	82 81       	ldd	r24, Z+2	; 0x02
    3d9a:	93 81       	ldd	r25, Z+3	; 0x03
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	9e af       	std	Y+62, r25	; 0x3e
    3da6:	8d af       	std	Y+61, r24	; 0x3d
    3da8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3daa:	9e ad       	ldd	r25, Y+62	; 0x3e
    3dac:	9a af       	std	Y+58, r25	; 0x3a
    3dae:	89 af       	std	Y+57, r24	; 0x39
    3db0:	89 ad       	ldd	r24, Y+57	; 0x39
    3db2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	f1 f7       	brne	.-4      	; 0x3db4 <LCD_sendCommand+0x4a6>
    3db8:	9a af       	std	Y+58, r25	; 0x3a
    3dba:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	62 e0       	ldi	r22, 0x02	; 2
    3dc0:	40 e0       	ldi	r20, 0x00	; 0
    3dc2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	a0 e8       	ldi	r26, 0x80	; 128
    3dcc:	bf e3       	ldi	r27, 0x3F	; 63
    3dce:	8d ab       	std	Y+53, r24	; 0x35
    3dd0:	9e ab       	std	Y+54, r25	; 0x36
    3dd2:	af ab       	std	Y+55, r26	; 0x37
    3dd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    3dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    3dda:	8f a9       	ldd	r24, Y+55	; 0x37
    3ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	4a e7       	ldi	r20, 0x7A	; 122
    3de4:	55 e4       	ldi	r21, 0x45	; 69
    3de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	89 ab       	std	Y+49, r24	; 0x31
    3df0:	9a ab       	std	Y+50, r25	; 0x32
    3df2:	ab ab       	std	Y+51, r26	; 0x33
    3df4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3df6:	69 a9       	ldd	r22, Y+49	; 0x31
    3df8:	7a a9       	ldd	r23, Y+50	; 0x32
    3dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    3dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e8       	ldi	r20, 0x80	; 128
    3e04:	5f e3       	ldi	r21, 0x3F	; 63
    3e06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e0a:	88 23       	and	r24, r24
    3e0c:	2c f4       	brge	.+10     	; 0x3e18 <LCD_sendCommand+0x50a>
		__ticks = 1;
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	98 ab       	std	Y+48, r25	; 0x30
    3e14:	8f a7       	std	Y+47, r24	; 0x2f
    3e16:	3f c0       	rjmp	.+126    	; 0x3e96 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3e18:	69 a9       	ldd	r22, Y+49	; 0x31
    3e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    3e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	3f ef       	ldi	r19, 0xFF	; 255
    3e24:	4f e7       	ldi	r20, 0x7F	; 127
    3e26:	57 e4       	ldi	r21, 0x47	; 71
    3e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e2c:	18 16       	cp	r1, r24
    3e2e:	4c f5       	brge	.+82     	; 0x3e82 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e30:	6d a9       	ldd	r22, Y+53	; 0x35
    3e32:	7e a9       	ldd	r23, Y+54	; 0x36
    3e34:	8f a9       	ldd	r24, Y+55	; 0x37
    3e36:	98 ad       	ldd	r25, Y+56	; 0x38
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e2       	ldi	r20, 0x20	; 32
    3e3e:	51 e4       	ldi	r21, 0x41	; 65
    3e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	98 ab       	std	Y+48, r25	; 0x30
    3e56:	8f a7       	std	Y+47, r24	; 0x2f
    3e58:	0f c0       	rjmp	.+30     	; 0x3e78 <LCD_sendCommand+0x56a>
    3e5a:	80 e9       	ldi	r24, 0x90	; 144
    3e5c:	91 e0       	ldi	r25, 0x01	; 1
    3e5e:	9e a7       	std	Y+46, r25	; 0x2e
    3e60:	8d a7       	std	Y+45, r24	; 0x2d
    3e62:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e64:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <LCD_sendCommand+0x558>
    3e6a:	9e a7       	std	Y+46, r25	; 0x2e
    3e6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e70:	98 a9       	ldd	r25, Y+48	; 0x30
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	98 ab       	std	Y+48, r25	; 0x30
    3e76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e7c:	00 97       	sbiw	r24, 0x00	; 0
    3e7e:	69 f7       	brne	.-38     	; 0x3e5a <LCD_sendCommand+0x54c>
    3e80:	14 c0       	rjmp	.+40     	; 0x3eaa <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e82:	69 a9       	ldd	r22, Y+49	; 0x31
    3e84:	7a a9       	ldd	r23, Y+50	; 0x32
    3e86:	8b a9       	ldd	r24, Y+51	; 0x33
    3e88:	9c a9       	ldd	r25, Y+52	; 0x34
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	98 ab       	std	Y+48, r25	; 0x30
    3e94:	8f a7       	std	Y+47, r24	; 0x2f
    3e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e98:	98 a9       	ldd	r25, Y+48	; 0x30
    3e9a:	9c a7       	std	Y+44, r25	; 0x2c
    3e9c:	8b a7       	std	Y+43, r24	; 0x2b
    3e9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ea0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	f1 f7       	brne	.-4      	; 0x3ea2 <LCD_sendCommand+0x594>
    3ea6:	9c a7       	std	Y+44, r25	; 0x2c
    3ea8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	62 e0       	ldi	r22, 0x02	; 2
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	a0 e8       	ldi	r26, 0x80	; 128
    3eba:	bf e3       	ldi	r27, 0x3F	; 63
    3ebc:	8f a3       	std	Y+39, r24	; 0x27
    3ebe:	98 a7       	std	Y+40, r25	; 0x28
    3ec0:	a9 a7       	std	Y+41, r26	; 0x29
    3ec2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ec6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ec8:	89 a5       	ldd	r24, Y+41	; 0x29
    3eca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4a e7       	ldi	r20, 0x7A	; 122
    3ed2:	55 e4       	ldi	r21, 0x45	; 69
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	8b a3       	std	Y+35, r24	; 0x23
    3ede:	9c a3       	std	Y+36, r25	; 0x24
    3ee0:	ad a3       	std	Y+37, r26	; 0x25
    3ee2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    3eea:	9e a1       	ldd	r25, Y+38	; 0x26
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e8       	ldi	r20, 0x80	; 128
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef8:	88 23       	and	r24, r24
    3efa:	2c f4       	brge	.+10     	; 0x3f06 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9a a3       	std	Y+34, r25	; 0x22
    3f02:	89 a3       	std	Y+33, r24	; 0x21
    3f04:	3f c0       	rjmp	.+126    	; 0x3f84 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3f06:	6b a1       	ldd	r22, Y+35	; 0x23
    3f08:	7c a1       	ldd	r23, Y+36	; 0x24
    3f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	3f ef       	ldi	r19, 0xFF	; 255
    3f12:	4f e7       	ldi	r20, 0x7F	; 127
    3f14:	57 e4       	ldi	r21, 0x47	; 71
    3f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1a:	18 16       	cp	r1, r24
    3f1c:	4c f5       	brge	.+82     	; 0x3f70 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3f20:	78 a5       	ldd	r23, Y+40	; 0x28
    3f22:	89 a5       	ldd	r24, Y+41	; 0x29
    3f24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e2       	ldi	r20, 0x20	; 32
    3f2c:	51 e4       	ldi	r21, 0x41	; 65
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	9a a3       	std	Y+34, r25	; 0x22
    3f44:	89 a3       	std	Y+33, r24	; 0x21
    3f46:	0f c0       	rjmp	.+30     	; 0x3f66 <LCD_sendCommand+0x658>
    3f48:	80 e9       	ldi	r24, 0x90	; 144
    3f4a:	91 e0       	ldi	r25, 0x01	; 1
    3f4c:	98 a3       	std	Y+32, r25	; 0x20
    3f4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3f50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f52:	98 a1       	ldd	r25, Y+32	; 0x20
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <LCD_sendCommand+0x646>
    3f58:	98 a3       	std	Y+32, r25	; 0x20
    3f5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	9a a3       	std	Y+34, r25	; 0x22
    3f64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f66:	89 a1       	ldd	r24, Y+33	; 0x21
    3f68:	9a a1       	ldd	r25, Y+34	; 0x22
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	69 f7       	brne	.-38     	; 0x3f48 <LCD_sendCommand+0x63a>
    3f6e:	14 c0       	rjmp	.+40     	; 0x3f98 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f70:	6b a1       	ldd	r22, Y+35	; 0x23
    3f72:	7c a1       	ldd	r23, Y+36	; 0x24
    3f74:	8d a1       	ldd	r24, Y+37	; 0x25
    3f76:	9e a1       	ldd	r25, Y+38	; 0x26
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	9a a3       	std	Y+34, r25	; 0x22
    3f82:	89 a3       	std	Y+33, r24	; 0x21
    3f84:	89 a1       	ldd	r24, Y+33	; 0x21
    3f86:	9a a1       	ldd	r25, Y+34	; 0x22
    3f88:	9e 8f       	std	Y+30, r25	; 0x1e
    3f8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <LCD_sendCommand+0x682>
    3f94:	9e 8f       	std	Y+30, r25	; 0x1e
    3f96:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    3f98:	fe 01       	movw	r30, r28
    3f9a:	ed 59       	subi	r30, 0x9D	; 157
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	80 81       	ld	r24, Z
    3fa0:	98 2f       	mov	r25, r24
    3fa2:	91 70       	andi	r25, 0x01	; 1
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	63 e0       	ldi	r22, 0x03	; 3
    3fa8:	49 2f       	mov	r20, r25
    3faa:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    3fae:	fe 01       	movw	r30, r28
    3fb0:	ed 59       	subi	r30, 0x9D	; 157
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	80 81       	ld	r24, Z
    3fb6:	88 2f       	mov	r24, r24
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	82 70       	andi	r24, 0x02	; 2
    3fbc:	90 70       	andi	r25, 0x00	; 0
    3fbe:	95 95       	asr	r25
    3fc0:	87 95       	ror	r24
    3fc2:	98 2f       	mov	r25, r24
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	64 e0       	ldi	r22, 0x04	; 4
    3fc8:	49 2f       	mov	r20, r25
    3fca:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ed 59       	subi	r30, 0x9D	; 157
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	88 2f       	mov	r24, r24
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	84 70       	andi	r24, 0x04	; 4
    3fdc:	90 70       	andi	r25, 0x00	; 0
    3fde:	95 95       	asr	r25
    3fe0:	87 95       	ror	r24
    3fe2:	95 95       	asr	r25
    3fe4:	87 95       	ror	r24
    3fe6:	98 2f       	mov	r25, r24
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	65 e0       	ldi	r22, 0x05	; 5
    3fec:	49 2f       	mov	r20, r25
    3fee:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	ed 59       	subi	r30, 0x9D	; 157
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	80 81       	ld	r24, Z
    3ffa:	88 2f       	mov	r24, r24
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	88 70       	andi	r24, 0x08	; 8
    4000:	90 70       	andi	r25, 0x00	; 0
    4002:	95 95       	asr	r25
    4004:	87 95       	ror	r24
    4006:	95 95       	asr	r25
    4008:	87 95       	ror	r24
    400a:	95 95       	asr	r25
    400c:	87 95       	ror	r24
    400e:	98 2f       	mov	r25, r24
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	66 e0       	ldi	r22, 0x06	; 6
    4014:	49 2f       	mov	r20, r25
    4016:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	a0 e8       	ldi	r26, 0x80	; 128
    4020:	bf e3       	ldi	r27, 0x3F	; 63
    4022:	89 8f       	std	Y+25, r24	; 0x19
    4024:	9a 8f       	std	Y+26, r25	; 0x1a
    4026:	ab 8f       	std	Y+27, r26	; 0x1b
    4028:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    402a:	69 8d       	ldd	r22, Y+25	; 0x19
    402c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    402e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	4a e7       	ldi	r20, 0x7A	; 122
    4038:	55 e4       	ldi	r21, 0x45	; 69
    403a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	8d 8b       	std	Y+21, r24	; 0x15
    4044:	9e 8b       	std	Y+22, r25	; 0x16
    4046:	af 8b       	std	Y+23, r26	; 0x17
    4048:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    404a:	6d 89       	ldd	r22, Y+21	; 0x15
    404c:	7e 89       	ldd	r23, Y+22	; 0x16
    404e:	8f 89       	ldd	r24, Y+23	; 0x17
    4050:	98 8d       	ldd	r25, Y+24	; 0x18
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e8       	ldi	r20, 0x80	; 128
    4058:	5f e3       	ldi	r21, 0x3F	; 63
    405a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    405e:	88 23       	and	r24, r24
    4060:	2c f4       	brge	.+10     	; 0x406c <LCD_sendCommand+0x75e>
		__ticks = 1;
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	9c 8b       	std	Y+20, r25	; 0x14
    4068:	8b 8b       	std	Y+19, r24	; 0x13
    406a:	3f c0       	rjmp	.+126    	; 0x40ea <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    406c:	6d 89       	ldd	r22, Y+21	; 0x15
    406e:	7e 89       	ldd	r23, Y+22	; 0x16
    4070:	8f 89       	ldd	r24, Y+23	; 0x17
    4072:	98 8d       	ldd	r25, Y+24	; 0x18
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	3f ef       	ldi	r19, 0xFF	; 255
    4078:	4f e7       	ldi	r20, 0x7F	; 127
    407a:	57 e4       	ldi	r21, 0x47	; 71
    407c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4080:	18 16       	cp	r1, r24
    4082:	4c f5       	brge	.+82     	; 0x40d6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4084:	69 8d       	ldd	r22, Y+25	; 0x19
    4086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    408a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	40 e2       	ldi	r20, 0x20	; 32
    4092:	51 e4       	ldi	r21, 0x41	; 65
    4094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	bc 01       	movw	r22, r24
    409e:	cd 01       	movw	r24, r26
    40a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	9c 8b       	std	Y+20, r25	; 0x14
    40aa:	8b 8b       	std	Y+19, r24	; 0x13
    40ac:	0f c0       	rjmp	.+30     	; 0x40cc <LCD_sendCommand+0x7be>
    40ae:	80 e9       	ldi	r24, 0x90	; 144
    40b0:	91 e0       	ldi	r25, 0x01	; 1
    40b2:	9a 8b       	std	Y+18, r25	; 0x12
    40b4:	89 8b       	std	Y+17, r24	; 0x11
    40b6:	89 89       	ldd	r24, Y+17	; 0x11
    40b8:	9a 89       	ldd	r25, Y+18	; 0x12
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	f1 f7       	brne	.-4      	; 0x40ba <LCD_sendCommand+0x7ac>
    40be:	9a 8b       	std	Y+18, r25	; 0x12
    40c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c2:	8b 89       	ldd	r24, Y+19	; 0x13
    40c4:	9c 89       	ldd	r25, Y+20	; 0x14
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	9c 8b       	std	Y+20, r25	; 0x14
    40ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40cc:	8b 89       	ldd	r24, Y+19	; 0x13
    40ce:	9c 89       	ldd	r25, Y+20	; 0x14
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	69 f7       	brne	.-38     	; 0x40ae <LCD_sendCommand+0x7a0>
    40d4:	14 c0       	rjmp	.+40     	; 0x40fe <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d6:	6d 89       	ldd	r22, Y+21	; 0x15
    40d8:	7e 89       	ldd	r23, Y+22	; 0x16
    40da:	8f 89       	ldd	r24, Y+23	; 0x17
    40dc:	98 8d       	ldd	r25, Y+24	; 0x18
    40de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	9c 8b       	std	Y+20, r25	; 0x14
    40e8:	8b 8b       	std	Y+19, r24	; 0x13
    40ea:	8b 89       	ldd	r24, Y+19	; 0x13
    40ec:	9c 89       	ldd	r25, Y+20	; 0x14
    40ee:	98 8b       	std	Y+16, r25	; 0x10
    40f0:	8f 87       	std	Y+15, r24	; 0x0f
    40f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f4:	98 89       	ldd	r25, Y+16	; 0x10
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	f1 f7       	brne	.-4      	; 0x40f6 <LCD_sendCommand+0x7e8>
    40fa:	98 8b       	std	Y+16, r25	; 0x10
    40fc:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	62 e0       	ldi	r22, 0x02	; 2
    4102:	40 e0       	ldi	r20, 0x00	; 0
    4104:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	a0 e8       	ldi	r26, 0x80	; 128
    410e:	bf e3       	ldi	r27, 0x3F	; 63
    4110:	8b 87       	std	Y+11, r24	; 0x0b
    4112:	9c 87       	std	Y+12, r25	; 0x0c
    4114:	ad 87       	std	Y+13, r26	; 0x0d
    4116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4118:	6b 85       	ldd	r22, Y+11	; 0x0b
    411a:	7c 85       	ldd	r23, Y+12	; 0x0c
    411c:	8d 85       	ldd	r24, Y+13	; 0x0d
    411e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	4a e7       	ldi	r20, 0x7A	; 122
    4126:	55 e4       	ldi	r21, 0x45	; 69
    4128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	8f 83       	std	Y+7, r24	; 0x07
    4132:	98 87       	std	Y+8, r25	; 0x08
    4134:	a9 87       	std	Y+9, r26	; 0x09
    4136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4138:	6f 81       	ldd	r22, Y+7	; 0x07
    413a:	78 85       	ldd	r23, Y+8	; 0x08
    413c:	89 85       	ldd	r24, Y+9	; 0x09
    413e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	40 e8       	ldi	r20, 0x80	; 128
    4146:	5f e3       	ldi	r21, 0x3F	; 63
    4148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    414c:	88 23       	and	r24, r24
    414e:	2c f4       	brge	.+10     	; 0x415a <LCD_sendCommand+0x84c>
		__ticks = 1;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	9e 83       	std	Y+6, r25	; 0x06
    4156:	8d 83       	std	Y+5, r24	; 0x05
    4158:	3f c0       	rjmp	.+126    	; 0x41d8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    415a:	6f 81       	ldd	r22, Y+7	; 0x07
    415c:	78 85       	ldd	r23, Y+8	; 0x08
    415e:	89 85       	ldd	r24, Y+9	; 0x09
    4160:	9a 85       	ldd	r25, Y+10	; 0x0a
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	3f ef       	ldi	r19, 0xFF	; 255
    4166:	4f e7       	ldi	r20, 0x7F	; 127
    4168:	57 e4       	ldi	r21, 0x47	; 71
    416a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    416e:	18 16       	cp	r1, r24
    4170:	4c f5       	brge	.+82     	; 0x41c4 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4172:	6b 85       	ldd	r22, Y+11	; 0x0b
    4174:	7c 85       	ldd	r23, Y+12	; 0x0c
    4176:	8d 85       	ldd	r24, Y+13	; 0x0d
    4178:	9e 85       	ldd	r25, Y+14	; 0x0e
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e2       	ldi	r20, 0x20	; 32
    4180:	51 e4       	ldi	r21, 0x41	; 65
    4182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	bc 01       	movw	r22, r24
    418c:	cd 01       	movw	r24, r26
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	9e 83       	std	Y+6, r25	; 0x06
    4198:	8d 83       	std	Y+5, r24	; 0x05
    419a:	0f c0       	rjmp	.+30     	; 0x41ba <LCD_sendCommand+0x8ac>
    419c:	80 e9       	ldi	r24, 0x90	; 144
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	9c 83       	std	Y+4, r25	; 0x04
    41a2:	8b 83       	std	Y+3, r24	; 0x03
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	9c 81       	ldd	r25, Y+4	; 0x04
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <LCD_sendCommand+0x89a>
    41ac:	9c 83       	std	Y+4, r25	; 0x04
    41ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	9e 81       	ldd	r25, Y+6	; 0x06
    41b4:	01 97       	sbiw	r24, 0x01	; 1
    41b6:	9e 83       	std	Y+6, r25	; 0x06
    41b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ba:	8d 81       	ldd	r24, Y+5	; 0x05
    41bc:	9e 81       	ldd	r25, Y+6	; 0x06
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	69 f7       	brne	.-38     	; 0x419c <LCD_sendCommand+0x88e>
    41c2:	14 c0       	rjmp	.+40     	; 0x41ec <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c4:	6f 81       	ldd	r22, Y+7	; 0x07
    41c6:	78 85       	ldd	r23, Y+8	; 0x08
    41c8:	89 85       	ldd	r24, Y+9	; 0x09
    41ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    41cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	9e 83       	std	Y+6, r25	; 0x06
    41d6:	8d 83       	std	Y+5, r24	; 0x05
    41d8:	8d 81       	ldd	r24, Y+5	; 0x05
    41da:	9e 81       	ldd	r25, Y+6	; 0x06
    41dc:	9a 83       	std	Y+2, r25	; 0x02
    41de:	89 83       	std	Y+1, r24	; 0x01
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	f1 f7       	brne	.-4      	; 0x41e4 <LCD_sendCommand+0x8d6>
    41e8:	9a 83       	std	Y+2, r25	; 0x02
    41ea:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, command);  /* Output the command to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    41ec:	cd 59       	subi	r28, 0x9D	; 157
    41ee:	df 4f       	sbci	r29, 0xFF	; 255
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	08 95       	ret

00004204 <LCD_displayCharacter>:
 * Display a character on the LCD.
 * Parameters  :
 * - data: The character to be displayed.
 */
void LCD_displayCharacter(uint8 data)
{
    4204:	0f 93       	push	r16
    4206:	1f 93       	push	r17
    4208:	df 93       	push	r29
    420a:	cf 93       	push	r28
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	c3 56       	subi	r28, 0x63	; 99
    4212:	d0 40       	sbci	r29, 0x00	; 0
    4214:	0f b6       	in	r0, 0x3f	; 63
    4216:	f8 94       	cli
    4218:	de bf       	out	0x3e, r29	; 62
    421a:	0f be       	out	0x3f, r0	; 63
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	fe 01       	movw	r30, r28
    4220:	ed 59       	subi	r30, 0x9D	; 157
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);  /* Data Mode (RS = 1) */
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	61 e0       	ldi	r22, 0x01	; 1
    422a:	41 e0       	ldi	r20, 0x01	; 1
    422c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4230:	fe 01       	movw	r30, r28
    4232:	e1 5a       	subi	r30, 0xA1	; 161
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	a0 e8       	ldi	r26, 0x80	; 128
    423c:	bf e3       	ldi	r27, 0x3F	; 63
    423e:	80 83       	st	Z, r24
    4240:	91 83       	std	Z+1, r25	; 0x01
    4242:	a2 83       	std	Z+2, r26	; 0x02
    4244:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4246:	8e 01       	movw	r16, r28
    4248:	05 5a       	subi	r16, 0xA5	; 165
    424a:	1f 4f       	sbci	r17, 0xFF	; 255
    424c:	fe 01       	movw	r30, r28
    424e:	e1 5a       	subi	r30, 0xA1	; 161
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	60 81       	ld	r22, Z
    4254:	71 81       	ldd	r23, Z+1	; 0x01
    4256:	82 81       	ldd	r24, Z+2	; 0x02
    4258:	93 81       	ldd	r25, Z+3	; 0x03
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	4a e7       	ldi	r20, 0x7A	; 122
    4260:	55 e4       	ldi	r21, 0x45	; 69
    4262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4266:	dc 01       	movw	r26, r24
    4268:	cb 01       	movw	r24, r22
    426a:	f8 01       	movw	r30, r16
    426c:	80 83       	st	Z, r24
    426e:	91 83       	std	Z+1, r25	; 0x01
    4270:	a2 83       	std	Z+2, r26	; 0x02
    4272:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4274:	fe 01       	movw	r30, r28
    4276:	e5 5a       	subi	r30, 0xA5	; 165
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	60 81       	ld	r22, Z
    427c:	71 81       	ldd	r23, Z+1	; 0x01
    427e:	82 81       	ldd	r24, Z+2	; 0x02
    4280:	93 81       	ldd	r25, Z+3	; 0x03
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	40 e8       	ldi	r20, 0x80	; 128
    4288:	5f e3       	ldi	r21, 0x3F	; 63
    428a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    428e:	88 23       	and	r24, r24
    4290:	44 f4       	brge	.+16     	; 0x42a2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    4292:	fe 01       	movw	r30, r28
    4294:	e7 5a       	subi	r30, 0xA7	; 167
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	80 83       	st	Z, r24
    42a0:	64 c0       	rjmp	.+200    	; 0x436a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    42a2:	fe 01       	movw	r30, r28
    42a4:	e5 5a       	subi	r30, 0xA5	; 165
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	60 81       	ld	r22, Z
    42aa:	71 81       	ldd	r23, Z+1	; 0x01
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	93 81       	ldd	r25, Z+3	; 0x03
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	3f ef       	ldi	r19, 0xFF	; 255
    42b4:	4f e7       	ldi	r20, 0x7F	; 127
    42b6:	57 e4       	ldi	r21, 0x47	; 71
    42b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42bc:	18 16       	cp	r1, r24
    42be:	0c f0       	brlt	.+2      	; 0x42c2 <LCD_displayCharacter+0xbe>
    42c0:	43 c0       	rjmp	.+134    	; 0x4348 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c2:	fe 01       	movw	r30, r28
    42c4:	e1 5a       	subi	r30, 0xA1	; 161
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	60 81       	ld	r22, Z
    42ca:	71 81       	ldd	r23, Z+1	; 0x01
    42cc:	82 81       	ldd	r24, Z+2	; 0x02
    42ce:	93 81       	ldd	r25, Z+3	; 0x03
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	40 e2       	ldi	r20, 0x20	; 32
    42d6:	51 e4       	ldi	r21, 0x41	; 65
    42d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	8e 01       	movw	r16, r28
    42e2:	07 5a       	subi	r16, 0xA7	; 167
    42e4:	1f 4f       	sbci	r17, 0xFF	; 255
    42e6:	bc 01       	movw	r22, r24
    42e8:	cd 01       	movw	r24, r26
    42ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	f8 01       	movw	r30, r16
    42f4:	91 83       	std	Z+1, r25	; 0x01
    42f6:	80 83       	st	Z, r24
    42f8:	1f c0       	rjmp	.+62     	; 0x4338 <LCD_displayCharacter+0x134>
    42fa:	fe 01       	movw	r30, r28
    42fc:	e9 5a       	subi	r30, 0xA9	; 169
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	80 e9       	ldi	r24, 0x90	; 144
    4302:	91 e0       	ldi	r25, 0x01	; 1
    4304:	91 83       	std	Z+1, r25	; 0x01
    4306:	80 83       	st	Z, r24
    4308:	fe 01       	movw	r30, r28
    430a:	e9 5a       	subi	r30, 0xA9	; 169
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	80 81       	ld	r24, Z
    4310:	91 81       	ldd	r25, Z+1	; 0x01
    4312:	01 97       	sbiw	r24, 0x01	; 1
    4314:	f1 f7       	brne	.-4      	; 0x4312 <LCD_displayCharacter+0x10e>
    4316:	fe 01       	movw	r30, r28
    4318:	e9 5a       	subi	r30, 0xA9	; 169
    431a:	ff 4f       	sbci	r31, 0xFF	; 255
    431c:	91 83       	std	Z+1, r25	; 0x01
    431e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4320:	de 01       	movw	r26, r28
    4322:	a7 5a       	subi	r26, 0xA7	; 167
    4324:	bf 4f       	sbci	r27, 0xFF	; 255
    4326:	fe 01       	movw	r30, r28
    4328:	e7 5a       	subi	r30, 0xA7	; 167
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	80 81       	ld	r24, Z
    432e:	91 81       	ldd	r25, Z+1	; 0x01
    4330:	01 97       	sbiw	r24, 0x01	; 1
    4332:	11 96       	adiw	r26, 0x01	; 1
    4334:	9c 93       	st	X, r25
    4336:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4338:	fe 01       	movw	r30, r28
    433a:	e7 5a       	subi	r30, 0xA7	; 167
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 81       	ld	r24, Z
    4340:	91 81       	ldd	r25, Z+1	; 0x01
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	d1 f6       	brne	.-76     	; 0x42fa <LCD_displayCharacter+0xf6>
    4346:	27 c0       	rjmp	.+78     	; 0x4396 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4348:	8e 01       	movw	r16, r28
    434a:	07 5a       	subi	r16, 0xA7	; 167
    434c:	1f 4f       	sbci	r17, 0xFF	; 255
    434e:	fe 01       	movw	r30, r28
    4350:	e5 5a       	subi	r30, 0xA5	; 165
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	60 81       	ld	r22, Z
    4356:	71 81       	ldd	r23, Z+1	; 0x01
    4358:	82 81       	ldd	r24, Z+2	; 0x02
    435a:	93 81       	ldd	r25, Z+3	; 0x03
    435c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	f8 01       	movw	r30, r16
    4366:	91 83       	std	Z+1, r25	; 0x01
    4368:	80 83       	st	Z, r24
    436a:	de 01       	movw	r26, r28
    436c:	ab 5a       	subi	r26, 0xAB	; 171
    436e:	bf 4f       	sbci	r27, 0xFF	; 255
    4370:	fe 01       	movw	r30, r28
    4372:	e7 5a       	subi	r30, 0xA7	; 167
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	8d 93       	st	X+, r24
    437c:	9c 93       	st	X, r25
    437e:	fe 01       	movw	r30, r28
    4380:	eb 5a       	subi	r30, 0xAB	; 171
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	80 81       	ld	r24, Z
    4386:	91 81       	ldd	r25, Z+1	; 0x01
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	f1 f7       	brne	.-4      	; 0x4388 <LCD_displayCharacter+0x184>
    438c:	fe 01       	movw	r30, r28
    438e:	eb 5a       	subi	r30, 0xAB	; 171
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	62 e0       	ldi	r22, 0x02	; 2
    439a:	41 e0       	ldi	r20, 0x01	; 1
    439c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    43a0:	fe 01       	movw	r30, r28
    43a2:	ef 5a       	subi	r30, 0xAF	; 175
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	a0 e8       	ldi	r26, 0x80	; 128
    43ac:	bf e3       	ldi	r27, 0x3F	; 63
    43ae:	80 83       	st	Z, r24
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	a2 83       	std	Z+2, r26	; 0x02
    43b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b6:	8e 01       	movw	r16, r28
    43b8:	03 5b       	subi	r16, 0xB3	; 179
    43ba:	1f 4f       	sbci	r17, 0xFF	; 255
    43bc:	fe 01       	movw	r30, r28
    43be:	ef 5a       	subi	r30, 0xAF	; 175
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	60 81       	ld	r22, Z
    43c4:	71 81       	ldd	r23, Z+1	; 0x01
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	93 81       	ldd	r25, Z+3	; 0x03
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	4a e7       	ldi	r20, 0x7A	; 122
    43d0:	55 e4       	ldi	r21, 0x45	; 69
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	f8 01       	movw	r30, r16
    43dc:	80 83       	st	Z, r24
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	a2 83       	std	Z+2, r26	; 0x02
    43e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43e4:	fe 01       	movw	r30, r28
    43e6:	e3 5b       	subi	r30, 0xB3	; 179
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	60 81       	ld	r22, Z
    43ec:	71 81       	ldd	r23, Z+1	; 0x01
    43ee:	82 81       	ldd	r24, Z+2	; 0x02
    43f0:	93 81       	ldd	r25, Z+3	; 0x03
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	40 e8       	ldi	r20, 0x80	; 128
    43f8:	5f e3       	ldi	r21, 0x3F	; 63
    43fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43fe:	88 23       	and	r24, r24
    4400:	44 f4       	brge	.+16     	; 0x4412 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    4402:	fe 01       	movw	r30, r28
    4404:	e5 5b       	subi	r30, 0xB5	; 181
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	91 83       	std	Z+1, r25	; 0x01
    440e:	80 83       	st	Z, r24
    4410:	64 c0       	rjmp	.+200    	; 0x44da <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    4412:	fe 01       	movw	r30, r28
    4414:	e3 5b       	subi	r30, 0xB3	; 179
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	60 81       	ld	r22, Z
    441a:	71 81       	ldd	r23, Z+1	; 0x01
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	93 81       	ldd	r25, Z+3	; 0x03
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	3f ef       	ldi	r19, 0xFF	; 255
    4424:	4f e7       	ldi	r20, 0x7F	; 127
    4426:	57 e4       	ldi	r21, 0x47	; 71
    4428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    442c:	18 16       	cp	r1, r24
    442e:	0c f0       	brlt	.+2      	; 0x4432 <LCD_displayCharacter+0x22e>
    4430:	43 c0       	rjmp	.+134    	; 0x44b8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4432:	fe 01       	movw	r30, r28
    4434:	ef 5a       	subi	r30, 0xAF	; 175
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	60 81       	ld	r22, Z
    443a:	71 81       	ldd	r23, Z+1	; 0x01
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e2       	ldi	r20, 0x20	; 32
    4446:	51 e4       	ldi	r21, 0x41	; 65
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	8e 01       	movw	r16, r28
    4452:	05 5b       	subi	r16, 0xB5	; 181
    4454:	1f 4f       	sbci	r17, 0xFF	; 255
    4456:	bc 01       	movw	r22, r24
    4458:	cd 01       	movw	r24, r26
    445a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	f8 01       	movw	r30, r16
    4464:	91 83       	std	Z+1, r25	; 0x01
    4466:	80 83       	st	Z, r24
    4468:	1f c0       	rjmp	.+62     	; 0x44a8 <LCD_displayCharacter+0x2a4>
    446a:	fe 01       	movw	r30, r28
    446c:	e7 5b       	subi	r30, 0xB7	; 183
    446e:	ff 4f       	sbci	r31, 0xFF	; 255
    4470:	80 e9       	ldi	r24, 0x90	; 144
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	91 83       	std	Z+1, r25	; 0x01
    4476:	80 83       	st	Z, r24
    4478:	fe 01       	movw	r30, r28
    447a:	e7 5b       	subi	r30, 0xB7	; 183
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	91 81       	ldd	r25, Z+1	; 0x01
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <LCD_displayCharacter+0x27e>
    4486:	fe 01       	movw	r30, r28
    4488:	e7 5b       	subi	r30, 0xB7	; 183
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4490:	de 01       	movw	r26, r28
    4492:	a5 5b       	subi	r26, 0xB5	; 181
    4494:	bf 4f       	sbci	r27, 0xFF	; 255
    4496:	fe 01       	movw	r30, r28
    4498:	e5 5b       	subi	r30, 0xB5	; 181
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	11 96       	adiw	r26, 0x01	; 1
    44a4:	9c 93       	st	X, r25
    44a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a8:	fe 01       	movw	r30, r28
    44aa:	e5 5b       	subi	r30, 0xB5	; 181
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 81       	ld	r24, Z
    44b0:	91 81       	ldd	r25, Z+1	; 0x01
    44b2:	00 97       	sbiw	r24, 0x00	; 0
    44b4:	d1 f6       	brne	.-76     	; 0x446a <LCD_displayCharacter+0x266>
    44b6:	27 c0       	rjmp	.+78     	; 0x4506 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b8:	8e 01       	movw	r16, r28
    44ba:	05 5b       	subi	r16, 0xB5	; 181
    44bc:	1f 4f       	sbci	r17, 0xFF	; 255
    44be:	fe 01       	movw	r30, r28
    44c0:	e3 5b       	subi	r30, 0xB3	; 179
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	60 81       	ld	r22, Z
    44c6:	71 81       	ldd	r23, Z+1	; 0x01
    44c8:	82 81       	ldd	r24, Z+2	; 0x02
    44ca:	93 81       	ldd	r25, Z+3	; 0x03
    44cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	f8 01       	movw	r30, r16
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	80 83       	st	Z, r24
    44da:	de 01       	movw	r26, r28
    44dc:	a9 5b       	subi	r26, 0xB9	; 185
    44de:	bf 4f       	sbci	r27, 0xFF	; 255
    44e0:	fe 01       	movw	r30, r28
    44e2:	e5 5b       	subi	r30, 0xB5	; 181
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	80 81       	ld	r24, Z
    44e8:	91 81       	ldd	r25, Z+1	; 0x01
    44ea:	8d 93       	st	X+, r24
    44ec:	9c 93       	st	X, r25
    44ee:	fe 01       	movw	r30, r28
    44f0:	e9 5b       	subi	r30, 0xB9	; 185
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <LCD_displayCharacter+0x2f4>
    44fc:	fe 01       	movw	r30, r28
    44fe:	e9 5b       	subi	r30, 0xB9	; 185
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	91 83       	std	Z+1, r25	; 0x01
    4504:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    4506:	fe 01       	movw	r30, r28
    4508:	ed 59       	subi	r30, 0x9D	; 157
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	80 81       	ld	r24, Z
    450e:	88 2f       	mov	r24, r24
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	80 71       	andi	r24, 0x10	; 16
    4514:	90 70       	andi	r25, 0x00	; 0
    4516:	95 95       	asr	r25
    4518:	87 95       	ror	r24
    451a:	95 95       	asr	r25
    451c:	87 95       	ror	r24
    451e:	95 95       	asr	r25
    4520:	87 95       	ror	r24
    4522:	95 95       	asr	r25
    4524:	87 95       	ror	r24
    4526:	98 2f       	mov	r25, r24
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	63 e0       	ldi	r22, 0x03	; 3
    452c:	49 2f       	mov	r20, r25
    452e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    4532:	fe 01       	movw	r30, r28
    4534:	ed 59       	subi	r30, 0x9D	; 157
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	80 81       	ld	r24, Z
    453a:	88 2f       	mov	r24, r24
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	80 72       	andi	r24, 0x20	; 32
    4540:	90 70       	andi	r25, 0x00	; 0
    4542:	95 95       	asr	r25
    4544:	87 95       	ror	r24
    4546:	95 95       	asr	r25
    4548:	87 95       	ror	r24
    454a:	95 95       	asr	r25
    454c:	87 95       	ror	r24
    454e:	95 95       	asr	r25
    4550:	87 95       	ror	r24
    4552:	95 95       	asr	r25
    4554:	87 95       	ror	r24
    4556:	98 2f       	mov	r25, r24
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	64 e0       	ldi	r22, 0x04	; 4
    455c:	49 2f       	mov	r20, r25
    455e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    4562:	fe 01       	movw	r30, r28
    4564:	ed 59       	subi	r30, 0x9D	; 157
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 81       	ld	r24, Z
    456a:	88 2f       	mov	r24, r24
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	80 74       	andi	r24, 0x40	; 64
    4570:	90 70       	andi	r25, 0x00	; 0
    4572:	08 2e       	mov	r0, r24
    4574:	89 2f       	mov	r24, r25
    4576:	00 0c       	add	r0, r0
    4578:	88 1f       	adc	r24, r24
    457a:	99 0b       	sbc	r25, r25
    457c:	00 0c       	add	r0, r0
    457e:	88 1f       	adc	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	98 2f       	mov	r25, r24
    4584:	80 e0       	ldi	r24, 0x00	; 0
    4586:	65 e0       	ldi	r22, 0x05	; 5
    4588:	49 2f       	mov	r20, r25
    458a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    458e:	fe 01       	movw	r30, r28
    4590:	ed 59       	subi	r30, 0x9D	; 157
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	80 81       	ld	r24, Z
    4596:	98 2f       	mov	r25, r24
    4598:	99 1f       	adc	r25, r25
    459a:	99 27       	eor	r25, r25
    459c:	99 1f       	adc	r25, r25
    459e:	80 e0       	ldi	r24, 0x00	; 0
    45a0:	66 e0       	ldi	r22, 0x06	; 6
    45a2:	49 2f       	mov	r20, r25
    45a4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    45a8:	fe 01       	movw	r30, r28
    45aa:	ed 5b       	subi	r30, 0xBD	; 189
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	a0 e8       	ldi	r26, 0x80	; 128
    45b4:	bf e3       	ldi	r27, 0x3F	; 63
    45b6:	80 83       	st	Z, r24
    45b8:	91 83       	std	Z+1, r25	; 0x01
    45ba:	a2 83       	std	Z+2, r26	; 0x02
    45bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45be:	8e 01       	movw	r16, r28
    45c0:	01 5c       	subi	r16, 0xC1	; 193
    45c2:	1f 4f       	sbci	r17, 0xFF	; 255
    45c4:	fe 01       	movw	r30, r28
    45c6:	ed 5b       	subi	r30, 0xBD	; 189
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	93 81       	ldd	r25, Z+3	; 0x03
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	4a e7       	ldi	r20, 0x7A	; 122
    45d8:	55 e4       	ldi	r21, 0x45	; 69
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	f8 01       	movw	r30, r16
    45e4:	80 83       	st	Z, r24
    45e6:	91 83       	std	Z+1, r25	; 0x01
    45e8:	a2 83       	std	Z+2, r26	; 0x02
    45ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ec:	fe 01       	movw	r30, r28
    45ee:	ff 96       	adiw	r30, 0x3f	; 63
    45f0:	60 81       	ld	r22, Z
    45f2:	71 81       	ldd	r23, Z+1	; 0x01
    45f4:	82 81       	ldd	r24, Z+2	; 0x02
    45f6:	93 81       	ldd	r25, Z+3	; 0x03
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	40 e8       	ldi	r20, 0x80	; 128
    45fe:	5f e3       	ldi	r21, 0x3F	; 63
    4600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4604:	88 23       	and	r24, r24
    4606:	2c f4       	brge	.+10     	; 0x4612 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	9e af       	std	Y+62, r25	; 0x3e
    460e:	8d af       	std	Y+61, r24	; 0x3d
    4610:	46 c0       	rjmp	.+140    	; 0x469e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    4612:	fe 01       	movw	r30, r28
    4614:	ff 96       	adiw	r30, 0x3f	; 63
    4616:	60 81       	ld	r22, Z
    4618:	71 81       	ldd	r23, Z+1	; 0x01
    461a:	82 81       	ldd	r24, Z+2	; 0x02
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	3f ef       	ldi	r19, 0xFF	; 255
    4622:	4f e7       	ldi	r20, 0x7F	; 127
    4624:	57 e4       	ldi	r21, 0x47	; 71
    4626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    462a:	18 16       	cp	r1, r24
    462c:	64 f5       	brge	.+88     	; 0x4686 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    462e:	fe 01       	movw	r30, r28
    4630:	ed 5b       	subi	r30, 0xBD	; 189
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	60 81       	ld	r22, Z
    4636:	71 81       	ldd	r23, Z+1	; 0x01
    4638:	82 81       	ldd	r24, Z+2	; 0x02
    463a:	93 81       	ldd	r25, Z+3	; 0x03
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	40 e2       	ldi	r20, 0x20	; 32
    4642:	51 e4       	ldi	r21, 0x41	; 65
    4644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	bc 01       	movw	r22, r24
    464e:	cd 01       	movw	r24, r26
    4650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4654:	dc 01       	movw	r26, r24
    4656:	cb 01       	movw	r24, r22
    4658:	9e af       	std	Y+62, r25	; 0x3e
    465a:	8d af       	std	Y+61, r24	; 0x3d
    465c:	0f c0       	rjmp	.+30     	; 0x467c <LCD_displayCharacter+0x478>
    465e:	80 e9       	ldi	r24, 0x90	; 144
    4660:	91 e0       	ldi	r25, 0x01	; 1
    4662:	9c af       	std	Y+60, r25	; 0x3c
    4664:	8b af       	std	Y+59, r24	; 0x3b
    4666:	8b ad       	ldd	r24, Y+59	; 0x3b
    4668:	9c ad       	ldd	r25, Y+60	; 0x3c
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	f1 f7       	brne	.-4      	; 0x466a <LCD_displayCharacter+0x466>
    466e:	9c af       	std	Y+60, r25	; 0x3c
    4670:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4672:	8d ad       	ldd	r24, Y+61	; 0x3d
    4674:	9e ad       	ldd	r25, Y+62	; 0x3e
    4676:	01 97       	sbiw	r24, 0x01	; 1
    4678:	9e af       	std	Y+62, r25	; 0x3e
    467a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467c:	8d ad       	ldd	r24, Y+61	; 0x3d
    467e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4680:	00 97       	sbiw	r24, 0x00	; 0
    4682:	69 f7       	brne	.-38     	; 0x465e <LCD_displayCharacter+0x45a>
    4684:	16 c0       	rjmp	.+44     	; 0x46b2 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4686:	fe 01       	movw	r30, r28
    4688:	ff 96       	adiw	r30, 0x3f	; 63
    468a:	60 81       	ld	r22, Z
    468c:	71 81       	ldd	r23, Z+1	; 0x01
    468e:	82 81       	ldd	r24, Z+2	; 0x02
    4690:	93 81       	ldd	r25, Z+3	; 0x03
    4692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	9e af       	std	Y+62, r25	; 0x3e
    469c:	8d af       	std	Y+61, r24	; 0x3d
    469e:	8d ad       	ldd	r24, Y+61	; 0x3d
    46a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    46a2:	9a af       	std	Y+58, r25	; 0x3a
    46a4:	89 af       	std	Y+57, r24	; 0x39
    46a6:	89 ad       	ldd	r24, Y+57	; 0x39
    46a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	f1 f7       	brne	.-4      	; 0x46aa <LCD_displayCharacter+0x4a6>
    46ae:	9a af       	std	Y+58, r25	; 0x3a
    46b0:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	62 e0       	ldi	r22, 0x02	; 2
    46b6:	40 e0       	ldi	r20, 0x00	; 0
    46b8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	a0 e8       	ldi	r26, 0x80	; 128
    46c2:	bf e3       	ldi	r27, 0x3F	; 63
    46c4:	8d ab       	std	Y+53, r24	; 0x35
    46c6:	9e ab       	std	Y+54, r25	; 0x36
    46c8:	af ab       	std	Y+55, r26	; 0x37
    46ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46cc:	6d a9       	ldd	r22, Y+53	; 0x35
    46ce:	7e a9       	ldd	r23, Y+54	; 0x36
    46d0:	8f a9       	ldd	r24, Y+55	; 0x37
    46d2:	98 ad       	ldd	r25, Y+56	; 0x38
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	4a e7       	ldi	r20, 0x7A	; 122
    46da:	55 e4       	ldi	r21, 0x45	; 69
    46dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	89 ab       	std	Y+49, r24	; 0x31
    46e6:	9a ab       	std	Y+50, r25	; 0x32
    46e8:	ab ab       	std	Y+51, r26	; 0x33
    46ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46ec:	69 a9       	ldd	r22, Y+49	; 0x31
    46ee:	7a a9       	ldd	r23, Y+50	; 0x32
    46f0:	8b a9       	ldd	r24, Y+51	; 0x33
    46f2:	9c a9       	ldd	r25, Y+52	; 0x34
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	40 e8       	ldi	r20, 0x80	; 128
    46fa:	5f e3       	ldi	r21, 0x3F	; 63
    46fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4700:	88 23       	and	r24, r24
    4702:	2c f4       	brge	.+10     	; 0x470e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	98 ab       	std	Y+48, r25	; 0x30
    470a:	8f a7       	std	Y+47, r24	; 0x2f
    470c:	3f c0       	rjmp	.+126    	; 0x478c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    470e:	69 a9       	ldd	r22, Y+49	; 0x31
    4710:	7a a9       	ldd	r23, Y+50	; 0x32
    4712:	8b a9       	ldd	r24, Y+51	; 0x33
    4714:	9c a9       	ldd	r25, Y+52	; 0x34
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	3f ef       	ldi	r19, 0xFF	; 255
    471a:	4f e7       	ldi	r20, 0x7F	; 127
    471c:	57 e4       	ldi	r21, 0x47	; 71
    471e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4722:	18 16       	cp	r1, r24
    4724:	4c f5       	brge	.+82     	; 0x4778 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4726:	6d a9       	ldd	r22, Y+53	; 0x35
    4728:	7e a9       	ldd	r23, Y+54	; 0x36
    472a:	8f a9       	ldd	r24, Y+55	; 0x37
    472c:	98 ad       	ldd	r25, Y+56	; 0x38
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	40 e2       	ldi	r20, 0x20	; 32
    4734:	51 e4       	ldi	r21, 0x41	; 65
    4736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	bc 01       	movw	r22, r24
    4740:	cd 01       	movw	r24, r26
    4742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	98 ab       	std	Y+48, r25	; 0x30
    474c:	8f a7       	std	Y+47, r24	; 0x2f
    474e:	0f c0       	rjmp	.+30     	; 0x476e <LCD_displayCharacter+0x56a>
    4750:	80 e9       	ldi	r24, 0x90	; 144
    4752:	91 e0       	ldi	r25, 0x01	; 1
    4754:	9e a7       	std	Y+46, r25	; 0x2e
    4756:	8d a7       	std	Y+45, r24	; 0x2d
    4758:	8d a5       	ldd	r24, Y+45	; 0x2d
    475a:	9e a5       	ldd	r25, Y+46	; 0x2e
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	f1 f7       	brne	.-4      	; 0x475c <LCD_displayCharacter+0x558>
    4760:	9e a7       	std	Y+46, r25	; 0x2e
    4762:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4764:	8f a5       	ldd	r24, Y+47	; 0x2f
    4766:	98 a9       	ldd	r25, Y+48	; 0x30
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	98 ab       	std	Y+48, r25	; 0x30
    476c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    476e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4770:	98 a9       	ldd	r25, Y+48	; 0x30
    4772:	00 97       	sbiw	r24, 0x00	; 0
    4774:	69 f7       	brne	.-38     	; 0x4750 <LCD_displayCharacter+0x54c>
    4776:	14 c0       	rjmp	.+40     	; 0x47a0 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4778:	69 a9       	ldd	r22, Y+49	; 0x31
    477a:	7a a9       	ldd	r23, Y+50	; 0x32
    477c:	8b a9       	ldd	r24, Y+51	; 0x33
    477e:	9c a9       	ldd	r25, Y+52	; 0x34
    4780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	98 ab       	std	Y+48, r25	; 0x30
    478a:	8f a7       	std	Y+47, r24	; 0x2f
    478c:	8f a5       	ldd	r24, Y+47	; 0x2f
    478e:	98 a9       	ldd	r25, Y+48	; 0x30
    4790:	9c a7       	std	Y+44, r25	; 0x2c
    4792:	8b a7       	std	Y+43, r24	; 0x2b
    4794:	8b a5       	ldd	r24, Y+43	; 0x2b
    4796:	9c a5       	ldd	r25, Y+44	; 0x2c
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	f1 f7       	brne	.-4      	; 0x4798 <LCD_displayCharacter+0x594>
    479c:	9c a7       	std	Y+44, r25	; 0x2c
    479e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	62 e0       	ldi	r22, 0x02	; 2
    47a4:	41 e0       	ldi	r20, 0x01	; 1
    47a6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	a0 e8       	ldi	r26, 0x80	; 128
    47b0:	bf e3       	ldi	r27, 0x3F	; 63
    47b2:	8f a3       	std	Y+39, r24	; 0x27
    47b4:	98 a7       	std	Y+40, r25	; 0x28
    47b6:	a9 a7       	std	Y+41, r26	; 0x29
    47b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ba:	6f a1       	ldd	r22, Y+39	; 0x27
    47bc:	78 a5       	ldd	r23, Y+40	; 0x28
    47be:	89 a5       	ldd	r24, Y+41	; 0x29
    47c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	4a e7       	ldi	r20, 0x7A	; 122
    47c8:	55 e4       	ldi	r21, 0x45	; 69
    47ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	8b a3       	std	Y+35, r24	; 0x23
    47d4:	9c a3       	std	Y+36, r25	; 0x24
    47d6:	ad a3       	std	Y+37, r26	; 0x25
    47d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47da:	6b a1       	ldd	r22, Y+35	; 0x23
    47dc:	7c a1       	ldd	r23, Y+36	; 0x24
    47de:	8d a1       	ldd	r24, Y+37	; 0x25
    47e0:	9e a1       	ldd	r25, Y+38	; 0x26
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e8       	ldi	r20, 0x80	; 128
    47e8:	5f e3       	ldi	r21, 0x3F	; 63
    47ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ee:	88 23       	and	r24, r24
    47f0:	2c f4       	brge	.+10     	; 0x47fc <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	9a a3       	std	Y+34, r25	; 0x22
    47f8:	89 a3       	std	Y+33, r24	; 0x21
    47fa:	3f c0       	rjmp	.+126    	; 0x487a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    47fc:	6b a1       	ldd	r22, Y+35	; 0x23
    47fe:	7c a1       	ldd	r23, Y+36	; 0x24
    4800:	8d a1       	ldd	r24, Y+37	; 0x25
    4802:	9e a1       	ldd	r25, Y+38	; 0x26
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	3f ef       	ldi	r19, 0xFF	; 255
    4808:	4f e7       	ldi	r20, 0x7F	; 127
    480a:	57 e4       	ldi	r21, 0x47	; 71
    480c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4810:	18 16       	cp	r1, r24
    4812:	4c f5       	brge	.+82     	; 0x4866 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4814:	6f a1       	ldd	r22, Y+39	; 0x27
    4816:	78 a5       	ldd	r23, Y+40	; 0x28
    4818:	89 a5       	ldd	r24, Y+41	; 0x29
    481a:	9a a5       	ldd	r25, Y+42	; 0x2a
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e2       	ldi	r20, 0x20	; 32
    4822:	51 e4       	ldi	r21, 0x41	; 65
    4824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4834:	dc 01       	movw	r26, r24
    4836:	cb 01       	movw	r24, r22
    4838:	9a a3       	std	Y+34, r25	; 0x22
    483a:	89 a3       	std	Y+33, r24	; 0x21
    483c:	0f c0       	rjmp	.+30     	; 0x485c <LCD_displayCharacter+0x658>
    483e:	80 e9       	ldi	r24, 0x90	; 144
    4840:	91 e0       	ldi	r25, 0x01	; 1
    4842:	98 a3       	std	Y+32, r25	; 0x20
    4844:	8f 8f       	std	Y+31, r24	; 0x1f
    4846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4848:	98 a1       	ldd	r25, Y+32	; 0x20
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	f1 f7       	brne	.-4      	; 0x484a <LCD_displayCharacter+0x646>
    484e:	98 a3       	std	Y+32, r25	; 0x20
    4850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4852:	89 a1       	ldd	r24, Y+33	; 0x21
    4854:	9a a1       	ldd	r25, Y+34	; 0x22
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	9a a3       	std	Y+34, r25	; 0x22
    485a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    485c:	89 a1       	ldd	r24, Y+33	; 0x21
    485e:	9a a1       	ldd	r25, Y+34	; 0x22
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	69 f7       	brne	.-38     	; 0x483e <LCD_displayCharacter+0x63a>
    4864:	14 c0       	rjmp	.+40     	; 0x488e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4866:	6b a1       	ldd	r22, Y+35	; 0x23
    4868:	7c a1       	ldd	r23, Y+36	; 0x24
    486a:	8d a1       	ldd	r24, Y+37	; 0x25
    486c:	9e a1       	ldd	r25, Y+38	; 0x26
    486e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	9a a3       	std	Y+34, r25	; 0x22
    4878:	89 a3       	std	Y+33, r24	; 0x21
    487a:	89 a1       	ldd	r24, Y+33	; 0x21
    487c:	9a a1       	ldd	r25, Y+34	; 0x22
    487e:	9e 8f       	std	Y+30, r25	; 0x1e
    4880:	8d 8f       	std	Y+29, r24	; 0x1d
    4882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	f1 f7       	brne	.-4      	; 0x4886 <LCD_displayCharacter+0x682>
    488a:	9e 8f       	std	Y+30, r25	; 0x1e
    488c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    488e:	fe 01       	movw	r30, r28
    4890:	ed 59       	subi	r30, 0x9D	; 157
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	80 81       	ld	r24, Z
    4896:	98 2f       	mov	r25, r24
    4898:	91 70       	andi	r25, 0x01	; 1
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	63 e0       	ldi	r22, 0x03	; 3
    489e:	49 2f       	mov	r20, r25
    48a0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    48a4:	fe 01       	movw	r30, r28
    48a6:	ed 59       	subi	r30, 0x9D	; 157
    48a8:	ff 4f       	sbci	r31, 0xFF	; 255
    48aa:	80 81       	ld	r24, Z
    48ac:	88 2f       	mov	r24, r24
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	82 70       	andi	r24, 0x02	; 2
    48b2:	90 70       	andi	r25, 0x00	; 0
    48b4:	95 95       	asr	r25
    48b6:	87 95       	ror	r24
    48b8:	98 2f       	mov	r25, r24
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	64 e0       	ldi	r22, 0x04	; 4
    48be:	49 2f       	mov	r20, r25
    48c0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    48c4:	fe 01       	movw	r30, r28
    48c6:	ed 59       	subi	r30, 0x9D	; 157
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	88 2f       	mov	r24, r24
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	84 70       	andi	r24, 0x04	; 4
    48d2:	90 70       	andi	r25, 0x00	; 0
    48d4:	95 95       	asr	r25
    48d6:	87 95       	ror	r24
    48d8:	95 95       	asr	r25
    48da:	87 95       	ror	r24
    48dc:	98 2f       	mov	r25, r24
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	65 e0       	ldi	r22, 0x05	; 5
    48e2:	49 2f       	mov	r20, r25
    48e4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    48e8:	fe 01       	movw	r30, r28
    48ea:	ed 59       	subi	r30, 0x9D	; 157
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	80 81       	ld	r24, Z
    48f0:	88 2f       	mov	r24, r24
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	88 70       	andi	r24, 0x08	; 8
    48f6:	90 70       	andi	r25, 0x00	; 0
    48f8:	95 95       	asr	r25
    48fa:	87 95       	ror	r24
    48fc:	95 95       	asr	r25
    48fe:	87 95       	ror	r24
    4900:	95 95       	asr	r25
    4902:	87 95       	ror	r24
    4904:	98 2f       	mov	r25, r24
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	66 e0       	ldi	r22, 0x06	; 6
    490a:	49 2f       	mov	r20, r25
    490c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	a0 e8       	ldi	r26, 0x80	; 128
    4916:	bf e3       	ldi	r27, 0x3F	; 63
    4918:	89 8f       	std	Y+25, r24	; 0x19
    491a:	9a 8f       	std	Y+26, r25	; 0x1a
    491c:	ab 8f       	std	Y+27, r26	; 0x1b
    491e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4920:	69 8d       	ldd	r22, Y+25	; 0x19
    4922:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4924:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4926:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	4a e7       	ldi	r20, 0x7A	; 122
    492e:	55 e4       	ldi	r21, 0x45	; 69
    4930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	8d 8b       	std	Y+21, r24	; 0x15
    493a:	9e 8b       	std	Y+22, r25	; 0x16
    493c:	af 8b       	std	Y+23, r26	; 0x17
    493e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4940:	6d 89       	ldd	r22, Y+21	; 0x15
    4942:	7e 89       	ldd	r23, Y+22	; 0x16
    4944:	8f 89       	ldd	r24, Y+23	; 0x17
    4946:	98 8d       	ldd	r25, Y+24	; 0x18
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 e8       	ldi	r20, 0x80	; 128
    494e:	5f e3       	ldi	r21, 0x3F	; 63
    4950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4954:	88 23       	and	r24, r24
    4956:	2c f4       	brge	.+10     	; 0x4962 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	9c 8b       	std	Y+20, r25	; 0x14
    495e:	8b 8b       	std	Y+19, r24	; 0x13
    4960:	3f c0       	rjmp	.+126    	; 0x49e0 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4962:	6d 89       	ldd	r22, Y+21	; 0x15
    4964:	7e 89       	ldd	r23, Y+22	; 0x16
    4966:	8f 89       	ldd	r24, Y+23	; 0x17
    4968:	98 8d       	ldd	r25, Y+24	; 0x18
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	3f ef       	ldi	r19, 0xFF	; 255
    496e:	4f e7       	ldi	r20, 0x7F	; 127
    4970:	57 e4       	ldi	r21, 0x47	; 71
    4972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4976:	18 16       	cp	r1, r24
    4978:	4c f5       	brge	.+82     	; 0x49cc <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    497a:	69 8d       	ldd	r22, Y+25	; 0x19
    497c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    497e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	40 e2       	ldi	r20, 0x20	; 32
    4988:	51 e4       	ldi	r21, 0x41	; 65
    498a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	bc 01       	movw	r22, r24
    4994:	cd 01       	movw	r24, r26
    4996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	9c 8b       	std	Y+20, r25	; 0x14
    49a0:	8b 8b       	std	Y+19, r24	; 0x13
    49a2:	0f c0       	rjmp	.+30     	; 0x49c2 <LCD_displayCharacter+0x7be>
    49a4:	80 e9       	ldi	r24, 0x90	; 144
    49a6:	91 e0       	ldi	r25, 0x01	; 1
    49a8:	9a 8b       	std	Y+18, r25	; 0x12
    49aa:	89 8b       	std	Y+17, r24	; 0x11
    49ac:	89 89       	ldd	r24, Y+17	; 0x11
    49ae:	9a 89       	ldd	r25, Y+18	; 0x12
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	f1 f7       	brne	.-4      	; 0x49b0 <LCD_displayCharacter+0x7ac>
    49b4:	9a 8b       	std	Y+18, r25	; 0x12
    49b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b8:	8b 89       	ldd	r24, Y+19	; 0x13
    49ba:	9c 89       	ldd	r25, Y+20	; 0x14
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	9c 8b       	std	Y+20, r25	; 0x14
    49c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c2:	8b 89       	ldd	r24, Y+19	; 0x13
    49c4:	9c 89       	ldd	r25, Y+20	; 0x14
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	69 f7       	brne	.-38     	; 0x49a4 <LCD_displayCharacter+0x7a0>
    49ca:	14 c0       	rjmp	.+40     	; 0x49f4 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49cc:	6d 89       	ldd	r22, Y+21	; 0x15
    49ce:	7e 89       	ldd	r23, Y+22	; 0x16
    49d0:	8f 89       	ldd	r24, Y+23	; 0x17
    49d2:	98 8d       	ldd	r25, Y+24	; 0x18
    49d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	9c 8b       	std	Y+20, r25	; 0x14
    49de:	8b 8b       	std	Y+19, r24	; 0x13
    49e0:	8b 89       	ldd	r24, Y+19	; 0x13
    49e2:	9c 89       	ldd	r25, Y+20	; 0x14
    49e4:	98 8b       	std	Y+16, r25	; 0x10
    49e6:	8f 87       	std	Y+15, r24	; 0x0f
    49e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ea:	98 89       	ldd	r25, Y+16	; 0x10
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	f1 f7       	brne	.-4      	; 0x49ec <LCD_displayCharacter+0x7e8>
    49f0:	98 8b       	std	Y+16, r25	; 0x10
    49f2:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	62 e0       	ldi	r22, 0x02	; 2
    49f8:	40 e0       	ldi	r20, 0x00	; 0
    49fa:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	a0 e8       	ldi	r26, 0x80	; 128
    4a04:	bf e3       	ldi	r27, 0x3F	; 63
    4a06:	8b 87       	std	Y+11, r24	; 0x0b
    4a08:	9c 87       	std	Y+12, r25	; 0x0c
    4a0a:	ad 87       	std	Y+13, r26	; 0x0d
    4a0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	4a e7       	ldi	r20, 0x7A	; 122
    4a1c:	55 e4       	ldi	r21, 0x45	; 69
    4a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	8f 83       	std	Y+7, r24	; 0x07
    4a28:	98 87       	std	Y+8, r25	; 0x08
    4a2a:	a9 87       	std	Y+9, r26	; 0x09
    4a2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a30:	78 85       	ldd	r23, Y+8	; 0x08
    4a32:	89 85       	ldd	r24, Y+9	; 0x09
    4a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e8       	ldi	r20, 0x80	; 128
    4a3c:	5f e3       	ldi	r21, 0x3F	; 63
    4a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a42:	88 23       	and	r24, r24
    4a44:	2c f4       	brge	.+10     	; 0x4a50 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	9e 83       	std	Y+6, r25	; 0x06
    4a4c:	8d 83       	std	Y+5, r24	; 0x05
    4a4e:	3f c0       	rjmp	.+126    	; 0x4ace <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    4a50:	6f 81       	ldd	r22, Y+7	; 0x07
    4a52:	78 85       	ldd	r23, Y+8	; 0x08
    4a54:	89 85       	ldd	r24, Y+9	; 0x09
    4a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	3f ef       	ldi	r19, 0xFF	; 255
    4a5c:	4f e7       	ldi	r20, 0x7F	; 127
    4a5e:	57 e4       	ldi	r21, 0x47	; 71
    4a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a64:	18 16       	cp	r1, r24
    4a66:	4c f5       	brge	.+82     	; 0x4aba <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e2       	ldi	r20, 0x20	; 32
    4a76:	51 e4       	ldi	r21, 0x41	; 65
    4a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	bc 01       	movw	r22, r24
    4a82:	cd 01       	movw	r24, r26
    4a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	9e 83       	std	Y+6, r25	; 0x06
    4a8e:	8d 83       	std	Y+5, r24	; 0x05
    4a90:	0f c0       	rjmp	.+30     	; 0x4ab0 <LCD_displayCharacter+0x8ac>
    4a92:	80 e9       	ldi	r24, 0x90	; 144
    4a94:	91 e0       	ldi	r25, 0x01	; 1
    4a96:	9c 83       	std	Y+4, r25	; 0x04
    4a98:	8b 83       	std	Y+3, r24	; 0x03
    4a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	f1 f7       	brne	.-4      	; 0x4a9e <LCD_displayCharacter+0x89a>
    4aa2:	9c 83       	std	Y+4, r25	; 0x04
    4aa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	9e 83       	std	Y+6, r25	; 0x06
    4aae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab4:	00 97       	sbiw	r24, 0x00	; 0
    4ab6:	69 f7       	brne	.-38     	; 0x4a92 <LCD_displayCharacter+0x88e>
    4ab8:	14 c0       	rjmp	.+40     	; 0x4ae2 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aba:	6f 81       	ldd	r22, Y+7	; 0x07
    4abc:	78 85       	ldd	r23, Y+8	; 0x08
    4abe:	89 85       	ldd	r24, Y+9	; 0x09
    4ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	9e 83       	std	Y+6, r25	; 0x06
    4acc:	8d 83       	std	Y+5, r24	; 0x05
    4ace:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad2:	9a 83       	std	Y+2, r25	; 0x02
    4ad4:	89 83       	std	Y+1, r24	; 0x01
    4ad6:	89 81       	ldd	r24, Y+1	; 0x01
    4ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <LCD_displayCharacter+0x8d6>
    4ade:	9a 83       	std	Y+2, r25	; 0x02
    4ae0:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, data);  /* Output the data to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    4ae2:	cd 59       	subi	r28, 0x9D	; 157
    4ae4:	df 4f       	sbci	r29, 0xFF	; 255
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	f8 94       	cli
    4aea:	de bf       	out	0x3e, r29	; 62
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	cd bf       	out	0x3d, r28	; 61
    4af0:	cf 91       	pop	r28
    4af2:	df 91       	pop	r29
    4af4:	1f 91       	pop	r17
    4af6:	0f 91       	pop	r16
    4af8:	08 95       	ret

00004afa <LCD_displayString>:
 * Display a string on the LCD.
 * Parameters  :
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    4afa:	df 93       	push	r29
    4afc:	cf 93       	push	r28
    4afe:	00 d0       	rcall	.+0      	; 0x4b00 <LCD_displayString+0x6>
    4b00:	0f 92       	push	r0
    4b02:	cd b7       	in	r28, 0x3d	; 61
    4b04:	de b7       	in	r29, 0x3e	; 62
    4b06:	9b 83       	std	Y+3, r25	; 0x03
    4b08:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    4b0a:	19 82       	std	Y+1, r1	; 0x01
    4b0c:	0e c0       	rjmp	.+28     	; 0x4b2a <LCD_displayString+0x30>
    while (Str[i] != '\0')
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
    4b0e:	89 81       	ldd	r24, Y+1	; 0x01
    4b10:	28 2f       	mov	r18, r24
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	8a 81       	ldd	r24, Y+2	; 0x02
    4b16:	9b 81       	ldd	r25, Y+3	; 0x03
    4b18:	fc 01       	movw	r30, r24
    4b1a:	e2 0f       	add	r30, r18
    4b1c:	f3 1f       	adc	r31, r19
    4b1e:	80 81       	ld	r24, Z
    4b20:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayCharacter>
        i++;
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	8f 5f       	subi	r24, 0xFF	; 255
    4b28:	89 83       	std	Y+1, r24	; 0x01
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
    4b2a:	89 81       	ldd	r24, Y+1	; 0x01
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	8a 81       	ldd	r24, Y+2	; 0x02
    4b32:	9b 81       	ldd	r25, Y+3	; 0x03
    4b34:	fc 01       	movw	r30, r24
    4b36:	e2 0f       	add	r30, r18
    4b38:	f3 1f       	adc	r31, r19
    4b3a:	80 81       	ld	r24, Z
    4b3c:	88 23       	and	r24, r24
    4b3e:	39 f7       	brne	.-50     	; 0x4b0e <LCD_displayString+0x14>
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
        i++;
    }
}
    4b40:	0f 90       	pop	r0
    4b42:	0f 90       	pop	r0
    4b44:	0f 90       	pop	r0
    4b46:	cf 91       	pop	r28
    4b48:	df 91       	pop	r29
    4b4a:	08 95       	ret

00004b4c <LCD_moveCursor>:
 * Parameters  :
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    4b4c:	df 93       	push	r29
    4b4e:	cf 93       	push	r28
    4b50:	00 d0       	rcall	.+0      	; 0x4b52 <LCD_moveCursor+0x6>
    4b52:	00 d0       	rcall	.+0      	; 0x4b54 <LCD_moveCursor+0x8>
    4b54:	0f 92       	push	r0
    4b56:	cd b7       	in	r28, 0x3d	; 61
    4b58:	de b7       	in	r29, 0x3e	; 62
    4b5a:	8a 83       	std	Y+2, r24	; 0x02
    4b5c:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    /* Calculate the required address in the LCD DDRAM */
    switch (row)
    4b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b60:	28 2f       	mov	r18, r24
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	3d 83       	std	Y+5, r19	; 0x05
    4b66:	2c 83       	std	Y+4, r18	; 0x04
    4b68:	8c 81       	ldd	r24, Y+4	; 0x04
    4b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b6c:	81 30       	cpi	r24, 0x01	; 1
    4b6e:	91 05       	cpc	r25, r1
    4b70:	c1 f0       	breq	.+48     	; 0x4ba2 <LCD_moveCursor+0x56>
    4b72:	2c 81       	ldd	r18, Y+4	; 0x04
    4b74:	3d 81       	ldd	r19, Y+5	; 0x05
    4b76:	22 30       	cpi	r18, 0x02	; 2
    4b78:	31 05       	cpc	r19, r1
    4b7a:	2c f4       	brge	.+10     	; 0x4b86 <LCD_moveCursor+0x3a>
    4b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	61 f0       	breq	.+24     	; 0x4b9c <LCD_moveCursor+0x50>
    4b84:	19 c0       	rjmp	.+50     	; 0x4bb8 <LCD_moveCursor+0x6c>
    4b86:	2c 81       	ldd	r18, Y+4	; 0x04
    4b88:	3d 81       	ldd	r19, Y+5	; 0x05
    4b8a:	22 30       	cpi	r18, 0x02	; 2
    4b8c:	31 05       	cpc	r19, r1
    4b8e:	69 f0       	breq	.+26     	; 0x4baa <LCD_moveCursor+0x5e>
    4b90:	8c 81       	ldd	r24, Y+4	; 0x04
    4b92:	9d 81       	ldd	r25, Y+5	; 0x05
    4b94:	83 30       	cpi	r24, 0x03	; 3
    4b96:	91 05       	cpc	r25, r1
    4b98:	61 f0       	breq	.+24     	; 0x4bb2 <LCD_moveCursor+0x66>
    4b9a:	0e c0       	rjmp	.+28     	; 0x4bb8 <LCD_moveCursor+0x6c>
    {
    case 0:
        lcd_memory_address = col;
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	89 83       	std	Y+1, r24	; 0x01
    4ba0:	0b c0       	rjmp	.+22     	; 0x4bb8 <LCD_moveCursor+0x6c>
        break;
    case 1:
        lcd_memory_address = col + 0x40;
    4ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba4:	80 5c       	subi	r24, 0xC0	; 192
    4ba6:	89 83       	std	Y+1, r24	; 0x01
    4ba8:	07 c0       	rjmp	.+14     	; 0x4bb8 <LCD_moveCursor+0x6c>
        break;
    case 2:
        lcd_memory_address = col + 0x10;
    4baa:	8b 81       	ldd	r24, Y+3	; 0x03
    4bac:	80 5f       	subi	r24, 0xF0	; 240
    4bae:	89 83       	std	Y+1, r24	; 0x01
    4bb0:	03 c0       	rjmp	.+6      	; 0x4bb8 <LCD_moveCursor+0x6c>
        break;
    case 3:
        lcd_memory_address = col + 0x50;
    4bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb4:	80 5b       	subi	r24, 0xB0	; 176
    4bb6:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    /* Move the LCD cursor to this specific address */
    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	80 68       	ori	r24, 0x80	; 128
    4bbc:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>
}
    4bc0:	0f 90       	pop	r0
    4bc2:	0f 90       	pop	r0
    4bc4:	0f 90       	pop	r0
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	cf 91       	pop	r28
    4bcc:	df 91       	pop	r29
    4bce:	08 95       	ret

00004bd0 <LCD_displayStringRowColumn>:
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    4bd0:	df 93       	push	r29
    4bd2:	cf 93       	push	r28
    4bd4:	00 d0       	rcall	.+0      	; 0x4bd6 <LCD_displayStringRowColumn+0x6>
    4bd6:	00 d0       	rcall	.+0      	; 0x4bd8 <LCD_displayStringRowColumn+0x8>
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
    4bdc:	89 83       	std	Y+1, r24	; 0x01
    4bde:	6a 83       	std	Y+2, r22	; 0x02
    4be0:	5c 83       	std	Y+4, r21	; 0x04
    4be2:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col);  /* Move the cursor to the specified position */
    4be4:	89 81       	ldd	r24, Y+1	; 0x01
    4be6:	6a 81       	ldd	r22, Y+2	; 0x02
    4be8:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <LCD_moveCursor>
    LCD_displayString(Str);  /* Display the string */
    4bec:	8b 81       	ldd	r24, Y+3	; 0x03
    4bee:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf0:	0e 94 7d 25 	call	0x4afa	; 0x4afa <LCD_displayString>
}
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	cf 91       	pop	r28
    4bfe:	df 91       	pop	r29
    4c00:	08 95       	ret

00004c02 <LCD_intgerToString>:
 * Display an integer value on the LCD.
 * Parameters  :
 * - data: The integer value to be displayed.
 */
void LCD_intgerToString(int data)
{
    4c02:	df 93       	push	r29
    4c04:	cf 93       	push	r28
    4c06:	cd b7       	in	r28, 0x3d	; 61
    4c08:	de b7       	in	r29, 0x3e	; 62
    4c0a:	62 97       	sbiw	r28, 0x12	; 18
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	f8 94       	cli
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	cd bf       	out	0x3d, r28	; 61
    4c16:	9a 8b       	std	Y+18, r25	; 0x12
    4c18:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];  /* String to hold the ASCII result */
    itoa(data, buff, 10);  /* Convert the integer to its ASCII representation (base 10) */
    4c1a:	89 89       	ldd	r24, Y+17	; 0x11
    4c1c:	9a 89       	ldd	r25, Y+18	; 0x12
    4c1e:	9e 01       	movw	r18, r28
    4c20:	2f 5f       	subi	r18, 0xFF	; 255
    4c22:	3f 4f       	sbci	r19, 0xFF	; 255
    4c24:	b9 01       	movw	r22, r18
    4c26:	4a e0       	ldi	r20, 0x0A	; 10
    4c28:	50 e0       	ldi	r21, 0x00	; 0
    4c2a:	0e 94 9b 2a 	call	0x5536	; 0x5536 <itoa>
    LCD_displayString(buff);  /* Display the string */
    4c2e:	ce 01       	movw	r24, r28
    4c30:	01 96       	adiw	r24, 0x01	; 1
    4c32:	0e 94 7d 25 	call	0x4afa	; 0x4afa <LCD_displayString>
}
    4c36:	62 96       	adiw	r28, 0x12	; 18
    4c38:	0f b6       	in	r0, 0x3f	; 63
    4c3a:	f8 94       	cli
    4c3c:	de bf       	out	0x3e, r29	; 62
    4c3e:	0f be       	out	0x3f, r0	; 63
    4c40:	cd bf       	out	0x3d, r28	; 61
    4c42:	cf 91       	pop	r28
    4c44:	df 91       	pop	r29
    4c46:	08 95       	ret

00004c48 <LCD_clearScreen>:
/*
 * Description :
 * Clear the LCD screen.
 */
void LCD_clearScreen(void)
{
    4c48:	df 93       	push	r29
    4c4a:	cf 93       	push	r28
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Send clear display command */
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_sendCommand>
}
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret

00004c5c <Buzzer_init>:
 * Description	: source file for the Buzzer driver
 ************************************************************************************/
#include "buzzer.h"

void Buzzer_init(void)
{
    4c5c:	df 93       	push	r29
    4c5e:	cf 93       	push	r28
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin as output */
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    4c64:	82 e0       	ldi	r24, 0x02	; 2
    4c66:	65 e0       	ldi	r22, 0x05	; 5
    4c68:	41 e0       	ldi	r20, 0x01	; 1
    4c6a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>

    /* Turn off the buzzer initially */
    Buzzer_off();
    4c6e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <Buzzer_off>
}
    4c72:	cf 91       	pop	r28
    4c74:	df 91       	pop	r29
    4c76:	08 95       	ret

00004c78 <Buzzer_on>:

void Buzzer_on(void)
{
    4c78:	df 93       	push	r29
    4c7a:	cf 93       	push	r28
    4c7c:	cd b7       	in	r28, 0x3d	; 61
    4c7e:	de b7       	in	r29, 0x3e	; 62
    /* Activate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	65 e0       	ldi	r22, 0x05	; 5
    4c84:	41 e0       	ldi	r20, 0x01	; 1
    4c86:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
}
    4c8a:	cf 91       	pop	r28
    4c8c:	df 91       	pop	r29
    4c8e:	08 95       	ret

00004c90 <Buzzer_off>:

void Buzzer_off(void)
{
    4c90:	df 93       	push	r29
    4c92:	cf 93       	push	r28
    4c94:	cd b7       	in	r28, 0x3d	; 61
    4c96:	de b7       	in	r29, 0x3e	; 62
    /* Deactivate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	65 e0       	ldi	r22, 0x05	; 5
    4c9c:	40 e0       	ldi	r20, 0x00	; 0
    4c9e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
}
    4ca2:	cf 91       	pop	r28
    4ca4:	df 91       	pop	r29
    4ca6:	08 95       	ret

00004ca8 <LEDS_init>:
 * Function to initialize LEDs:
 * 1. Set up the LED pins as output pins.
 * 2. Set the initial state of the LEDs based on the connection logic.
 */
void LEDS_init(void)
{
    4ca8:	df 93       	push	r29
    4caa:	cf 93       	push	r28
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    /* Configure the LED pins as output pins */
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, RED_LED, PIN_OUTPUT);
    4cb0:	82 e0       	ldi	r24, 0x02	; 2
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	41 e0       	ldi	r20, 0x01	; 1
    4cb6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, GREEN_LED, PIN_OUTPUT);
    4cba:	82 e0       	ldi	r24, 0x02	; 2
    4cbc:	61 e0       	ldi	r22, 0x01	; 1
    4cbe:	41 e0       	ldi	r20, 0x01	; 1
    4cc0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, BLUE_LED, PIN_OUTPUT);
    4cc4:	82 e0       	ldi	r24, 0x02	; 2
    4cc6:	62 e0       	ldi	r22, 0x02	; 2
    4cc8:	41 e0       	ldi	r20, 0x01	; 1
    4cca:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <GPIO_setupPinDirection>

#ifdef CONNECTION_POSITIVE_LOGIC
    /* Initialize LEDs to OFF state for positive logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4cce:	82 e0       	ldi	r24, 0x02	; 2
    4cd0:	60 e0       	ldi	r22, 0x00	; 0
    4cd2:	40 e0       	ldi	r20, 0x00	; 0
    4cd4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	61 e0       	ldi	r22, 0x01	; 1
    4cdc:	40 e0       	ldi	r20, 0x00	; 0
    4cde:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    4ce2:	82 e0       	ldi	r24, 0x02	; 2
    4ce4:	62 e0       	ldi	r22, 0x02	; 2
    4ce6:	40 e0       	ldi	r20, 0x00	; 0
    4ce8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    /* Initialize LEDs to OFF state for negative logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
#endif
}
    4cec:	cf 91       	pop	r28
    4cee:	df 91       	pop	r29
    4cf0:	08 95       	ret

00004cf2 <LED_on>:
 * Else, put LOGIC LOW (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn on (red, green, blue).
 */
void LED_on(LED_ID id)
{
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	00 d0       	rcall	.+0      	; 0x4cf8 <LED_on+0x6>
    4cf8:	0f 92       	push	r0
    4cfa:	cd b7       	in	r28, 0x3d	; 61
    4cfc:	de b7       	in	r29, 0x3e	; 62
    4cfe:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn on the LED for positive logic */
    switch (id)
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	28 2f       	mov	r18, r24
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	3b 83       	std	Y+3, r19	; 0x03
    4d08:	2a 83       	std	Y+2, r18	; 0x02
    4d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d0e:	81 30       	cpi	r24, 0x01	; 1
    4d10:	91 05       	cpc	r25, r1
    4d12:	79 f0       	breq	.+30     	; 0x4d32 <LED_on+0x40>
    4d14:	2a 81       	ldd	r18, Y+2	; 0x02
    4d16:	3b 81       	ldd	r19, Y+3	; 0x03
    4d18:	22 30       	cpi	r18, 0x02	; 2
    4d1a:	31 05       	cpc	r19, r1
    4d1c:	81 f0       	breq	.+32     	; 0x4d3e <LED_on+0x4c>
    4d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d20:	9b 81       	ldd	r25, Y+3	; 0x03
    4d22:	00 97       	sbiw	r24, 0x00	; 0
    4d24:	89 f4       	brne	.+34     	; 0x4d48 <LED_on+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	60 e0       	ldi	r22, 0x00	; 0
    4d2a:	41 e0       	ldi	r20, 0x01	; 1
    4d2c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4d30:	0b c0       	rjmp	.+22     	; 0x4d48 <LED_on+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    4d32:	82 e0       	ldi	r24, 0x02	; 2
    4d34:	61 e0       	ldi	r22, 0x01	; 1
    4d36:	41 e0       	ldi	r20, 0x01	; 1
    4d38:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4d3c:	05 c0       	rjmp	.+10     	; 0x4d48 <LED_on+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
    4d3e:	82 e0       	ldi	r24, 0x02	; 2
    4d40:	62 e0       	ldi	r22, 0x02	; 2
    4d42:	41 e0       	ldi	r20, 0x01	; 1
    4d44:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
        break;
    }
#endif
}
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	0f 90       	pop	r0
    4d4e:	cf 91       	pop	r28
    4d50:	df 91       	pop	r29
    4d52:	08 95       	ret

00004d54 <LED_off>:
 * Else, put LOGIC HIGH (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn off (red, green, blue).
 */
void LED_off(LED_ID id)
{
    4d54:	df 93       	push	r29
    4d56:	cf 93       	push	r28
    4d58:	00 d0       	rcall	.+0      	; 0x4d5a <LED_off+0x6>
    4d5a:	0f 92       	push	r0
    4d5c:	cd b7       	in	r28, 0x3d	; 61
    4d5e:	de b7       	in	r29, 0x3e	; 62
    4d60:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn off the LED for positive logic */
    switch (id)
    4d62:	89 81       	ldd	r24, Y+1	; 0x01
    4d64:	28 2f       	mov	r18, r24
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	3b 83       	std	Y+3, r19	; 0x03
    4d6a:	2a 83       	std	Y+2, r18	; 0x02
    4d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d70:	81 30       	cpi	r24, 0x01	; 1
    4d72:	91 05       	cpc	r25, r1
    4d74:	79 f0       	breq	.+30     	; 0x4d94 <LED_off+0x40>
    4d76:	2a 81       	ldd	r18, Y+2	; 0x02
    4d78:	3b 81       	ldd	r19, Y+3	; 0x03
    4d7a:	22 30       	cpi	r18, 0x02	; 2
    4d7c:	31 05       	cpc	r19, r1
    4d7e:	81 f0       	breq	.+32     	; 0x4da0 <LED_off+0x4c>
    4d80:	8a 81       	ldd	r24, Y+2	; 0x02
    4d82:	9b 81       	ldd	r25, Y+3	; 0x03
    4d84:	00 97       	sbiw	r24, 0x00	; 0
    4d86:	89 f4       	brne	.+34     	; 0x4daa <LED_off+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4d88:	82 e0       	ldi	r24, 0x02	; 2
    4d8a:	60 e0       	ldi	r22, 0x00	; 0
    4d8c:	40 e0       	ldi	r20, 0x00	; 0
    4d8e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4d92:	0b c0       	rjmp	.+22     	; 0x4daa <LED_off+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	61 e0       	ldi	r22, 0x01	; 1
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    4d9e:	05 c0       	rjmp	.+10     	; 0x4daa <LED_off+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    4da0:	82 e0       	ldi	r24, 0x02	; 2
    4da2:	62 e0       	ldi	r22, 0x02	; 2
    4da4:	40 e0       	ldi	r20, 0x00	; 0
    4da6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
        break;
    }
#endif
}
    4daa:	0f 90       	pop	r0
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	cf 91       	pop	r28
    4db2:	df 91       	pop	r29
    4db4:	08 95       	ret

00004db6 <ISR2>:
volatile uint16 distanceForward  = 0;
volatile uint16 distanceBackward = 0;
uint8 selection = 0 ;

/****************** Interrupt Service Routines ******************/
void ISR2(void) {
    4db6:	df 93       	push	r29
    4db8:	cf 93       	push	r28
    4dba:	cd b7       	in	r28, 0x3d	; 61
    4dbc:	de b7       	in	r29, 0x3e	; 62
	Stop();
    4dbe:	0e 94 aa 18 	call	0x3154	; 0x3154 <Stop>
}
    4dc2:	cf 91       	pop	r28
    4dc4:	df 91       	pop	r29
    4dc6:	08 95       	ret

00004dc8 <ISR1>:

void ISR1(void) {
    4dc8:	df 93       	push	r29
    4dca:	cf 93       	push	r28
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
	Stop();
    4dd0:	0e 94 aa 18 	call	0x3154	; 0x3154 <Stop>
}
    4dd4:	cf 91       	pop	r28
    4dd6:	df 91       	pop	r29
    4dd8:	08 95       	ret

00004dda <main>:

int main(void)
{
    4dda:	df 93       	push	r29
    4ddc:	cf 93       	push	r28
    4dde:	cd b7       	in	r28, 0x3d	; 61
    4de0:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1 << 7);		/* Enable global interrupts */
    4de2:	af e5       	ldi	r26, 0x5F	; 95
    4de4:	b0 e0       	ldi	r27, 0x00	; 0
    4de6:	ef e5       	ldi	r30, 0x5F	; 95
    4de8:	f0 e0       	ldi	r31, 0x00	; 0
    4dea:	80 81       	ld	r24, Z
    4dec:	80 68       	ori	r24, 0x80	; 128
    4dee:	8c 93       	st	X, r24

	UART_Init(&config);
    4df0:	87 e7       	ldi	r24, 0x77	; 119
    4df2:	91 e0       	ldi	r25, 0x01	; 1
    4df4:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>
	UART_SetRxCallback(App_Receive);
    4df8:	80 e1       	ldi	r24, 0x10	; 16
    4dfa:	97 e2       	ldi	r25, 0x27	; 39
    4dfc:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <UART_SetRxCallback>

	LCD_init();
    4e00:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_init>
	LEDS_init();
    4e04:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <LEDS_init>
	Buzzer_init();
    4e08:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <Buzzer_init>
	DcMotor_Init(100);
    4e0c:	84 e6       	ldi	r24, 0x64	; 100
    4e0e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <DcMotor_Init>

	Ultrasonic_init();
    4e12:	0e 94 db 11 	call	0x23b6	; 0x23b6 <Ultrasonic_init>

	while (1)
	{
		readDistance();		/* Read distances from Three Ultrasonics */
    4e16:	0e 94 91 27 	call	0x4f22	; 0x4f22 <readDistance>
		collisionAvoidance();	/* Handle collision avoidance mode  */
    4e1a:	0e 94 c0 29 	call	0x5380	; 0x5380 <collisionAvoidance>
    4e1e:	fb cf       	rjmp	.-10     	; 0x4e16 <main+0x3c>

00004e20 <App_Receive>:
	}
}

/********************* Functions Definitions *********************/
void App_Receive(uint8 recievedMSG)
{
    4e20:	df 93       	push	r29
    4e22:	cf 93       	push	r28
    4e24:	00 d0       	rcall	.+0      	; 0x4e26 <App_Receive+0x6>
    4e26:	0f 92       	push	r0
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	89 83       	std	Y+1, r24	; 0x01
	selection = recievedMSG ;
    4e2e:	89 81       	ldd	r24, Y+1	; 0x01
    4e30:	80 93 ab 01 	sts	0x01AB, r24
	switch (recievedMSG)
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	28 2f       	mov	r18, r24
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	3b 83       	std	Y+3, r19	; 0x03
    4e3c:	2a 83       	std	Y+2, r18	; 0x02
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	9b 81       	ldd	r25, Y+3	; 0x03
    4e42:	88 34       	cpi	r24, 0x48	; 72
    4e44:	91 05       	cpc	r25, r1
    4e46:	b9 f1       	breq	.+110    	; 0x4eb6 <App_Receive+0x96>
    4e48:	2a 81       	ldd	r18, Y+2	; 0x02
    4e4a:	3b 81       	ldd	r19, Y+3	; 0x03
    4e4c:	29 34       	cpi	r18, 0x49	; 73
    4e4e:	31 05       	cpc	r19, r1
    4e50:	84 f4       	brge	.+32     	; 0x4e72 <App_Receive+0x52>
    4e52:	8a 81       	ldd	r24, Y+2	; 0x02
    4e54:	9b 81       	ldd	r25, Y+3	; 0x03
    4e56:	82 34       	cpi	r24, 0x42	; 66
    4e58:	91 05       	cpc	r25, r1
    4e5a:	f1 f0       	breq	.+60     	; 0x4e98 <App_Receive+0x78>
    4e5c:	2a 81       	ldd	r18, Y+2	; 0x02
    4e5e:	3b 81       	ldd	r19, Y+3	; 0x03
    4e60:	26 34       	cpi	r18, 0x46	; 70
    4e62:	31 05       	cpc	r19, r1
    4e64:	b1 f0       	breq	.+44     	; 0x4e92 <App_Receive+0x72>
    4e66:	8a 81       	ldd	r24, Y+2	; 0x02
    4e68:	9b 81       	ldd	r25, Y+3	; 0x03
    4e6a:	81 34       	cpi	r24, 0x41	; 65
    4e6c:	91 05       	cpc	r25, r1
    4e6e:	01 f1       	breq	.+64     	; 0x4eb0 <App_Receive+0x90>
    4e70:	24 c0       	rjmp	.+72     	; 0x4eba <App_Receive+0x9a>
    4e72:	2a 81       	ldd	r18, Y+2	; 0x02
    4e74:	3b 81       	ldd	r19, Y+3	; 0x03
    4e76:	22 35       	cpi	r18, 0x52	; 82
    4e78:	31 05       	cpc	r19, r1
    4e7a:	a1 f0       	breq	.+40     	; 0x4ea4 <App_Receive+0x84>
    4e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e80:	83 35       	cpi	r24, 0x53	; 83
    4e82:	91 05       	cpc	r25, r1
    4e84:	61 f0       	breq	.+24     	; 0x4e9e <App_Receive+0x7e>
    4e86:	2a 81       	ldd	r18, Y+2	; 0x02
    4e88:	3b 81       	ldd	r19, Y+3	; 0x03
    4e8a:	2c 34       	cpi	r18, 0x4C	; 76
    4e8c:	31 05       	cpc	r19, r1
    4e8e:	69 f0       	breq	.+26     	; 0x4eaa <App_Receive+0x8a>
    4e90:	14 c0       	rjmp	.+40     	; 0x4eba <App_Receive+0x9a>
	{
	case 'F':
		Forward();  //Move forward
    4e92:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <Forward>
    4e96:	11 c0       	rjmp	.+34     	; 0x4eba <App_Receive+0x9a>
		break;
	case 'B':
		Backward();  //Move backward
    4e98:	0e 94 09 18 	call	0x3012	; 0x3012 <Backward>
    4e9c:	0e c0       	rjmp	.+28     	; 0x4eba <App_Receive+0x9a>
		break;
	case 'S':
		Stop();  //Stop movement
    4e9e:	0e 94 aa 18 	call	0x3154	; 0x3154 <Stop>
    4ea2:	0b c0       	rjmp	.+22     	; 0x4eba <App_Receive+0x9a>
		break;
	case 'R':
		Right_Forward();  //Turn right and move forward
    4ea4:	0e 94 b9 18 	call	0x3172	; 0x3172 <Right_Forward>
    4ea8:	08 c0       	rjmp	.+16     	; 0x4eba <App_Receive+0x9a>
		break;
	case 'L':
		Left_Forward();  //Turn left and move forward
    4eaa:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Left_Forward>
    4eae:	05 c0       	rjmp	.+10     	; 0x4eba <App_Receive+0x9a>
		break;
	case 'A':
		Right_Backward();  //Turn right and move backward
    4eb0:	0e 94 95 1a 	call	0x352a	; 0x352a <Right_Backward>
    4eb4:	02 c0       	rjmp	.+4      	; 0x4eba <App_Receive+0x9a>
		break;
	case 'H':
		Left_Backward(); /*Turn left and move backward*/
    4eb6:	0e 94 35 1b 	call	0x366a	; 0x366a <Left_Backward>
		break;
	case 'M':
		// DcMotor_Init(motorSpeed(UART_receiveByte()));   //Reinitialize motor with new speed
		break;
	}
}
    4eba:	0f 90       	pop	r0
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	cf 91       	pop	r28
    4ec2:	df 91       	pop	r29
    4ec4:	08 95       	ret

00004ec6 <motorSpeed>:

uint8 motorSpeed(uint8 speed)
{
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	00 d0       	rcall	.+0      	; 0x4ecc <motorSpeed+0x6>
    4ecc:	00 d0       	rcall	.+0      	; 0x4ece <motorSpeed+0x8>
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
    4ed2:	89 83       	std	Y+1, r24	; 0x01
	switch (speed)
    4ed4:	89 81       	ldd	r24, Y+1	; 0x01
    4ed6:	28 2f       	mov	r18, r24
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	3c 83       	std	Y+4, r19	; 0x04
    4edc:	2b 83       	std	Y+3, r18	; 0x03
    4ede:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee2:	82 33       	cpi	r24, 0x32	; 50
    4ee4:	91 05       	cpc	r25, r1
    4ee6:	69 f0       	breq	.+26     	; 0x4f02 <motorSpeed+0x3c>
    4ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    4eea:	3c 81       	ldd	r19, Y+4	; 0x04
    4eec:	23 33       	cpi	r18, 0x33	; 51
    4eee:	31 05       	cpc	r19, r1
    4ef0:	59 f0       	breq	.+22     	; 0x4f08 <motorSpeed+0x42>
    4ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ef6:	81 33       	cpi	r24, 0x31	; 49
    4ef8:	91 05       	cpc	r25, r1
    4efa:	49 f4       	brne	.+18     	; 0x4f0e <motorSpeed+0x48>
	{
	case '1':
		return MOTOR_SPEED_ONE;  // Speed level 1
    4efc:	96 e4       	ldi	r25, 0x46	; 70
    4efe:	9a 83       	std	Y+2, r25	; 0x02
    4f00:	08 c0       	rjmp	.+16     	; 0x4f12 <motorSpeed+0x4c>
		break;
	case '2':
		return MOTOR_SPEED_TWO;  // Speed level 2
    4f02:	25 e5       	ldi	r18, 0x55	; 85
    4f04:	2a 83       	std	Y+2, r18	; 0x02
    4f06:	05 c0       	rjmp	.+10     	; 0x4f12 <motorSpeed+0x4c>
		break;
	case '3':
		return MOTOR_MAX_SPEED;  // Speed level 3
    4f08:	34 e6       	ldi	r19, 0x64	; 100
    4f0a:	3a 83       	std	Y+2, r19	; 0x02
    4f0c:	02 c0       	rjmp	.+4      	; 0x4f12 <motorSpeed+0x4c>
		break;
	}

	return MOTOR_MAX_SPEED;  // Default speed
    4f0e:	84 e6       	ldi	r24, 0x64	; 100
    4f10:	8a 83       	std	Y+2, r24	; 0x02
    4f12:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4f14:	0f 90       	pop	r0
    4f16:	0f 90       	pop	r0
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	cf 91       	pop	r28
    4f1e:	df 91       	pop	r29
    4f20:	08 95       	ret

00004f22 <readDistance>:

void readDistance(void)
{
    4f22:	df 93       	push	r29
    4f24:	cf 93       	push	r28
    4f26:	cd b7       	in	r28, 0x3d	; 61
    4f28:	de b7       	in	r29, 0x3e	; 62
    4f2a:	aa 97       	sbiw	r28, 0x2a	; 42
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	f8 94       	cli
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	cd bf       	out	0x3d, r28	; 61
	distanceRight = Ultrasonic_readDistance(U_right);
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	0e 94 c8 14 	call	0x2990	; 0x2990 <Ultrasonic_readDistance>
    4f3c:	90 93 a6 01 	sts	0x01A6, r25
    4f40:	80 93 a5 01 	sts	0x01A5, r24

	LCD_displayStringRowColumn(0, 0, "R:");
    4f44:	20 e6       	ldi	r18, 0x60	; 96
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	60 e0       	ldi	r22, 0x00	; 0
    4f4c:	a9 01       	movw	r20, r18
    4f4e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	LCD_moveCursor(0, 2);
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	62 e0       	ldi	r22, 0x02	; 2
    4f56:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <LCD_moveCursor>
	LCD_intgerToString(distanceRight);
    4f5a:	80 91 a5 01 	lds	r24, 0x01A5
    4f5e:	90 91 a6 01 	lds	r25, 0x01A6
    4f62:	0e 94 01 26 	call	0x4c02	; 0x4c02 <LCD_intgerToString>

	if (distanceRight < 100)
    4f66:	80 91 a5 01 	lds	r24, 0x01A5
    4f6a:	90 91 a6 01 	lds	r25, 0x01A6
    4f6e:	84 36       	cpi	r24, 0x64	; 100
    4f70:	91 05       	cpc	r25, r1
    4f72:	38 f4       	brcc	.+14     	; 0x4f82 <readDistance+0x60>
	{
		LCD_displayStringRowColumn(0, 5, " ");
    4f74:	23 e6       	ldi	r18, 0x63	; 99
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	65 e0       	ldi	r22, 0x05	; 5
    4f7c:	a9 01       	movw	r20, r18
    4f7e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	}
	if (distanceRight > 100)
    4f82:	80 91 a5 01 	lds	r24, 0x01A5
    4f86:	90 91 a6 01 	lds	r25, 0x01A6
    4f8a:	85 36       	cpi	r24, 0x65	; 101
    4f8c:	91 05       	cpc	r25, r1
    4f8e:	38 f0       	brcs	.+14     	; 0x4f9e <readDistance+0x7c>
	{
		LCD_displayStringRowColumn(0, 2, "99 ");
    4f90:	25 e6       	ldi	r18, 0x65	; 101
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	80 e0       	ldi	r24, 0x00	; 0
    4f96:	62 e0       	ldi	r22, 0x02	; 2
    4f98:	a9 01       	movw	r20, r18
    4f9a:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	}
	if (distanceRight < 10)
    4f9e:	80 91 a5 01 	lds	r24, 0x01A5
    4fa2:	90 91 a6 01 	lds	r25, 0x01A6
    4fa6:	8a 30       	cpi	r24, 0x0A	; 10
    4fa8:	91 05       	cpc	r25, r1
    4faa:	38 f4       	brcc	.+14     	; 0x4fba <readDistance+0x98>
	{
		LCD_displayStringRowColumn(0, 3, " ");
    4fac:	23 e6       	ldi	r18, 0x63	; 99
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	63 e0       	ldi	r22, 0x03	; 3
    4fb4:	a9 01       	movw	r20, r18
    4fb6:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
    4fba:	80 e0       	ldi	r24, 0x00	; 0
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	a8 ec       	ldi	r26, 0xC8	; 200
    4fc0:	b2 e4       	ldi	r27, 0x42	; 66
    4fc2:	8f a3       	std	Y+39, r24	; 0x27
    4fc4:	98 a7       	std	Y+40, r25	; 0x28
    4fc6:	a9 a7       	std	Y+41, r26	; 0x29
    4fc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fca:	6f a1       	ldd	r22, Y+39	; 0x27
    4fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    4fce:	89 a5       	ldd	r24, Y+41	; 0x29
    4fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	4a e7       	ldi	r20, 0x7A	; 122
    4fd8:	55 e4       	ldi	r21, 0x45	; 69
    4fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	8b a3       	std	Y+35, r24	; 0x23
    4fe4:	9c a3       	std	Y+36, r25	; 0x24
    4fe6:	ad a3       	std	Y+37, r26	; 0x25
    4fe8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4fea:	6b a1       	ldd	r22, Y+35	; 0x23
    4fec:	7c a1       	ldd	r23, Y+36	; 0x24
    4fee:	8d a1       	ldd	r24, Y+37	; 0x25
    4ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	40 e8       	ldi	r20, 0x80	; 128
    4ff8:	5f e3       	ldi	r21, 0x3F	; 63
    4ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ffe:	88 23       	and	r24, r24
    5000:	2c f4       	brge	.+10     	; 0x500c <readDistance+0xea>
		__ticks = 1;
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	9a a3       	std	Y+34, r25	; 0x22
    5008:	89 a3       	std	Y+33, r24	; 0x21
    500a:	3f c0       	rjmp	.+126    	; 0x508a <readDistance+0x168>
	else if (__tmp > 65535)
    500c:	6b a1       	ldd	r22, Y+35	; 0x23
    500e:	7c a1       	ldd	r23, Y+36	; 0x24
    5010:	8d a1       	ldd	r24, Y+37	; 0x25
    5012:	9e a1       	ldd	r25, Y+38	; 0x26
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	3f ef       	ldi	r19, 0xFF	; 255
    5018:	4f e7       	ldi	r20, 0x7F	; 127
    501a:	57 e4       	ldi	r21, 0x47	; 71
    501c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5020:	18 16       	cp	r1, r24
    5022:	4c f5       	brge	.+82     	; 0x5076 <readDistance+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5024:	6f a1       	ldd	r22, Y+39	; 0x27
    5026:	78 a5       	ldd	r23, Y+40	; 0x28
    5028:	89 a5       	ldd	r24, Y+41	; 0x29
    502a:	9a a5       	ldd	r25, Y+42	; 0x2a
    502c:	20 e0       	ldi	r18, 0x00	; 0
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	40 e2       	ldi	r20, 0x20	; 32
    5032:	51 e4       	ldi	r21, 0x41	; 65
    5034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5038:	dc 01       	movw	r26, r24
    503a:	cb 01       	movw	r24, r22
    503c:	bc 01       	movw	r22, r24
    503e:	cd 01       	movw	r24, r26
    5040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	9a a3       	std	Y+34, r25	; 0x22
    504a:	89 a3       	std	Y+33, r24	; 0x21
    504c:	0f c0       	rjmp	.+30     	; 0x506c <readDistance+0x14a>
    504e:	80 e9       	ldi	r24, 0x90	; 144
    5050:	91 e0       	ldi	r25, 0x01	; 1
    5052:	98 a3       	std	Y+32, r25	; 0x20
    5054:	8f 8f       	std	Y+31, r24	; 0x1f
    5056:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5058:	98 a1       	ldd	r25, Y+32	; 0x20
    505a:	01 97       	sbiw	r24, 0x01	; 1
    505c:	f1 f7       	brne	.-4      	; 0x505a <readDistance+0x138>
    505e:	98 a3       	std	Y+32, r25	; 0x20
    5060:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5062:	89 a1       	ldd	r24, Y+33	; 0x21
    5064:	9a a1       	ldd	r25, Y+34	; 0x22
    5066:	01 97       	sbiw	r24, 0x01	; 1
    5068:	9a a3       	std	Y+34, r25	; 0x22
    506a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    506c:	89 a1       	ldd	r24, Y+33	; 0x21
    506e:	9a a1       	ldd	r25, Y+34	; 0x22
    5070:	00 97       	sbiw	r24, 0x00	; 0
    5072:	69 f7       	brne	.-38     	; 0x504e <readDistance+0x12c>
    5074:	14 c0       	rjmp	.+40     	; 0x509e <readDistance+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5076:	6b a1       	ldd	r22, Y+35	; 0x23
    5078:	7c a1       	ldd	r23, Y+36	; 0x24
    507a:	8d a1       	ldd	r24, Y+37	; 0x25
    507c:	9e a1       	ldd	r25, Y+38	; 0x26
    507e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	9a a3       	std	Y+34, r25	; 0x22
    5088:	89 a3       	std	Y+33, r24	; 0x21
    508a:	89 a1       	ldd	r24, Y+33	; 0x21
    508c:	9a a1       	ldd	r25, Y+34	; 0x22
    508e:	9e 8f       	std	Y+30, r25	; 0x1e
    5090:	8d 8f       	std	Y+29, r24	; 0x1d
    5092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5094:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5096:	01 97       	sbiw	r24, 0x01	; 1
    5098:	f1 f7       	brne	.-4      	; 0x5096 <readDistance+0x174>
    509a:	9e 8f       	std	Y+30, r25	; 0x1e
    509c:	8d 8f       	std	Y+29, r24	; 0x1d
	}

	_delay_ms(100);

	distanceForward = Ultrasonic_readDistance(U_forward);
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	0e 94 c8 14 	call	0x2990	; 0x2990 <Ultrasonic_readDistance>
    50a4:	90 93 a8 01 	sts	0x01A8, r25
    50a8:	80 93 a7 01 	sts	0x01A7, r24

	LCD_displayStringRowColumn(1, 0, "F:");
    50ac:	29 e6       	ldi	r18, 0x69	; 105
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	60 e0       	ldi	r22, 0x00	; 0
    50b4:	a9 01       	movw	r20, r18
    50b6:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 2);
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	62 e0       	ldi	r22, 0x02	; 2
    50be:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <LCD_moveCursor>
	LCD_intgerToString(distanceForward);
    50c2:	80 91 a7 01 	lds	r24, 0x01A7
    50c6:	90 91 a8 01 	lds	r25, 0x01A8
    50ca:	0e 94 01 26 	call	0x4c02	; 0x4c02 <LCD_intgerToString>

	if (distanceForward < 100)
    50ce:	80 91 a7 01 	lds	r24, 0x01A7
    50d2:	90 91 a8 01 	lds	r25, 0x01A8
    50d6:	84 36       	cpi	r24, 0x64	; 100
    50d8:	91 05       	cpc	r25, r1
    50da:	38 f4       	brcc	.+14     	; 0x50ea <readDistance+0x1c8>
	{
		LCD_displayStringRowColumn(1, 5, " ");
    50dc:	23 e6       	ldi	r18, 0x63	; 99
    50de:	30 e0       	ldi	r19, 0x00	; 0
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	65 e0       	ldi	r22, 0x05	; 5
    50e4:	a9 01       	movw	r20, r18
    50e6:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	}
	if (distanceForward > 100)
    50ea:	80 91 a7 01 	lds	r24, 0x01A7
    50ee:	90 91 a8 01 	lds	r25, 0x01A8
    50f2:	85 36       	cpi	r24, 0x65	; 101
    50f4:	91 05       	cpc	r25, r1
    50f6:	38 f0       	brcs	.+14     	; 0x5106 <readDistance+0x1e4>
	{
		LCD_displayStringRowColumn(1, 2, "99 ");
    50f8:	25 e6       	ldi	r18, 0x65	; 101
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	62 e0       	ldi	r22, 0x02	; 2
    5100:	a9 01       	movw	r20, r18
    5102:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	}
	if (distanceForward < 10)
    5106:	80 91 a7 01 	lds	r24, 0x01A7
    510a:	90 91 a8 01 	lds	r25, 0x01A8
    510e:	8a 30       	cpi	r24, 0x0A	; 10
    5110:	91 05       	cpc	r25, r1
    5112:	38 f4       	brcc	.+14     	; 0x5122 <readDistance+0x200>
	{
		LCD_displayStringRowColumn(1, 3, " ");
    5114:	23 e6       	ldi	r18, 0x63	; 99
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	63 e0       	ldi	r22, 0x03	; 3
    511c:	a9 01       	movw	r20, r18
    511e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	a8 ec       	ldi	r26, 0xC8	; 200
    5128:	b2 e4       	ldi	r27, 0x42	; 66
    512a:	89 8f       	std	Y+25, r24	; 0x19
    512c:	9a 8f       	std	Y+26, r25	; 0x1a
    512e:	ab 8f       	std	Y+27, r26	; 0x1b
    5130:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5132:	69 8d       	ldd	r22, Y+25	; 0x19
    5134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	4a e7       	ldi	r20, 0x7A	; 122
    5140:	55 e4       	ldi	r21, 0x45	; 69
    5142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	8d 8b       	std	Y+21, r24	; 0x15
    514c:	9e 8b       	std	Y+22, r25	; 0x16
    514e:	af 8b       	std	Y+23, r26	; 0x17
    5150:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5152:	6d 89       	ldd	r22, Y+21	; 0x15
    5154:	7e 89       	ldd	r23, Y+22	; 0x16
    5156:	8f 89       	ldd	r24, Y+23	; 0x17
    5158:	98 8d       	ldd	r25, Y+24	; 0x18
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	40 e8       	ldi	r20, 0x80	; 128
    5160:	5f e3       	ldi	r21, 0x3F	; 63
    5162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5166:	88 23       	and	r24, r24
    5168:	2c f4       	brge	.+10     	; 0x5174 <readDistance+0x252>
		__ticks = 1;
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	9c 8b       	std	Y+20, r25	; 0x14
    5170:	8b 8b       	std	Y+19, r24	; 0x13
    5172:	3f c0       	rjmp	.+126    	; 0x51f2 <readDistance+0x2d0>
	else if (__tmp > 65535)
    5174:	6d 89       	ldd	r22, Y+21	; 0x15
    5176:	7e 89       	ldd	r23, Y+22	; 0x16
    5178:	8f 89       	ldd	r24, Y+23	; 0x17
    517a:	98 8d       	ldd	r25, Y+24	; 0x18
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	3f ef       	ldi	r19, 0xFF	; 255
    5180:	4f e7       	ldi	r20, 0x7F	; 127
    5182:	57 e4       	ldi	r21, 0x47	; 71
    5184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5188:	18 16       	cp	r1, r24
    518a:	4c f5       	brge	.+82     	; 0x51de <readDistance+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    518c:	69 8d       	ldd	r22, Y+25	; 0x19
    518e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	40 e2       	ldi	r20, 0x20	; 32
    519a:	51 e4       	ldi	r21, 0x41	; 65
    519c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a0:	dc 01       	movw	r26, r24
    51a2:	cb 01       	movw	r24, r22
    51a4:	bc 01       	movw	r22, r24
    51a6:	cd 01       	movw	r24, r26
    51a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ac:	dc 01       	movw	r26, r24
    51ae:	cb 01       	movw	r24, r22
    51b0:	9c 8b       	std	Y+20, r25	; 0x14
    51b2:	8b 8b       	std	Y+19, r24	; 0x13
    51b4:	0f c0       	rjmp	.+30     	; 0x51d4 <readDistance+0x2b2>
    51b6:	80 e9       	ldi	r24, 0x90	; 144
    51b8:	91 e0       	ldi	r25, 0x01	; 1
    51ba:	9a 8b       	std	Y+18, r25	; 0x12
    51bc:	89 8b       	std	Y+17, r24	; 0x11
    51be:	89 89       	ldd	r24, Y+17	; 0x11
    51c0:	9a 89       	ldd	r25, Y+18	; 0x12
    51c2:	01 97       	sbiw	r24, 0x01	; 1
    51c4:	f1 f7       	brne	.-4      	; 0x51c2 <readDistance+0x2a0>
    51c6:	9a 8b       	std	Y+18, r25	; 0x12
    51c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ca:	8b 89       	ldd	r24, Y+19	; 0x13
    51cc:	9c 89       	ldd	r25, Y+20	; 0x14
    51ce:	01 97       	sbiw	r24, 0x01	; 1
    51d0:	9c 8b       	std	Y+20, r25	; 0x14
    51d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d4:	8b 89       	ldd	r24, Y+19	; 0x13
    51d6:	9c 89       	ldd	r25, Y+20	; 0x14
    51d8:	00 97       	sbiw	r24, 0x00	; 0
    51da:	69 f7       	brne	.-38     	; 0x51b6 <readDistance+0x294>
    51dc:	14 c0       	rjmp	.+40     	; 0x5206 <readDistance+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51de:	6d 89       	ldd	r22, Y+21	; 0x15
    51e0:	7e 89       	ldd	r23, Y+22	; 0x16
    51e2:	8f 89       	ldd	r24, Y+23	; 0x17
    51e4:	98 8d       	ldd	r25, Y+24	; 0x18
    51e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	9c 8b       	std	Y+20, r25	; 0x14
    51f0:	8b 8b       	std	Y+19, r24	; 0x13
    51f2:	8b 89       	ldd	r24, Y+19	; 0x13
    51f4:	9c 89       	ldd	r25, Y+20	; 0x14
    51f6:	98 8b       	std	Y+16, r25	; 0x10
    51f8:	8f 87       	std	Y+15, r24	; 0x0f
    51fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    51fc:	98 89       	ldd	r25, Y+16	; 0x10
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	f1 f7       	brne	.-4      	; 0x51fe <readDistance+0x2dc>
    5202:	98 8b       	std	Y+16, r25	; 0x10
    5204:	8f 87       	std	Y+15, r24	; 0x0f
	}

	_delay_ms(100);

	distanceBackward = Ultrasonic_readDistance(U_backward);
    5206:	82 e0       	ldi	r24, 0x02	; 2
    5208:	0e 94 c8 14 	call	0x2990	; 0x2990 <Ultrasonic_readDistance>
    520c:	90 93 aa 01 	sts	0x01AA, r25
    5210:	80 93 a9 01 	sts	0x01A9, r24

	LCD_displayStringRowColumn(1, 6, "B:");
    5214:	2c e6       	ldi	r18, 0x6C	; 108
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	66 e0       	ldi	r22, 0x06	; 6
    521c:	a9 01       	movw	r20, r18
    521e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 9);
    5222:	81 e0       	ldi	r24, 0x01	; 1
    5224:	69 e0       	ldi	r22, 0x09	; 9
    5226:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <LCD_moveCursor>
	LCD_intgerToString(distanceBackward);
    522a:	80 91 a9 01 	lds	r24, 0x01A9
    522e:	90 91 aa 01 	lds	r25, 0x01AA
    5232:	0e 94 01 26 	call	0x4c02	; 0x4c02 <LCD_intgerToString>

	if (distanceBackward < 100)
    5236:	80 91 a9 01 	lds	r24, 0x01A9
    523a:	90 91 aa 01 	lds	r25, 0x01AA
    523e:	84 36       	cpi	r24, 0x64	; 100
    5240:	91 05       	cpc	r25, r1
    5242:	38 f4       	brcc	.+14     	; 0x5252 <readDistance+0x330>
	{
		LCD_displayStringRowColumn(1, 12, " ");
    5244:	23 e6       	ldi	r18, 0x63	; 99
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	81 e0       	ldi	r24, 0x01	; 1
    524a:	6c e0       	ldi	r22, 0x0C	; 12
    524c:	a9 01       	movw	r20, r18
    524e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	}
	if (distanceBackward > 100)
    5252:	80 91 a9 01 	lds	r24, 0x01A9
    5256:	90 91 aa 01 	lds	r25, 0x01AA
    525a:	85 36       	cpi	r24, 0x65	; 101
    525c:	91 05       	cpc	r25, r1
    525e:	38 f0       	brcs	.+14     	; 0x526e <readDistance+0x34c>
	{
		LCD_displayStringRowColumn(1, 9, "99 ");
    5260:	25 e6       	ldi	r18, 0x65	; 101
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	69 e0       	ldi	r22, 0x09	; 9
    5268:	a9 01       	movw	r20, r18
    526a:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
	}
	if (distanceBackward < 10)
    526e:	80 91 a9 01 	lds	r24, 0x01A9
    5272:	90 91 aa 01 	lds	r25, 0x01AA
    5276:	8a 30       	cpi	r24, 0x0A	; 10
    5278:	91 05       	cpc	r25, r1
    527a:	38 f4       	brcc	.+14     	; 0x528a <readDistance+0x368>
	{
		LCD_displayStringRowColumn(1, 10, " ");
    527c:	23 e6       	ldi	r18, 0x63	; 99
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	6a e0       	ldi	r22, 0x0A	; 10
    5284:	a9 01       	movw	r20, r18
    5286:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <LCD_displayStringRowColumn>
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	a8 ec       	ldi	r26, 0xC8	; 200
    5290:	b2 e4       	ldi	r27, 0x42	; 66
    5292:	8b 87       	std	Y+11, r24	; 0x0b
    5294:	9c 87       	std	Y+12, r25	; 0x0c
    5296:	ad 87       	std	Y+13, r26	; 0x0d
    5298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    529a:	6b 85       	ldd	r22, Y+11	; 0x0b
    529c:	7c 85       	ldd	r23, Y+12	; 0x0c
    529e:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	4a e7       	ldi	r20, 0x7A	; 122
    52a8:	55 e4       	ldi	r21, 0x45	; 69
    52aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ae:	dc 01       	movw	r26, r24
    52b0:	cb 01       	movw	r24, r22
    52b2:	8f 83       	std	Y+7, r24	; 0x07
    52b4:	98 87       	std	Y+8, r25	; 0x08
    52b6:	a9 87       	std	Y+9, r26	; 0x09
    52b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52ba:	6f 81       	ldd	r22, Y+7	; 0x07
    52bc:	78 85       	ldd	r23, Y+8	; 0x08
    52be:	89 85       	ldd	r24, Y+9	; 0x09
    52c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c2:	20 e0       	ldi	r18, 0x00	; 0
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	40 e8       	ldi	r20, 0x80	; 128
    52c8:	5f e3       	ldi	r21, 0x3F	; 63
    52ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ce:	88 23       	and	r24, r24
    52d0:	2c f4       	brge	.+10     	; 0x52dc <readDistance+0x3ba>
		__ticks = 1;
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	9e 83       	std	Y+6, r25	; 0x06
    52d8:	8d 83       	std	Y+5, r24	; 0x05
    52da:	3f c0       	rjmp	.+126    	; 0x535a <readDistance+0x438>
	else if (__tmp > 65535)
    52dc:	6f 81       	ldd	r22, Y+7	; 0x07
    52de:	78 85       	ldd	r23, Y+8	; 0x08
    52e0:	89 85       	ldd	r24, Y+9	; 0x09
    52e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e4:	20 e0       	ldi	r18, 0x00	; 0
    52e6:	3f ef       	ldi	r19, 0xFF	; 255
    52e8:	4f e7       	ldi	r20, 0x7F	; 127
    52ea:	57 e4       	ldi	r21, 0x47	; 71
    52ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52f0:	18 16       	cp	r1, r24
    52f2:	4c f5       	brge	.+82     	; 0x5346 <readDistance+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    52fc:	20 e0       	ldi	r18, 0x00	; 0
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	40 e2       	ldi	r20, 0x20	; 32
    5302:	51 e4       	ldi	r21, 0x41	; 65
    5304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5308:	dc 01       	movw	r26, r24
    530a:	cb 01       	movw	r24, r22
    530c:	bc 01       	movw	r22, r24
    530e:	cd 01       	movw	r24, r26
    5310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5314:	dc 01       	movw	r26, r24
    5316:	cb 01       	movw	r24, r22
    5318:	9e 83       	std	Y+6, r25	; 0x06
    531a:	8d 83       	std	Y+5, r24	; 0x05
    531c:	0f c0       	rjmp	.+30     	; 0x533c <readDistance+0x41a>
    531e:	80 e9       	ldi	r24, 0x90	; 144
    5320:	91 e0       	ldi	r25, 0x01	; 1
    5322:	9c 83       	std	Y+4, r25	; 0x04
    5324:	8b 83       	std	Y+3, r24	; 0x03
    5326:	8b 81       	ldd	r24, Y+3	; 0x03
    5328:	9c 81       	ldd	r25, Y+4	; 0x04
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	f1 f7       	brne	.-4      	; 0x532a <readDistance+0x408>
    532e:	9c 83       	std	Y+4, r25	; 0x04
    5330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5332:	8d 81       	ldd	r24, Y+5	; 0x05
    5334:	9e 81       	ldd	r25, Y+6	; 0x06
    5336:	01 97       	sbiw	r24, 0x01	; 1
    5338:	9e 83       	std	Y+6, r25	; 0x06
    533a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    533c:	8d 81       	ldd	r24, Y+5	; 0x05
    533e:	9e 81       	ldd	r25, Y+6	; 0x06
    5340:	00 97       	sbiw	r24, 0x00	; 0
    5342:	69 f7       	brne	.-38     	; 0x531e <readDistance+0x3fc>
    5344:	14 c0       	rjmp	.+40     	; 0x536e <readDistance+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5346:	6f 81       	ldd	r22, Y+7	; 0x07
    5348:	78 85       	ldd	r23, Y+8	; 0x08
    534a:	89 85       	ldd	r24, Y+9	; 0x09
    534c:	9a 85       	ldd	r25, Y+10	; 0x0a
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	8d 81       	ldd	r24, Y+5	; 0x05
    535c:	9e 81       	ldd	r25, Y+6	; 0x06
    535e:	9a 83       	std	Y+2, r25	; 0x02
    5360:	89 83       	std	Y+1, r24	; 0x01
    5362:	89 81       	ldd	r24, Y+1	; 0x01
    5364:	9a 81       	ldd	r25, Y+2	; 0x02
    5366:	01 97       	sbiw	r24, 0x01	; 1
    5368:	f1 f7       	brne	.-4      	; 0x5366 <readDistance+0x444>
    536a:	9a 83       	std	Y+2, r25	; 0x02
    536c:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(100);
}
    536e:	aa 96       	adiw	r28, 0x2a	; 42
    5370:	0f b6       	in	r0, 0x3f	; 63
    5372:	f8 94       	cli
    5374:	de bf       	out	0x3e, r29	; 62
    5376:	0f be       	out	0x3f, r0	; 63
    5378:	cd bf       	out	0x3d, r28	; 61
    537a:	cf 91       	pop	r28
    537c:	df 91       	pop	r29
    537e:	08 95       	ret

00005380 <collisionAvoidance>:

void collisionAvoidance(void)
{
    5380:	df 93       	push	r29
    5382:	cf 93       	push	r28
    5384:	cd b7       	in	r28, 0x3d	; 61
    5386:	de b7       	in	r29, 0x3e	; 62
	if(distanceForward <= 20 && (selection == 'F' || selection == 'R' || selection == 'L'))
    5388:	80 91 a7 01 	lds	r24, 0x01A7
    538c:	90 91 a8 01 	lds	r25, 0x01A8
    5390:	85 31       	cpi	r24, 0x15	; 21
    5392:	91 05       	cpc	r25, r1
    5394:	d0 f4       	brcc	.+52     	; 0x53ca <collisionAvoidance+0x4a>
    5396:	80 91 ab 01 	lds	r24, 0x01AB
    539a:	86 34       	cpi	r24, 0x46	; 70
    539c:	41 f0       	breq	.+16     	; 0x53ae <collisionAvoidance+0x2e>
    539e:	80 91 ab 01 	lds	r24, 0x01AB
    53a2:	82 35       	cpi	r24, 0x52	; 82
    53a4:	21 f0       	breq	.+8      	; 0x53ae <collisionAvoidance+0x2e>
    53a6:	80 91 ab 01 	lds	r24, 0x01AB
    53aa:	8c 34       	cpi	r24, 0x4C	; 76
    53ac:	71 f4       	brne	.+28     	; 0x53ca <collisionAvoidance+0x4a>
	{
		Buzzer_on();
    53ae:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <Buzzer_on>
		if (distanceForward <= 8)
    53b2:	80 91 a7 01 	lds	r24, 0x01A7
    53b6:	90 91 a8 01 	lds	r25, 0x01A8
    53ba:	89 30       	cpi	r24, 0x09	; 9
    53bc:	91 05       	cpc	r25, r1
    53be:	70 f4       	brcc	.+28     	; 0x53dc <collisionAvoidance+0x5c>
		{
			Stop();
    53c0:	0e 94 aa 18 	call	0x3154	; 0x3154 <Stop>
			Buzzer_off();
    53c4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <Buzzer_off>
    53c8:	09 c0       	rjmp	.+18     	; 0x53dc <collisionAvoidance+0x5c>
		}
	}
	else if(distanceForward >= 20)
    53ca:	80 91 a7 01 	lds	r24, 0x01A7
    53ce:	90 91 a8 01 	lds	r25, 0x01A8
    53d2:	84 31       	cpi	r24, 0x14	; 20
    53d4:	91 05       	cpc	r25, r1
    53d6:	10 f0       	brcs	.+4      	; 0x53dc <collisionAvoidance+0x5c>
	{
		Buzzer_off();
    53d8:	0e 94 48 26 	call	0x4c90	; 0x4c90 <Buzzer_off>
	}

	if(distanceBackward <= 20 && (selection == 'B' || selection == 'A' || selection == 'H'))
    53dc:	80 91 a9 01 	lds	r24, 0x01A9
    53e0:	90 91 aa 01 	lds	r25, 0x01AA
    53e4:	85 31       	cpi	r24, 0x15	; 21
    53e6:	91 05       	cpc	r25, r1
    53e8:	d0 f4       	brcc	.+52     	; 0x541e <collisionAvoidance+0x9e>
    53ea:	80 91 ab 01 	lds	r24, 0x01AB
    53ee:	82 34       	cpi	r24, 0x42	; 66
    53f0:	41 f0       	breq	.+16     	; 0x5402 <collisionAvoidance+0x82>
    53f2:	80 91 ab 01 	lds	r24, 0x01AB
    53f6:	81 34       	cpi	r24, 0x41	; 65
    53f8:	21 f0       	breq	.+8      	; 0x5402 <collisionAvoidance+0x82>
    53fa:	80 91 ab 01 	lds	r24, 0x01AB
    53fe:	88 34       	cpi	r24, 0x48	; 72
    5400:	71 f4       	brne	.+28     	; 0x541e <collisionAvoidance+0x9e>
	{
		Buzzer_on();
    5402:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <Buzzer_on>
		if (distanceBackward <= 8)
    5406:	80 91 a9 01 	lds	r24, 0x01A9
    540a:	90 91 aa 01 	lds	r25, 0x01AA
    540e:	89 30       	cpi	r24, 0x09	; 9
    5410:	91 05       	cpc	r25, r1
    5412:	70 f4       	brcc	.+28     	; 0x5430 <collisionAvoidance+0xb0>
		{
			Stop();
    5414:	0e 94 aa 18 	call	0x3154	; 0x3154 <Stop>
			Buzzer_off();
    5418:	0e 94 48 26 	call	0x4c90	; 0x4c90 <Buzzer_off>
    541c:	09 c0       	rjmp	.+18     	; 0x5430 <collisionAvoidance+0xb0>
		}
	}
	else if(distanceBackward >= 20)
    541e:	80 91 a9 01 	lds	r24, 0x01A9
    5422:	90 91 aa 01 	lds	r25, 0x01AA
    5426:	84 31       	cpi	r24, 0x14	; 20
    5428:	91 05       	cpc	r25, r1
    542a:	10 f0       	brcs	.+4      	; 0x5430 <collisionAvoidance+0xb0>
	{
		Buzzer_off();
    542c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <Buzzer_off>
	}
}
    5430:	cf 91       	pop	r28
    5432:	df 91       	pop	r29
    5434:	08 95       	ret

00005436 <__divmodhi4>:
    5436:	97 fb       	bst	r25, 7
    5438:	09 2e       	mov	r0, r25
    543a:	07 26       	eor	r0, r23
    543c:	0a d0       	rcall	.+20     	; 0x5452 <__divmodhi4_neg1>
    543e:	77 fd       	sbrc	r23, 7
    5440:	04 d0       	rcall	.+8      	; 0x544a <__divmodhi4_neg2>
    5442:	2e d0       	rcall	.+92     	; 0x54a0 <__udivmodhi4>
    5444:	06 d0       	rcall	.+12     	; 0x5452 <__divmodhi4_neg1>
    5446:	00 20       	and	r0, r0
    5448:	1a f4       	brpl	.+6      	; 0x5450 <__divmodhi4_exit>

0000544a <__divmodhi4_neg2>:
    544a:	70 95       	com	r23
    544c:	61 95       	neg	r22
    544e:	7f 4f       	sbci	r23, 0xFF	; 255

00005450 <__divmodhi4_exit>:
    5450:	08 95       	ret

00005452 <__divmodhi4_neg1>:
    5452:	f6 f7       	brtc	.-4      	; 0x5450 <__divmodhi4_exit>
    5454:	90 95       	com	r25
    5456:	81 95       	neg	r24
    5458:	9f 4f       	sbci	r25, 0xFF	; 255
    545a:	08 95       	ret

0000545c <__udivmodsi4>:
    545c:	a1 e2       	ldi	r26, 0x21	; 33
    545e:	1a 2e       	mov	r1, r26
    5460:	aa 1b       	sub	r26, r26
    5462:	bb 1b       	sub	r27, r27
    5464:	fd 01       	movw	r30, r26
    5466:	0d c0       	rjmp	.+26     	; 0x5482 <__udivmodsi4_ep>

00005468 <__udivmodsi4_loop>:
    5468:	aa 1f       	adc	r26, r26
    546a:	bb 1f       	adc	r27, r27
    546c:	ee 1f       	adc	r30, r30
    546e:	ff 1f       	adc	r31, r31
    5470:	a2 17       	cp	r26, r18
    5472:	b3 07       	cpc	r27, r19
    5474:	e4 07       	cpc	r30, r20
    5476:	f5 07       	cpc	r31, r21
    5478:	20 f0       	brcs	.+8      	; 0x5482 <__udivmodsi4_ep>
    547a:	a2 1b       	sub	r26, r18
    547c:	b3 0b       	sbc	r27, r19
    547e:	e4 0b       	sbc	r30, r20
    5480:	f5 0b       	sbc	r31, r21

00005482 <__udivmodsi4_ep>:
    5482:	66 1f       	adc	r22, r22
    5484:	77 1f       	adc	r23, r23
    5486:	88 1f       	adc	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	1a 94       	dec	r1
    548c:	69 f7       	brne	.-38     	; 0x5468 <__udivmodsi4_loop>
    548e:	60 95       	com	r22
    5490:	70 95       	com	r23
    5492:	80 95       	com	r24
    5494:	90 95       	com	r25
    5496:	9b 01       	movw	r18, r22
    5498:	ac 01       	movw	r20, r24
    549a:	bd 01       	movw	r22, r26
    549c:	cf 01       	movw	r24, r30
    549e:	08 95       	ret

000054a0 <__udivmodhi4>:
    54a0:	aa 1b       	sub	r26, r26
    54a2:	bb 1b       	sub	r27, r27
    54a4:	51 e1       	ldi	r21, 0x11	; 17
    54a6:	07 c0       	rjmp	.+14     	; 0x54b6 <__udivmodhi4_ep>

000054a8 <__udivmodhi4_loop>:
    54a8:	aa 1f       	adc	r26, r26
    54aa:	bb 1f       	adc	r27, r27
    54ac:	a6 17       	cp	r26, r22
    54ae:	b7 07       	cpc	r27, r23
    54b0:	10 f0       	brcs	.+4      	; 0x54b6 <__udivmodhi4_ep>
    54b2:	a6 1b       	sub	r26, r22
    54b4:	b7 0b       	sbc	r27, r23

000054b6 <__udivmodhi4_ep>:
    54b6:	88 1f       	adc	r24, r24
    54b8:	99 1f       	adc	r25, r25
    54ba:	5a 95       	dec	r21
    54bc:	a9 f7       	brne	.-22     	; 0x54a8 <__udivmodhi4_loop>
    54be:	80 95       	com	r24
    54c0:	90 95       	com	r25
    54c2:	bc 01       	movw	r22, r24
    54c4:	cd 01       	movw	r24, r26
    54c6:	08 95       	ret

000054c8 <__prologue_saves__>:
    54c8:	2f 92       	push	r2
    54ca:	3f 92       	push	r3
    54cc:	4f 92       	push	r4
    54ce:	5f 92       	push	r5
    54d0:	6f 92       	push	r6
    54d2:	7f 92       	push	r7
    54d4:	8f 92       	push	r8
    54d6:	9f 92       	push	r9
    54d8:	af 92       	push	r10
    54da:	bf 92       	push	r11
    54dc:	cf 92       	push	r12
    54de:	df 92       	push	r13
    54e0:	ef 92       	push	r14
    54e2:	ff 92       	push	r15
    54e4:	0f 93       	push	r16
    54e6:	1f 93       	push	r17
    54e8:	cf 93       	push	r28
    54ea:	df 93       	push	r29
    54ec:	cd b7       	in	r28, 0x3d	; 61
    54ee:	de b7       	in	r29, 0x3e	; 62
    54f0:	ca 1b       	sub	r28, r26
    54f2:	db 0b       	sbc	r29, r27
    54f4:	0f b6       	in	r0, 0x3f	; 63
    54f6:	f8 94       	cli
    54f8:	de bf       	out	0x3e, r29	; 62
    54fa:	0f be       	out	0x3f, r0	; 63
    54fc:	cd bf       	out	0x3d, r28	; 61
    54fe:	09 94       	ijmp

00005500 <__epilogue_restores__>:
    5500:	2a 88       	ldd	r2, Y+18	; 0x12
    5502:	39 88       	ldd	r3, Y+17	; 0x11
    5504:	48 88       	ldd	r4, Y+16	; 0x10
    5506:	5f 84       	ldd	r5, Y+15	; 0x0f
    5508:	6e 84       	ldd	r6, Y+14	; 0x0e
    550a:	7d 84       	ldd	r7, Y+13	; 0x0d
    550c:	8c 84       	ldd	r8, Y+12	; 0x0c
    550e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5510:	aa 84       	ldd	r10, Y+10	; 0x0a
    5512:	b9 84       	ldd	r11, Y+9	; 0x09
    5514:	c8 84       	ldd	r12, Y+8	; 0x08
    5516:	df 80       	ldd	r13, Y+7	; 0x07
    5518:	ee 80       	ldd	r14, Y+6	; 0x06
    551a:	fd 80       	ldd	r15, Y+5	; 0x05
    551c:	0c 81       	ldd	r16, Y+4	; 0x04
    551e:	1b 81       	ldd	r17, Y+3	; 0x03
    5520:	aa 81       	ldd	r26, Y+2	; 0x02
    5522:	b9 81       	ldd	r27, Y+1	; 0x01
    5524:	ce 0f       	add	r28, r30
    5526:	d1 1d       	adc	r29, r1
    5528:	0f b6       	in	r0, 0x3f	; 63
    552a:	f8 94       	cli
    552c:	de bf       	out	0x3e, r29	; 62
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	cd bf       	out	0x3d, r28	; 61
    5532:	ed 01       	movw	r28, r26
    5534:	08 95       	ret

00005536 <itoa>:
    5536:	fb 01       	movw	r30, r22
    5538:	9f 01       	movw	r18, r30
    553a:	e8 94       	clt
    553c:	42 30       	cpi	r20, 0x02	; 2
    553e:	c4 f0       	brlt	.+48     	; 0x5570 <itoa+0x3a>
    5540:	45 32       	cpi	r20, 0x25	; 37
    5542:	b4 f4       	brge	.+44     	; 0x5570 <itoa+0x3a>
    5544:	4a 30       	cpi	r20, 0x0A	; 10
    5546:	29 f4       	brne	.+10     	; 0x5552 <itoa+0x1c>
    5548:	97 fb       	bst	r25, 7
    554a:	1e f4       	brtc	.+6      	; 0x5552 <itoa+0x1c>
    554c:	90 95       	com	r25
    554e:	81 95       	neg	r24
    5550:	9f 4f       	sbci	r25, 0xFF	; 255
    5552:	64 2f       	mov	r22, r20
    5554:	77 27       	eor	r23, r23
    5556:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <__udivmodhi4>
    555a:	80 5d       	subi	r24, 0xD0	; 208
    555c:	8a 33       	cpi	r24, 0x3A	; 58
    555e:	0c f0       	brlt	.+2      	; 0x5562 <itoa+0x2c>
    5560:	89 5d       	subi	r24, 0xD9	; 217
    5562:	81 93       	st	Z+, r24
    5564:	cb 01       	movw	r24, r22
    5566:	00 97       	sbiw	r24, 0x00	; 0
    5568:	a1 f7       	brne	.-24     	; 0x5552 <itoa+0x1c>
    556a:	16 f4       	brtc	.+4      	; 0x5570 <itoa+0x3a>
    556c:	5d e2       	ldi	r21, 0x2D	; 45
    556e:	51 93       	st	Z+, r21
    5570:	10 82       	st	Z, r1
    5572:	c9 01       	movw	r24, r18
    5574:	0c 94 bc 2a 	jmp	0x5578	; 0x5578 <strrev>

00005578 <strrev>:
    5578:	dc 01       	movw	r26, r24
    557a:	fc 01       	movw	r30, r24
    557c:	67 2f       	mov	r22, r23
    557e:	71 91       	ld	r23, Z+
    5580:	77 23       	and	r23, r23
    5582:	e1 f7       	brne	.-8      	; 0x557c <strrev+0x4>
    5584:	32 97       	sbiw	r30, 0x02	; 2
    5586:	04 c0       	rjmp	.+8      	; 0x5590 <strrev+0x18>
    5588:	7c 91       	ld	r23, X
    558a:	6d 93       	st	X+, r22
    558c:	70 83       	st	Z, r23
    558e:	62 91       	ld	r22, -Z
    5590:	ae 17       	cp	r26, r30
    5592:	bf 07       	cpc	r27, r31
    5594:	c8 f3       	brcs	.-14     	; 0x5588 <strrev+0x10>
    5596:	08 95       	ret

00005598 <_exit>:
    5598:	f8 94       	cli

0000559a <__stop_program>:
    559a:	ff cf       	rjmp	.-2      	; 0x559a <__stop_program>
