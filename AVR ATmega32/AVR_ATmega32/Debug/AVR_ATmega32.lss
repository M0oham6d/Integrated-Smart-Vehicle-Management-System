
AVR_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  00005b8e  00005c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001c8  008001c8  00005d8a  2**0
                  ALLOC
  3 .stab         00005874  00000000  00000000  00005d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002971  00000000  00000000  0000b600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000df71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013122  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__vector_1>
       8:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__vector_2>
       c:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 20 	call	0x412c	; 0x412c <main>
      8a:	0c 94 c5 2d 	jmp	0x5b8a	; 0x5b8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 2d 	jmp	0x5aba	; 0x5aba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 eb       	ldi	r26, 0xB9	; 185
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 2d 	jmp	0x5af2	; 0x5af2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 2d 	jmp	0x5ad2	; 0x5ad2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 2d 	jmp	0x5ad2	; 0x5ad2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 2d 	jmp	0x5aba	; 0x5aba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 eb       	ldi	r24, 0xB9	; 185
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 2d 	jmp	0x5af2	; 0x5af2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 2d 	jmp	0x5aca	; 0x5aca <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 eb       	ldi	r22, 0xB9	; 185
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 69 2d 	jmp	0x5ad2	; 0x5ad2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 69 2d 	jmp	0x5ad2	; 0x5ad2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 69 2d 	jmp	0x5ad2	; 0x5ad2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6d 2d 	jmp	0x5ada	; 0x5ada <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 89 2d 	jmp	0x5b12	; 0x5b12 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 65 2d 	jmp	0x5aca	; 0x5aca <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 53       	subi	r30, 0x3F	; 63
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * 3. Setting up the UART baud rate.
 * Parameters  :
 * - Config_Ptr: Pointer to the UART configuration structure.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1<<U2X);
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
     * RXEN  = 1 Receiver Enable
     * TXEN  = 1 Transmitter Enable
     * UCSZ2 = 0 For 5-bit, 6-bit, 7-bit, 8-bit data mode
     * RXB8 & TXB8 not used for 8-bit data mode
     ***********************************************************************/
    UCSRB = (1<<RXEN) | (1<<TXEN);
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	88 e1       	ldi	r24, 0x18	; 24
     e50:	80 83       	st	Z, r24
     * UPM1:0  = 00 Disable parity bit, 10  Even Parity, 11  Odd Parity
     * USBS    = 0 One stop bit, 1 Two stop bits
     * UCSZ1:0 = 11 For 8-bit data mode
     * UCPOL   = 0 Used with the Synchronous operation only
     ***********************************************************************/
    UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data)<<UCSZ0) |
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	eb 81       	ldd	r30, Y+3	; 0x03
     e58:	fc 81       	ldd	r31, Y+4	; 0x04
     e5a:	86 81       	ldd	r24, Z+6	; 0x06
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	28 2f       	mov	r18, r24
     e66:	20 68       	ori	r18, 0x80	; 128
     e68:	eb 81       	ldd	r30, Y+3	; 0x03
     e6a:	fc 81       	ldd	r31, Y+4	; 0x04
     e6c:	84 81       	ldd	r24, Z+4	; 0x04
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	82 95       	swap	r24
     e74:	92 95       	swap	r25
     e76:	90 7f       	andi	r25, 0xF0	; 240
     e78:	98 27       	eor	r25, r24
     e7a:	80 7f       	andi	r24, 0xF0	; 240
     e7c:	98 27       	eor	r25, r24
     e7e:	28 2b       	or	r18, r24
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	85 81       	ldd	r24, Z+5	; 0x05
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	82 2b       	or	r24, r18
     e98:	8c 93       	st	X, r24
            ((Config_Ptr->Parity_Configurations)<<UPM0) |
            ((Config_Ptr->StopBit_Configurations)<<USBS);

    /* Calculate the UBRR register value */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
     e9a:	eb 81       	ldd	r30, Y+3	; 0x03
     e9c:	fc 81       	ldd	r31, Y+4	; 0x04
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	a2 81       	ldd	r26, Z+2	; 0x02
     ea4:	b3 81       	ldd	r27, Z+3	; 0x03
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	aa 1f       	adc	r26, r26
     eac:	bb 1f       	adc	r27, r27
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	aa 1f       	adc	r26, r26
     eb4:	bb 1f       	adc	r27, r27
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	aa 1f       	adc	r26, r26
     ebc:	bb 1f       	adc	r27, r27
     ebe:	9c 01       	movw	r18, r24
     ec0:	ad 01       	movw	r20, r26
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	94 e2       	ldi	r25, 0x24	; 36
     ec6:	a4 ef       	ldi	r26, 0xF4	; 244
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__udivmodsi4>
     ed2:	da 01       	movw	r26, r20
     ed4:	c9 01       	movw	r24, r18
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01

    /* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
    UBRRH = ubrr_value >> 8;
     edc:	e0 e4       	ldi	r30, 0x40	; 64
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	89 2f       	mov	r24, r25
     ee6:	99 27       	eor	r25, r25
     ee8:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
     eea:	e9 e2       	ldi	r30, 0x29	; 41
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	80 83       	st	Z, r24
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <UART_sendByte>:
 * Function responsible for sending a byte to another UART device.
 * Parameters  :
 * - data: The byte to be sent.
 */
void UART_sendByte(const uint8 data)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
    /*
     * UDRE flag is set when the TX buffer (UDR) is empty and ready for
     * transmitting a new byte so wait until this flag is set to one
     */
    while(BIT_IS_CLEAR(UCSRA, UDRE)){}
     f0c:	eb e2       	ldi	r30, 0x2B	; 43
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	80 72       	andi	r24, 0x20	; 32
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	b9 f3       	breq	.-18     	; 0xf0c <UART_sendByte+0xc>

    /*
     * Put the required data in the UDR register and it also clears the UDRE flag as
     * the UDR register is not empty now
     */
    UDR = data;
     f1e:	ec e2       	ldi	r30, 0x2C	; 44
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <UART_receiveByte>:
 * Function responsible for receiving a byte from another UART device.
 * Returns     :
 * - The received byte.
 */
uint8 UART_receiveByte(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
    /* RXC flag is set when the UART receives data so wait until this flag is set to one */
    while(BIT_IS_CLEAR(UCSRA, RXC)){}
     f36:	eb e2       	ldi	r30, 0x2B	; 43
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	dc f7       	brge	.-10     	; 0xf36 <UART_receiveByte+0x8>

    /*
     * Read the received data from the RX buffer (UDR)
     * The RXC flag will be cleared after reading the data
     */
    return UDR;
     f40:	ec e2       	ldi	r30, 0x2C	; 44
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <UART_sendString>:
 * Send the required string through UART to the other UART device.
 * Parameters  :
 * - Str: Pointer to the string to be sent.
 */
void UART_sendString(const uint8 *Str)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <UART_sendString+0x6>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9b 83       	std	Y+3, r25	; 0x03
     f5a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
     f5c:	19 82       	std	Y+1, r1	; 0x01
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <UART_sendString+0x30>

    /* Send the whole string */
    while(Str[i] != '\0')
    {
        UART_sendByte(Str[i]);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	80 81       	ld	r24, Z
     f72:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
        i++;
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
    uint8 i = 0;

    /* Send the whole string */
    while(Str[i] != '\0')
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	80 81       	ld	r24, Z
     f8e:	88 23       	and	r24, r24
     f90:	39 f7       	brne	.-50     	; 0xf60 <UART_sendString+0x14>
    {
        UART_sendByte(Str[i]);
        i++;
    }
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <UART_receiveString>:
 * Receive the required string until the '#' symbol through UART from the other UART device.
 * Parameters  :
 * - Str: Pointer to the buffer where the received string will be stored.
 */
void UART_receiveString(uint8 *Str)
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <UART_receiveString+0xa>
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
     fb2:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte */
    Str[i] = UART_receiveByte();
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	8c 01       	movw	r16, r24
     fc0:	02 0f       	add	r16, r18
     fc2:	13 1f       	adc	r17, r19
     fc4:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24
     fcc:	0f c0       	rjmp	.+30     	; 0xfec <UART_receiveString+0x4e>

    /* Receive the whole string until the '#' */
    while(Str[i] != '#')
    {
        i++;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_receiveByte();
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	9b 81       	ldd	r25, Y+3	; 0x03
     fde:	8c 01       	movw	r16, r24
     fe0:	02 0f       	add	r16, r18
     fe2:	13 1f       	adc	r17, r19
     fe4:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
     fe8:	f8 01       	movw	r30, r16
     fea:	80 83       	st	Z, r24

    /* Receive the first byte */
    Str[i] = UART_receiveByte();

    /* Receive the whole string until the '#' */
    while(Str[i] != '#')
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	80 81       	ld	r24, Z
     ffe:	83 32       	cpi	r24, 0x23	; 35
    1000:	31 f7       	brne	.-52     	; 0xfce <UART_receiveString+0x30>
        i++;
        Str[i] = UART_receiveByte();
    }

    /* After receiving the whole string plus the '#', replace the '#' with '\0' */
    Str[i] = '\0';
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	10 82       	st	Z, r1
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <UART_sendArray>:
 * Parameters  :
 * - a_ptr: Pointer to the array to be sent.
 * - size: Size of the array.
 */
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <UART_sendArray+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <UART_sendArray+0x8>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	6c 83       	std	Y+4, r22	; 0x04
    uint8 i;

    /* Send the whole array */
    for(i = 0; i < size; i++)
    1036:	19 82       	std	Y+1, r1	; 0x01
    1038:	0e c0       	rjmp	.+28     	; 0x1056 <UART_sendArray+0x32>
    {
        UART_sendByte(a_ptr[i]);
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	80 81       	ld	r24, Z
    104c:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    uint8 i;

    /* Send the whole array */
    for(i = 0; i < size; i++)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	99 81       	ldd	r25, Y+1	; 0x01
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	98 17       	cp	r25, r24
    105c:	70 f3       	brcs	.-36     	; 0x103a <UART_sendArray+0x16>
    {
        UART_sendByte(a_ptr[i]);
    }
    UART_sendByte('#');  /* Send '#' to mark the end of the array */
    105e:	83 e2       	ldi	r24, 0x23	; 35
    1060:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <UART_receiveArray>:
 * Receive the required array until the '#' symbol through UART from the other UART device.
 * Parameters  :
 * - a_ptr: Pointer to the buffer where the received array will be stored.
 */
void UART_receiveArray(uint8 *a_ptr)
{
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <UART_receiveArray+0xa>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9b 83       	std	Y+3, r25	; 0x03
    1084:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1086:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte */
    a_ptr[i] = UART_receiveByte();
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	9b 81       	ldd	r25, Y+3	; 0x03
    1092:	8c 01       	movw	r16, r24
    1094:	02 0f       	add	r16, r18
    1096:	13 1f       	adc	r17, r19
    1098:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    109c:	f8 01       	movw	r30, r16
    109e:	80 83       	st	Z, r24
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <UART_receiveArray+0x4e>

    /* Receive the whole array until the '#' */
    while(a_ptr[i] != '#')
    {
        i++;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	89 83       	std	Y+1, r24	; 0x01
        a_ptr[i] = UART_receiveByte();
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	8c 01       	movw	r16, r24
    10b4:	02 0f       	add	r16, r18
    10b6:	13 1f       	adc	r17, r19
    10b8:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    10bc:	f8 01       	movw	r30, r16
    10be:	80 83       	st	Z, r24

    /* Receive the first byte */
    a_ptr[i] = UART_receiveByte();

    /* Receive the whole array until the '#' */
    while(a_ptr[i] != '#')
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	80 81       	ld	r24, Z
    10d2:	83 32       	cpi	r24, 0x23	; 35
    10d4:	31 f7       	brne	.-52     	; 0x10a2 <UART_receiveArray+0x30>
    {
        i++;
        a_ptr[i] = UART_receiveByte();
    }
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <PWM_Timer0_Start>:
 * Function to initialize Timer0 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer0_Start(const Timer_ConfigType * Config_Ptr)
{
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <PWM_Timer0_Start+0xa>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = 0;  /* Set Timer Initial value to 0. */
    10f8:	e2 e5       	ldi	r30, 0x52	; 82
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR0) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR0 is calculated as:
     * OCR0 = (duty_cycle * 255) / 100
     */
    OCR0  = (Config_Ptr->duty_cycle * 255) / 100;
    10fe:	0c e5       	ldi	r16, 0x5C	; 92
    1100:	10 e0       	ldi	r17, 0x00	; 0
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	48 2f       	mov	r20, r24
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	ca 01       	movw	r24, r20
    110e:	9c 01       	movw	r18, r24
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	c9 01       	movw	r24, r18
    1116:	96 95       	lsr	r25
    1118:	98 2f       	mov	r25, r24
    111a:	88 27       	eor	r24, r24
    111c:	97 95       	ror	r25
    111e:	87 95       	ror	r24
    1120:	82 1b       	sub	r24, r18
    1122:	93 0b       	sbc	r25, r19
    1124:	84 0f       	add	r24, r20
    1126:	95 1f       	adc	r25, r21
    1128:	24 e6       	ldi	r18, 0x64	; 100
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	b9 01       	movw	r22, r18
    112e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__divmodhi4>
    1132:	cb 01       	movw	r24, r22
    1134:	f8 01       	movw	r30, r16
    1136:	80 83       	st	Z, r24

    /* Set PB3/OC0 as output pin (DDRB |= (1<<PB3)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRB  = DDRB | (1<<PB3);
    1138:	a7 e3       	ldi	r26, 0x37	; 55
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM01:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC0 on compare match.
     *    - INVERTING: Set OC0 on compare match.
     * 3. Set clock source (CS02:0) as per Config_Ptr->timer_clock.
     */
    TCCR0 = (1<<WGM00) | (1<<WGM01) | ((Config_Ptr->mode)<<COM00) | ((Config_Ptr->timer_clock)<<CS00);
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	80 81       	ld	r24, Z
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	82 95       	swap	r24
    1156:	92 95       	swap	r25
    1158:	90 7f       	andi	r25, 0xF0	; 240
    115a:	98 27       	eor	r25, r24
    115c:	80 7f       	andi	r24, 0xF0	; 240
    115e:	98 27       	eor	r25, r24
    1160:	98 2f       	mov	r25, r24
    1162:	98 64       	ori	r25, 0x48	; 72
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	fa 81       	ldd	r31, Y+2	; 0x02
    1168:	81 81       	ldd	r24, Z+1	; 0x01
    116a:	89 2b       	or	r24, r25
    116c:	8c 93       	st	X, r24
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	08 95       	ret

0000117c <PWM_Timer2_Start>:
 * Function to initialize Timer2 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer2_Start(const Timer_ConfigType * Config_Ptr)
{
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <PWM_Timer2_Start+0xa>
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = 0;  /* Set Timer Initial value to 0. */
    118e:	e4 e4       	ldi	r30, 0x44	; 68
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR2) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR2 is calculated as:
     * OCR2 = (duty_cycle * 255) / 100
     */
    OCR2  = (Config_Ptr->duty_cycle * 255) / 100;
    1194:	03 e4       	ldi	r16, 0x43	; 67
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	e9 81       	ldd	r30, Y+1	; 0x01
    119a:	fa 81       	ldd	r31, Y+2	; 0x02
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	48 2f       	mov	r20, r24
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	ca 01       	movw	r24, r20
    11a4:	9c 01       	movw	r18, r24
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	c9 01       	movw	r24, r18
    11ac:	96 95       	lsr	r25
    11ae:	98 2f       	mov	r25, r24
    11b0:	88 27       	eor	r24, r24
    11b2:	97 95       	ror	r25
    11b4:	87 95       	ror	r24
    11b6:	82 1b       	sub	r24, r18
    11b8:	93 0b       	sbc	r25, r19
    11ba:	84 0f       	add	r24, r20
    11bc:	95 1f       	adc	r25, r21
    11be:	24 e6       	ldi	r18, 0x64	; 100
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	b9 01       	movw	r22, r18
    11c4:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__divmodhi4>
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 83       	st	Z, r24

    /* Set PD7/OC2 as output pin (DDRD |= (1<<PD7)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRD  = DDRD | (1<<PD7);
    11ce:	a1 e3       	ldi	r26, 0x31	; 49
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e1 e3       	ldi	r30, 0x31	; 49
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM21:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC2 on compare match.
     *    - INVERTING: Set OC2 on compare match.
     * 3. Set clock source (CS22:0) as per Config_Ptr->timer_clock.
     */
    TCCR2 = (1<<WGM20) | (1<<WGM21) | ((Config_Ptr->mode)<<COM20) | ((Config_Ptr->timer_clock)<<CS20);
    11dc:	a5 e4       	ldi	r26, 0x45	; 69
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e9 81       	ldd	r30, Y+1	; 0x01
    11e2:	fa 81       	ldd	r31, Y+2	; 0x02
    11e4:	80 81       	ld	r24, Z
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	82 95       	swap	r24
    11ec:	92 95       	swap	r25
    11ee:	90 7f       	andi	r25, 0xF0	; 240
    11f0:	98 27       	eor	r25, r24
    11f2:	80 7f       	andi	r24, 0xF0	; 240
    11f4:	98 27       	eor	r25, r24
    11f6:	98 2f       	mov	r25, r24
    11f8:	98 64       	ori	r25, 0x48	; 72
    11fa:	e9 81       	ldd	r30, Y+1	; 0x01
    11fc:	fa 81       	ldd	r31, Y+2	; 0x02
    11fe:	81 81       	ldd	r24, Z+1	; 0x01
    1200:	89 2b       	or	r24, r25
    1202:	8c 93       	st	X, r24
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <__vector_6>:
 * Description :
 * Interrupt Service Routine for Timer1 Input Capture Event.
 * This ISR is triggered when an edge is detected on the ICP1/PD6 pin.
 */
ISR(TIMER1_CAPT_vect)
{
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
    123c:	80 91 c8 01 	lds	r24, 0x01C8
    1240:	90 91 c9 01 	lds	r25, 0x01C9
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	29 f0       	breq	.+10     	; 0x1252 <__vector_6+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr)();  /* Another method: g_callBackPtr(); */
    1248:	e0 91 c8 01 	lds	r30, 0x01C8
    124c:	f0 91 c9 01 	lds	r31, 0x01C9
    1250:	09 95       	icall
    }
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <ICU_init>:
 * 4. Initialize Timer1 Registers.
 * Parameters  :
 * - Config_Ptr: Pointer to the ICU configuration structure.
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <ICU_init+0x6>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    /* Configure ICP1/PD6 as an input pin (DDRD &= ~(1<<PD6)) */
    DDRD &= ~(1<<PD6);
    1286:	a1 e3       	ldi	r26, 0x31	; 49
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7b       	andi	r24, 0xBF	; 191
    1292:	8c 93       	st	X, r24

    /* Timer1 always operates in Normal Mode (WGM13:0 = 0000) */
    TCCR1A = (1<<FOC1A) | (1<<FOC1B);  /* Force Output Compare for non-PWM mode */
    1294:	ef e4       	ldi	r30, 0x4F	; 79
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8c e0       	ldi	r24, 0x0C	; 12
    129a:	80 83       	st	Z, r24

    /*
     * Insert the required clock value in the first three bits (CS10, CS11, and CS12)
     * of the TCCR1B Register.
     */
    TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    129c:	ae e4       	ldi	r26, 0x4E	; 78
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ee e4       	ldi	r30, 0x4E	; 78
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	98 2f       	mov	r25, r24
    12a8:	98 7f       	andi	r25, 0xF8	; 248
    12aa:	e9 81       	ldd	r30, Y+1	; 0x01
    12ac:	fa 81       	ldd	r31, Y+2	; 0x02
    12ae:	80 81       	ld	r24, Z
    12b0:	89 2b       	or	r24, r25
    12b2:	8c 93       	st	X, r24
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	28 2f       	mov	r18, r24
    12c0:	2f 7b       	andi	r18, 0xBF	; 191
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	81 81       	ldd	r24, Z+1	; 0x01
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	00 24       	eor	r0, r0
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	07 94       	ror	r0
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	07 94       	ror	r0
    12da:	98 2f       	mov	r25, r24
    12dc:	80 2d       	mov	r24, r0
    12de:	82 2b       	or	r24, r18
    12e0:	8c 93       	st	X, r24

    /* Initialize Timer1 counter value to 0 */
    TCNT1 = 0;
    12e2:	ec e4       	ldi	r30, 0x4C	; 76
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	11 82       	std	Z+1, r1	; 0x01
    12e8:	10 82       	st	Z, r1

    /* Initialize the Input Capture Register (ICR1) to 0 */
    ICR1 = 0;
    12ea:	e6 e4       	ldi	r30, 0x46	; 70
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	11 82       	std	Z+1, r1	; 0x01
    12f0:	10 82       	st	Z, r1

    /* Enable the Input Capture interrupt to generate an interrupt when an edge is detected on ICP1/PD6 pin */
    TIMSK |= (1<<TICIE1);
    12f2:	a9 e5       	ldi	r26, 0x59	; 89
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e9 e5       	ldi	r30, 0x59	; 89
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	8c 93       	st	X, r24

    /* Enable global interrupts (SREG |= (1<<7)) */
    SREG |= (1<<7);
    1300:	af e5       	ldi	r26, 0x5F	; 95
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ef e5       	ldi	r30, 0x5F	; 95
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 68       	ori	r24, 0x80	; 128
    130c:	8c 93       	st	X, r24
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <ICU_setCallBack>:
 * Function to set the callback function address.
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <ICU_setCallBack+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    /* Save the address of the callback function in a global variable */
    g_callBackPtr = a_ptr;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	90 93 c9 01 	sts	0x01C9, r25
    132e:	80 93 c8 01 	sts	0x01C8, r24
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <ICU_setEdgeDetectionType>:
 * Function to set the required edge detection.
 * Parameters  :
 * - a_edgeType: The edge detection type (FALLING or RAISING).
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1348:	ae e4       	ldi	r26, 0x4E	; 78
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ee e4       	ldi	r30, 0x4E	; 78
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	2f 7b       	andi	r18, 0xBF	; 191
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	00 24       	eor	r0, r0
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	07 94       	ror	r0
    1364:	96 95       	lsr	r25
    1366:	87 95       	ror	r24
    1368:	07 94       	ror	r0
    136a:	98 2f       	mov	r25, r24
    136c:	80 2d       	mov	r24, r0
    136e:	82 2b       	or	r24, r18
    1370:	8c 93       	st	X, r24
}
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <ICU_getInputCaptureValue>:
 * The value is stored in the Input Capture Register (ICR1).
 * Returns     :
 * - The captured value from ICR1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1382:	e6 e4       	ldi	r30, 0x46	; 70
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <ICU_clearTimerValue>:
/*
 * Description :
 * Function to clear the Timer1 value to start counting from ZERO.
 */
void ICU_clearTimerValue(void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    1398:	ec e4       	ldi	r30, 0x4C	; 76
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	11 82       	std	Z+1, r1	; 0x01
    139e:	10 82       	st	Z, r1
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <ICU_deInit>:
/*
 * Description :
 * Function to disable Timer1 to stop the ICU driver.
 */
void ICU_deInit(void)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    /* Clear all Timer1/ICU registers */
    TCCR1A = 0;
    13ae:	ef e4       	ldi	r30, 0x4F	; 79
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	10 82       	st	Z, r1
    TCCR1B = 0;
    13b4:	ee e4       	ldi	r30, 0x4E	; 78
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1
    TCNT1 = 0;
    13ba:	ec e4       	ldi	r30, 0x4C	; 76
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	11 82       	std	Z+1, r1	; 0x01
    13c0:	10 82       	st	Z, r1
    ICR1 = 0;
    13c2:	e6 e4       	ldi	r30, 0x46	; 70
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	11 82       	std	Z+1, r1	; 0x01
    13c8:	10 82       	st	Z, r1

    /* Disable the Input Capture interrupt */
    TIMSK &= ~(1<<TICIE1);
    13ca:	a9 e5       	ldi	r26, 0x59	; 89
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e9 e5       	ldi	r30, 0x59	; 89
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7d       	andi	r24, 0xDF	; 223
    13d6:	8c 93       	st	X, r24

    /* Reset the global callback pointer to NULL */
    g_callBackPtr = NULL_PTR;
    13d8:	10 92 c9 01 	sts	0x01C9, r1
    13dc:	10 92 c8 01 	sts	0x01C8, r1
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <GPIO_setupPinDirection>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - direction: The direction of the pin (PIN_INPUT or PIN_OUTPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <GPIO_setupPinDirection+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <GPIO_setupPinDirection+0x8>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	6a 83       	std	Y+2, r22	; 0x02
    13f8:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <GPIO_setupPinDirection+0x1c>
    1400:	d5 c0       	rjmp	.+426    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	84 30       	cpi	r24, 0x04	; 4
    1406:	08 f0       	brcs	.+2      	; 0x140a <GPIO_setupPinDirection+0x24>
    1408:	d1 c0       	rjmp	.+418    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Setup the pin direction as required */
        switch (port_num)
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	91 05       	cpc	r25, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <GPIO_setupPinDirection+0x3a>
    141e:	43 c0       	rjmp	.+134    	; 0x14a6 <GPIO_setupPinDirection+0xc0>
    1420:	2c 81       	ldd	r18, Y+4	; 0x04
    1422:	3d 81       	ldd	r19, Y+5	; 0x05
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	2c f4       	brge	.+10     	; 0x1434 <GPIO_setupPinDirection+0x4e>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	71 f0       	breq	.+28     	; 0x144e <GPIO_setupPinDirection+0x68>
    1432:	bc c0       	rjmp	.+376    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
    1434:	2c 81       	ldd	r18, Y+4	; 0x04
    1436:	3d 81       	ldd	r19, Y+5	; 0x05
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <GPIO_setupPinDirection+0x5a>
    143e:	5f c0       	rjmp	.+190    	; 0x14fe <GPIO_setupPinDirection+0x118>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <GPIO_setupPinDirection+0x66>
    144a:	85 c0       	rjmp	.+266    	; 0x1556 <GPIO_setupPinDirection+0x170>
    144c:	af c0       	rjmp	.+350    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
        {
        case PORTA_ID:
            if (direction == PIN_OUTPUT)
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	a1 f4       	brne	.+40     	; 0x147c <GPIO_setupPinDirection+0x96>
            {
                SET_BIT(DDRA, pin_num);  /* Set pin as output */
    1454:	aa e3       	ldi	r26, 0x3A	; 58
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ea e3       	ldi	r30, 0x3A	; 58
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0x8c>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0x88>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	98 c0       	rjmp	.+304    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRA, pin_num);  /* Set pin as input */
    147c:	aa e3       	ldi	r26, 0x3A	; 58
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_setupPinDirection+0xb4>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_setupPinDirection+0xb0>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	83 c0       	rjmp	.+262    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTB_ID:
            if (direction == PIN_OUTPUT)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	a1 f4       	brne	.+40     	; 0x14d4 <GPIO_setupPinDirection+0xee>
            {
                SET_BIT(DDRB, pin_num);  /* Set pin as output */
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0xe4>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0xe0>
    14ce:	84 2b       	or	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	6c c0       	rjmp	.+216    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRB, pin_num);  /* Set pin as input */
    14d4:	a7 e3       	ldi	r26, 0x37	; 55
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e7 e3       	ldi	r30, 0x37	; 55
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_setupPinDirection+0x10c>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_setupPinDirection+0x108>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	57 c0       	rjmp	.+174    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTC_ID:
            if (direction == PIN_OUTPUT)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	a1 f4       	brne	.+40     	; 0x152c <GPIO_setupPinDirection+0x146>
            {
                SET_BIT(DDRC, pin_num);  /* Set pin as output */
    1504:	a4 e3       	ldi	r26, 0x34	; 52
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e4 e3       	ldi	r30, 0x34	; 52
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_setupPinDirection+0x13c>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_setupPinDirection+0x138>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	40 c0       	rjmp	.+128    	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRC, pin_num);  /* Set pin as input */
    152c:	a4 e3       	ldi	r26, 0x34	; 52
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e4 e3       	ldi	r30, 0x34	; 52
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_setupPinDirection+0x164>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_setupPinDirection+0x160>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	2b c0       	rjmp	.+86     	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTD_ID:
            if (direction == PIN_OUTPUT)
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	a1 f4       	brne	.+40     	; 0x1584 <GPIO_setupPinDirection+0x19e>
            {
                SET_BIT(DDRD, pin_num);  /* Set pin as output */
    155c:	a1 e3       	ldi	r26, 0x31	; 49
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_setupPinDirection+0x194>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_setupPinDirection+0x190>
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	14 c0       	rjmp	.+40     	; 0x15ac <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRD, pin_num);  /* Set pin as input */
    1584:	a1 e3       	ldi	r26, 0x31	; 49
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e1 e3       	ldi	r30, 0x31	; 49
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GPIO_setupPinDirection+0x1bc>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GPIO_setupPinDirection+0x1b8>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <GPIO_writePin>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - value: The value to write (Logic High or Logic Low).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <GPIO_writePin+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <GPIO_writePin+0x8>
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	6a 83       	std	Y+2, r22	; 0x02
    15ce:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	88 30       	cpi	r24, 0x08	; 8
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <GPIO_writePin+0x1c>
    15d6:	d5 c0       	rjmp	.+426    	; 0x1782 <GPIO_writePin+0x1c6>
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <GPIO_writePin+0x24>
    15de:	d1 c0       	rjmp	.+418    	; 0x1782 <GPIO_writePin+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Write the pin value as required */
        switch (port_num)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3d 83       	std	Y+5, r19	; 0x05
    15e8:	2c 83       	std	Y+4, r18	; 0x04
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <GPIO_writePin+0x3a>
    15f4:	43 c0       	rjmp	.+134    	; 0x167c <GPIO_writePin+0xc0>
    15f6:	2c 81       	ldd	r18, Y+4	; 0x04
    15f8:	3d 81       	ldd	r19, Y+5	; 0x05
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	2c f4       	brge	.+10     	; 0x160a <GPIO_writePin+0x4e>
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	71 f0       	breq	.+28     	; 0x1624 <GPIO_writePin+0x68>
    1608:	bc c0       	rjmp	.+376    	; 0x1782 <GPIO_writePin+0x1c6>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <GPIO_writePin+0x5a>
    1614:	5f c0       	rjmp	.+190    	; 0x16d4 <GPIO_writePin+0x118>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <GPIO_writePin+0x66>
    1620:	85 c0       	rjmp	.+266    	; 0x172c <GPIO_writePin+0x170>
    1622:	af c0       	rjmp	.+350    	; 0x1782 <GPIO_writePin+0x1c6>
        {
        case PORTA_ID:
            if (value == LOGIC_HIGH)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	a1 f4       	brne	.+40     	; 0x1652 <GPIO_writePin+0x96>
            {
                SET_BIT(PORTA, pin_num);  /* Set pin to Logic High */
    162a:	ab e3       	ldi	r26, 0x3B	; 59
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e3       	ldi	r30, 0x3B	; 59
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0x8c>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0x88>
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	98 c0       	rjmp	.+304    	; 0x1782 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTA, pin_num);  /* Set pin to Logic Low */
    1652:	ab e3       	ldi	r26, 0x3B	; 59
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_writePin+0xb4>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_writePin+0xb0>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	83 c0       	rjmp	.+262    	; 0x1782 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTB_ID:
            if (value == LOGIC_HIGH)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <GPIO_writePin+0xee>
            {
                SET_BIT(PORTB, pin_num);  /* Set pin to Logic High */
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0xe4>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0xe0>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	6c c0       	rjmp	.+216    	; 0x1782 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTB, pin_num);  /* Set pin to Logic Low */
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_writePin+0x10c>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_writePin+0x108>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	57 c0       	rjmp	.+174    	; 0x1782 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTC_ID:
            if (value == LOGIC_HIGH)
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <GPIO_writePin+0x146>
            {
                SET_BIT(PORTC, pin_num);  /* Set pin to Logic High */
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_writePin+0x13c>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_writePin+0x138>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	40 c0       	rjmp	.+128    	; 0x1782 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTC, pin_num);  /* Set pin to Logic Low */
    1702:	a5 e3       	ldi	r26, 0x35	; 53
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e5 e3       	ldi	r30, 0x35	; 53
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_writePin+0x164>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_writePin+0x160>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	2b c0       	rjmp	.+86     	; 0x1782 <GPIO_writePin+0x1c6>
            }
            break;
        case PORTD_ID:
            if (value == LOGIC_HIGH)
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	a1 f4       	brne	.+40     	; 0x175a <GPIO_writePin+0x19e>
            {
                SET_BIT(PORTD, pin_num);  /* Set pin to Logic High */
    1732:	a2 e3       	ldi	r26, 0x32	; 50
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_writePin+0x194>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_writePin+0x190>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTD, pin_num);  /* Set pin to Logic Low */
    175a:	a2 e3       	ldi	r26, 0x32	; 50
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e2 e3       	ldi	r30, 0x32	; 50
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_writePin+0x1bc>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_writePin+0x1b8>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <GPIO_readPin>:
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * Returns     :
 * - The value of the pin (Logic High or Logic Low).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <GPIO_readPin+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <GPIO_readPin+0x8>
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	8a 83       	std	Y+2, r24	; 0x02
    17a2:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    17a4:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, return Logic Low.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <GPIO_readPin+0x1c>
    17ac:	84 c0       	rjmp	.+264    	; 0x18b6 <GPIO_readPin+0x124>
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <GPIO_readPin+0x24>
    17b4:	80 c0       	rjmp	.+256    	; 0x18b6 <GPIO_readPin+0x124>
        /* Do Nothing */
    }
    else
    {
        /* Read the pin value as required */
        switch (port_num)
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3d 83       	std	Y+5, r19	; 0x05
    17be:	2c 83       	std	Y+4, r18	; 0x04
    17c0:	4c 81       	ldd	r20, Y+4	; 0x04
    17c2:	5d 81       	ldd	r21, Y+5	; 0x05
    17c4:	41 30       	cpi	r20, 0x01	; 1
    17c6:	51 05       	cpc	r21, r1
    17c8:	79 f1       	breq	.+94     	; 0x1828 <GPIO_readPin+0x96>
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	91 05       	cpc	r25, r1
    17d2:	34 f4       	brge	.+12     	; 0x17e0 <GPIO_readPin+0x4e>
    17d4:	2c 81       	ldd	r18, Y+4	; 0x04
    17d6:	3d 81       	ldd	r19, Y+5	; 0x05
    17d8:	21 15       	cp	r18, r1
    17da:	31 05       	cpc	r19, r1
    17dc:	69 f0       	breq	.+26     	; 0x17f8 <GPIO_readPin+0x66>
    17de:	6b c0       	rjmp	.+214    	; 0x18b6 <GPIO_readPin+0x124>
    17e0:	4c 81       	ldd	r20, Y+4	; 0x04
    17e2:	5d 81       	ldd	r21, Y+5	; 0x05
    17e4:	42 30       	cpi	r20, 0x02	; 2
    17e6:	51 05       	cpc	r21, r1
    17e8:	b9 f1       	breq	.+110    	; 0x1858 <GPIO_readPin+0xc6>
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <GPIO_readPin+0x64>
    17f4:	49 c0       	rjmp	.+146    	; 0x1888 <GPIO_readPin+0xf6>
    17f6:	5f c0       	rjmp	.+190    	; 0x18b6 <GPIO_readPin+0x124>
        {
        case PORTA_ID:
            if (BIT_IS_SET(PINA, pin_num))  /* Check if the pin is Logic High */
    17f8:	e9 e3       	ldi	r30, 0x39	; 57
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_readPin+0x7e>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_readPin+0x7a>
    1814:	ca 01       	movw	r24, r20
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	90 70       	andi	r25, 0x00	; 0
    181a:	88 23       	and	r24, r24
    181c:	19 f0       	breq	.+6      	; 0x1824 <GPIO_readPin+0x92>
            {
                pin_value = LOGIC_HIGH;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	49 c0       	rjmp	.+146    	; 0x18b6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	47 c0       	rjmp	.+142    	; 0x18b6 <GPIO_readPin+0x124>
            }
            break;
        case PORTB_ID:
            if (BIT_IS_SET(PINB, pin_num))  /* Check if the pin is Logic High */
    1828:	e6 e3       	ldi	r30, 0x36	; 54
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a9 01       	movw	r20, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_readPin+0xae>
    183c:	55 95       	asr	r21
    183e:	47 95       	ror	r20
    1840:	8a 95       	dec	r24
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_readPin+0xaa>
    1844:	ca 01       	movw	r24, r20
    1846:	81 70       	andi	r24, 0x01	; 1
    1848:	90 70       	andi	r25, 0x00	; 0
    184a:	88 23       	and	r24, r24
    184c:	19 f0       	breq	.+6      	; 0x1854 <GPIO_readPin+0xc2>
            {
                pin_value = LOGIC_HIGH;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	31 c0       	rjmp	.+98     	; 0x18b6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1854:	19 82       	std	Y+1, r1	; 0x01
    1856:	2f c0       	rjmp	.+94     	; 0x18b6 <GPIO_readPin+0x124>
            }
            break;
        case PORTC_ID:
            if (BIT_IS_SET(PINC, pin_num))  /* Check if the pin is Logic High */
    1858:	e3 e3       	ldi	r30, 0x33	; 51
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a9 01       	movw	r20, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_readPin+0xde>
    186c:	55 95       	asr	r21
    186e:	47 95       	ror	r20
    1870:	8a 95       	dec	r24
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_readPin+0xda>
    1874:	ca 01       	movw	r24, r20
    1876:	81 70       	andi	r24, 0x01	; 1
    1878:	90 70       	andi	r25, 0x00	; 0
    187a:	88 23       	and	r24, r24
    187c:	19 f0       	breq	.+6      	; 0x1884 <GPIO_readPin+0xf2>
            {
                pin_value = LOGIC_HIGH;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	19 c0       	rjmp	.+50     	; 0x18b6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1884:	19 82       	std	Y+1, r1	; 0x01
    1886:	17 c0       	rjmp	.+46     	; 0x18b6 <GPIO_readPin+0x124>
            }
            break;
        case PORTD_ID:
            if (BIT_IS_SET(PIND, pin_num))  /* Check if the pin is Logic High */
    1888:	e0 e3       	ldi	r30, 0x30	; 48
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a9 01       	movw	r20, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_readPin+0x10e>
    189c:	55 95       	asr	r21
    189e:	47 95       	ror	r20
    18a0:	8a 95       	dec	r24
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_readPin+0x10a>
    18a4:	ca 01       	movw	r24, r20
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	88 23       	and	r24, r24
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <GPIO_readPin+0x122>
            {
                pin_value = LOGIC_HIGH;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    18b4:	19 82       	std	Y+1, r1	; 0x01
            }
            break;
        }
    }

    return pin_value;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <GPIO_setupPortDirection>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - direction: The direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <GPIO_setupPortDirection+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <GPIO_setupPortDirection+0x8>
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	84 30       	cpi	r24, 0x04	; 4
    18dc:	90 f5       	brcc	.+100    	; 0x1942 <GPIO_setupPortDirection+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Setup the port direction as required */
        switch (port_num)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3c 83       	std	Y+4, r19	; 0x04
    18e6:	2b 83       	std	Y+3, r18	; 0x03
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	d1 f0       	breq	.+52     	; 0x1926 <GPIO_setupPortDirection+0x5e>
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	2c f4       	brge	.+10     	; 0x1906 <GPIO_setupPortDirection+0x3e>
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	61 f0       	breq	.+24     	; 0x191c <GPIO_setupPortDirection+0x54>
    1904:	1e c0       	rjmp	.+60     	; 0x1942 <GPIO_setupPortDirection+0x7a>
    1906:	2b 81       	ldd	r18, Y+3	; 0x03
    1908:	3c 81       	ldd	r19, Y+4	; 0x04
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	81 f0       	breq	.+32     	; 0x1930 <GPIO_setupPortDirection+0x68>
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	91 05       	cpc	r25, r1
    1918:	81 f0       	breq	.+32     	; 0x193a <GPIO_setupPortDirection+0x72>
    191a:	13 c0       	rjmp	.+38     	; 0x1942 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;  /* Set port A direction */
    191c:	ea e3       	ldi	r30, 0x3A	; 58
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	80 83       	st	Z, r24
    1924:	0e c0       	rjmp	.+28     	; 0x1942 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;  /* Set port B direction */
    1926:	e7 e3       	ldi	r30, 0x37	; 55
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	80 83       	st	Z, r24
    192e:	09 c0       	rjmp	.+18     	; 0x1942 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;  /* Set port C direction */
    1930:	e4 e3       	ldi	r30, 0x34	; 52
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	80 83       	st	Z, r24
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;  /* Set port D direction */
    193a:	e1 e3       	ldi	r30, 0x31	; 49
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	80 83       	st	Z, r24
            break;
        }
    }
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <GPIO_writePort>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - value: The value to write on the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <GPIO_writePort+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <GPIO_writePort+0x8>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	90 f5       	brcc	.+100    	; 0x19ca <GPIO_writePort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Write the port value as required */
        switch (port_num)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3c 83       	std	Y+4, r19	; 0x04
    196e:	2b 83       	std	Y+3, r18	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	91 05       	cpc	r25, r1
    1978:	d1 f0       	breq	.+52     	; 0x19ae <GPIO_writePort+0x5e>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	2c f4       	brge	.+10     	; 0x198e <GPIO_writePort+0x3e>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	61 f0       	breq	.+24     	; 0x19a4 <GPIO_writePort+0x54>
    198c:	1e c0       	rjmp	.+60     	; 0x19ca <GPIO_writePort+0x7a>
    198e:	2b 81       	ldd	r18, Y+3	; 0x03
    1990:	3c 81       	ldd	r19, Y+4	; 0x04
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	81 f0       	breq	.+32     	; 0x19b8 <GPIO_writePort+0x68>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	91 05       	cpc	r25, r1
    19a0:	81 f0       	breq	.+32     	; 0x19c2 <GPIO_writePort+0x72>
    19a2:	13 c0       	rjmp	.+38     	; 0x19ca <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;  /* Write value to port A */
    19a4:	eb e3       	ldi	r30, 0x3B	; 59
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	80 83       	st	Z, r24
    19ac:	0e c0       	rjmp	.+28     	; 0x19ca <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;  /* Write value to port B */
    19ae:	e8 e3       	ldi	r30, 0x38	; 56
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 83       	st	Z, r24
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;  /* Write value to port C */
    19b8:	e5 e3       	ldi	r30, 0x35	; 53
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	80 83       	st	Z, r24
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;  /* Write value to port D */
    19c2:	e2 e3       	ldi	r30, 0x32	; 50
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	80 83       	st	Z, r24
            break;
        }
    }
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <GPIO_readPort>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * Returns     :
 * - The value of the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <GPIO_readPort+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <GPIO_readPort+0x8>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
    19e6:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number is invalid.
     * If invalid, return ZERO.
     */
    if (port_num >= NUM_OF_PORTS)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	90 f5       	brcc	.+100    	; 0x1a52 <GPIO_readPort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Read the port value as required */
        switch (port_num)
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	3c 83       	std	Y+4, r19	; 0x04
    19f6:	2b 83       	std	Y+3, r18	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	d1 f0       	breq	.+52     	; 0x1a36 <GPIO_readPort+0x5e>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <GPIO_readPort+0x3e>
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	61 f0       	breq	.+24     	; 0x1a2c <GPIO_readPort+0x54>
    1a14:	1e c0       	rjmp	.+60     	; 0x1a52 <GPIO_readPort+0x7a>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	81 f0       	breq	.+32     	; 0x1a40 <GPIO_readPort+0x68>
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	83 30       	cpi	r24, 0x03	; 3
    1a26:	91 05       	cpc	r25, r1
    1a28:	81 f0       	breq	.+32     	; 0x1a4a <GPIO_readPort+0x72>
    1a2a:	13 c0       	rjmp	.+38     	; 0x1a52 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            value = PINA;  /* Read value from port A */
    1a2c:	e9 e3       	ldi	r30, 0x39	; 57
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	0e c0       	rjmp	.+28     	; 0x1a52 <GPIO_readPort+0x7a>
            break;
        case PORTB_ID:
            value = PINB;  /* Read value from port B */
    1a36:	e6 e3       	ldi	r30, 0x36	; 54
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	09 c0       	rjmp	.+18     	; 0x1a52 <GPIO_readPort+0x7a>
            break;
        case PORTC_ID:
            value = PINC;  /* Read value from port C */
    1a40:	e3 e3       	ldi	r30, 0x33	; 51
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <GPIO_readPort+0x7a>
            break;
        case PORTD_ID:
            value = PIND;  /* Read value from port D */
    1a4a:	e0 e3       	ldi	r30, 0x30	; 48
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return value;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <__vector_1>:
 * Description :
 * Interrupt Service Routine for INT0.
 * This ISR is called when an interrupt is triggered on INT0.
 */
ISR(INT0_vect)
{
    1a62:	1f 92       	push	r1
    1a64:	0f 92       	push	r0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	0f 92       	push	r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	2f 93       	push	r18
    1a6e:	3f 93       	push	r19
    1a70:	4f 93       	push	r20
    1a72:	5f 93       	push	r21
    1a74:	6f 93       	push	r22
    1a76:	7f 93       	push	r23
    1a78:	8f 93       	push	r24
    1a7a:	9f 93       	push	r25
    1a7c:	af 93       	push	r26
    1a7e:	bf 93       	push	r27
    1a80:	ef 93       	push	r30
    1a82:	ff 93       	push	r31
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT0 != NULL_PTR)
    1a8c:	80 91 ca 01 	lds	r24, 0x01CA
    1a90:	90 91 cb 01 	lds	r25, 0x01CB
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	29 f0       	breq	.+10     	; 0x1aa2 <__vector_1+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT0)();
    1a98:	e0 91 ca 01 	lds	r30, 0x01CA
    1a9c:	f0 91 cb 01 	lds	r31, 0x01CB
    1aa0:	09 95       	icall
    }
}
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	bf 91       	pop	r27
    1aac:	af 91       	pop	r26
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	7f 91       	pop	r23
    1ab4:	6f 91       	pop	r22
    1ab6:	5f 91       	pop	r21
    1ab8:	4f 91       	pop	r20
    1aba:	3f 91       	pop	r19
    1abc:	2f 91       	pop	r18
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <__vector_2>:
 * Description :
 * Interrupt Service Routine for INT1.
 * This ISR is called when an interrupt is triggered on INT1.
 */
ISR(INT1_vect)
{
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	af 93       	push	r26
    1ae4:	bf 93       	push	r27
    1ae6:	ef 93       	push	r30
    1ae8:	ff 93       	push	r31
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT1 != NULL_PTR)
    1af2:	80 91 cc 01 	lds	r24, 0x01CC
    1af6:	90 91 cd 01 	lds	r25, 0x01CD
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <__vector_2+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT1)();
    1afe:	e0 91 cc 01 	lds	r30, 0x01CC
    1b02:	f0 91 cd 01 	lds	r31, 0x01CD
    1b06:	09 95       	icall
    }
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <__vector_3>:
 * Description :
 * Interrupt Service Routine for INT2.
 * This ISR is called when an interrupt is triggered on INT2.
 */
ISR(INT2_vect)
{
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT2 != NULL_PTR)
    1b58:	80 91 ce 01 	lds	r24, 0x01CE
    1b5c:	90 91 cf 01 	lds	r25, 0x01CF
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <__vector_3+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT2)();
    1b64:	e0 91 ce 01 	lds	r30, 0x01CE
    1b68:	f0 91 cf 01 	lds	r31, 0x01CF
    1b6c:	09 95       	icall
    }
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	0f 90       	pop	r0
    1b90:	1f 90       	pop	r1
    1b92:	18 95       	reti

00001b94 <external_interrupt_init>:
 * This function configures the interrupt sense control and enables the interrupt.
 * Parameters  :
 * - a_ptr: Pointer to the external interrupt configuration structure.
 */
void external_interrupt_init(const EXT_INT_ConfigType * a_ptr)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <external_interrupt_init+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <external_interrupt_init+0x8>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    switch (a_ptr->INT_ID)
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	80 81       	ld	r24, Z
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3c 83       	std	Y+4, r19	; 0x04
    1bb0:	2b 83       	std	Y+3, r18	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	31 f1       	breq	.+76     	; 0x1c08 <external_interrupt_init+0x74>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <external_interrupt_init+0x34>
    1bc6:	41 c0       	rjmp	.+130    	; 0x1c4a <external_interrupt_init+0xb6>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <external_interrupt_init+0x3e>
    1bd0:	5e c0       	rjmp	.+188    	; 0x1c8e <external_interrupt_init+0xfa>
    {
    case INT_0:
        DDRD &= (~(1 << PD2));  /* Configure INT0/PD2 as input pin */
    1bd2:	a1 e3       	ldi	r26, 0x31	; 49
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e1 e3       	ldi	r30, 0x31	; 49
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	8b 7f       	andi	r24, 0xFB	; 251
    1bde:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT0:
         * - Falling edge: ISC00 = 0, ISC01 = 1
         * - Rising edge: ISC00 = 1, ISC01 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC00 | 1 << ISC01)) | ((a_ptr->INT_Sense) << ISC00);
    1be0:	a5 e5       	ldi	r26, 0x55	; 85
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e5 e5       	ldi	r30, 0x55	; 85
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	98 2f       	mov	r25, r24
    1bec:	9c 7f       	andi	r25, 0xFC	; 252
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	81 81       	ldd	r24, Z+1	; 0x01
    1bf4:	89 2b       	or	r24, r25
    1bf6:	8c 93       	st	X, r24

        /* Enable external interrupt INT0 */
        GICR |= (1 << INT0);
    1bf8:	ab e5       	ldi	r26, 0x5B	; 91
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	eb e5       	ldi	r30, 0x5B	; 91
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 64       	ori	r24, 0x40	; 64
    1c04:	8c 93       	st	X, r24
    1c06:	43 c0       	rjmp	.+134    	; 0x1c8e <external_interrupt_init+0xfa>
        break;

    case INT_1:
        DDRD &= (~(1 << PD3));  /* Configure INT1/PD3 as input pin */
    1c08:	a1 e3       	ldi	r26, 0x31	; 49
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e1 e3       	ldi	r30, 0x31	; 49
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	87 7f       	andi	r24, 0xF7	; 247
    1c14:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT1:
         * - Falling edge: ISC10 = 0, ISC11 = 1
         * - Rising edge: ISC10 = 1, ISC11 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC10 | 1 << ISC11)) | ((a_ptr->INT_Sense) << ISC10);
    1c16:	a5 e5       	ldi	r26, 0x55	; 85
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e5 e5       	ldi	r30, 0x55	; 85
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	28 2f       	mov	r18, r24
    1c22:	23 7f       	andi	r18, 0xF3	; 243
    1c24:	e9 81       	ldd	r30, Y+1	; 0x01
    1c26:	fa 81       	ldd	r31, Y+2	; 0x02
    1c28:	81 81       	ldd	r24, Z+1	; 0x01
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	82 2b       	or	r24, r18
    1c38:	8c 93       	st	X, r24

        /* Enable external interrupt INT1 */
        GICR |= (1 << INT1);
    1c3a:	ab e5       	ldi	r26, 0x5B	; 91
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	eb e5       	ldi	r30, 0x5B	; 91
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 68       	ori	r24, 0x80	; 128
    1c46:	8c 93       	st	X, r24
    1c48:	22 c0       	rjmp	.+68     	; 0x1c8e <external_interrupt_init+0xfa>
        break;

    case INT_2:
        DDRB &= (~(1 << PB2));  /* Configure INT2/PB2 as input pin */
    1c4a:	a7 e3       	ldi	r26, 0x37	; 55
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e7 e3       	ldi	r30, 0x37	; 55
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8b 7f       	andi	r24, 0xFB	; 251
    1c56:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT2:
         * - Falling edge: ISC2 = 0
         * - Rising edge: ISC2 = 1
         */
        if (a_ptr->INT_Sense == RISING_EDGE_INT2) {
    1c58:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5c:	81 81       	ldd	r24, Z+1	; 0x01
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	41 f4       	brne	.+16     	; 0x1c72 <external_interrupt_init+0xde>
            MCUCSR |= (1 << ISC2);
    1c62:	a4 e5       	ldi	r26, 0x54	; 84
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e4 e5       	ldi	r30, 0x54	; 84
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 64       	ori	r24, 0x40	; 64
    1c6e:	8c 93       	st	X, r24
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <external_interrupt_init+0xec>
        } else {
            MCUCSR &= ~(1 << ISC2);
    1c72:	a4 e5       	ldi	r26, 0x54	; 84
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e4 e5       	ldi	r30, 0x54	; 84
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7b       	andi	r24, 0xBF	; 191
    1c7e:	8c 93       	st	X, r24
        }

        /* Enable external interrupt INT2 */
        GICR |= (1 << INT2);
    1c80:	ab e5       	ldi	r26, 0x5B	; 91
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	eb e5       	ldi	r30, 0x5B	; 91
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24
        break;
    }
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <external_interrupt_deinit>:
 * This function disables the specified external interrupt.
 * Parameters  :
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_deinit(EXT_INT_Type INT_ID)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <external_interrupt_deinit+0x6>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    switch (INT_ID)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3b 83       	std	Y+3, r19	; 0x03
    1cb2:	2a 83       	std	Y+2, r18	; 0x02
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	c1 f0       	breq	.+48     	; 0x1cee <external_interrupt_deinit+0x52>
    1cbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc0:	3b 81       	ldd	r19, Y+3	; 0x03
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	11 f1       	breq	.+68     	; 0x1d0c <external_interrupt_deinit+0x70>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	61 f5       	brne	.+88     	; 0x1d28 <external_interrupt_deinit+0x8c>
    {
    case INT_0:
        /* Clear the sense control bits for INT0 */
        MCUCR &= ~(1 << ISC00) & ~(1 << ISC01);
    1cd0:	a5 e5       	ldi	r26, 0x55	; 85
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e5 e5       	ldi	r30, 0x55	; 85
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8c 7f       	andi	r24, 0xFC	; 252
    1cdc:	8c 93       	st	X, r24

        /* Disable external interrupt INT0 */
        GICR &= ~(1 << INT0);
    1cde:	ab e5       	ldi	r26, 0x5B	; 91
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	eb e5       	ldi	r30, 0x5B	; 91
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 7b       	andi	r24, 0xBF	; 191
    1cea:	8c 93       	st	X, r24
    1cec:	1d c0       	rjmp	.+58     	; 0x1d28 <external_interrupt_deinit+0x8c>
        break;

    case INT_1:
        /* Clear the sense control bits for INT1 */
        MCUCR &= ~(1 << ISC10) & ~(1 << ISC11);
    1cee:	a5 e5       	ldi	r26, 0x55	; 85
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e5 e5       	ldi	r30, 0x55	; 85
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	83 7f       	andi	r24, 0xF3	; 243
    1cfa:	8c 93       	st	X, r24

        /* Disable external interrupt INT1 */
        GICR &= ~(1 << INT1);
    1cfc:	ab e5       	ldi	r26, 0x5B	; 91
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e5       	ldi	r30, 0x5B	; 91
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8f 77       	andi	r24, 0x7F	; 127
    1d08:	8c 93       	st	X, r24
    1d0a:	0e c0       	rjmp	.+28     	; 0x1d28 <external_interrupt_deinit+0x8c>
        break;

    case INT_2:
        /* Clear the sense control bit for INT2 */
        MCUCSR &= ~(1 << ISC2);
    1d0c:	a4 e5       	ldi	r26, 0x54	; 84
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e4 e5       	ldi	r30, 0x54	; 84
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 7b       	andi	r24, 0xBF	; 191
    1d18:	8c 93       	st	X, r24

        /* Disable external interrupt INT2 */
        GICR &= ~(1 << INT2);
    1d1a:	ab e5       	ldi	r26, 0x5B	; 91
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	eb e5       	ldi	r30, 0x5B	; 91
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 7d       	andi	r24, 0xDF	; 223
    1d26:	8c 93       	st	X, r24
        break;
    }
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <external_interrupt_setCallBack>:
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_setCallBack(void(*a_ptr)(void), EXT_INT_Type INT_ID)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <external_interrupt_setCallBack+0x6>
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <external_interrupt_setCallBack+0x8>
    1d3c:	0f 92       	push	r0
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	6b 83       	std	Y+3, r22	; 0x03
    switch (INT_ID)
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3d 83       	std	Y+5, r19	; 0x05
    1d50:	2c 83       	std	Y+4, r18	; 0x04
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	81 f0       	breq	.+32     	; 0x1d7c <external_interrupt_setCallBack+0x48>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	91 f0       	breq	.+36     	; 0x1d8a <external_interrupt_setCallBack+0x56>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <external_interrupt_setCallBack+0x62>
    {
    case INT_0:
        g_callBackPtr_INT0 = a_ptr;  /* Set callback for INT0 */
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	90 93 cb 01 	sts	0x01CB, r25
    1d76:	80 93 ca 01 	sts	0x01CA, r24
    1d7a:	0d c0       	rjmp	.+26     	; 0x1d96 <external_interrupt_setCallBack+0x62>
        break;
    case INT_1:
        g_callBackPtr_INT1 = a_ptr;  /* Set callback for INT1 */
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	90 93 cd 01 	sts	0x01CD, r25
    1d84:	80 93 cc 01 	sts	0x01CC, r24
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <external_interrupt_setCallBack+0x62>
        break;
    case INT_2:
        g_callBackPtr_INT2 = a_ptr;  /* Set callback for INT2 */
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	90 93 cf 01 	sts	0x01CF, r25
    1d92:	80 93 ce 01 	sts	0x01CE, r24
        break;
    }
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <Ultrasonic_init>:
 * 2. Initialize the ICU driver.
 * 3. Set the callback function for the ICU.
 * 4. Configure the trigger pin as an output.
 */
void Ultrasonic_init(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <Ultrasonic_init+0x6>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    /* Configure ICU for rising edge detection with F_CPU/8 prescaler */
    ICU_ConfigType ICU_Configurations = {F_CPU_8, RAISING};
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    ICU_init(&ICU_Configurations);
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	0e 94 3c 09 	call	0x1278	; 0x1278 <ICU_init>

    /* Set the callback function for the ICU */
    ICU_setCallBack(Ultrasonic_edgeProcessing);
    1dc0:	89 ef       	ldi	r24, 0xF9	; 249
    1dc2:	9f e0       	ldi	r25, 0x0F	; 15
    1dc4:	0e 94 8c 09 	call	0x1318	; 0x1318 <ICU_setCallBack>

    /* Set up the trigger pin as an output */
    GPIO_setupPinDirection(TRIGGER_PORT_CONNECTION, TRIGGER_PIN1, PIN_OUTPUT);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <Ultrasonic_Trigger>:
/*
 * Description :
 * Send a 10us trigger pulse to the ultrasonic sensor to start the measurement.
 */
static void Ultrasonic_Trigger(void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	68 97       	sbiw	r28, 0x18	; 24
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    /* Set the trigger pin to high for 10us */
    GPIO_writePin(TRIGGER_PORT_CONNECTION, TRIGGER_PIN1, LOGIC_HIGH);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	63 e0       	ldi	r22, 0x03	; 3
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e2       	ldi	r26, 0x20	; 32
    1e00:	b1 e4       	ldi	r27, 0x41	; 65
    1e02:	8d 8b       	std	Y+21, r24	; 0x15
    1e04:	9e 8b       	std	Y+22, r25	; 0x16
    1e06:	af 8b       	std	Y+23, r26	; 0x17
    1e08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e10:	98 8d       	ldd	r25, Y+24	; 0x18
    1e12:	2b ea       	ldi	r18, 0xAB	; 171
    1e14:	3a ea       	ldi	r19, 0xAA	; 170
    1e16:	4a ea       	ldi	r20, 0xAA	; 170
    1e18:	50 e4       	ldi	r21, 0x40	; 64
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	89 8b       	std	Y+17, r24	; 0x11
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	ab 8b       	std	Y+19, r26	; 0x13
    1e28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e2a:	69 89       	ldd	r22, Y+17	; 0x11
    1e2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e30:	9c 89       	ldd	r25, Y+20	; 0x14
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	1c f4       	brge	.+6      	; 0x1e48 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	88 8b       	std	Y+16, r24	; 0x10
    1e46:	91 c0       	rjmp	.+290    	; 0x1f6a <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1e48:	69 89       	ldd	r22, Y+17	; 0x11
    1e4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	53 e4       	ldi	r21, 0x43	; 67
    1e58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <Ultrasonic_Trigger+0x86>
    1e60:	7b c0       	rjmp	.+246    	; 0x1f58 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1e62:	6d 89       	ldd	r22, Y+21	; 0x15
    1e64:	7e 89       	ldd	r23, Y+22	; 0x16
    1e66:	8f 89       	ldd	r24, Y+23	; 0x17
    1e68:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a e7       	ldi	r20, 0x7A	; 122
    1e70:	54 e4       	ldi	r21, 0x44	; 68
    1e72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8c 87       	std	Y+12, r24	; 0x0c
    1e7c:	9d 87       	std	Y+13, r25	; 0x0d
    1e7e:	ae 87       	std	Y+14, r26	; 0x0e
    1e80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a e7       	ldi	r20, 0x7A	; 122
    1e90:	55 e4       	ldi	r21, 0x45	; 69
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	88 87       	std	Y+8, r24	; 0x08
    1e9c:	99 87       	std	Y+9, r25	; 0x09
    1e9e:	aa 87       	std	Y+10, r26	; 0x0a
    1ea0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ea2:	68 85       	ldd	r22, Y+8	; 0x08
    1ea4:	79 85       	ldd	r23, Y+9	; 0x09
    1ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9f 83       	std	Y+7, r25	; 0x07
    1ec0:	8e 83       	std	Y+6, r24	; 0x06
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1ec4:	68 85       	ldd	r22, Y+8	; 0x08
    1ec6:	79 85       	ldd	r23, Y+9	; 0x09
    1ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ede:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9f 83       	std	Y+7, r25	; 0x07
    1f02:	8e 83       	std	Y+6, r24	; 0x06
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <Ultrasonic_Trigger+0x148>
    1f06:	80 e9       	ldi	r24, 0x90	; 144
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	9d 83       	std	Y+5, r25	; 0x05
    1f0c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	9d 81       	ldd	r25, Y+5	; 0x05
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <Ultrasonic_Trigger+0x136>
    1f16:	9d 83       	std	Y+5, r25	; 0x05
    1f18:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9f 83       	std	Y+7, r25	; 0x07
    1f22:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <Ultrasonic_Trigger+0x12a>
    1f2c:	24 c0       	rjmp	.+72     	; 0x1f76 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	68 85       	ldd	r22, Y+8	; 0x08
    1f30:	79 85       	ldd	r23, Y+9	; 0x09
    1f32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9f 83       	std	Y+7, r25	; 0x07
    1f40:	8e 83       	std	Y+6, r24	; 0x06
    1f42:	8e 81       	ldd	r24, Y+6	; 0x06
    1f44:	9f 81       	ldd	r25, Y+7	; 0x07
    1f46:	9b 83       	std	Y+3, r25	; 0x03
    1f48:	8a 83       	std	Y+2, r24	; 0x02
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <Ultrasonic_Trigger+0x172>
    1f52:	9b 83       	std	Y+3, r25	; 0x03
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f58:	69 89       	ldd	r22, Y+17	; 0x11
    1f5a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	88 8b       	std	Y+16, r24	; 0x10
    1f6a:	88 89       	ldd	r24, Y+16	; 0x10
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	8a 95       	dec	r24
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <Ultrasonic_Trigger+0x194>
    1f74:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);

    /* Set the trigger pin back to low */
    GPIO_writePin(TRIGGER_PORT_CONNECTION, TRIGGER_PIN1, LOGIC_LOW);
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	63 e0       	ldi	r22, 0x03	; 3
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
}
    1f80:	68 96       	adiw	r28, 0x18	; 24
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <Ultrasonic_readDistance>:
 * 3. Calculate and return the distance in centimeters.
 * Returns     :
 * - The measured distance in centimeters.
 */
uint16 Ultrasonic_readDistance(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    /* Send the trigger pulse to start the measurement */
    Ultrasonic_Trigger();
    1f9a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Ultrasonic_Trigger>

    /* Calculate the distance in centimeters using the high time */
    return (g_highTime / 117.6) + 1;
    1f9e:	80 91 d1 01 	lds	r24, 0x01D1
    1fa2:	90 91 d2 01 	lds	r25, 0x01D2
    1fa6:	cc 01       	movw	r24, r24
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	23 e3       	ldi	r18, 0x33	; 51
    1fbe:	33 e3       	ldi	r19, 0x33	; 51
    1fc0:	4b ee       	ldi	r20, 0xEB	; 235
    1fc2:	52 e4       	ldi	r21, 0x42	; 66
    1fc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
}
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <Ultrasonic_edgeProcessing>:
 * Description :
 * Callback function for the ICU driver to handle edge detection.
 * This function calculates the high time (echo pulse duration) generated by the ultrasonic sensor.
 */
static void Ultrasonic_edgeProcessing(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    g_edgeTime++;  /* Increment the edge counter */
    1ffa:	80 91 d0 01 	lds	r24, 0x01D0
    1ffe:	8f 5f       	subi	r24, 0xFF	; 255
    2000:	80 93 d0 01 	sts	0x01D0, r24

    if (g_edgeTime == 1)
    2004:	80 91 d0 01 	lds	r24, 0x01D0
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	31 f4       	brne	.+12     	; 0x2018 <Ultrasonic_edgeProcessing+0x26>
        /*
         * First edge detected (rising edge):
         * 1. Clear the timer counter to start measurements from the first rising edge.
         * 2. Configure the ICU to detect the falling edge.
         */
        ICU_clearTimerValue();
    200c:	0e 94 c8 09 	call	0x1390	; 0x1390 <ICU_clearTimerValue>
        ICU_setEdgeDetectionType(FALLING);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	0e 94 9e 09 	call	0x133c	; 0x133c <ICU_setEdgeDetectionType>
    2016:	11 c0       	rjmp	.+34     	; 0x203a <Ultrasonic_edgeProcessing+0x48>
    }
    else if (g_edgeTime == 2)
    2018:	80 91 d0 01 	lds	r24, 0x01D0
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	69 f4       	brne	.+26     	; 0x203a <Ultrasonic_edgeProcessing+0x48>
         * 1. Read the high time (echo pulse duration) from the ICU.
         * 2. Configure the ICU to detect the rising edge for the next measurement.
         * 3. Clear the timer counter for the next measurement.
         * 4. Reset the edge counter.
         */
        g_highTime = ICU_getInputCaptureValue();  /* Get the high time */
    2020:	0e 94 bd 09 	call	0x137a	; 0x137a <ICU_getInputCaptureValue>
    2024:	90 93 d2 01 	sts	0x01D2, r25
    2028:	80 93 d1 01 	sts	0x01D1, r24
        ICU_setEdgeDetectionType(RAISING);        /* Detect rising edge next */
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	0e 94 9e 09 	call	0x133c	; 0x133c <ICU_setEdgeDetectionType>
        ICU_clearTimerValue();                    /* Clear the timer counter */
    2032:	0e 94 c8 09 	call	0x1390	; 0x1390 <ICU_clearTimerValue>
        g_edgeTime = 0;                          /* Reset the edge counter */
    2036:	10 92 d0 01 	sts	0x01D0, r1
    }
}
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <PIR_init>:
 * Description :
 * Function to initialize the PIR sensor.
 * This function sets up the necessary pin directions for the PIR sensor.
 */
void PIR_init(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    /* Configure PIR sensor 0 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR0_PIN, PIN_INPUT);
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>

    /* Configure PIR sensor 1 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR1_PIN, PIN_INPUT);
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	63 e0       	ldi	r22, 0x03	; 3
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
}
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <PIR_ReadValue1>:
 * Function to read the value from PIR sensor 0.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue1(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 0 */
    return GPIO_readPin(PIR_PORT, PIR0_PIN);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_readPin>
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <PIR_ReadValue2>:
 * Function to read the value from PIR sensor 1.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue2(void)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 1 */
    return GPIO_readPin(PIR_PORT, PIR1_PIN);
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	63 e0       	ldi	r22, 0x03	; 3
    2084:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_readPin>
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <Handel_Max_Speed>:
 * Static function to handle the maximum speed of the motor.
 * Parameters  :
 * - speed: The maximum speed to be set.
 */
static void Handel_Max_Speed(uint8 speed)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	89 83       	std	Y+1, r24	; 0x01
    max_Speed = speed;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	80 93 d3 01 	sts	0x01D3, r24
}
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <DcMotor_Init>:
 * This function sets up the necessary pin directions and stops the motor initially.
 * Parameters  :
 * - MAXSPEED: The maximum speed of the motor (0 to 100).
 */
void DcMotor_Init(uint8 MAXSPEED)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	89 83       	std	Y+1, r24	; 0x01
    /* Set the maximum speed */
    Handel_Max_Speed(MAXSPEED);
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	0e 94 47 10 	call	0x208e	; 0x208e <Handel_Max_Speed>

    /* For motor 1 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT1, PIN_OUTPUT);  /* Set INT1 as output */
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT2, PIN_OUTPUT);  /* Set INT2 as output */
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	65 e0       	ldi	r22, 0x05	; 5
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE1_PORT_CONNECTION, ENABLE1_PIN, PIN_OUTPUT);  /* Set Enable1 as output */
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	63 e0       	ldi	r22, 0x03	; 3
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>

    /* For motor 2 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT3, PIN_OUTPUT);  /* Set INT3 as output */
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT4, PIN_OUTPUT);  /* Set INT4 as output */
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	67 e0       	ldi	r22, 0x07	; 7
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE2_PORT_CONNECTION, ENABLE2_PIN, PIN_OUTPUT);  /* Set Enable2 as output */
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	67 e0       	ldi	r22, 0x07	; 7
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>

    /* Stop the motor at the beginning */
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	64 e0       	ldi	r22, 0x04	; 4
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	65 e0       	ldi	r22, 0x05	; 5
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	66 e0       	ldi	r22, 0x06	; 6
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	67 e0       	ldi	r22, 0x07	; 7
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
}
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <DcMotor1_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor1_Rotate(DcMotor_State state, uint8 speed)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	27 97       	sbiw	r28, 0x07	; 7
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	8c 83       	std	Y+4, r24	; 0x04
    213c:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 1 */
    Timer_ConfigType configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	8a 83       	std	Y+2, r24	; 0x02
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer0_Start(&configrations);
    214a:	ce 01       	movw	r24, r28
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <PWM_Timer0_Start>

    /* Control motor 1 direction */
    switch (state)
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	3f 83       	std	Y+7, r19	; 0x07
    215a:	2e 83       	std	Y+6, r18	; 0x06
    215c:	8e 81       	ldd	r24, Y+6	; 0x06
    215e:	9f 81       	ldd	r25, Y+7	; 0x07
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	91 05       	cpc	r25, r1
    2164:	a1 f0       	breq	.+40     	; 0x218e <DcMotor1_Rotate+0x68>
    2166:	2e 81       	ldd	r18, Y+6	; 0x06
    2168:	3f 81       	ldd	r19, Y+7	; 0x07
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	d1 f0       	breq	.+52     	; 0x21a4 <DcMotor1_Rotate+0x7e>
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	01 f5       	brne	.+64     	; 0x21b8 <DcMotor1_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	65 e0       	ldi	r22, 0x05	; 5
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    218c:	15 c0       	rjmp	.+42     	; 0x21b8 <DcMotor1_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_HIGH);
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	64 e0       	ldi	r22, 0x04	; 4
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	65 e0       	ldi	r22, 0x05	; 5
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    21a2:	0a c0       	rjmp	.+20     	; 0x21b8 <DcMotor1_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	64 e0       	ldi	r22, 0x04	; 4
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_HIGH);
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	65 e0       	ldi	r22, 0x05	; 5
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        break;
    }
}
    21b8:	27 96       	adiw	r28, 0x07	; 7
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <DcMotor2_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor2_Rotate(DcMotor_State state, uint8 speed)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	27 97       	sbiw	r28, 0x07	; 7
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	8c 83       	std	Y+4, r24	; 0x04
    21e0:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 2 */
    Timer_ConfigType configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	8a 83       	std	Y+2, r24	; 0x02
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer2_Start(&configrations);
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	0e 94 be 08 	call	0x117c	; 0x117c <PWM_Timer2_Start>

    /* Control motor 2 direction */
    switch (state)
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	3f 83       	std	Y+7, r19	; 0x07
    21fe:	2e 83       	std	Y+6, r18	; 0x06
    2200:	8e 81       	ldd	r24, Y+6	; 0x06
    2202:	9f 81       	ldd	r25, Y+7	; 0x07
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	91 05       	cpc	r25, r1
    2208:	a1 f0       	breq	.+40     	; 0x2232 <DcMotor2_Rotate+0x68>
    220a:	2e 81       	ldd	r18, Y+6	; 0x06
    220c:	3f 81       	ldd	r19, Y+7	; 0x07
    220e:	22 30       	cpi	r18, 0x02	; 2
    2210:	31 05       	cpc	r19, r1
    2212:	d1 f0       	breq	.+52     	; 0x2248 <DcMotor2_Rotate+0x7e>
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	01 f5       	brne	.+64     	; 0x225c <DcMotor2_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	66 e0       	ldi	r22, 0x06	; 6
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	67 e0       	ldi	r22, 0x07	; 7
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    2230:	15 c0       	rjmp	.+42     	; 0x225c <DcMotor2_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_HIGH);
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	66 e0       	ldi	r22, 0x06	; 6
    2236:	41 e0       	ldi	r20, 0x01	; 1
    2238:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	67 e0       	ldi	r22, 0x07	; 7
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    2246:	0a c0       	rjmp	.+20     	; 0x225c <DcMotor2_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	66 e0       	ldi	r22, 0x06	; 6
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_HIGH);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	67 e0       	ldi	r22, 0x07	; 7
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
        break;
    }
}
    225c:	27 96       	adiw	r28, 0x07	; 7
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <Forward>:
 * Description :
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	60 97       	sbiw	r28, 0x10	; 16
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    2282:	18 8a       	std	Y+16, r1	; 0x10
    2284:	1f 86       	std	Y+15, r1	; 0x0f
    2286:	81 c0       	rjmp	.+258    	; 0x238a <Forward+0x11c>
    {
        DcMotor1_Rotate(CCW, i);
    2288:	9f 85       	ldd	r25, Y+15	; 0x0f
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	69 2f       	mov	r22, r25
    228e:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    2292:	9f 85       	ldd	r25, Y+15	; 0x0f
    2294:	82 e0       	ldi	r24, 0x02	; 2
    2296:	69 2f       	mov	r22, r25
    2298:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	8b 87       	std	Y+11, r24	; 0x0b
    22a6:	9c 87       	std	Y+12, r25	; 0x0c
    22a8:	ad 87       	std	Y+13, r26	; 0x0d
    22aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	55 e4       	ldi	r21, 0x45	; 69
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8f 83       	std	Y+7, r24	; 0x07
    22c6:	98 87       	std	Y+8, r25	; 0x08
    22c8:	a9 87       	std	Y+9, r26	; 0x09
    22ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <Forward+0x80>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <Forward+0xfe>
	else if (__tmp > 65535)
    22ee:	6f 81       	ldd	r22, Y+7	; 0x07
    22f0:	78 85       	ldd	r23, Y+8	; 0x08
    22f2:	89 85       	ldd	r24, Y+9	; 0x09
    22f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <Forward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	0f c0       	rjmp	.+30     	; 0x234e <Forward+0xe0>
    2330:	80 e9       	ldi	r24, 0x90	; 144
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <Forward+0xce>
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <Forward+0xc2>
    2356:	14 c0       	rjmp	.+40     	; 0x2380 <Forward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <Forward+0x10a>
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    2380:	8f 85       	ldd	r24, Y+15	; 0x0f
    2382:	98 89       	ldd	r25, Y+16	; 0x10
    2384:	0a 96       	adiw	r24, 0x0a	; 10
    2386:	98 8b       	std	Y+16, r25	; 0x10
    2388:	8f 87       	std	Y+15, r24	; 0x0f
    238a:	80 91 d3 01 	lds	r24, 0x01D3
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	8f 85       	ldd	r24, Y+15	; 0x0f
    2394:	98 89       	ldd	r25, Y+16	; 0x10
    2396:	28 17       	cp	r18, r24
    2398:	39 07       	cpc	r19, r25
    239a:	0c f0       	brlt	.+2      	; 0x239e <Forward+0x130>
    239c:	75 cf       	rjmp	.-278    	; 0x2288 <Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    239e:	60 96       	adiw	r28, 0x10	; 16
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <Backward>:
 * Description :
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	60 97       	sbiw	r28, 0x10	; 16
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    23c4:	18 8a       	std	Y+16, r1	; 0x10
    23c6:	1f 86       	std	Y+15, r1	; 0x0f
    23c8:	81 c0       	rjmp	.+258    	; 0x24cc <Backward+0x11c>
    {
        DcMotor1_Rotate(CW, i);
    23ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	69 2f       	mov	r22, r25
    23d0:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    23d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	69 2f       	mov	r22, r25
    23da:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 e0       	ldi	r26, 0x00	; 0
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	8b 87       	std	Y+11, r24	; 0x0b
    23e8:	9c 87       	std	Y+12, r25	; 0x0c
    23ea:	ad 87       	std	Y+13, r26	; 0x0d
    23ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a e7       	ldi	r20, 0x7A	; 122
    23fc:	55 e4       	ldi	r21, 0x45	; 69
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8f 83       	std	Y+7, r24	; 0x07
    2408:	98 87       	std	Y+8, r25	; 0x08
    240a:	a9 87       	std	Y+9, r26	; 0x09
    240c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <Backward+0x80>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <Backward+0xfe>
	else if (__tmp > 65535)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <Backward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <Backward+0xe0>
    2472:	80 e9       	ldi	r24, 0x90	; 144
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	9c 83       	std	Y+4, r25	; 0x04
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <Backward+0xce>
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <Backward+0xc2>
    2498:	14 c0       	rjmp	.+40     	; 0x24c2 <Backward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <Backward+0x10a>
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    24c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c4:	98 89       	ldd	r25, Y+16	; 0x10
    24c6:	0a 96       	adiw	r24, 0x0a	; 10
    24c8:	98 8b       	std	Y+16, r25	; 0x10
    24ca:	8f 87       	std	Y+15, r24	; 0x0f
    24cc:	80 91 d3 01 	lds	r24, 0x01D3
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d6:	98 89       	ldd	r25, Y+16	; 0x10
    24d8:	28 17       	cp	r18, r24
    24da:	39 07       	cpc	r19, r25
    24dc:	0c f0       	brlt	.+2      	; 0x24e0 <Backward+0x130>
    24de:	75 cf       	rjmp	.-278    	; 0x23ca <Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    24e0:	60 96       	adiw	r28, 0x10	; 16
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <Stop>:
 * Description :
 * Function to stop the car.
 * This function stops both motors.
 */
void Stop(void)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    DcMotor1_Rotate(STOP, MOTOR_STOP);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
    DcMotor2_Rotate(STOP, MOTOR_STOP);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <Right_Forward>:
 * Description :
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	60 97       	sbiw	r28, 0x10	; 16
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    2524:	18 8a       	std	Y+16, r1	; 0x10
    2526:	1f 86       	std	Y+15, r1	; 0x0f
    2528:	80 c0       	rjmp	.+256    	; 0x262a <Right_Forward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    2532:	9f 85       	ldd	r25, Y+15	; 0x0f
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	69 2f       	mov	r22, r25
    2538:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e0       	ldi	r26, 0x00	; 0
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	8b 87       	std	Y+11, r24	; 0x0b
    2546:	9c 87       	std	Y+12, r25	; 0x0c
    2548:	ad 87       	std	Y+13, r26	; 0x0d
    254a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a e7       	ldi	r20, 0x7A	; 122
    255a:	55 e4       	ldi	r21, 0x45	; 69
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8f 83       	std	Y+7, r24	; 0x07
    2566:	98 87       	std	Y+8, r25	; 0x08
    2568:	a9 87       	std	Y+9, r26	; 0x09
    256a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <Right_Forward+0x7e>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	3f c0       	rjmp	.+126    	; 0x260c <Right_Forward+0xfc>
	else if (__tmp > 65535)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <Right_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <Right_Forward+0xde>
    25d0:	80 e9       	ldi	r24, 0x90	; 144
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <Right_Forward+0xcc>
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <Right_Forward+0xc0>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <Right_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <Right_Forward+0x108>
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    2620:	8f 85       	ldd	r24, Y+15	; 0x0f
    2622:	98 89       	ldd	r25, Y+16	; 0x10
    2624:	0a 96       	adiw	r24, 0x0a	; 10
    2626:	98 8b       	std	Y+16, r25	; 0x10
    2628:	8f 87       	std	Y+15, r24	; 0x0f
    262a:	80 91 d3 01 	lds	r24, 0x01D3
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	8f 85       	ldd	r24, Y+15	; 0x0f
    2634:	98 89       	ldd	r25, Y+16	; 0x10
    2636:	28 17       	cp	r18, r24
    2638:	39 07       	cpc	r19, r25
    263a:	0c f0       	brlt	.+2      	; 0x263e <Right_Forward+0x12e>
    263c:	76 cf       	rjmp	.-276    	; 0x252a <Right_Forward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    263e:	60 96       	adiw	r28, 0x10	; 16
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <Left_Forward>:
 * Description :
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	60 97       	sbiw	r28, 0x10	; 16
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    2664:	18 8a       	std	Y+16, r1	; 0x10
    2666:	1f 86       	std	Y+15, r1	; 0x0f
    2668:	80 c0       	rjmp	.+256    	; 0x276a <Left_Forward+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    266a:	9f 85       	ldd	r25, Y+15	; 0x0f
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	69 2f       	mov	r22, r25
    2670:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a0 e0       	ldi	r26, 0x00	; 0
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	8b 87       	std	Y+11, r24	; 0x0b
    2686:	9c 87       	std	Y+12, r25	; 0x0c
    2688:	ad 87       	std	Y+13, r26	; 0x0d
    268a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268c:	6b 85       	ldd	r22, Y+11	; 0x0b
    268e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2690:	8d 85       	ldd	r24, Y+13	; 0x0d
    2692:	9e 85       	ldd	r25, Y+14	; 0x0e
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a e7       	ldi	r20, 0x7A	; 122
    269a:	55 e4       	ldi	r21, 0x45	; 69
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	8f 83       	std	Y+7, r24	; 0x07
    26a6:	98 87       	std	Y+8, r25	; 0x08
    26a8:	a9 87       	std	Y+9, r26	; 0x09
    26aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ac:	6f 81       	ldd	r22, Y+7	; 0x07
    26ae:	78 85       	ldd	r23, Y+8	; 0x08
    26b0:	89 85       	ldd	r24, Y+9	; 0x09
    26b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	2c f4       	brge	.+10     	; 0x26ce <Left_Forward+0x7e>
		__ticks = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
    26cc:	3f c0       	rjmp	.+126    	; 0x274c <Left_Forward+0xfc>
	else if (__tmp > 65535)
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	4c f5       	brge	.+82     	; 0x2738 <Left_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e2       	ldi	r20, 0x20	; 32
    26f4:	51 e4       	ldi	r21, 0x41	; 65
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	8d 83       	std	Y+5, r24	; 0x05
    270e:	0f c0       	rjmp	.+30     	; 0x272e <Left_Forward+0xde>
    2710:	80 e9       	ldi	r24, 0x90	; 144
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	9c 83       	std	Y+4, r25	; 0x04
    2716:	8b 83       	std	Y+3, r24	; 0x03
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <Left_Forward+0xcc>
    2720:	9c 83       	std	Y+4, r25	; 0x04
    2722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	9e 81       	ldd	r25, Y+6	; 0x06
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	69 f7       	brne	.-38     	; 0x2710 <Left_Forward+0xc0>
    2736:	14 c0       	rjmp	.+40     	; 0x2760 <Left_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	8d 81       	ldd	r24, Y+5	; 0x05
    274e:	9e 81       	ldd	r25, Y+6	; 0x06
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <Left_Forward+0x108>
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	98 89       	ldd	r25, Y+16	; 0x10
    2764:	0a 96       	adiw	r24, 0x0a	; 10
    2766:	98 8b       	std	Y+16, r25	; 0x10
    2768:	8f 87       	std	Y+15, r24	; 0x0f
    276a:	80 91 d3 01 	lds	r24, 0x01D3
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	8f 85       	ldd	r24, Y+15	; 0x0f
    2774:	98 89       	ldd	r25, Y+16	; 0x10
    2776:	28 17       	cp	r18, r24
    2778:	39 07       	cpc	r19, r25
    277a:	0c f0       	brlt	.+2      	; 0x277e <Left_Forward+0x12e>
    277c:	76 cf       	rjmp	.-276    	; 0x266a <Left_Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    277e:	60 96       	adiw	r28, 0x10	; 16
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <Left_Forward_Parking>:
 * Description :
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(void)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	60 97       	sbiw	r28, 0x10	; 16
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= MOTOR_MAX_SPEED; i = i + 10)
    27a4:	18 8a       	std	Y+16, r1	; 0x10
    27a6:	1f 86       	std	Y+15, r1	; 0x0f
    27a8:	80 c0       	rjmp	.+256    	; 0x28aa <Left_Forward_Parking+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    27aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	69 2f       	mov	r22, r25
    27b0:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a0 e0       	ldi	r26, 0x00	; 0
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	ad 87       	std	Y+13, r26	; 0x0d
    27ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a e7       	ldi	r20, 0x7A	; 122
    27da:	55 e4       	ldi	r21, 0x45	; 69
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8f 83       	std	Y+7, r24	; 0x07
    27e6:	98 87       	std	Y+8, r25	; 0x08
    27e8:	a9 87       	std	Y+9, r26	; 0x09
    27ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <Left_Forward_Parking+0x7e>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	3f c0       	rjmp	.+126    	; 0x288c <Left_Forward_Parking+0xfc>
	else if (__tmp > 65535)
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <Left_Forward_Parking+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	0f c0       	rjmp	.+30     	; 0x286e <Left_Forward_Parking+0xde>
    2850:	80 e9       	ldi	r24, 0x90	; 144
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <Left_Forward_Parking+0xcc>
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <Left_Forward_Parking+0xc0>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <Left_Forward_Parking+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <Left_Forward_Parking+0x108>
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(void)
{
    for (int i = 0; i <= MOTOR_MAX_SPEED; i = i + 10)
    28a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a2:	98 89       	ldd	r25, Y+16	; 0x10
    28a4:	0a 96       	adiw	r24, 0x0a	; 10
    28a6:	98 8b       	std	Y+16, r25	; 0x10
    28a8:	8f 87       	std	Y+15, r24	; 0x0f
    28aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ac:	98 89       	ldd	r25, Y+16	; 0x10
    28ae:	85 36       	cpi	r24, 0x65	; 101
    28b0:	91 05       	cpc	r25, r1
    28b2:	0c f4       	brge	.+2      	; 0x28b6 <Left_Forward_Parking+0x126>
    28b4:	7a cf       	rjmp	.-268    	; 0x27aa <Left_Forward_Parking+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    28b6:	60 96       	adiw	r28, 0x10	; 16
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <Right_Backward>:
 * Description :
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	60 97       	sbiw	r28, 0x10	; 16
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    28dc:	18 8a       	std	Y+16, r1	; 0x10
    28de:	1f 86       	std	Y+15, r1	; 0x0f
    28e0:	80 c0       	rjmp	.+256    	; 0x29e2 <Right_Backward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    28ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	69 2f       	mov	r22, r25
    28f0:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	8b 87       	std	Y+11, r24	; 0x0b
    28fe:	9c 87       	std	Y+12, r25	; 0x0c
    2900:	ad 87       	std	Y+13, r26	; 0x0d
    2902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	55 e4       	ldi	r21, 0x45	; 69
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8f 83       	std	Y+7, r24	; 0x07
    291e:	98 87       	std	Y+8, r25	; 0x08
    2920:	a9 87       	std	Y+9, r26	; 0x09
    2922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <Right_Backward+0x7e>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <Right_Backward+0xfc>
	else if (__tmp > 65535)
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <Right_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <Right_Backward+0xde>
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <Right_Backward+0xcc>
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <Right_Backward+0xc0>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <Right_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6f 81       	ldd	r22, Y+7	; 0x07
    29b2:	78 85       	ldd	r23, Y+8	; 0x08
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <Right_Backward+0x108>
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    29d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29da:	98 89       	ldd	r25, Y+16	; 0x10
    29dc:	0a 96       	adiw	r24, 0x0a	; 10
    29de:	98 8b       	std	Y+16, r25	; 0x10
    29e0:	8f 87       	std	Y+15, r24	; 0x0f
    29e2:	80 91 d3 01 	lds	r24, 0x01D3
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ec:	98 89       	ldd	r25, Y+16	; 0x10
    29ee:	28 17       	cp	r18, r24
    29f0:	39 07       	cpc	r19, r25
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <Right_Backward+0x12e>
    29f4:	76 cf       	rjmp	.-276    	; 0x28e2 <Right_Backward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    29f6:	60 96       	adiw	r28, 0x10	; 16
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <Left_Backward>:
 * Description :
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	60 97       	sbiw	r28, 0x10	; 16
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    2a1c:	18 8a       	std	Y+16, r1	; 0x10
    2a1e:	1f 86       	std	Y+15, r1	; 0x0f
    2a20:	80 c0       	rjmp	.+256    	; 0x2b22 <Left_Backward+0x11a>
    {
        DcMotor1_Rotate(CW, i);
    2a22:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	69 2f       	mov	r22, r25
    2a28:	0e 94 93 10 	call	0x2126	; 0x2126 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	0e 94 e5 10 	call	0x21ca	; 0x21ca <DcMotor2_Rotate>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e0       	ldi	r26, 0x00	; 0
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	8b 87       	std	Y+11, r24	; 0x0b
    2a3e:	9c 87       	std	Y+12, r25	; 0x0c
    2a40:	ad 87       	std	Y+13, r26	; 0x0d
    2a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a e7       	ldi	r20, 0x7A	; 122
    2a52:	55 e4       	ldi	r21, 0x45	; 69
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8f 83       	std	Y+7, r24	; 0x07
    2a5e:	98 87       	std	Y+8, r25	; 0x08
    2a60:	a9 87       	std	Y+9, r26	; 0x09
    2a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a64:	6f 81       	ldd	r22, Y+7	; 0x07
    2a66:	78 85       	ldd	r23, Y+8	; 0x08
    2a68:	89 85       	ldd	r24, Y+9	; 0x09
    2a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <Left_Backward+0x7e>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <Left_Backward+0xfc>
	else if (__tmp > 65535)
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <Left_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9e 83       	std	Y+6, r25	; 0x06
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <Left_Backward+0xde>
    2ac8:	80 e9       	ldi	r24, 0x90	; 144
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	9c 83       	std	Y+4, r25	; 0x04
    2ace:	8b 83       	std	Y+3, r24	; 0x03
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <Left_Backward+0xcc>
    2ad8:	9c 83       	std	Y+4, r25	; 0x04
    2ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <Left_Backward+0xc0>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <Left_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <Left_Backward+0x108>
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    2b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1a:	98 89       	ldd	r25, Y+16	; 0x10
    2b1c:	0a 96       	adiw	r24, 0x0a	; 10
    2b1e:	98 8b       	std	Y+16, r25	; 0x10
    2b20:	8f 87       	std	Y+15, r24	; 0x0f
    2b22:	80 91 d3 01 	lds	r24, 0x01D3
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b2c:	98 89       	ldd	r25, Y+16	; 0x10
    2b2e:	28 17       	cp	r18, r24
    2b30:	39 07       	cpc	r19, r25
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <Left_Backward+0x12e>
    2b34:	76 cf       	rjmp	.-276    	; 0x2a22 <Left_Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    2b36:	60 96       	adiw	r28, 0x10	; 16
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions using the GPIO driver.
 * 2. Setup the LCD Data Mode (4-bits or 8-bits).
 */
void LCD_init(void)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	2e 97       	sbiw	r28, 0x0e	; 14
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    /* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	62 e0       	ldi	r22, 0x02	; 2
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	a0 ea       	ldi	r26, 0xA0	; 160
    2b76:	b1 e4       	ldi	r27, 0x41	; 65
    2b78:	8b 87       	std	Y+11, r24	; 0x0b
    2b7a:	9c 87       	std	Y+12, r25	; 0x0c
    2b7c:	ad 87       	std	Y+13, r26	; 0x0d
    2b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4a e7       	ldi	r20, 0x7A	; 122
    2b8e:	55 e4       	ldi	r21, 0x45	; 69
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	8f 83       	std	Y+7, r24	; 0x07
    2b9a:	98 87       	std	Y+8, r25	; 0x08
    2b9c:	a9 87       	std	Y+9, r26	; 0x09
    2b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba2:	78 85       	ldd	r23, Y+8	; 0x08
    2ba4:	89 85       	ldd	r24, Y+9	; 0x09
    2ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e8       	ldi	r20, 0x80	; 128
    2bae:	5f e3       	ldi	r21, 0x3F	; 63
    2bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb4:	88 23       	and	r24, r24
    2bb6:	2c f4       	brge	.+10     	; 0x2bc2 <LCD_init+0x7a>
		__ticks = 1;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	3f c0       	rjmp	.+126    	; 0x2c40 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	3f ef       	ldi	r19, 0xFF	; 255
    2bce:	4f e7       	ldi	r20, 0x7F	; 127
    2bd0:	57 e4       	ldi	r21, 0x47	; 71
    2bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd6:	18 16       	cp	r1, r24
    2bd8:	4c f5       	brge	.+82     	; 0x2c2c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e2       	ldi	r20, 0x20	; 32
    2be8:	51 e4       	ldi	r21, 0x41	; 65
    2bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	0f c0       	rjmp	.+30     	; 0x2c22 <LCD_init+0xda>
    2c04:	80 e9       	ldi	r24, 0x90	; 144
    2c06:	91 e0       	ldi	r25, 0x01	; 1
    2c08:	9c 83       	std	Y+4, r25	; 0x04
    2c0a:	8b 83       	std	Y+3, r24	; 0x03
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <LCD_init+0xc8>
    2c14:	9c 83       	std	Y+4, r25	; 0x04
    2c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	69 f7       	brne	.-38     	; 0x2c04 <LCD_init+0xbc>
    2c2a:	14 c0       	rjmp	.+40     	; 0x2c54 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9e 83       	std	Y+6, r25	; 0x06
    2c3e:	8d 83       	std	Y+5, r24	; 0x05
    2c40:	8d 81       	ldd	r24, Y+5	; 0x05
    2c42:	9e 81       	ldd	r25, Y+6	; 0x06
    2c44:	9a 83       	std	Y+2, r25	; 0x02
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_init+0x104>
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(20);  /* LCD Power ON delay (always > 15ms) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Configure 4 pins in the data port as output pins */
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	63 e0       	ldi	r22, 0x03	; 3
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	64 e0       	ldi	r22, 0x04	; 4
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	65 e0       	ldi	r22, 0x05	; 5
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	66 e0       	ldi	r22, 0x06	; 6
    2c76:	41 e0       	ldi	r20, 0x01	; 1
    2c78:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>

    /* Send initialization commands for 4-bit mode */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2c7c:	83 e3       	ldi	r24, 0x33	; 51
    2c7e:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2c82:	82 e3       	ldi	r24, 0x32	; 50
    2c84:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>

    /* Set 2-line LCD, 4-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2c88:	88 e2       	ldi	r24, 0x28	; 40
    2c8a:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>

    /* Set 2-line LCD, 8-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif

    LCD_sendCommand(LCD_CURSOR_OFF);  /* Turn cursor off */
    2c8e:	8c e0       	ldi	r24, 0x0C	; 12
    2c90:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Clear LCD at the beginning */
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>
}
    2c9a:	2e 96       	adiw	r28, 0x0e	; 14
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <LCD_sendCommand>:
 * Send a command to the LCD.
 * Parameters  :
 * - command: The command to be sent.
 */
void LCD_sendCommand(uint8 command)
{
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	c3 56       	subi	r28, 0x63	; 99
    2cba:	d0 40       	sbci	r29, 0x00	; 0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	ed 59       	subi	r30, 0x9D	; 157
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);  /* Instruction Mode (RS = 0) */
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e1 5a       	subi	r30, 0xA1	; 161
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	a0 e8       	ldi	r26, 0x80	; 128
    2ce4:	bf e3       	ldi	r27, 0x3F	; 63
    2ce6:	80 83       	st	Z, r24
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	a2 83       	std	Z+2, r26	; 0x02
    2cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	8e 01       	movw	r16, r28
    2cf0:	05 5a       	subi	r16, 0xA5	; 165
    2cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e1 5a       	subi	r30, 0xA1	; 161
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	60 81       	ld	r22, Z
    2cfc:	71 81       	ldd	r23, Z+1	; 0x01
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a e7       	ldi	r20, 0x7A	; 122
    2d08:	55 e4       	ldi	r21, 0x45	; 69
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	f8 01       	movw	r30, r16
    2d14:	80 83       	st	Z, r24
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	a2 83       	std	Z+2, r26	; 0x02
    2d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e5 5a       	subi	r30, 0xA5	; 165
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e8       	ldi	r20, 0x80	; 128
    2d30:	5f e3       	ldi	r21, 0x3F	; 63
    2d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d36:	88 23       	and	r24, r24
    2d38:	44 f4       	brge	.+16     	; 0x2d4a <LCD_sendCommand+0x9e>
		__ticks = 1;
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 5a       	subi	r30, 0xA7	; 167
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
    2d48:	64 c0       	rjmp	.+200    	; 0x2e12 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e5 5a       	subi	r30, 0xA5	; 165
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	60 81       	ld	r22, Z
    2d52:	71 81       	ldd	r23, Z+1	; 0x01
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	0c f0       	brlt	.+2      	; 0x2d6a <LCD_sendCommand+0xbe>
    2d68:	43 c0       	rjmp	.+134    	; 0x2df0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e1 5a       	subi	r30, 0xA1	; 161
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	51 e4       	ldi	r21, 0x41	; 65
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	8e 01       	movw	r16, r28
    2d8a:	07 5a       	subi	r16, 0xA7	; 167
    2d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
    2da0:	1f c0       	rjmp	.+62     	; 0x2de0 <LCD_sendCommand+0x134>
    2da2:	fe 01       	movw	r30, r28
    2da4:	e9 5a       	subi	r30, 0xA9	; 169
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 e9       	ldi	r24, 0x90	; 144
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    2db0:	fe 01       	movw	r30, r28
    2db2:	e9 5a       	subi	r30, 0xA9	; 169
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 81       	ld	r24, Z
    2db8:	91 81       	ldd	r25, Z+1	; 0x01
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <LCD_sendCommand+0x10e>
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e9 5a       	subi	r30, 0xA9	; 169
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc8:	de 01       	movw	r26, r28
    2dca:	a7 5a       	subi	r26, 0xA7	; 167
    2dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e7 5a       	subi	r30, 0xA7	; 167
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	11 96       	adiw	r26, 0x01	; 1
    2ddc:	9c 93       	st	X, r25
    2dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 5a       	subi	r30, 0xA7	; 167
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	d1 f6       	brne	.-76     	; 0x2da2 <LCD_sendCommand+0xf6>
    2dee:	27 c0       	rjmp	.+78     	; 0x2e3e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df0:	8e 01       	movw	r16, r28
    2df2:	07 5a       	subi	r16, 0xA7	; 167
    2df4:	1f 4f       	sbci	r17, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	e5 5a       	subi	r30, 0xA5	; 165
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	60 81       	ld	r22, Z
    2dfe:	71 81       	ldd	r23, Z+1	; 0x01
    2e00:	82 81       	ldd	r24, Z+2	; 0x02
    2e02:	93 81       	ldd	r25, Z+3	; 0x03
    2e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	f8 01       	movw	r30, r16
    2e0e:	91 83       	std	Z+1, r25	; 0x01
    2e10:	80 83       	st	Z, r24
    2e12:	de 01       	movw	r26, r28
    2e14:	ab 5a       	subi	r26, 0xAB	; 171
    2e16:	bf 4f       	sbci	r27, 0xFF	; 255
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e7 5a       	subi	r30, 0xA7	; 167
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	8d 93       	st	X+, r24
    2e24:	9c 93       	st	X, r25
    2e26:	fe 01       	movw	r30, r28
    2e28:	eb 5a       	subi	r30, 0xAB	; 171
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_sendCommand+0x184>
    2e34:	fe 01       	movw	r30, r28
    2e36:	eb 5a       	subi	r30, 0xAB	; 171
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	62 e0       	ldi	r22, 0x02	; 2
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ef 5a       	subi	r30, 0xAF	; 175
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a0 e8       	ldi	r26, 0x80	; 128
    2e54:	bf e3       	ldi	r27, 0x3F	; 63
    2e56:	80 83       	st	Z, r24
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	a2 83       	std	Z+2, r26	; 0x02
    2e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	8e 01       	movw	r16, r28
    2e60:	03 5b       	subi	r16, 0xB3	; 179
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	ef 5a       	subi	r30, 0xAF	; 175
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	f8 01       	movw	r30, r16
    2e84:	80 83       	st	Z, r24
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	a2 83       	std	Z+2, r26	; 0x02
    2e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e3 5b       	subi	r30, 0xB3	; 179
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	44 f4       	brge	.+16     	; 0x2eba <LCD_sendCommand+0x20e>
		__ticks = 1;
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e5 5b       	subi	r30, 0xB5	; 181
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	64 c0       	rjmp	.+200    	; 0x2f82 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e3 5b       	subi	r30, 0xB3	; 179
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	0c f0       	brlt	.+2      	; 0x2eda <LCD_sendCommand+0x22e>
    2ed8:	43 c0       	rjmp	.+134    	; 0x2f60 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eda:	fe 01       	movw	r30, r28
    2edc:	ef 5a       	subi	r30, 0xAF	; 175
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e2       	ldi	r20, 0x20	; 32
    2eee:	51 e4       	ldi	r21, 0x41	; 65
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8e 01       	movw	r16, r28
    2efa:	05 5b       	subi	r16, 0xB5	; 181
    2efc:	1f 4f       	sbci	r17, 0xFF	; 255
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	1f c0       	rjmp	.+62     	; 0x2f50 <LCD_sendCommand+0x2a4>
    2f12:	fe 01       	movw	r30, r28
    2f14:	e7 5b       	subi	r30, 0xB7	; 183
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 e9       	ldi	r24, 0x90	; 144
    2f1a:	91 e0       	ldi	r25, 0x01	; 1
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
    2f20:	fe 01       	movw	r30, r28
    2f22:	e7 5b       	subi	r30, 0xB7	; 183
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_sendCommand+0x27e>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e7 5b       	subi	r30, 0xB7	; 183
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	de 01       	movw	r26, r28
    2f3a:	a5 5b       	subi	r26, 0xB5	; 181
    2f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e5 5b       	subi	r30, 0xB5	; 181
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	11 96       	adiw	r26, 0x01	; 1
    2f4c:	9c 93       	st	X, r25
    2f4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f50:	fe 01       	movw	r30, r28
    2f52:	e5 5b       	subi	r30, 0xB5	; 181
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	d1 f6       	brne	.-76     	; 0x2f12 <LCD_sendCommand+0x266>
    2f5e:	27 c0       	rjmp	.+78     	; 0x2fae <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	8e 01       	movw	r16, r28
    2f62:	05 5b       	subi	r16, 0xB5	; 181
    2f64:	1f 4f       	sbci	r17, 0xFF	; 255
    2f66:	fe 01       	movw	r30, r28
    2f68:	e3 5b       	subi	r30, 0xB3	; 179
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
    2f82:	de 01       	movw	r26, r28
    2f84:	a9 5b       	subi	r26, 0xB9	; 185
    2f86:	bf 4f       	sbci	r27, 0xFF	; 255
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e5 5b       	subi	r30, 0xB5	; 181
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	8d 93       	st	X+, r24
    2f94:	9c 93       	st	X, r25
    2f96:	fe 01       	movw	r30, r28
    2f98:	e9 5b       	subi	r30, 0xB9	; 185
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_sendCommand+0x2f4>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e9 5b       	subi	r30, 0xB9	; 185
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ed 59       	subi	r30, 0x9D	; 157
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	80 71       	andi	r24, 0x10	; 16
    2fbc:	90 70       	andi	r25, 0x00	; 0
    2fbe:	95 95       	asr	r25
    2fc0:	87 95       	ror	r24
    2fc2:	95 95       	asr	r25
    2fc4:	87 95       	ror	r24
    2fc6:	95 95       	asr	r25
    2fc8:	87 95       	ror	r24
    2fca:	95 95       	asr	r25
    2fcc:	87 95       	ror	r24
    2fce:	98 2f       	mov	r25, r24
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	63 e0       	ldi	r22, 0x03	; 3
    2fd4:	49 2f       	mov	r20, r25
    2fd6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ed 59       	subi	r30, 0x9D	; 157
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	88 2f       	mov	r24, r24
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	80 72       	andi	r24, 0x20	; 32
    2fe8:	90 70       	andi	r25, 0x00	; 0
    2fea:	95 95       	asr	r25
    2fec:	87 95       	ror	r24
    2fee:	95 95       	asr	r25
    2ff0:	87 95       	ror	r24
    2ff2:	95 95       	asr	r25
    2ff4:	87 95       	ror	r24
    2ff6:	95 95       	asr	r25
    2ff8:	87 95       	ror	r24
    2ffa:	95 95       	asr	r25
    2ffc:	87 95       	ror	r24
    2ffe:	98 2f       	mov	r25, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	64 e0       	ldi	r22, 0x04	; 4
    3004:	49 2f       	mov	r20, r25
    3006:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    300a:	fe 01       	movw	r30, r28
    300c:	ed 59       	subi	r30, 0x9D	; 157
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	88 2f       	mov	r24, r24
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	80 74       	andi	r24, 0x40	; 64
    3018:	90 70       	andi	r25, 0x00	; 0
    301a:	08 2e       	mov	r0, r24
    301c:	89 2f       	mov	r24, r25
    301e:	00 0c       	add	r0, r0
    3020:	88 1f       	adc	r24, r24
    3022:	99 0b       	sbc	r25, r25
    3024:	00 0c       	add	r0, r0
    3026:	88 1f       	adc	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	98 2f       	mov	r25, r24
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	65 e0       	ldi	r22, 0x05	; 5
    3030:	49 2f       	mov	r20, r25
    3032:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    3036:	fe 01       	movw	r30, r28
    3038:	ed 59       	subi	r30, 0x9D	; 157
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	98 2f       	mov	r25, r24
    3040:	99 1f       	adc	r25, r25
    3042:	99 27       	eor	r25, r25
    3044:	99 1f       	adc	r25, r25
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	66 e0       	ldi	r22, 0x06	; 6
    304a:	49 2f       	mov	r20, r25
    304c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3050:	fe 01       	movw	r30, r28
    3052:	ed 5b       	subi	r30, 0xBD	; 189
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 e8       	ldi	r26, 0x80	; 128
    305c:	bf e3       	ldi	r27, 0x3F	; 63
    305e:	80 83       	st	Z, r24
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	a2 83       	std	Z+2, r26	; 0x02
    3064:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	8e 01       	movw	r16, r28
    3068:	01 5c       	subi	r16, 0xC1	; 193
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	fe 01       	movw	r30, r28
    306e:	ed 5b       	subi	r30, 0xBD	; 189
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a e7       	ldi	r20, 0x7A	; 122
    3080:	55 e4       	ldi	r21, 0x45	; 69
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	f8 01       	movw	r30, r16
    308c:	80 83       	st	Z, r24
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	a2 83       	std	Z+2, r26	; 0x02
    3092:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3094:	fe 01       	movw	r30, r28
    3096:	ff 96       	adiw	r30, 0x3f	; 63
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <LCD_sendCommand+0x40e>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9e af       	std	Y+62, r25	; 0x3e
    30b6:	8d af       	std	Y+61, r24	; 0x3d
    30b8:	46 c0       	rjmp	.+140    	; 0x3146 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    30ba:	fe 01       	movw	r30, r28
    30bc:	ff 96       	adiw	r30, 0x3f	; 63
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	57 e4       	ldi	r21, 0x47	; 71
    30ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	64 f5       	brge	.+88     	; 0x312e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d6:	fe 01       	movw	r30, r28
    30d8:	ed 5b       	subi	r30, 0xBD	; 189
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e2       	ldi	r20, 0x20	; 32
    30ea:	51 e4       	ldi	r21, 0x41	; 65
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	bc 01       	movw	r22, r24
    30f6:	cd 01       	movw	r24, r26
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9e af       	std	Y+62, r25	; 0x3e
    3102:	8d af       	std	Y+61, r24	; 0x3d
    3104:	0f c0       	rjmp	.+30     	; 0x3124 <LCD_sendCommand+0x478>
    3106:	80 e9       	ldi	r24, 0x90	; 144
    3108:	91 e0       	ldi	r25, 0x01	; 1
    310a:	9c af       	std	Y+60, r25	; 0x3c
    310c:	8b af       	std	Y+59, r24	; 0x3b
    310e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3110:	9c ad       	ldd	r25, Y+60	; 0x3c
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <LCD_sendCommand+0x466>
    3116:	9c af       	std	Y+60, r25	; 0x3c
    3118:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311a:	8d ad       	ldd	r24, Y+61	; 0x3d
    311c:	9e ad       	ldd	r25, Y+62	; 0x3e
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	9e af       	std	Y+62, r25	; 0x3e
    3122:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3124:	8d ad       	ldd	r24, Y+61	; 0x3d
    3126:	9e ad       	ldd	r25, Y+62	; 0x3e
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	69 f7       	brne	.-38     	; 0x3106 <LCD_sendCommand+0x45a>
    312c:	16 c0       	rjmp	.+44     	; 0x315a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312e:	fe 01       	movw	r30, r28
    3130:	ff 96       	adiw	r30, 0x3f	; 63
    3132:	60 81       	ld	r22, Z
    3134:	71 81       	ldd	r23, Z+1	; 0x01
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e af       	std	Y+62, r25	; 0x3e
    3144:	8d af       	std	Y+61, r24	; 0x3d
    3146:	8d ad       	ldd	r24, Y+61	; 0x3d
    3148:	9e ad       	ldd	r25, Y+62	; 0x3e
    314a:	9a af       	std	Y+58, r25	; 0x3a
    314c:	89 af       	std	Y+57, r24	; 0x39
    314e:	89 ad       	ldd	r24, Y+57	; 0x39
    3150:	9a ad       	ldd	r25, Y+58	; 0x3a
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <LCD_sendCommand+0x4a6>
    3156:	9a af       	std	Y+58, r25	; 0x3a
    3158:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	62 e0       	ldi	r22, 0x02	; 2
    315e:	40 e0       	ldi	r20, 0x00	; 0
    3160:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	a0 e8       	ldi	r26, 0x80	; 128
    316a:	bf e3       	ldi	r27, 0x3F	; 63
    316c:	8d ab       	std	Y+53, r24	; 0x35
    316e:	9e ab       	std	Y+54, r25	; 0x36
    3170:	af ab       	std	Y+55, r26	; 0x37
    3172:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3174:	6d a9       	ldd	r22, Y+53	; 0x35
    3176:	7e a9       	ldd	r23, Y+54	; 0x36
    3178:	8f a9       	ldd	r24, Y+55	; 0x37
    317a:	98 ad       	ldd	r25, Y+56	; 0x38
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	4a e7       	ldi	r20, 0x7A	; 122
    3182:	55 e4       	ldi	r21, 0x45	; 69
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	89 ab       	std	Y+49, r24	; 0x31
    318e:	9a ab       	std	Y+50, r25	; 0x32
    3190:	ab ab       	std	Y+51, r26	; 0x33
    3192:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3194:	69 a9       	ldd	r22, Y+49	; 0x31
    3196:	7a a9       	ldd	r23, Y+50	; 0x32
    3198:	8b a9       	ldd	r24, Y+51	; 0x33
    319a:	9c a9       	ldd	r25, Y+52	; 0x34
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e8       	ldi	r20, 0x80	; 128
    31a2:	5f e3       	ldi	r21, 0x3F	; 63
    31a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a8:	88 23       	and	r24, r24
    31aa:	2c f4       	brge	.+10     	; 0x31b6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	98 ab       	std	Y+48, r25	; 0x30
    31b2:	8f a7       	std	Y+47, r24	; 0x2f
    31b4:	3f c0       	rjmp	.+126    	; 0x3234 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    31b6:	69 a9       	ldd	r22, Y+49	; 0x31
    31b8:	7a a9       	ldd	r23, Y+50	; 0x32
    31ba:	8b a9       	ldd	r24, Y+51	; 0x33
    31bc:	9c a9       	ldd	r25, Y+52	; 0x34
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	3f ef       	ldi	r19, 0xFF	; 255
    31c2:	4f e7       	ldi	r20, 0x7F	; 127
    31c4:	57 e4       	ldi	r21, 0x47	; 71
    31c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ca:	18 16       	cp	r1, r24
    31cc:	4c f5       	brge	.+82     	; 0x3220 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ce:	6d a9       	ldd	r22, Y+53	; 0x35
    31d0:	7e a9       	ldd	r23, Y+54	; 0x36
    31d2:	8f a9       	ldd	r24, Y+55	; 0x37
    31d4:	98 ad       	ldd	r25, Y+56	; 0x38
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e2       	ldi	r20, 0x20	; 32
    31dc:	51 e4       	ldi	r21, 0x41	; 65
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	98 ab       	std	Y+48, r25	; 0x30
    31f4:	8f a7       	std	Y+47, r24	; 0x2f
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <LCD_sendCommand+0x56a>
    31f8:	80 e9       	ldi	r24, 0x90	; 144
    31fa:	91 e0       	ldi	r25, 0x01	; 1
    31fc:	9e a7       	std	Y+46, r25	; 0x2e
    31fe:	8d a7       	std	Y+45, r24	; 0x2d
    3200:	8d a5       	ldd	r24, Y+45	; 0x2d
    3202:	9e a5       	ldd	r25, Y+46	; 0x2e
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <LCD_sendCommand+0x558>
    3208:	9e a7       	std	Y+46, r25	; 0x2e
    320a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320c:	8f a5       	ldd	r24, Y+47	; 0x2f
    320e:	98 a9       	ldd	r25, Y+48	; 0x30
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	98 ab       	std	Y+48, r25	; 0x30
    3214:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3216:	8f a5       	ldd	r24, Y+47	; 0x2f
    3218:	98 a9       	ldd	r25, Y+48	; 0x30
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	69 f7       	brne	.-38     	; 0x31f8 <LCD_sendCommand+0x54c>
    321e:	14 c0       	rjmp	.+40     	; 0x3248 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3220:	69 a9       	ldd	r22, Y+49	; 0x31
    3222:	7a a9       	ldd	r23, Y+50	; 0x32
    3224:	8b a9       	ldd	r24, Y+51	; 0x33
    3226:	9c a9       	ldd	r25, Y+52	; 0x34
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	98 ab       	std	Y+48, r25	; 0x30
    3232:	8f a7       	std	Y+47, r24	; 0x2f
    3234:	8f a5       	ldd	r24, Y+47	; 0x2f
    3236:	98 a9       	ldd	r25, Y+48	; 0x30
    3238:	9c a7       	std	Y+44, r25	; 0x2c
    323a:	8b a7       	std	Y+43, r24	; 0x2b
    323c:	8b a5       	ldd	r24, Y+43	; 0x2b
    323e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	f1 f7       	brne	.-4      	; 0x3240 <LCD_sendCommand+0x594>
    3244:	9c a7       	std	Y+44, r25	; 0x2c
    3246:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	62 e0       	ldi	r22, 0x02	; 2
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	a0 e8       	ldi	r26, 0x80	; 128
    3258:	bf e3       	ldi	r27, 0x3F	; 63
    325a:	8f a3       	std	Y+39, r24	; 0x27
    325c:	98 a7       	std	Y+40, r25	; 0x28
    325e:	a9 a7       	std	Y+41, r26	; 0x29
    3260:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3262:	6f a1       	ldd	r22, Y+39	; 0x27
    3264:	78 a5       	ldd	r23, Y+40	; 0x28
    3266:	89 a5       	ldd	r24, Y+41	; 0x29
    3268:	9a a5       	ldd	r25, Y+42	; 0x2a
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	4a e7       	ldi	r20, 0x7A	; 122
    3270:	55 e4       	ldi	r21, 0x45	; 69
    3272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	8b a3       	std	Y+35, r24	; 0x23
    327c:	9c a3       	std	Y+36, r25	; 0x24
    327e:	ad a3       	std	Y+37, r26	; 0x25
    3280:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3282:	6b a1       	ldd	r22, Y+35	; 0x23
    3284:	7c a1       	ldd	r23, Y+36	; 0x24
    3286:	8d a1       	ldd	r24, Y+37	; 0x25
    3288:	9e a1       	ldd	r25, Y+38	; 0x26
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e8       	ldi	r20, 0x80	; 128
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3296:	88 23       	and	r24, r24
    3298:	2c f4       	brge	.+10     	; 0x32a4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	9a a3       	std	Y+34, r25	; 0x22
    32a0:	89 a3       	std	Y+33, r24	; 0x21
    32a2:	3f c0       	rjmp	.+126    	; 0x3322 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    32a4:	6b a1       	ldd	r22, Y+35	; 0x23
    32a6:	7c a1       	ldd	r23, Y+36	; 0x24
    32a8:	8d a1       	ldd	r24, Y+37	; 0x25
    32aa:	9e a1       	ldd	r25, Y+38	; 0x26
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	3f ef       	ldi	r19, 0xFF	; 255
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	57 e4       	ldi	r21, 0x47	; 71
    32b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b8:	18 16       	cp	r1, r24
    32ba:	4c f5       	brge	.+82     	; 0x330e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32bc:	6f a1       	ldd	r22, Y+39	; 0x27
    32be:	78 a5       	ldd	r23, Y+40	; 0x28
    32c0:	89 a5       	ldd	r24, Y+41	; 0x29
    32c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e2       	ldi	r20, 0x20	; 32
    32ca:	51 e4       	ldi	r21, 0x41	; 65
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	9a a3       	std	Y+34, r25	; 0x22
    32e2:	89 a3       	std	Y+33, r24	; 0x21
    32e4:	0f c0       	rjmp	.+30     	; 0x3304 <LCD_sendCommand+0x658>
    32e6:	80 e9       	ldi	r24, 0x90	; 144
    32e8:	91 e0       	ldi	r25, 0x01	; 1
    32ea:	98 a3       	std	Y+32, r25	; 0x20
    32ec:	8f 8f       	std	Y+31, r24	; 0x1f
    32ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32f0:	98 a1       	ldd	r25, Y+32	; 0x20
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <LCD_sendCommand+0x646>
    32f6:	98 a3       	std	Y+32, r25	; 0x20
    32f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fa:	89 a1       	ldd	r24, Y+33	; 0x21
    32fc:	9a a1       	ldd	r25, Y+34	; 0x22
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	9a a3       	std	Y+34, r25	; 0x22
    3302:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3304:	89 a1       	ldd	r24, Y+33	; 0x21
    3306:	9a a1       	ldd	r25, Y+34	; 0x22
    3308:	00 97       	sbiw	r24, 0x00	; 0
    330a:	69 f7       	brne	.-38     	; 0x32e6 <LCD_sendCommand+0x63a>
    330c:	14 c0       	rjmp	.+40     	; 0x3336 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330e:	6b a1       	ldd	r22, Y+35	; 0x23
    3310:	7c a1       	ldd	r23, Y+36	; 0x24
    3312:	8d a1       	ldd	r24, Y+37	; 0x25
    3314:	9e a1       	ldd	r25, Y+38	; 0x26
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	9a a3       	std	Y+34, r25	; 0x22
    3320:	89 a3       	std	Y+33, r24	; 0x21
    3322:	89 a1       	ldd	r24, Y+33	; 0x21
    3324:	9a a1       	ldd	r25, Y+34	; 0x22
    3326:	9e 8f       	std	Y+30, r25	; 0x1e
    3328:	8d 8f       	std	Y+29, r24	; 0x1d
    332a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    332c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	f1 f7       	brne	.-4      	; 0x332e <LCD_sendCommand+0x682>
    3332:	9e 8f       	std	Y+30, r25	; 0x1e
    3334:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    3336:	fe 01       	movw	r30, r28
    3338:	ed 59       	subi	r30, 0x9D	; 157
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 81       	ld	r24, Z
    333e:	98 2f       	mov	r25, r24
    3340:	91 70       	andi	r25, 0x01	; 1
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	63 e0       	ldi	r22, 0x03	; 3
    3346:	49 2f       	mov	r20, r25
    3348:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    334c:	fe 01       	movw	r30, r28
    334e:	ed 59       	subi	r30, 0x9D	; 157
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	82 70       	andi	r24, 0x02	; 2
    335a:	90 70       	andi	r25, 0x00	; 0
    335c:	95 95       	asr	r25
    335e:	87 95       	ror	r24
    3360:	98 2f       	mov	r25, r24
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	64 e0       	ldi	r22, 0x04	; 4
    3366:	49 2f       	mov	r20, r25
    3368:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    336c:	fe 01       	movw	r30, r28
    336e:	ed 59       	subi	r30, 0x9D	; 157
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 81       	ld	r24, Z
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	84 70       	andi	r24, 0x04	; 4
    337a:	90 70       	andi	r25, 0x00	; 0
    337c:	95 95       	asr	r25
    337e:	87 95       	ror	r24
    3380:	95 95       	asr	r25
    3382:	87 95       	ror	r24
    3384:	98 2f       	mov	r25, r24
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	65 e0       	ldi	r22, 0x05	; 5
    338a:	49 2f       	mov	r20, r25
    338c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    3390:	fe 01       	movw	r30, r28
    3392:	ed 59       	subi	r30, 0x9D	; 157
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	88 70       	andi	r24, 0x08	; 8
    339e:	90 70       	andi	r25, 0x00	; 0
    33a0:	95 95       	asr	r25
    33a2:	87 95       	ror	r24
    33a4:	95 95       	asr	r25
    33a6:	87 95       	ror	r24
    33a8:	95 95       	asr	r25
    33aa:	87 95       	ror	r24
    33ac:	98 2f       	mov	r25, r24
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	66 e0       	ldi	r22, 0x06	; 6
    33b2:	49 2f       	mov	r20, r25
    33b4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	a0 e8       	ldi	r26, 0x80	; 128
    33be:	bf e3       	ldi	r27, 0x3F	; 63
    33c0:	89 8f       	std	Y+25, r24	; 0x19
    33c2:	9a 8f       	std	Y+26, r25	; 0x1a
    33c4:	ab 8f       	std	Y+27, r26	; 0x1b
    33c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c8:	69 8d       	ldd	r22, Y+25	; 0x19
    33ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	4a e7       	ldi	r20, 0x7A	; 122
    33d6:	55 e4       	ldi	r21, 0x45	; 69
    33d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	8d 8b       	std	Y+21, r24	; 0x15
    33e2:	9e 8b       	std	Y+22, r25	; 0x16
    33e4:	af 8b       	std	Y+23, r26	; 0x17
    33e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33e8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ea:	7e 89       	ldd	r23, Y+22	; 0x16
    33ec:	8f 89       	ldd	r24, Y+23	; 0x17
    33ee:	98 8d       	ldd	r25, Y+24	; 0x18
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e8       	ldi	r20, 0x80	; 128
    33f6:	5f e3       	ldi	r21, 0x3F	; 63
    33f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33fc:	88 23       	and	r24, r24
    33fe:	2c f4       	brge	.+10     	; 0x340a <LCD_sendCommand+0x75e>
		__ticks = 1;
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9c 8b       	std	Y+20, r25	; 0x14
    3406:	8b 8b       	std	Y+19, r24	; 0x13
    3408:	3f c0       	rjmp	.+126    	; 0x3488 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	3f ef       	ldi	r19, 0xFF	; 255
    3416:	4f e7       	ldi	r20, 0x7F	; 127
    3418:	57 e4       	ldi	r21, 0x47	; 71
    341a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    341e:	18 16       	cp	r1, r24
    3420:	4c f5       	brge	.+82     	; 0x3474 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3422:	69 8d       	ldd	r22, Y+25	; 0x19
    3424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e2       	ldi	r20, 0x20	; 32
    3430:	51 e4       	ldi	r21, 0x41	; 65
    3432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	bc 01       	movw	r22, r24
    343c:	cd 01       	movw	r24, r26
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	9c 8b       	std	Y+20, r25	; 0x14
    3448:	8b 8b       	std	Y+19, r24	; 0x13
    344a:	0f c0       	rjmp	.+30     	; 0x346a <LCD_sendCommand+0x7be>
    344c:	80 e9       	ldi	r24, 0x90	; 144
    344e:	91 e0       	ldi	r25, 0x01	; 1
    3450:	9a 8b       	std	Y+18, r25	; 0x12
    3452:	89 8b       	std	Y+17, r24	; 0x11
    3454:	89 89       	ldd	r24, Y+17	; 0x11
    3456:	9a 89       	ldd	r25, Y+18	; 0x12
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <LCD_sendCommand+0x7ac>
    345c:	9a 8b       	std	Y+18, r25	; 0x12
    345e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3460:	8b 89       	ldd	r24, Y+19	; 0x13
    3462:	9c 89       	ldd	r25, Y+20	; 0x14
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	9c 8b       	std	Y+20, r25	; 0x14
    3468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346a:	8b 89       	ldd	r24, Y+19	; 0x13
    346c:	9c 89       	ldd	r25, Y+20	; 0x14
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	69 f7       	brne	.-38     	; 0x344c <LCD_sendCommand+0x7a0>
    3472:	14 c0       	rjmp	.+40     	; 0x349c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3474:	6d 89       	ldd	r22, Y+21	; 0x15
    3476:	7e 89       	ldd	r23, Y+22	; 0x16
    3478:	8f 89       	ldd	r24, Y+23	; 0x17
    347a:	98 8d       	ldd	r25, Y+24	; 0x18
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9c 8b       	std	Y+20, r25	; 0x14
    3486:	8b 8b       	std	Y+19, r24	; 0x13
    3488:	8b 89       	ldd	r24, Y+19	; 0x13
    348a:	9c 89       	ldd	r25, Y+20	; 0x14
    348c:	98 8b       	std	Y+16, r25	; 0x10
    348e:	8f 87       	std	Y+15, r24	; 0x0f
    3490:	8f 85       	ldd	r24, Y+15	; 0x0f
    3492:	98 89       	ldd	r25, Y+16	; 0x10
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <LCD_sendCommand+0x7e8>
    3498:	98 8b       	std	Y+16, r25	; 0x10
    349a:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	62 e0       	ldi	r22, 0x02	; 2
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	a0 e8       	ldi	r26, 0x80	; 128
    34ac:	bf e3       	ldi	r27, 0x3F	; 63
    34ae:	8b 87       	std	Y+11, r24	; 0x0b
    34b0:	9c 87       	std	Y+12, r25	; 0x0c
    34b2:	ad 87       	std	Y+13, r26	; 0x0d
    34b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a e7       	ldi	r20, 0x7A	; 122
    34c4:	55 e4       	ldi	r21, 0x45	; 69
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	8f 83       	std	Y+7, r24	; 0x07
    34d0:	98 87       	std	Y+8, r25	; 0x08
    34d2:	a9 87       	std	Y+9, r26	; 0x09
    34d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 83       	std	Y+5, r24	; 0x05
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	78 85       	ldd	r23, Y+8	; 0x08
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	6b 85       	ldd	r22, Y+11	; 0x0b
    3512:	7c 85       	ldd	r23, Y+12	; 0x0c
    3514:	8d 85       	ldd	r24, Y+13	; 0x0d
    3516:	9e 85       	ldd	r25, Y+14	; 0x0e
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9e 83       	std	Y+6, r25	; 0x06
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <LCD_sendCommand+0x8ac>
    353a:	80 e9       	ldi	r24, 0x90	; 144
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	9c 83       	std	Y+4, r25	; 0x04
    3540:	8b 83       	std	Y+3, r24	; 0x03
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	9c 81       	ldd	r25, Y+4	; 0x04
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <LCD_sendCommand+0x89a>
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	9e 81       	ldd	r25, Y+6	; 0x06
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9e 83       	std	Y+6, r25	; 0x06
    3556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	8d 81       	ldd	r24, Y+5	; 0x05
    355a:	9e 81       	ldd	r25, Y+6	; 0x06
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	69 f7       	brne	.-38     	; 0x353a <LCD_sendCommand+0x88e>
    3560:	14 c0       	rjmp	.+40     	; 0x358a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	6f 81       	ldd	r22, Y+7	; 0x07
    3564:	78 85       	ldd	r23, Y+8	; 0x08
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	8d 81       	ldd	r24, Y+5	; 0x05
    3578:	9e 81       	ldd	r25, Y+6	; 0x06
    357a:	9a 83       	std	Y+2, r25	; 0x02
    357c:	89 83       	std	Y+1, r24	; 0x01
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	9a 81       	ldd	r25, Y+2	; 0x02
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <LCD_sendCommand+0x8d6>
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, command);  /* Output the command to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    358a:	cd 59       	subi	r28, 0x9D	; 157
    358c:	df 4f       	sbci	r29, 0xFF	; 255
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	08 95       	ret

000035a2 <LCD_displayCharacter>:
 * Display a character on the LCD.
 * Parameters  :
 * - data: The character to be displayed.
 */
void LCD_displayCharacter(uint8 data)
{
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	c3 56       	subi	r28, 0x63	; 99
    35b0:	d0 40       	sbci	r29, 0x00	; 0
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	fe 01       	movw	r30, r28
    35be:	ed 59       	subi	r30, 0x9D	; 157
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);  /* Data Mode (RS = 1) */
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	61 e0       	ldi	r22, 0x01	; 1
    35c8:	41 e0       	ldi	r20, 0x01	; 1
    35ca:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e1 5a       	subi	r30, 0xA1	; 161
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a0 e8       	ldi	r26, 0x80	; 128
    35da:	bf e3       	ldi	r27, 0x3F	; 63
    35dc:	80 83       	st	Z, r24
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	a2 83       	std	Z+2, r26	; 0x02
    35e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	8e 01       	movw	r16, r28
    35e6:	05 5a       	subi	r16, 0xA5	; 165
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	fe 01       	movw	r30, r28
    35ec:	e1 5a       	subi	r30, 0xA1	; 161
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a e7       	ldi	r20, 0x7A	; 122
    35fe:	55 e4       	ldi	r21, 0x45	; 69
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	f8 01       	movw	r30, r16
    360a:	80 83       	st	Z, r24
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	a2 83       	std	Z+2, r26	; 0x02
    3610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3612:	fe 01       	movw	r30, r28
    3614:	e5 5a       	subi	r30, 0xA5	; 165
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	60 81       	ld	r22, Z
    361a:	71 81       	ldd	r23, Z+1	; 0x01
    361c:	82 81       	ldd	r24, Z+2	; 0x02
    361e:	93 81       	ldd	r25, Z+3	; 0x03
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e8       	ldi	r20, 0x80	; 128
    3626:	5f e3       	ldi	r21, 0x3F	; 63
    3628:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    362c:	88 23       	and	r24, r24
    362e:	44 f4       	brge	.+16     	; 0x3640 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3630:	fe 01       	movw	r30, r28
    3632:	e7 5a       	subi	r30, 0xA7	; 167
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
    363e:	64 c0       	rjmp	.+200    	; 0x3708 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3640:	fe 01       	movw	r30, r28
    3642:	e5 5a       	subi	r30, 0xA5	; 165
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	4f e7       	ldi	r20, 0x7F	; 127
    3654:	57 e4       	ldi	r21, 0x47	; 71
    3656:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    365a:	18 16       	cp	r1, r24
    365c:	0c f0       	brlt	.+2      	; 0x3660 <LCD_displayCharacter+0xbe>
    365e:	43 c0       	rjmp	.+134    	; 0x36e6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	fe 01       	movw	r30, r28
    3662:	e1 5a       	subi	r30, 0xA1	; 161
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	82 81       	ldd	r24, Z+2	; 0x02
    366c:	93 81       	ldd	r25, Z+3	; 0x03
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e2       	ldi	r20, 0x20	; 32
    3674:	51 e4       	ldi	r21, 0x41	; 65
    3676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8e 01       	movw	r16, r28
    3680:	07 5a       	subi	r16, 0xA7	; 167
    3682:	1f 4f       	sbci	r17, 0xFF	; 255
    3684:	bc 01       	movw	r22, r24
    3686:	cd 01       	movw	r24, r26
    3688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	f8 01       	movw	r30, r16
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
    3696:	1f c0       	rjmp	.+62     	; 0x36d6 <LCD_displayCharacter+0x134>
    3698:	fe 01       	movw	r30, r28
    369a:	e9 5a       	subi	r30, 0xA9	; 169
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	80 e9       	ldi	r24, 0x90	; 144
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
    36a6:	fe 01       	movw	r30, r28
    36a8:	e9 5a       	subi	r30, 0xA9	; 169
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	80 81       	ld	r24, Z
    36ae:	91 81       	ldd	r25, Z+1	; 0x01
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <LCD_displayCharacter+0x10e>
    36b4:	fe 01       	movw	r30, r28
    36b6:	e9 5a       	subi	r30, 0xA9	; 169
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36be:	de 01       	movw	r26, r28
    36c0:	a7 5a       	subi	r26, 0xA7	; 167
    36c2:	bf 4f       	sbci	r27, 0xFF	; 255
    36c4:	fe 01       	movw	r30, r28
    36c6:	e7 5a       	subi	r30, 0xA7	; 167
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	11 96       	adiw	r26, 0x01	; 1
    36d2:	9c 93       	st	X, r25
    36d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d6:	fe 01       	movw	r30, r28
    36d8:	e7 5a       	subi	r30, 0xA7	; 167
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	d1 f6       	brne	.-76     	; 0x3698 <LCD_displayCharacter+0xf6>
    36e4:	27 c0       	rjmp	.+78     	; 0x3734 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e6:	8e 01       	movw	r16, r28
    36e8:	07 5a       	subi	r16, 0xA7	; 167
    36ea:	1f 4f       	sbci	r17, 0xFF	; 255
    36ec:	fe 01       	movw	r30, r28
    36ee:	e5 5a       	subi	r30, 0xA5	; 165
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	f8 01       	movw	r30, r16
    3704:	91 83       	std	Z+1, r25	; 0x01
    3706:	80 83       	st	Z, r24
    3708:	de 01       	movw	r26, r28
    370a:	ab 5a       	subi	r26, 0xAB	; 171
    370c:	bf 4f       	sbci	r27, 0xFF	; 255
    370e:	fe 01       	movw	r30, r28
    3710:	e7 5a       	subi	r30, 0xA7	; 167
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	8d 93       	st	X+, r24
    371a:	9c 93       	st	X, r25
    371c:	fe 01       	movw	r30, r28
    371e:	eb 5a       	subi	r30, 0xAB	; 171
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	80 81       	ld	r24, Z
    3724:	91 81       	ldd	r25, Z+1	; 0x01
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <LCD_displayCharacter+0x184>
    372a:	fe 01       	movw	r30, r28
    372c:	eb 5a       	subi	r30, 0xAB	; 171
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	62 e0       	ldi	r22, 0x02	; 2
    3738:	41 e0       	ldi	r20, 0x01	; 1
    373a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    373e:	fe 01       	movw	r30, r28
    3740:	ef 5a       	subi	r30, 0xAF	; 175
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	a0 e8       	ldi	r26, 0x80	; 128
    374a:	bf e3       	ldi	r27, 0x3F	; 63
    374c:	80 83       	st	Z, r24
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	a2 83       	std	Z+2, r26	; 0x02
    3752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	8e 01       	movw	r16, r28
    3756:	03 5b       	subi	r16, 0xB3	; 179
    3758:	1f 4f       	sbci	r17, 0xFF	; 255
    375a:	fe 01       	movw	r30, r28
    375c:	ef 5a       	subi	r30, 0xAF	; 175
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	60 81       	ld	r22, Z
    3762:	71 81       	ldd	r23, Z+1	; 0x01
    3764:	82 81       	ldd	r24, Z+2	; 0x02
    3766:	93 81       	ldd	r25, Z+3	; 0x03
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	4a e7       	ldi	r20, 0x7A	; 122
    376e:	55 e4       	ldi	r21, 0x45	; 69
    3770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	f8 01       	movw	r30, r16
    377a:	80 83       	st	Z, r24
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	a2 83       	std	Z+2, r26	; 0x02
    3780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3782:	fe 01       	movw	r30, r28
    3784:	e3 5b       	subi	r30, 0xB3	; 179
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	60 81       	ld	r22, Z
    378a:	71 81       	ldd	r23, Z+1	; 0x01
    378c:	82 81       	ldd	r24, Z+2	; 0x02
    378e:	93 81       	ldd	r25, Z+3	; 0x03
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e8       	ldi	r20, 0x80	; 128
    3796:	5f e3       	ldi	r21, 0x3F	; 63
    3798:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    379c:	88 23       	and	r24, r24
    379e:	44 f4       	brge	.+16     	; 0x37b0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    37a0:	fe 01       	movw	r30, r28
    37a2:	e5 5b       	subi	r30, 0xB5	; 181
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	80 83       	st	Z, r24
    37ae:	64 c0       	rjmp	.+200    	; 0x3878 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    37b0:	fe 01       	movw	r30, r28
    37b2:	e3 5b       	subi	r30, 0xB3	; 179
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	60 81       	ld	r22, Z
    37b8:	71 81       	ldd	r23, Z+1	; 0x01
    37ba:	82 81       	ldd	r24, Z+2	; 0x02
    37bc:	93 81       	ldd	r25, Z+3	; 0x03
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	3f ef       	ldi	r19, 0xFF	; 255
    37c2:	4f e7       	ldi	r20, 0x7F	; 127
    37c4:	57 e4       	ldi	r21, 0x47	; 71
    37c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ca:	18 16       	cp	r1, r24
    37cc:	0c f0       	brlt	.+2      	; 0x37d0 <LCD_displayCharacter+0x22e>
    37ce:	43 c0       	rjmp	.+134    	; 0x3856 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d0:	fe 01       	movw	r30, r28
    37d2:	ef 5a       	subi	r30, 0xAF	; 175
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e2       	ldi	r20, 0x20	; 32
    37e4:	51 e4       	ldi	r21, 0x41	; 65
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8e 01       	movw	r16, r28
    37f0:	05 5b       	subi	r16, 0xB5	; 181
    37f2:	1f 4f       	sbci	r17, 0xFF	; 255
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	f8 01       	movw	r30, r16
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	80 83       	st	Z, r24
    3806:	1f c0       	rjmp	.+62     	; 0x3846 <LCD_displayCharacter+0x2a4>
    3808:	fe 01       	movw	r30, r28
    380a:	e7 5b       	subi	r30, 0xB7	; 183
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 e9       	ldi	r24, 0x90	; 144
    3810:	91 e0       	ldi	r25, 0x01	; 1
    3812:	91 83       	std	Z+1, r25	; 0x01
    3814:	80 83       	st	Z, r24
    3816:	fe 01       	movw	r30, r28
    3818:	e7 5b       	subi	r30, 0xB7	; 183
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <LCD_displayCharacter+0x27e>
    3824:	fe 01       	movw	r30, r28
    3826:	e7 5b       	subi	r30, 0xB7	; 183
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382e:	de 01       	movw	r26, r28
    3830:	a5 5b       	subi	r26, 0xB5	; 181
    3832:	bf 4f       	sbci	r27, 0xFF	; 255
    3834:	fe 01       	movw	r30, r28
    3836:	e5 5b       	subi	r30, 0xB5	; 181
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	80 81       	ld	r24, Z
    383c:	91 81       	ldd	r25, Z+1	; 0x01
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	11 96       	adiw	r26, 0x01	; 1
    3842:	9c 93       	st	X, r25
    3844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3846:	fe 01       	movw	r30, r28
    3848:	e5 5b       	subi	r30, 0xB5	; 181
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	d1 f6       	brne	.-76     	; 0x3808 <LCD_displayCharacter+0x266>
    3854:	27 c0       	rjmp	.+78     	; 0x38a4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3856:	8e 01       	movw	r16, r28
    3858:	05 5b       	subi	r16, 0xB5	; 181
    385a:	1f 4f       	sbci	r17, 0xFF	; 255
    385c:	fe 01       	movw	r30, r28
    385e:	e3 5b       	subi	r30, 0xB3	; 179
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	60 81       	ld	r22, Z
    3864:	71 81       	ldd	r23, Z+1	; 0x01
    3866:	82 81       	ldd	r24, Z+2	; 0x02
    3868:	93 81       	ldd	r25, Z+3	; 0x03
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	f8 01       	movw	r30, r16
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	80 83       	st	Z, r24
    3878:	de 01       	movw	r26, r28
    387a:	a9 5b       	subi	r26, 0xB9	; 185
    387c:	bf 4f       	sbci	r27, 0xFF	; 255
    387e:	fe 01       	movw	r30, r28
    3880:	e5 5b       	subi	r30, 0xB5	; 181
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	8d 93       	st	X+, r24
    388a:	9c 93       	st	X, r25
    388c:	fe 01       	movw	r30, r28
    388e:	e9 5b       	subi	r30, 0xB9	; 185
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <LCD_displayCharacter+0x2f4>
    389a:	fe 01       	movw	r30, r28
    389c:	e9 5b       	subi	r30, 0xB9	; 185
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    38a4:	fe 01       	movw	r30, r28
    38a6:	ed 59       	subi	r30, 0x9D	; 157
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	88 2f       	mov	r24, r24
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	80 71       	andi	r24, 0x10	; 16
    38b2:	90 70       	andi	r25, 0x00	; 0
    38b4:	95 95       	asr	r25
    38b6:	87 95       	ror	r24
    38b8:	95 95       	asr	r25
    38ba:	87 95       	ror	r24
    38bc:	95 95       	asr	r25
    38be:	87 95       	ror	r24
    38c0:	95 95       	asr	r25
    38c2:	87 95       	ror	r24
    38c4:	98 2f       	mov	r25, r24
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	63 e0       	ldi	r22, 0x03	; 3
    38ca:	49 2f       	mov	r20, r25
    38cc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    38d0:	fe 01       	movw	r30, r28
    38d2:	ed 59       	subi	r30, 0x9D	; 157
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	80 81       	ld	r24, Z
    38d8:	88 2f       	mov	r24, r24
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	80 72       	andi	r24, 0x20	; 32
    38de:	90 70       	andi	r25, 0x00	; 0
    38e0:	95 95       	asr	r25
    38e2:	87 95       	ror	r24
    38e4:	95 95       	asr	r25
    38e6:	87 95       	ror	r24
    38e8:	95 95       	asr	r25
    38ea:	87 95       	ror	r24
    38ec:	95 95       	asr	r25
    38ee:	87 95       	ror	r24
    38f0:	95 95       	asr	r25
    38f2:	87 95       	ror	r24
    38f4:	98 2f       	mov	r25, r24
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	64 e0       	ldi	r22, 0x04	; 4
    38fa:	49 2f       	mov	r20, r25
    38fc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    3900:	fe 01       	movw	r30, r28
    3902:	ed 59       	subi	r30, 0x9D	; 157
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	80 81       	ld	r24, Z
    3908:	88 2f       	mov	r24, r24
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	80 74       	andi	r24, 0x40	; 64
    390e:	90 70       	andi	r25, 0x00	; 0
    3910:	08 2e       	mov	r0, r24
    3912:	89 2f       	mov	r24, r25
    3914:	00 0c       	add	r0, r0
    3916:	88 1f       	adc	r24, r24
    3918:	99 0b       	sbc	r25, r25
    391a:	00 0c       	add	r0, r0
    391c:	88 1f       	adc	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	98 2f       	mov	r25, r24
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	65 e0       	ldi	r22, 0x05	; 5
    3926:	49 2f       	mov	r20, r25
    3928:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    392c:	fe 01       	movw	r30, r28
    392e:	ed 59       	subi	r30, 0x9D	; 157
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	98 2f       	mov	r25, r24
    3936:	99 1f       	adc	r25, r25
    3938:	99 27       	eor	r25, r25
    393a:	99 1f       	adc	r25, r25
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	66 e0       	ldi	r22, 0x06	; 6
    3940:	49 2f       	mov	r20, r25
    3942:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3946:	fe 01       	movw	r30, r28
    3948:	ed 5b       	subi	r30, 0xBD	; 189
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	a0 e8       	ldi	r26, 0x80	; 128
    3952:	bf e3       	ldi	r27, 0x3F	; 63
    3954:	80 83       	st	Z, r24
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	a2 83       	std	Z+2, r26	; 0x02
    395a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395c:	8e 01       	movw	r16, r28
    395e:	01 5c       	subi	r16, 0xC1	; 193
    3960:	1f 4f       	sbci	r17, 0xFF	; 255
    3962:	fe 01       	movw	r30, r28
    3964:	ed 5b       	subi	r30, 0xBD	; 189
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	4a e7       	ldi	r20, 0x7A	; 122
    3976:	55 e4       	ldi	r21, 0x45	; 69
    3978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	f8 01       	movw	r30, r16
    3982:	80 83       	st	Z, r24
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	a2 83       	std	Z+2, r26	; 0x02
    3988:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    398a:	fe 01       	movw	r30, r28
    398c:	ff 96       	adiw	r30, 0x3f	; 63
    398e:	60 81       	ld	r22, Z
    3990:	71 81       	ldd	r23, Z+1	; 0x01
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	40 e8       	ldi	r20, 0x80	; 128
    399c:	5f e3       	ldi	r21, 0x3F	; 63
    399e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a2:	88 23       	and	r24, r24
    39a4:	2c f4       	brge	.+10     	; 0x39b0 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	9e af       	std	Y+62, r25	; 0x3e
    39ac:	8d af       	std	Y+61, r24	; 0x3d
    39ae:	46 c0       	rjmp	.+140    	; 0x3a3c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    39b0:	fe 01       	movw	r30, r28
    39b2:	ff 96       	adiw	r30, 0x3f	; 63
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	3f ef       	ldi	r19, 0xFF	; 255
    39c0:	4f e7       	ldi	r20, 0x7F	; 127
    39c2:	57 e4       	ldi	r21, 0x47	; 71
    39c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c8:	18 16       	cp	r1, r24
    39ca:	64 f5       	brge	.+88     	; 0x3a24 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39cc:	fe 01       	movw	r30, r28
    39ce:	ed 5b       	subi	r30, 0xBD	; 189
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	60 81       	ld	r22, Z
    39d4:	71 81       	ldd	r23, Z+1	; 0x01
    39d6:	82 81       	ldd	r24, Z+2	; 0x02
    39d8:	93 81       	ldd	r25, Z+3	; 0x03
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e2       	ldi	r20, 0x20	; 32
    39e0:	51 e4       	ldi	r21, 0x41	; 65
    39e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	bc 01       	movw	r22, r24
    39ec:	cd 01       	movw	r24, r26
    39ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	9e af       	std	Y+62, r25	; 0x3e
    39f8:	8d af       	std	Y+61, r24	; 0x3d
    39fa:	0f c0       	rjmp	.+30     	; 0x3a1a <LCD_displayCharacter+0x478>
    39fc:	80 e9       	ldi	r24, 0x90	; 144
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	9c af       	std	Y+60, r25	; 0x3c
    3a02:	8b af       	std	Y+59, r24	; 0x3b
    3a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a06:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <LCD_displayCharacter+0x466>
    3a0c:	9c af       	std	Y+60, r25	; 0x3c
    3a0e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a10:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a12:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	9e af       	std	Y+62, r25	; 0x3e
    3a18:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a1e:	00 97       	sbiw	r24, 0x00	; 0
    3a20:	69 f7       	brne	.-38     	; 0x39fc <LCD_displayCharacter+0x45a>
    3a22:	16 c0       	rjmp	.+44     	; 0x3a50 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a24:	fe 01       	movw	r30, r28
    3a26:	ff 96       	adiw	r30, 0x3f	; 63
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	9e af       	std	Y+62, r25	; 0x3e
    3a3a:	8d af       	std	Y+61, r24	; 0x3d
    3a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a40:	9a af       	std	Y+58, r25	; 0x3a
    3a42:	89 af       	std	Y+57, r24	; 0x39
    3a44:	89 ad       	ldd	r24, Y+57	; 0x39
    3a46:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <LCD_displayCharacter+0x4a6>
    3a4c:	9a af       	std	Y+58, r25	; 0x3a
    3a4e:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	62 e0       	ldi	r22, 0x02	; 2
    3a54:	40 e0       	ldi	r20, 0x00	; 0
    3a56:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	a0 e8       	ldi	r26, 0x80	; 128
    3a60:	bf e3       	ldi	r27, 0x3F	; 63
    3a62:	8d ab       	std	Y+53, r24	; 0x35
    3a64:	9e ab       	std	Y+54, r25	; 0x36
    3a66:	af ab       	std	Y+55, r26	; 0x37
    3a68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a6c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a70:	98 ad       	ldd	r25, Y+56	; 0x38
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	4a e7       	ldi	r20, 0x7A	; 122
    3a78:	55 e4       	ldi	r21, 0x45	; 69
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	89 ab       	std	Y+49, r24	; 0x31
    3a84:	9a ab       	std	Y+50, r25	; 0x32
    3a86:	ab ab       	std	Y+51, r26	; 0x33
    3a88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a90:	9c a9       	ldd	r25, Y+52	; 0x34
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e8       	ldi	r20, 0x80	; 128
    3a98:	5f e3       	ldi	r21, 0x3F	; 63
    3a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a9e:	88 23       	and	r24, r24
    3aa0:	2c f4       	brge	.+10     	; 0x3aac <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	98 ab       	std	Y+48, r25	; 0x30
    3aa8:	8f a7       	std	Y+47, r24	; 0x2f
    3aaa:	3f c0       	rjmp	.+126    	; 0x3b2a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3aac:	69 a9       	ldd	r22, Y+49	; 0x31
    3aae:	7a a9       	ldd	r23, Y+50	; 0x32
    3ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	4f e7       	ldi	r20, 0x7F	; 127
    3aba:	57 e4       	ldi	r21, 0x47	; 71
    3abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ac0:	18 16       	cp	r1, r24
    3ac2:	4c f5       	brge	.+82     	; 0x3b16 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ac6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ac8:	8f a9       	ldd	r24, Y+55	; 0x37
    3aca:	98 ad       	ldd	r25, Y+56	; 0x38
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	40 e2       	ldi	r20, 0x20	; 32
    3ad2:	51 e4       	ldi	r21, 0x41	; 65
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	bc 01       	movw	r22, r24
    3ade:	cd 01       	movw	r24, r26
    3ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	98 ab       	std	Y+48, r25	; 0x30
    3aea:	8f a7       	std	Y+47, r24	; 0x2f
    3aec:	0f c0       	rjmp	.+30     	; 0x3b0c <LCD_displayCharacter+0x56a>
    3aee:	80 e9       	ldi	r24, 0x90	; 144
    3af0:	91 e0       	ldi	r25, 0x01	; 1
    3af2:	9e a7       	std	Y+46, r25	; 0x2e
    3af4:	8d a7       	std	Y+45, r24	; 0x2d
    3af6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3af8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <LCD_displayCharacter+0x558>
    3afe:	9e a7       	std	Y+46, r25	; 0x2e
    3b00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b04:	98 a9       	ldd	r25, Y+48	; 0x30
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	98 ab       	std	Y+48, r25	; 0x30
    3b0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b10:	00 97       	sbiw	r24, 0x00	; 0
    3b12:	69 f7       	brne	.-38     	; 0x3aee <LCD_displayCharacter+0x54c>
    3b14:	14 c0       	rjmp	.+40     	; 0x3b3e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b16:	69 a9       	ldd	r22, Y+49	; 0x31
    3b18:	7a a9       	ldd	r23, Y+50	; 0x32
    3b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	98 ab       	std	Y+48, r25	; 0x30
    3b28:	8f a7       	std	Y+47, r24	; 0x2f
    3b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b2e:	9c a7       	std	Y+44, r25	; 0x2c
    3b30:	8b a7       	std	Y+43, r24	; 0x2b
    3b32:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b34:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <LCD_displayCharacter+0x594>
    3b3a:	9c a7       	std	Y+44, r25	; 0x2c
    3b3c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	62 e0       	ldi	r22, 0x02	; 2
    3b42:	41 e0       	ldi	r20, 0x01	; 1
    3b44:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	a0 e8       	ldi	r26, 0x80	; 128
    3b4e:	bf e3       	ldi	r27, 0x3F	; 63
    3b50:	8f a3       	std	Y+39, r24	; 0x27
    3b52:	98 a7       	std	Y+40, r25	; 0x28
    3b54:	a9 a7       	std	Y+41, r26	; 0x29
    3b56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b58:	6f a1       	ldd	r22, Y+39	; 0x27
    3b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a e7       	ldi	r20, 0x7A	; 122
    3b66:	55 e4       	ldi	r21, 0x45	; 69
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8b a3       	std	Y+35, r24	; 0x23
    3b72:	9c a3       	std	Y+36, r25	; 0x24
    3b74:	ad a3       	std	Y+37, r26	; 0x25
    3b76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b78:	6b a1       	ldd	r22, Y+35	; 0x23
    3b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e8       	ldi	r20, 0x80	; 128
    3b86:	5f e3       	ldi	r21, 0x3F	; 63
    3b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b8c:	88 23       	and	r24, r24
    3b8e:	2c f4       	brge	.+10     	; 0x3b9a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9a a3       	std	Y+34, r25	; 0x22
    3b96:	89 a3       	std	Y+33, r24	; 0x21
    3b98:	3f c0       	rjmp	.+126    	; 0x3c18 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3f ef       	ldi	r19, 0xFF	; 255
    3ba6:	4f e7       	ldi	r20, 0x7F	; 127
    3ba8:	57 e4       	ldi	r21, 0x47	; 71
    3baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	4c f5       	brge	.+82     	; 0x3c04 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    3bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    3bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    3bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9a a3       	std	Y+34, r25	; 0x22
    3bd8:	89 a3       	std	Y+33, r24	; 0x21
    3bda:	0f c0       	rjmp	.+30     	; 0x3bfa <LCD_displayCharacter+0x658>
    3bdc:	80 e9       	ldi	r24, 0x90	; 144
    3bde:	91 e0       	ldi	r25, 0x01	; 1
    3be0:	98 a3       	std	Y+32, r25	; 0x20
    3be2:	8f 8f       	std	Y+31, r24	; 0x1f
    3be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be6:	98 a1       	ldd	r25, Y+32	; 0x20
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <LCD_displayCharacter+0x646>
    3bec:	98 a3       	std	Y+32, r25	; 0x20
    3bee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	9a a3       	std	Y+34, r25	; 0x22
    3bf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    3bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	69 f7       	brne	.-38     	; 0x3bdc <LCD_displayCharacter+0x63a>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c04:	6b a1       	ldd	r22, Y+35	; 0x23
    3c06:	7c a1       	ldd	r23, Y+36	; 0x24
    3c08:	8d a1       	ldd	r24, Y+37	; 0x25
    3c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9a a3       	std	Y+34, r25	; 0x22
    3c16:	89 a3       	std	Y+33, r24	; 0x21
    3c18:	89 a1       	ldd	r24, Y+33	; 0x21
    3c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <LCD_displayCharacter+0x682>
    3c28:	9e 8f       	std	Y+30, r25	; 0x1e
    3c2a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ed 59       	subi	r30, 0x9D	; 157
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	98 2f       	mov	r25, r24
    3c36:	91 70       	andi	r25, 0x01	; 1
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	63 e0       	ldi	r22, 0x03	; 3
    3c3c:	49 2f       	mov	r20, r25
    3c3e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    3c42:	fe 01       	movw	r30, r28
    3c44:	ed 59       	subi	r30, 0x9D	; 157
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	82 70       	andi	r24, 0x02	; 2
    3c50:	90 70       	andi	r25, 0x00	; 0
    3c52:	95 95       	asr	r25
    3c54:	87 95       	ror	r24
    3c56:	98 2f       	mov	r25, r24
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	64 e0       	ldi	r22, 0x04	; 4
    3c5c:	49 2f       	mov	r20, r25
    3c5e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    3c62:	fe 01       	movw	r30, r28
    3c64:	ed 59       	subi	r30, 0x9D	; 157
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	80 81       	ld	r24, Z
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	84 70       	andi	r24, 0x04	; 4
    3c70:	90 70       	andi	r25, 0x00	; 0
    3c72:	95 95       	asr	r25
    3c74:	87 95       	ror	r24
    3c76:	95 95       	asr	r25
    3c78:	87 95       	ror	r24
    3c7a:	98 2f       	mov	r25, r24
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	65 e0       	ldi	r22, 0x05	; 5
    3c80:	49 2f       	mov	r20, r25
    3c82:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    3c86:	fe 01       	movw	r30, r28
    3c88:	ed 59       	subi	r30, 0x9D	; 157
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 81       	ld	r24, Z
    3c8e:	88 2f       	mov	r24, r24
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	88 70       	andi	r24, 0x08	; 8
    3c94:	90 70       	andi	r25, 0x00	; 0
    3c96:	95 95       	asr	r25
    3c98:	87 95       	ror	r24
    3c9a:	95 95       	asr	r25
    3c9c:	87 95       	ror	r24
    3c9e:	95 95       	asr	r25
    3ca0:	87 95       	ror	r24
    3ca2:	98 2f       	mov	r25, r24
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	66 e0       	ldi	r22, 0x06	; 6
    3ca8:	49 2f       	mov	r20, r25
    3caa:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	a0 e8       	ldi	r26, 0x80	; 128
    3cb4:	bf e3       	ldi	r27, 0x3F	; 63
    3cb6:	89 8f       	std	Y+25, r24	; 0x19
    3cb8:	9a 8f       	std	Y+26, r25	; 0x1a
    3cba:	ab 8f       	std	Y+27, r26	; 0x1b
    3cbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    3cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	4a e7       	ldi	r20, 0x7A	; 122
    3ccc:	55 e4       	ldi	r21, 0x45	; 69
    3cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	8d 8b       	std	Y+21, r24	; 0x15
    3cd8:	9e 8b       	std	Y+22, r25	; 0x16
    3cda:	af 8b       	std	Y+23, r26	; 0x17
    3cdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cde:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e8       	ldi	r20, 0x80	; 128
    3cec:	5f e3       	ldi	r21, 0x3F	; 63
    3cee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf2:	88 23       	and	r24, r24
    3cf4:	2c f4       	brge	.+10     	; 0x3d00 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	9c 8b       	std	Y+20, r25	; 0x14
    3cfc:	8b 8b       	std	Y+19, r24	; 0x13
    3cfe:	3f c0       	rjmp	.+126    	; 0x3d7e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3d00:	6d 89       	ldd	r22, Y+21	; 0x15
    3d02:	7e 89       	ldd	r23, Y+22	; 0x16
    3d04:	8f 89       	ldd	r24, Y+23	; 0x17
    3d06:	98 8d       	ldd	r25, Y+24	; 0x18
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	3f ef       	ldi	r19, 0xFF	; 255
    3d0c:	4f e7       	ldi	r20, 0x7F	; 127
    3d0e:	57 e4       	ldi	r21, 0x47	; 71
    3d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d14:	18 16       	cp	r1, r24
    3d16:	4c f5       	brge	.+82     	; 0x3d6a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d18:	69 8d       	ldd	r22, Y+25	; 0x19
    3d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e2       	ldi	r20, 0x20	; 32
    3d26:	51 e4       	ldi	r21, 0x41	; 65
    3d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	bc 01       	movw	r22, r24
    3d32:	cd 01       	movw	r24, r26
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	9c 8b       	std	Y+20, r25	; 0x14
    3d3e:	8b 8b       	std	Y+19, r24	; 0x13
    3d40:	0f c0       	rjmp	.+30     	; 0x3d60 <LCD_displayCharacter+0x7be>
    3d42:	80 e9       	ldi	r24, 0x90	; 144
    3d44:	91 e0       	ldi	r25, 0x01	; 1
    3d46:	9a 8b       	std	Y+18, r25	; 0x12
    3d48:	89 8b       	std	Y+17, r24	; 0x11
    3d4a:	89 89       	ldd	r24, Y+17	; 0x11
    3d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	f1 f7       	brne	.-4      	; 0x3d4e <LCD_displayCharacter+0x7ac>
    3d52:	9a 8b       	std	Y+18, r25	; 0x12
    3d54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d56:	8b 89       	ldd	r24, Y+19	; 0x13
    3d58:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	9c 8b       	std	Y+20, r25	; 0x14
    3d5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d60:	8b 89       	ldd	r24, Y+19	; 0x13
    3d62:	9c 89       	ldd	r25, Y+20	; 0x14
    3d64:	00 97       	sbiw	r24, 0x00	; 0
    3d66:	69 f7       	brne	.-38     	; 0x3d42 <LCD_displayCharacter+0x7a0>
    3d68:	14 c0       	rjmp	.+40     	; 0x3d92 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d70:	98 8d       	ldd	r25, Y+24	; 0x18
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	9c 8b       	std	Y+20, r25	; 0x14
    3d7c:	8b 8b       	std	Y+19, r24	; 0x13
    3d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d80:	9c 89       	ldd	r25, Y+20	; 0x14
    3d82:	98 8b       	std	Y+16, r25	; 0x10
    3d84:	8f 87       	std	Y+15, r24	; 0x0f
    3d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d88:	98 89       	ldd	r25, Y+16	; 0x10
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	f1 f7       	brne	.-4      	; 0x3d8a <LCD_displayCharacter+0x7e8>
    3d8e:	98 8b       	std	Y+16, r25	; 0x10
    3d90:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	62 e0       	ldi	r22, 0x02	; 2
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	a0 e8       	ldi	r26, 0x80	; 128
    3da2:	bf e3       	ldi	r27, 0x3F	; 63
    3da4:	8b 87       	std	Y+11, r24	; 0x0b
    3da6:	9c 87       	std	Y+12, r25	; 0x0c
    3da8:	ad 87       	std	Y+13, r26	; 0x0d
    3daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	4a e7       	ldi	r20, 0x7A	; 122
    3dba:	55 e4       	ldi	r21, 0x45	; 69
    3dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	8f 83       	std	Y+7, r24	; 0x07
    3dc6:	98 87       	std	Y+8, r25	; 0x08
    3dc8:	a9 87       	std	Y+9, r26	; 0x09
    3dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dce:	78 85       	ldd	r23, Y+8	; 0x08
    3dd0:	89 85       	ldd	r24, Y+9	; 0x09
    3dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e8       	ldi	r20, 0x80	; 128
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de0:	88 23       	and	r24, r24
    3de2:	2c f4       	brge	.+10     	; 0x3dee <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	9e 83       	std	Y+6, r25	; 0x06
    3dea:	8d 83       	std	Y+5, r24	; 0x05
    3dec:	3f c0       	rjmp	.+126    	; 0x3e6c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3dee:	6f 81       	ldd	r22, Y+7	; 0x07
    3df0:	78 85       	ldd	r23, Y+8	; 0x08
    3df2:	89 85       	ldd	r24, Y+9	; 0x09
    3df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	3f ef       	ldi	r19, 0xFF	; 255
    3dfa:	4f e7       	ldi	r20, 0x7F	; 127
    3dfc:	57 e4       	ldi	r21, 0x47	; 71
    3dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e02:	18 16       	cp	r1, r24
    3e04:	4c f5       	brge	.+82     	; 0x3e58 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e2       	ldi	r20, 0x20	; 32
    3e14:	51 e4       	ldi	r21, 0x41	; 65
    3e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	bc 01       	movw	r22, r24
    3e20:	cd 01       	movw	r24, r26
    3e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	9e 83       	std	Y+6, r25	; 0x06
    3e2c:	8d 83       	std	Y+5, r24	; 0x05
    3e2e:	0f c0       	rjmp	.+30     	; 0x3e4e <LCD_displayCharacter+0x8ac>
    3e30:	80 e9       	ldi	r24, 0x90	; 144
    3e32:	91 e0       	ldi	r25, 0x01	; 1
    3e34:	9c 83       	std	Y+4, r25	; 0x04
    3e36:	8b 83       	std	Y+3, r24	; 0x03
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <LCD_displayCharacter+0x89a>
    3e40:	9c 83       	std	Y+4, r25	; 0x04
    3e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e44:	8d 81       	ldd	r24, Y+5	; 0x05
    3e46:	9e 81       	ldd	r25, Y+6	; 0x06
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	9e 83       	std	Y+6, r25	; 0x06
    3e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e50:	9e 81       	ldd	r25, Y+6	; 0x06
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	69 f7       	brne	.-38     	; 0x3e30 <LCD_displayCharacter+0x88e>
    3e56:	14 c0       	rjmp	.+40     	; 0x3e80 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	9e 83       	std	Y+6, r25	; 0x06
    3e6a:	8d 83       	std	Y+5, r24	; 0x05
    3e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e70:	9a 83       	std	Y+2, r25	; 0x02
    3e72:	89 83       	std	Y+1, r24	; 0x01
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	9a 81       	ldd	r25, Y+2	; 0x02
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	f1 f7       	brne	.-4      	; 0x3e78 <LCD_displayCharacter+0x8d6>
    3e7c:	9a 83       	std	Y+2, r25	; 0x02
    3e7e:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, data);  /* Output the data to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    3e80:	cd 59       	subi	r28, 0x9D	; 157
    3e82:	df 4f       	sbci	r29, 0xFF	; 255
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	08 95       	ret

00003e98 <LCD_displayString>:
 * Display a string on the LCD.
 * Parameters  :
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <LCD_displayString+0x6>
    3e9e:	0f 92       	push	r0
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	9b 83       	std	Y+3, r25	; 0x03
    3ea6:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    3ea8:	19 82       	std	Y+1, r1	; 0x01
    3eaa:	0e c0       	rjmp	.+28     	; 0x3ec8 <LCD_displayString+0x30>
    while (Str[i] != '\0')
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	28 2f       	mov	r18, r24
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	e2 0f       	add	r30, r18
    3eba:	f3 1f       	adc	r31, r19
    3ebc:	80 81       	ld	r24, Z
    3ebe:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <LCD_displayCharacter>
        i++;
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	8f 5f       	subi	r24, 0xFF	; 255
    3ec6:	89 83       	std	Y+1, r24	; 0x01
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	28 2f       	mov	r18, r24
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	e2 0f       	add	r30, r18
    3ed6:	f3 1f       	adc	r31, r19
    3ed8:	80 81       	ld	r24, Z
    3eda:	88 23       	and	r24, r24
    3edc:	39 f7       	brne	.-50     	; 0x3eac <LCD_displayString+0x14>
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
        i++;
    }
}
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	08 95       	ret

00003eea <LCD_moveCursor>:
 * Parameters  :
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    3eea:	df 93       	push	r29
    3eec:	cf 93       	push	r28
    3eee:	00 d0       	rcall	.+0      	; 0x3ef0 <LCD_moveCursor+0x6>
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <LCD_moveCursor+0x8>
    3ef2:	0f 92       	push	r0
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	8a 83       	std	Y+2, r24	; 0x02
    3efa:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    /* Calculate the required address in the LCD DDRAM */
    switch (row)
    3efc:	8a 81       	ldd	r24, Y+2	; 0x02
    3efe:	28 2f       	mov	r18, r24
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	3d 83       	std	Y+5, r19	; 0x05
    3f04:	2c 83       	std	Y+4, r18	; 0x04
    3f06:	8c 81       	ldd	r24, Y+4	; 0x04
    3f08:	9d 81       	ldd	r25, Y+5	; 0x05
    3f0a:	81 30       	cpi	r24, 0x01	; 1
    3f0c:	91 05       	cpc	r25, r1
    3f0e:	c1 f0       	breq	.+48     	; 0x3f40 <LCD_moveCursor+0x56>
    3f10:	2c 81       	ldd	r18, Y+4	; 0x04
    3f12:	3d 81       	ldd	r19, Y+5	; 0x05
    3f14:	22 30       	cpi	r18, 0x02	; 2
    3f16:	31 05       	cpc	r19, r1
    3f18:	2c f4       	brge	.+10     	; 0x3f24 <LCD_moveCursor+0x3a>
    3f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f1e:	00 97       	sbiw	r24, 0x00	; 0
    3f20:	61 f0       	breq	.+24     	; 0x3f3a <LCD_moveCursor+0x50>
    3f22:	19 c0       	rjmp	.+50     	; 0x3f56 <LCD_moveCursor+0x6c>
    3f24:	2c 81       	ldd	r18, Y+4	; 0x04
    3f26:	3d 81       	ldd	r19, Y+5	; 0x05
    3f28:	22 30       	cpi	r18, 0x02	; 2
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	69 f0       	breq	.+26     	; 0x3f48 <LCD_moveCursor+0x5e>
    3f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f30:	9d 81       	ldd	r25, Y+5	; 0x05
    3f32:	83 30       	cpi	r24, 0x03	; 3
    3f34:	91 05       	cpc	r25, r1
    3f36:	61 f0       	breq	.+24     	; 0x3f50 <LCD_moveCursor+0x66>
    3f38:	0e c0       	rjmp	.+28     	; 0x3f56 <LCD_moveCursor+0x6c>
    {
    case 0:
        lcd_memory_address = col;
    3f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	0b c0       	rjmp	.+22     	; 0x3f56 <LCD_moveCursor+0x6c>
        break;
    case 1:
        lcd_memory_address = col + 0x40;
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	80 5c       	subi	r24, 0xC0	; 192
    3f44:	89 83       	std	Y+1, r24	; 0x01
    3f46:	07 c0       	rjmp	.+14     	; 0x3f56 <LCD_moveCursor+0x6c>
        break;
    case 2:
        lcd_memory_address = col + 0x10;
    3f48:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4a:	80 5f       	subi	r24, 0xF0	; 240
    3f4c:	89 83       	std	Y+1, r24	; 0x01
    3f4e:	03 c0       	rjmp	.+6      	; 0x3f56 <LCD_moveCursor+0x6c>
        break;
    case 3:
        lcd_memory_address = col + 0x50;
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	80 5b       	subi	r24, 0xB0	; 176
    3f54:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    /* Move the LCD cursor to this specific address */
    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	80 68       	ori	r24, 0x80	; 128
    3f5a:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>
}
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	cf 91       	pop	r28
    3f6a:	df 91       	pop	r29
    3f6c:	08 95       	ret

00003f6e <LCD_displayStringRowColumn>:
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    3f6e:	df 93       	push	r29
    3f70:	cf 93       	push	r28
    3f72:	00 d0       	rcall	.+0      	; 0x3f74 <LCD_displayStringRowColumn+0x6>
    3f74:	00 d0       	rcall	.+0      	; 0x3f76 <LCD_displayStringRowColumn+0x8>
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	89 83       	std	Y+1, r24	; 0x01
    3f7c:	6a 83       	std	Y+2, r22	; 0x02
    3f7e:	5c 83       	std	Y+4, r21	; 0x04
    3f80:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col);  /* Move the cursor to the specified position */
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	6a 81       	ldd	r22, Y+2	; 0x02
    3f86:	0e 94 75 1f 	call	0x3eea	; 0x3eea <LCD_moveCursor>
    LCD_displayString(Str);  /* Display the string */
    3f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8e:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <LCD_displayString>
}
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	0f 90       	pop	r0
    3f9a:	cf 91       	pop	r28
    3f9c:	df 91       	pop	r29
    3f9e:	08 95       	ret

00003fa0 <LCD_intgerToString>:
 * Display an integer value on the LCD.
 * Parameters  :
 * - data: The integer value to be displayed.
 */
void LCD_intgerToString(int data)
{
    3fa0:	df 93       	push	r29
    3fa2:	cf 93       	push	r28
    3fa4:	cd b7       	in	r28, 0x3d	; 61
    3fa6:	de b7       	in	r29, 0x3e	; 62
    3fa8:	62 97       	sbiw	r28, 0x12	; 18
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	9a 8b       	std	Y+18, r25	; 0x12
    3fb6:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];  /* String to hold the ASCII result */
    itoa(data, buff, 10);  /* Convert the integer to its ASCII representation (base 10) */
    3fb8:	89 89       	ldd	r24, Y+17	; 0x11
    3fba:	9a 89       	ldd	r25, Y+18	; 0x12
    3fbc:	9e 01       	movw	r18, r28
    3fbe:	2f 5f       	subi	r18, 0xFF	; 255
    3fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc2:	b9 01       	movw	r22, r18
    3fc4:	4a e0       	ldi	r20, 0x0A	; 10
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <itoa>
    LCD_displayString(buff);  /* Display the string */
    3fcc:	ce 01       	movw	r24, r28
    3fce:	01 96       	adiw	r24, 0x01	; 1
    3fd0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <LCD_displayString>
}
    3fd4:	62 96       	adiw	r28, 0x12	; 18
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	f8 94       	cli
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	0f be       	out	0x3f, r0	; 63
    3fde:	cd bf       	out	0x3d, r28	; 61
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	08 95       	ret

00003fe6 <LCD_clearScreen>:
/*
 * Description :
 * Clear the LCD screen.
 */
void LCD_clearScreen(void)
{
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Send clear display command */
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_sendCommand>
}
    3ff4:	cf 91       	pop	r28
    3ff6:	df 91       	pop	r29
    3ff8:	08 95       	ret

00003ffa <LEDS_init>:
 * Function to initialize LEDs:
 * 1. Set up the LED pins as output pins.
 * 2. Set the initial state of the LEDs based on the connection logic.
 */
void LEDS_init(void)
{
    3ffa:	df 93       	push	r29
    3ffc:	cf 93       	push	r28
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    /* Configure the LED pins as output pins */
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, RED_LED, PIN_OUTPUT);
    4002:	82 e0       	ldi	r24, 0x02	; 2
    4004:	60 e0       	ldi	r22, 0x00	; 0
    4006:	41 e0       	ldi	r20, 0x01	; 1
    4008:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, GREEN_LED, PIN_OUTPUT);
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	61 e0       	ldi	r22, 0x01	; 1
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, BLUE_LED, PIN_OUTPUT);
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	62 e0       	ldi	r22, 0x02	; 2
    401a:	41 e0       	ldi	r20, 0x01	; 1
    401c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <GPIO_setupPinDirection>

#ifdef CONNECTION_POSITIVE_LOGIC
    /* Initialize LEDs to OFF state for positive logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4020:	82 e0       	ldi	r24, 0x02	; 2
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	40 e0       	ldi	r20, 0x00	; 0
    4026:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    402a:	82 e0       	ldi	r24, 0x02	; 2
    402c:	61 e0       	ldi	r22, 0x01	; 1
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    4034:	82 e0       	ldi	r24, 0x02	; 2
    4036:	62 e0       	ldi	r22, 0x02	; 2
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    /* Initialize LEDs to OFF state for negative logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
#endif
}
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <LED_on>:
 * Else, put LOGIC LOW (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn on (red, green, blue).
 */
void LED_on(LED_ID id)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <LED_on+0x6>
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn on the LED for positive logic */
    switch (id)
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	28 2f       	mov	r18, r24
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	3b 83       	std	Y+3, r19	; 0x03
    405a:	2a 83       	std	Y+2, r18	; 0x02
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	9b 81       	ldd	r25, Y+3	; 0x03
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	91 05       	cpc	r25, r1
    4064:	79 f0       	breq	.+30     	; 0x4084 <LED_on+0x40>
    4066:	2a 81       	ldd	r18, Y+2	; 0x02
    4068:	3b 81       	ldd	r19, Y+3	; 0x03
    406a:	22 30       	cpi	r18, 0x02	; 2
    406c:	31 05       	cpc	r19, r1
    406e:	81 f0       	breq	.+32     	; 0x4090 <LED_on+0x4c>
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	00 97       	sbiw	r24, 0x00	; 0
    4076:	89 f4       	brne	.+34     	; 0x409a <LED_on+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	60 e0       	ldi	r22, 0x00	; 0
    407c:	41 e0       	ldi	r20, 0x01	; 1
    407e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    4082:	0b c0       	rjmp	.+22     	; 0x409a <LED_on+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    4084:	82 e0       	ldi	r24, 0x02	; 2
    4086:	61 e0       	ldi	r22, 0x01	; 1
    4088:	41 e0       	ldi	r20, 0x01	; 1
    408a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    408e:	05 c0       	rjmp	.+10     	; 0x409a <LED_on+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
    4090:	82 e0       	ldi	r24, 0x02	; 2
    4092:	62 e0       	ldi	r22, 0x02	; 2
    4094:	41 e0       	ldi	r20, 0x01	; 1
    4096:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
        break;
    }
#endif
}
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	0f 90       	pop	r0
    40a0:	cf 91       	pop	r28
    40a2:	df 91       	pop	r29
    40a4:	08 95       	ret

000040a6 <LED_off>:
 * Else, put LOGIC HIGH (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn off (red, green, blue).
 */
void LED_off(LED_ID id)
{
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	00 d0       	rcall	.+0      	; 0x40ac <LED_off+0x6>
    40ac:	0f 92       	push	r0
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
    40b2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn off the LED for positive logic */
    switch (id)
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	28 2f       	mov	r18, r24
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	3b 83       	std	Y+3, r19	; 0x03
    40bc:	2a 83       	std	Y+2, r18	; 0x02
    40be:	8a 81       	ldd	r24, Y+2	; 0x02
    40c0:	9b 81       	ldd	r25, Y+3	; 0x03
    40c2:	81 30       	cpi	r24, 0x01	; 1
    40c4:	91 05       	cpc	r25, r1
    40c6:	79 f0       	breq	.+30     	; 0x40e6 <LED_off+0x40>
    40c8:	2a 81       	ldd	r18, Y+2	; 0x02
    40ca:	3b 81       	ldd	r19, Y+3	; 0x03
    40cc:	22 30       	cpi	r18, 0x02	; 2
    40ce:	31 05       	cpc	r19, r1
    40d0:	81 f0       	breq	.+32     	; 0x40f2 <LED_off+0x4c>
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	9b 81       	ldd	r25, Y+3	; 0x03
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	89 f4       	brne	.+34     	; 0x40fc <LED_off+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    40da:	82 e0       	ldi	r24, 0x02	; 2
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	40 e0       	ldi	r20, 0x00	; 0
    40e0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    40e4:	0b c0       	rjmp	.+22     	; 0x40fc <LED_off+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    40e6:	82 e0       	ldi	r24, 0x02	; 2
    40e8:	61 e0       	ldi	r22, 0x01	; 1
    40ea:	40 e0       	ldi	r20, 0x00	; 0
    40ec:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    40f0:	05 c0       	rjmp	.+10     	; 0x40fc <LED_off+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    40f2:	82 e0       	ldi	r24, 0x02	; 2
    40f4:	62 e0       	ldi	r22, 0x02	; 2
    40f6:	40 e0       	ldi	r20, 0x00	; 0
    40f8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
        break;
    }
#endif
}
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	cf 91       	pop	r28
    4104:	df 91       	pop	r29
    4106:	08 95       	ret

00004108 <ISR0>:
 * Description :
 * Interrupt Service Routine for external interrupt 0.
 * This ISR stops the car when triggered.
 */
void ISR0(void)
{
    4108:	df 93       	push	r29
    410a:	cf 93       	push	r28
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    Stop();  /* Stop the car */
    4110:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
}
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret

0000411a <ISR1>:
 * Description :
 * Interrupt Service Routine for external interrupt 1.
 * This ISR stops the car when triggered.
 */
void ISR1(void)
{
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    Stop();  /* Stop the car */
    4122:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
}
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	08 95       	ret

0000412c <main>:
/*******************************************************************************
 *                              Main Function                                  *
 *******************************************************************************/

int main(void)
{
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	df 93       	push	r29
    4132:	cf 93       	push	r28
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	cb 55       	subi	r28, 0x5B	; 91
    413a:	d0 40       	sbci	r29, 0x00	; 0
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    SREG |= (1 << 7);  /* Enable global interrupts */
    4146:	af e5       	ldi	r26, 0x5F	; 95
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	ef e5       	ldi	r30, 0x5F	; 95
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	80 81       	ld	r24, Z
    4150:	80 68       	ori	r24, 0x80	; 128
    4152:	8c 93       	st	X, r24

    uint8 recievedMSG = 0;  /* Variable to store received message from UART */
    4154:	fe 01       	movw	r30, r28
    4156:	eb 5a       	subi	r30, 0xAB	; 171
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	10 82       	st	Z, r1

    /* Initialize UART with the specified configuration */
    UART_init(&uart_configratoin);
    415c:	81 ec       	ldi	r24, 0xC1	; 193
    415e:	91 e0       	ldi	r25, 0x01	; 1
    4160:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>

    /* Initialize DC motor with maximum speed */
    DcMotor_Init(100);
    4164:	84 e6       	ldi	r24, 0x64	; 100
    4166:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DcMotor_Init>

    /* Initialize PIR sensors */
    PIR_init();
    416a:	0e 94 20 10 	call	0x2040	; 0x2040 <PIR_init>

    /* Initialize LCD */
    LCD_init();
    416e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_init>
    LCD_clearScreen();
    4172:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>

    /* Initialize LEDs */
    LEDS_init();
    4176:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <LEDS_init>

    /* Initialize ultrasonic sensor */
    Ultrasonic_init();
    417a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Ultrasonic_init>

    /* Configure external interrupt 0 */
    EXT_INT_ConfigType EX_interrupt_0 = {INT_0, RISING_EDGE};
    417e:	fe 01       	movw	r30, r28
    4180:	ea 5a       	subi	r30, 0xAA	; 170
    4182:	ff 4f       	sbci	r31, 0xFF	; 255
    4184:	10 82       	st	Z, r1
    4186:	fe 01       	movw	r30, r28
    4188:	ea 5a       	subi	r30, 0xAA	; 170
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	83 e0       	ldi	r24, 0x03	; 3
    418e:	81 83       	std	Z+1, r24	; 0x01
    external_interrupt_setCallBack(ISR0, INT_0);
    4190:	84 e8       	ldi	r24, 0x84	; 132
    4192:	90 e2       	ldi	r25, 0x20	; 32
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <external_interrupt_setCallBack>
    external_interrupt_init(&EX_interrupt_0);
    419a:	ce 01       	movw	r24, r28
    419c:	8a 5a       	subi	r24, 0xAA	; 170
    419e:	9f 4f       	sbci	r25, 0xFF	; 255
    41a0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <external_interrupt_init>

    /* Configure external interrupt 1 */
    EXT_INT_ConfigType EX_interrupt_1 = {INT_1, RISING_EDGE};
    41a4:	fe 01       	movw	r30, r28
    41a6:	e8 5a       	subi	r30, 0xA8	; 168
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	80 83       	st	Z, r24
    41ae:	fe 01       	movw	r30, r28
    41b0:	e8 5a       	subi	r30, 0xA8	; 168
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	83 e0       	ldi	r24, 0x03	; 3
    41b6:	81 83       	std	Z+1, r24	; 0x01
    external_interrupt_setCallBack(ISR1, INT_1);
    41b8:	8d e8       	ldi	r24, 0x8D	; 141
    41ba:	90 e2       	ldi	r25, 0x20	; 32
    41bc:	61 e0       	ldi	r22, 0x01	; 1
    41be:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <external_interrupt_setCallBack>
    external_interrupt_init(&EX_interrupt_1);
    41c2:	ce 01       	movw	r24, r28
    41c4:	88 5a       	subi	r24, 0xA8	; 168
    41c6:	9f 4f       	sbci	r25, 0xFF	; 255
    41c8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <external_interrupt_init>

    while (1)
    {
        /* Read PIR sensor values */
        pir_recieve1 = PIR_ReadValue1();
    41cc:	0e 94 31 10 	call	0x2062	; 0x2062 <PIR_ReadValue1>
    41d0:	80 93 d4 01 	sts	0x01D4, r24
        pir_recieve2 = PIR_ReadValue2();
    41d4:	0e 94 3c 10 	call	0x2078	; 0x2078 <PIR_ReadValue2>
    41d8:	80 93 d5 01 	sts	0x01D5, r24

        /* Handle PIR sensor 1 and 2 detection */
        if (pir_recieve1 && pir_recieve2)
    41dc:	80 91 d4 01 	lds	r24, 0x01D4
    41e0:	88 23       	and	r24, r24
    41e2:	09 f4       	brne	.+2      	; 0x41e6 <main+0xba>
    41e4:	54 c1       	rjmp	.+680    	; 0x448e <main+0x362>
    41e6:	80 91 d5 01 	lds	r24, 0x01D5
    41ea:	88 23       	and	r24, r24
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <main+0xc4>
    41ee:	4f c1       	rjmp	.+670    	; 0x448e <main+0x362>
        {
            LED_on(red);
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	0e 94 22 20 	call	0x4044	; 0x4044 <LED_on>
            LED_on(green);
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	0e 94 22 20 	call	0x4044	; 0x4044 <LED_on>
            LCD_clearScreen();
    41fc:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
            LCD_displayStringRowColumn(0, 0, "Motion Detected");
    4200:	20 e6       	ldi	r18, 0x60	; 96
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	a9 01       	movw	r20, r18
    420a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(1, 0, "In Front & Back");
    420e:	20 e7       	ldi	r18, 0x70	; 112
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	a9 01       	movw	r20, r18
    4218:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    421c:	fe 01       	movw	r30, r28
    421e:	ef 5a       	subi	r30, 0xAF	; 175
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	aa ef       	ldi	r26, 0xFA	; 250
    4228:	b3 e4       	ldi	r27, 0x43	; 67
    422a:	80 83       	st	Z, r24
    422c:	91 83       	std	Z+1, r25	; 0x01
    422e:	a2 83       	std	Z+2, r26	; 0x02
    4230:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4232:	8e 01       	movw	r16, r28
    4234:	03 5b       	subi	r16, 0xB3	; 179
    4236:	1f 4f       	sbci	r17, 0xFF	; 255
    4238:	fe 01       	movw	r30, r28
    423a:	ef 5a       	subi	r30, 0xAF	; 175
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	60 81       	ld	r22, Z
    4240:	71 81       	ldd	r23, Z+1	; 0x01
    4242:	82 81       	ldd	r24, Z+2	; 0x02
    4244:	93 81       	ldd	r25, Z+3	; 0x03
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	4a e7       	ldi	r20, 0x7A	; 122
    424c:	55 e4       	ldi	r21, 0x45	; 69
    424e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	f8 01       	movw	r30, r16
    4258:	80 83       	st	Z, r24
    425a:	91 83       	std	Z+1, r25	; 0x01
    425c:	a2 83       	std	Z+2, r26	; 0x02
    425e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4260:	fe 01       	movw	r30, r28
    4262:	e3 5b       	subi	r30, 0xB3	; 179
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	40 e8       	ldi	r20, 0x80	; 128
    4274:	5f e3       	ldi	r21, 0x3F	; 63
    4276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    427a:	88 23       	and	r24, r24
    427c:	44 f4       	brge	.+16     	; 0x428e <main+0x162>
		__ticks = 1;
    427e:	fe 01       	movw	r30, r28
    4280:	e5 5b       	subi	r30, 0xB5	; 181
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
    428c:	64 c0       	rjmp	.+200    	; 0x4356 <main+0x22a>
	else if (__tmp > 65535)
    428e:	fe 01       	movw	r30, r28
    4290:	e3 5b       	subi	r30, 0xB3	; 179
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	60 81       	ld	r22, Z
    4296:	71 81       	ldd	r23, Z+1	; 0x01
    4298:	82 81       	ldd	r24, Z+2	; 0x02
    429a:	93 81       	ldd	r25, Z+3	; 0x03
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	3f ef       	ldi	r19, 0xFF	; 255
    42a0:	4f e7       	ldi	r20, 0x7F	; 127
    42a2:	57 e4       	ldi	r21, 0x47	; 71
    42a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a8:	18 16       	cp	r1, r24
    42aa:	0c f0       	brlt	.+2      	; 0x42ae <main+0x182>
    42ac:	43 c0       	rjmp	.+134    	; 0x4334 <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ae:	fe 01       	movw	r30, r28
    42b0:	ef 5a       	subi	r30, 0xAF	; 175
    42b2:	ff 4f       	sbci	r31, 0xFF	; 255
    42b4:	60 81       	ld	r22, Z
    42b6:	71 81       	ldd	r23, Z+1	; 0x01
    42b8:	82 81       	ldd	r24, Z+2	; 0x02
    42ba:	93 81       	ldd	r25, Z+3	; 0x03
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e2       	ldi	r20, 0x20	; 32
    42c2:	51 e4       	ldi	r21, 0x41	; 65
    42c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	8e 01       	movw	r16, r28
    42ce:	05 5b       	subi	r16, 0xB5	; 181
    42d0:	1f 4f       	sbci	r17, 0xFF	; 255
    42d2:	bc 01       	movw	r22, r24
    42d4:	cd 01       	movw	r24, r26
    42d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	f8 01       	movw	r30, r16
    42e0:	91 83       	std	Z+1, r25	; 0x01
    42e2:	80 83       	st	Z, r24
    42e4:	1f c0       	rjmp	.+62     	; 0x4324 <main+0x1f8>
    42e6:	fe 01       	movw	r30, r28
    42e8:	e7 5b       	subi	r30, 0xB7	; 183
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	80 e9       	ldi	r24, 0x90	; 144
    42ee:	91 e0       	ldi	r25, 0x01	; 1
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	80 83       	st	Z, r24
    42f4:	fe 01       	movw	r30, r28
    42f6:	e7 5b       	subi	r30, 0xB7	; 183
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	80 81       	ld	r24, Z
    42fc:	91 81       	ldd	r25, Z+1	; 0x01
    42fe:	01 97       	sbiw	r24, 0x01	; 1
    4300:	f1 f7       	brne	.-4      	; 0x42fe <main+0x1d2>
    4302:	fe 01       	movw	r30, r28
    4304:	e7 5b       	subi	r30, 0xB7	; 183
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    430c:	de 01       	movw	r26, r28
    430e:	a5 5b       	subi	r26, 0xB5	; 181
    4310:	bf 4f       	sbci	r27, 0xFF	; 255
    4312:	fe 01       	movw	r30, r28
    4314:	e5 5b       	subi	r30, 0xB5	; 181
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	80 81       	ld	r24, Z
    431a:	91 81       	ldd	r25, Z+1	; 0x01
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	11 96       	adiw	r26, 0x01	; 1
    4320:	9c 93       	st	X, r25
    4322:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4324:	fe 01       	movw	r30, r28
    4326:	e5 5b       	subi	r30, 0xB5	; 181
    4328:	ff 4f       	sbci	r31, 0xFF	; 255
    432a:	80 81       	ld	r24, Z
    432c:	91 81       	ldd	r25, Z+1	; 0x01
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	d1 f6       	brne	.-76     	; 0x42e6 <main+0x1ba>
    4332:	27 c0       	rjmp	.+78     	; 0x4382 <main+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4334:	8e 01       	movw	r16, r28
    4336:	05 5b       	subi	r16, 0xB5	; 181
    4338:	1f 4f       	sbci	r17, 0xFF	; 255
    433a:	fe 01       	movw	r30, r28
    433c:	e3 5b       	subi	r30, 0xB3	; 179
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434c:	dc 01       	movw	r26, r24
    434e:	cb 01       	movw	r24, r22
    4350:	f8 01       	movw	r30, r16
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	80 83       	st	Z, r24
    4356:	de 01       	movw	r26, r28
    4358:	a9 5b       	subi	r26, 0xB9	; 185
    435a:	bf 4f       	sbci	r27, 0xFF	; 255
    435c:	fe 01       	movw	r30, r28
    435e:	e5 5b       	subi	r30, 0xB5	; 181
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	8d 93       	st	X+, r24
    4368:	9c 93       	st	X, r25
    436a:	fe 01       	movw	r30, r28
    436c:	e9 5b       	subi	r30, 0xB9	; 185
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <main+0x248>
    4378:	fe 01       	movw	r30, r28
    437a:	e9 5b       	subi	r30, 0xB9	; 185
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	91 83       	std	Z+1, r25	; 0x01
    4380:	80 83       	st	Z, r24
    4382:	fe 01       	movw	r30, r28
    4384:	ed 5b       	subi	r30, 0xBD	; 189
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	aa ef       	ldi	r26, 0xFA	; 250
    438e:	b3 e4       	ldi	r27, 0x43	; 67
    4390:	80 83       	st	Z, r24
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	a2 83       	std	Z+2, r26	; 0x02
    4396:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4398:	8e 01       	movw	r16, r28
    439a:	01 5c       	subi	r16, 0xC1	; 193
    439c:	1f 4f       	sbci	r17, 0xFF	; 255
    439e:	fe 01       	movw	r30, r28
    43a0:	ed 5b       	subi	r30, 0xBD	; 189
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	60 81       	ld	r22, Z
    43a6:	71 81       	ldd	r23, Z+1	; 0x01
    43a8:	82 81       	ldd	r24, Z+2	; 0x02
    43aa:	93 81       	ldd	r25, Z+3	; 0x03
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	4a e7       	ldi	r20, 0x7A	; 122
    43b2:	55 e4       	ldi	r21, 0x45	; 69
    43b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	f8 01       	movw	r30, r16
    43be:	80 83       	st	Z, r24
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	a2 83       	std	Z+2, r26	; 0x02
    43c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43c6:	fe 01       	movw	r30, r28
    43c8:	ff 96       	adiw	r30, 0x3f	; 63
    43ca:	60 81       	ld	r22, Z
    43cc:	71 81       	ldd	r23, Z+1	; 0x01
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	93 81       	ldd	r25, Z+3	; 0x03
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43de:	88 23       	and	r24, r24
    43e0:	2c f4       	brge	.+10     	; 0x43ec <main+0x2c0>
		__ticks = 1;
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	9e af       	std	Y+62, r25	; 0x3e
    43e8:	8d af       	std	Y+61, r24	; 0x3d
    43ea:	46 c0       	rjmp	.+140    	; 0x4478 <main+0x34c>
	else if (__tmp > 65535)
    43ec:	fe 01       	movw	r30, r28
    43ee:	ff 96       	adiw	r30, 0x3f	; 63
    43f0:	60 81       	ld	r22, Z
    43f2:	71 81       	ldd	r23, Z+1	; 0x01
    43f4:	82 81       	ldd	r24, Z+2	; 0x02
    43f6:	93 81       	ldd	r25, Z+3	; 0x03
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	3f ef       	ldi	r19, 0xFF	; 255
    43fc:	4f e7       	ldi	r20, 0x7F	; 127
    43fe:	57 e4       	ldi	r21, 0x47	; 71
    4400:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4404:	18 16       	cp	r1, r24
    4406:	64 f5       	brge	.+88     	; 0x4460 <main+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4408:	fe 01       	movw	r30, r28
    440a:	ed 5b       	subi	r30, 0xBD	; 189
    440c:	ff 4f       	sbci	r31, 0xFF	; 255
    440e:	60 81       	ld	r22, Z
    4410:	71 81       	ldd	r23, Z+1	; 0x01
    4412:	82 81       	ldd	r24, Z+2	; 0x02
    4414:	93 81       	ldd	r25, Z+3	; 0x03
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e2       	ldi	r20, 0x20	; 32
    441c:	51 e4       	ldi	r21, 0x41	; 65
    441e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	bc 01       	movw	r22, r24
    4428:	cd 01       	movw	r24, r26
    442a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442e:	dc 01       	movw	r26, r24
    4430:	cb 01       	movw	r24, r22
    4432:	9e af       	std	Y+62, r25	; 0x3e
    4434:	8d af       	std	Y+61, r24	; 0x3d
    4436:	0f c0       	rjmp	.+30     	; 0x4456 <main+0x32a>
    4438:	80 e9       	ldi	r24, 0x90	; 144
    443a:	91 e0       	ldi	r25, 0x01	; 1
    443c:	9c af       	std	Y+60, r25	; 0x3c
    443e:	8b af       	std	Y+59, r24	; 0x3b
    4440:	8b ad       	ldd	r24, Y+59	; 0x3b
    4442:	9c ad       	ldd	r25, Y+60	; 0x3c
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	f1 f7       	brne	.-4      	; 0x4444 <main+0x318>
    4448:	9c af       	std	Y+60, r25	; 0x3c
    444a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444c:	8d ad       	ldd	r24, Y+61	; 0x3d
    444e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4450:	01 97       	sbiw	r24, 0x01	; 1
    4452:	9e af       	std	Y+62, r25	; 0x3e
    4454:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4456:	8d ad       	ldd	r24, Y+61	; 0x3d
    4458:	9e ad       	ldd	r25, Y+62	; 0x3e
    445a:	00 97       	sbiw	r24, 0x00	; 0
    445c:	69 f7       	brne	.-38     	; 0x4438 <main+0x30c>
    445e:	1f c0       	rjmp	.+62     	; 0x449e <main+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4460:	fe 01       	movw	r30, r28
    4462:	ff 96       	adiw	r30, 0x3f	; 63
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	93 81       	ldd	r25, Z+3	; 0x03
    446c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	9e af       	std	Y+62, r25	; 0x3e
    4476:	8d af       	std	Y+61, r24	; 0x3d
    4478:	8d ad       	ldd	r24, Y+61	; 0x3d
    447a:	9e ad       	ldd	r25, Y+62	; 0x3e
    447c:	9a af       	std	Y+58, r25	; 0x3a
    447e:	89 af       	std	Y+57, r24	; 0x39
    4480:	89 ad       	ldd	r24, Y+57	; 0x39
    4482:	9a ad       	ldd	r25, Y+58	; 0x3a
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <main+0x358>
    4488:	9a af       	std	Y+58, r25	; 0x3a
    448a:	89 af       	std	Y+57, r24	; 0x39
    448c:	08 c0       	rjmp	.+16     	; 0x449e <main+0x372>
            _delay_ms(500);
            _delay_ms(500);
        }
        else
        {
            LED_off(red);
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LED_off>
            LED_off(green);
    4494:	81 e0       	ldi	r24, 0x01	; 1
    4496:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LED_off>
            LCD_clearScreen();
    449a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
        }

        /* Handle PIR sensor 1 detection */
        if (pir_recieve1 && !pir_recieve2)
    449e:	80 91 d4 01 	lds	r24, 0x01D4
    44a2:	88 23       	and	r24, r24
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <main+0x37c>
    44a6:	fd c0       	rjmp	.+506    	; 0x46a2 <main+0x576>
    44a8:	80 91 d5 01 	lds	r24, 0x01D5
    44ac:	88 23       	and	r24, r24
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <main+0x386>
    44b0:	f8 c0       	rjmp	.+496    	; 0x46a2 <main+0x576>
        {
            LED_on(red);
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	0e 94 22 20 	call	0x4044	; 0x4044 <LED_on>
            LCD_clearScreen();
    44b8:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
            LCD_displayStringRowColumn(0, 0, "Motion Detected");
    44bc:	20 e6       	ldi	r18, 0x60	; 96
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	a9 01       	movw	r20, r18
    44c6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(1, 0, "In Back");
    44ca:	20 e8       	ldi	r18, 0x80	; 128
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	60 e0       	ldi	r22, 0x00	; 0
    44d2:	a9 01       	movw	r20, r18
    44d4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	aa ef       	ldi	r26, 0xFA	; 250
    44de:	b3 e4       	ldi	r27, 0x43	; 67
    44e0:	8d ab       	std	Y+53, r24	; 0x35
    44e2:	9e ab       	std	Y+54, r25	; 0x36
    44e4:	af ab       	std	Y+55, r26	; 0x37
    44e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44e8:	6d a9       	ldd	r22, Y+53	; 0x35
    44ea:	7e a9       	ldd	r23, Y+54	; 0x36
    44ec:	8f a9       	ldd	r24, Y+55	; 0x37
    44ee:	98 ad       	ldd	r25, Y+56	; 0x38
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	4a e7       	ldi	r20, 0x7A	; 122
    44f6:	55 e4       	ldi	r21, 0x45	; 69
    44f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	89 ab       	std	Y+49, r24	; 0x31
    4502:	9a ab       	std	Y+50, r25	; 0x32
    4504:	ab ab       	std	Y+51, r26	; 0x33
    4506:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4508:	69 a9       	ldd	r22, Y+49	; 0x31
    450a:	7a a9       	ldd	r23, Y+50	; 0x32
    450c:	8b a9       	ldd	r24, Y+51	; 0x33
    450e:	9c a9       	ldd	r25, Y+52	; 0x34
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e8       	ldi	r20, 0x80	; 128
    4516:	5f e3       	ldi	r21, 0x3F	; 63
    4518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    451c:	88 23       	and	r24, r24
    451e:	2c f4       	brge	.+10     	; 0x452a <main+0x3fe>
		__ticks = 1;
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	98 ab       	std	Y+48, r25	; 0x30
    4526:	8f a7       	std	Y+47, r24	; 0x2f
    4528:	3f c0       	rjmp	.+126    	; 0x45a8 <main+0x47c>
	else if (__tmp > 65535)
    452a:	69 a9       	ldd	r22, Y+49	; 0x31
    452c:	7a a9       	ldd	r23, Y+50	; 0x32
    452e:	8b a9       	ldd	r24, Y+51	; 0x33
    4530:	9c a9       	ldd	r25, Y+52	; 0x34
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	3f ef       	ldi	r19, 0xFF	; 255
    4536:	4f e7       	ldi	r20, 0x7F	; 127
    4538:	57 e4       	ldi	r21, 0x47	; 71
    453a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    453e:	18 16       	cp	r1, r24
    4540:	4c f5       	brge	.+82     	; 0x4594 <main+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4542:	6d a9       	ldd	r22, Y+53	; 0x35
    4544:	7e a9       	ldd	r23, Y+54	; 0x36
    4546:	8f a9       	ldd	r24, Y+55	; 0x37
    4548:	98 ad       	ldd	r25, Y+56	; 0x38
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e2       	ldi	r20, 0x20	; 32
    4550:	51 e4       	ldi	r21, 0x41	; 65
    4552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	bc 01       	movw	r22, r24
    455c:	cd 01       	movw	r24, r26
    455e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	98 ab       	std	Y+48, r25	; 0x30
    4568:	8f a7       	std	Y+47, r24	; 0x2f
    456a:	0f c0       	rjmp	.+30     	; 0x458a <main+0x45e>
    456c:	80 e9       	ldi	r24, 0x90	; 144
    456e:	91 e0       	ldi	r25, 0x01	; 1
    4570:	9e a7       	std	Y+46, r25	; 0x2e
    4572:	8d a7       	std	Y+45, r24	; 0x2d
    4574:	8d a5       	ldd	r24, Y+45	; 0x2d
    4576:	9e a5       	ldd	r25, Y+46	; 0x2e
    4578:	01 97       	sbiw	r24, 0x01	; 1
    457a:	f1 f7       	brne	.-4      	; 0x4578 <main+0x44c>
    457c:	9e a7       	std	Y+46, r25	; 0x2e
    457e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4580:	8f a5       	ldd	r24, Y+47	; 0x2f
    4582:	98 a9       	ldd	r25, Y+48	; 0x30
    4584:	01 97       	sbiw	r24, 0x01	; 1
    4586:	98 ab       	std	Y+48, r25	; 0x30
    4588:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    458a:	8f a5       	ldd	r24, Y+47	; 0x2f
    458c:	98 a9       	ldd	r25, Y+48	; 0x30
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	69 f7       	brne	.-38     	; 0x456c <main+0x440>
    4592:	14 c0       	rjmp	.+40     	; 0x45bc <main+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4594:	69 a9       	ldd	r22, Y+49	; 0x31
    4596:	7a a9       	ldd	r23, Y+50	; 0x32
    4598:	8b a9       	ldd	r24, Y+51	; 0x33
    459a:	9c a9       	ldd	r25, Y+52	; 0x34
    459c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	98 ab       	std	Y+48, r25	; 0x30
    45a6:	8f a7       	std	Y+47, r24	; 0x2f
    45a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    45aa:	98 a9       	ldd	r25, Y+48	; 0x30
    45ac:	9c a7       	std	Y+44, r25	; 0x2c
    45ae:	8b a7       	std	Y+43, r24	; 0x2b
    45b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    45b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <main+0x488>
    45b8:	9c a7       	std	Y+44, r25	; 0x2c
    45ba:	8b a7       	std	Y+43, r24	; 0x2b
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	aa ef       	ldi	r26, 0xFA	; 250
    45c2:	b3 e4       	ldi	r27, 0x43	; 67
    45c4:	8f a3       	std	Y+39, r24	; 0x27
    45c6:	98 a7       	std	Y+40, r25	; 0x28
    45c8:	a9 a7       	std	Y+41, r26	; 0x29
    45ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45cc:	6f a1       	ldd	r22, Y+39	; 0x27
    45ce:	78 a5       	ldd	r23, Y+40	; 0x28
    45d0:	89 a5       	ldd	r24, Y+41	; 0x29
    45d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	4a e7       	ldi	r20, 0x7A	; 122
    45da:	55 e4       	ldi	r21, 0x45	; 69
    45dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	8b a3       	std	Y+35, r24	; 0x23
    45e6:	9c a3       	std	Y+36, r25	; 0x24
    45e8:	ad a3       	std	Y+37, r26	; 0x25
    45ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    45ec:	6b a1       	ldd	r22, Y+35	; 0x23
    45ee:	7c a1       	ldd	r23, Y+36	; 0x24
    45f0:	8d a1       	ldd	r24, Y+37	; 0x25
    45f2:	9e a1       	ldd	r25, Y+38	; 0x26
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	40 e8       	ldi	r20, 0x80	; 128
    45fa:	5f e3       	ldi	r21, 0x3F	; 63
    45fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4600:	88 23       	and	r24, r24
    4602:	2c f4       	brge	.+10     	; 0x460e <main+0x4e2>
		__ticks = 1;
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	9a a3       	std	Y+34, r25	; 0x22
    460a:	89 a3       	std	Y+33, r24	; 0x21
    460c:	3f c0       	rjmp	.+126    	; 0x468c <main+0x560>
	else if (__tmp > 65535)
    460e:	6b a1       	ldd	r22, Y+35	; 0x23
    4610:	7c a1       	ldd	r23, Y+36	; 0x24
    4612:	8d a1       	ldd	r24, Y+37	; 0x25
    4614:	9e a1       	ldd	r25, Y+38	; 0x26
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	3f ef       	ldi	r19, 0xFF	; 255
    461a:	4f e7       	ldi	r20, 0x7F	; 127
    461c:	57 e4       	ldi	r21, 0x47	; 71
    461e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4622:	18 16       	cp	r1, r24
    4624:	4c f5       	brge	.+82     	; 0x4678 <main+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4626:	6f a1       	ldd	r22, Y+39	; 0x27
    4628:	78 a5       	ldd	r23, Y+40	; 0x28
    462a:	89 a5       	ldd	r24, Y+41	; 0x29
    462c:	9a a5       	ldd	r25, Y+42	; 0x2a
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 e2       	ldi	r20, 0x20	; 32
    4634:	51 e4       	ldi	r21, 0x41	; 65
    4636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    463a:	dc 01       	movw	r26, r24
    463c:	cb 01       	movw	r24, r22
    463e:	bc 01       	movw	r22, r24
    4640:	cd 01       	movw	r24, r26
    4642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	9a a3       	std	Y+34, r25	; 0x22
    464c:	89 a3       	std	Y+33, r24	; 0x21
    464e:	0f c0       	rjmp	.+30     	; 0x466e <main+0x542>
    4650:	80 e9       	ldi	r24, 0x90	; 144
    4652:	91 e0       	ldi	r25, 0x01	; 1
    4654:	98 a3       	std	Y+32, r25	; 0x20
    4656:	8f 8f       	std	Y+31, r24	; 0x1f
    4658:	8f 8d       	ldd	r24, Y+31	; 0x1f
    465a:	98 a1       	ldd	r25, Y+32	; 0x20
    465c:	01 97       	sbiw	r24, 0x01	; 1
    465e:	f1 f7       	brne	.-4      	; 0x465c <main+0x530>
    4660:	98 a3       	std	Y+32, r25	; 0x20
    4662:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4664:	89 a1       	ldd	r24, Y+33	; 0x21
    4666:	9a a1       	ldd	r25, Y+34	; 0x22
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	9a a3       	std	Y+34, r25	; 0x22
    466c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466e:	89 a1       	ldd	r24, Y+33	; 0x21
    4670:	9a a1       	ldd	r25, Y+34	; 0x22
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	69 f7       	brne	.-38     	; 0x4650 <main+0x524>
    4676:	1a c0       	rjmp	.+52     	; 0x46ac <main+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4678:	6b a1       	ldd	r22, Y+35	; 0x23
    467a:	7c a1       	ldd	r23, Y+36	; 0x24
    467c:	8d a1       	ldd	r24, Y+37	; 0x25
    467e:	9e a1       	ldd	r25, Y+38	; 0x26
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	9a a3       	std	Y+34, r25	; 0x22
    468a:	89 a3       	std	Y+33, r24	; 0x21
    468c:	89 a1       	ldd	r24, Y+33	; 0x21
    468e:	9a a1       	ldd	r25, Y+34	; 0x22
    4690:	9e 8f       	std	Y+30, r25	; 0x1e
    4692:	8d 8f       	std	Y+29, r24	; 0x1d
    4694:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4696:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4698:	01 97       	sbiw	r24, 0x01	; 1
    469a:	f1 f7       	brne	.-4      	; 0x4698 <main+0x56c>
    469c:	9e 8f       	std	Y+30, r25	; 0x1e
    469e:	8d 8f       	std	Y+29, r24	; 0x1d
    46a0:	05 c0       	rjmp	.+10     	; 0x46ac <main+0x580>
            _delay_ms(500);
            _delay_ms(500);
        }
        else
        {
            LED_off(red);
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LED_off>
            LCD_clearScreen();
    46a8:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
        }

        /* Handle PIR sensor 2 detection */
        if (!pir_recieve1 && pir_recieve2)
    46ac:	80 91 d4 01 	lds	r24, 0x01D4
    46b0:	88 23       	and	r24, r24
    46b2:	09 f0       	breq	.+2      	; 0x46b6 <main+0x58a>
    46b4:	fd c0       	rjmp	.+506    	; 0x48b0 <main+0x784>
    46b6:	80 91 d5 01 	lds	r24, 0x01D5
    46ba:	88 23       	and	r24, r24
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <main+0x594>
    46be:	f8 c0       	rjmp	.+496    	; 0x48b0 <main+0x784>
        {
            LED_on(green);
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	0e 94 22 20 	call	0x4044	; 0x4044 <LED_on>
            LCD_clearScreen();
    46c6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
            LCD_displayStringRowColumn(0, 0, "Motion Detected");
    46ca:	20 e6       	ldi	r18, 0x60	; 96
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	60 e0       	ldi	r22, 0x00	; 0
    46d2:	a9 01       	movw	r20, r18
    46d4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(1, 0, "In Front");
    46d8:	28 e8       	ldi	r18, 0x88	; 136
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	a9 01       	movw	r20, r18
    46e2:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    46e6:	80 e0       	ldi	r24, 0x00	; 0
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	aa ef       	ldi	r26, 0xFA	; 250
    46ec:	b3 e4       	ldi	r27, 0x43	; 67
    46ee:	89 8f       	std	Y+25, r24	; 0x19
    46f0:	9a 8f       	std	Y+26, r25	; 0x1a
    46f2:	ab 8f       	std	Y+27, r26	; 0x1b
    46f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46f6:	69 8d       	ldd	r22, Y+25	; 0x19
    46f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	4a e7       	ldi	r20, 0x7A	; 122
    4704:	55 e4       	ldi	r21, 0x45	; 69
    4706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	8d 8b       	std	Y+21, r24	; 0x15
    4710:	9e 8b       	std	Y+22, r25	; 0x16
    4712:	af 8b       	std	Y+23, r26	; 0x17
    4714:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4716:	6d 89       	ldd	r22, Y+21	; 0x15
    4718:	7e 89       	ldd	r23, Y+22	; 0x16
    471a:	8f 89       	ldd	r24, Y+23	; 0x17
    471c:	98 8d       	ldd	r25, Y+24	; 0x18
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	40 e8       	ldi	r20, 0x80	; 128
    4724:	5f e3       	ldi	r21, 0x3F	; 63
    4726:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    472a:	88 23       	and	r24, r24
    472c:	2c f4       	brge	.+10     	; 0x4738 <main+0x60c>
		__ticks = 1;
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	9c 8b       	std	Y+20, r25	; 0x14
    4734:	8b 8b       	std	Y+19, r24	; 0x13
    4736:	3f c0       	rjmp	.+126    	; 0x47b6 <main+0x68a>
	else if (__tmp > 65535)
    4738:	6d 89       	ldd	r22, Y+21	; 0x15
    473a:	7e 89       	ldd	r23, Y+22	; 0x16
    473c:	8f 89       	ldd	r24, Y+23	; 0x17
    473e:	98 8d       	ldd	r25, Y+24	; 0x18
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	3f ef       	ldi	r19, 0xFF	; 255
    4744:	4f e7       	ldi	r20, 0x7F	; 127
    4746:	57 e4       	ldi	r21, 0x47	; 71
    4748:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    474c:	18 16       	cp	r1, r24
    474e:	4c f5       	brge	.+82     	; 0x47a2 <main+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4750:	69 8d       	ldd	r22, Y+25	; 0x19
    4752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	40 e2       	ldi	r20, 0x20	; 32
    475e:	51 e4       	ldi	r21, 0x41	; 65
    4760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4764:	dc 01       	movw	r26, r24
    4766:	cb 01       	movw	r24, r22
    4768:	bc 01       	movw	r22, r24
    476a:	cd 01       	movw	r24, r26
    476c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	9c 8b       	std	Y+20, r25	; 0x14
    4776:	8b 8b       	std	Y+19, r24	; 0x13
    4778:	0f c0       	rjmp	.+30     	; 0x4798 <main+0x66c>
    477a:	80 e9       	ldi	r24, 0x90	; 144
    477c:	91 e0       	ldi	r25, 0x01	; 1
    477e:	9a 8b       	std	Y+18, r25	; 0x12
    4780:	89 8b       	std	Y+17, r24	; 0x11
    4782:	89 89       	ldd	r24, Y+17	; 0x11
    4784:	9a 89       	ldd	r25, Y+18	; 0x12
    4786:	01 97       	sbiw	r24, 0x01	; 1
    4788:	f1 f7       	brne	.-4      	; 0x4786 <main+0x65a>
    478a:	9a 8b       	std	Y+18, r25	; 0x12
    478c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    478e:	8b 89       	ldd	r24, Y+19	; 0x13
    4790:	9c 89       	ldd	r25, Y+20	; 0x14
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	9c 8b       	std	Y+20, r25	; 0x14
    4796:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4798:	8b 89       	ldd	r24, Y+19	; 0x13
    479a:	9c 89       	ldd	r25, Y+20	; 0x14
    479c:	00 97       	sbiw	r24, 0x00	; 0
    479e:	69 f7       	brne	.-38     	; 0x477a <main+0x64e>
    47a0:	14 c0       	rjmp	.+40     	; 0x47ca <main+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a2:	6d 89       	ldd	r22, Y+21	; 0x15
    47a4:	7e 89       	ldd	r23, Y+22	; 0x16
    47a6:	8f 89       	ldd	r24, Y+23	; 0x17
    47a8:	98 8d       	ldd	r25, Y+24	; 0x18
    47aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	9c 8b       	std	Y+20, r25	; 0x14
    47b4:	8b 8b       	std	Y+19, r24	; 0x13
    47b6:	8b 89       	ldd	r24, Y+19	; 0x13
    47b8:	9c 89       	ldd	r25, Y+20	; 0x14
    47ba:	98 8b       	std	Y+16, r25	; 0x10
    47bc:	8f 87       	std	Y+15, r24	; 0x0f
    47be:	8f 85       	ldd	r24, Y+15	; 0x0f
    47c0:	98 89       	ldd	r25, Y+16	; 0x10
    47c2:	01 97       	sbiw	r24, 0x01	; 1
    47c4:	f1 f7       	brne	.-4      	; 0x47c2 <main+0x696>
    47c6:	98 8b       	std	Y+16, r25	; 0x10
    47c8:	8f 87       	std	Y+15, r24	; 0x0f
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	aa ef       	ldi	r26, 0xFA	; 250
    47d0:	b3 e4       	ldi	r27, 0x43	; 67
    47d2:	8b 87       	std	Y+11, r24	; 0x0b
    47d4:	9c 87       	std	Y+12, r25	; 0x0c
    47d6:	ad 87       	std	Y+13, r26	; 0x0d
    47d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47da:	6b 85       	ldd	r22, Y+11	; 0x0b
    47dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    47de:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	4a e7       	ldi	r20, 0x7A	; 122
    47e8:	55 e4       	ldi	r21, 0x45	; 69
    47ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ee:	dc 01       	movw	r26, r24
    47f0:	cb 01       	movw	r24, r22
    47f2:	8f 83       	std	Y+7, r24	; 0x07
    47f4:	98 87       	std	Y+8, r25	; 0x08
    47f6:	a9 87       	std	Y+9, r26	; 0x09
    47f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47fa:	6f 81       	ldd	r22, Y+7	; 0x07
    47fc:	78 85       	ldd	r23, Y+8	; 0x08
    47fe:	89 85       	ldd	r24, Y+9	; 0x09
    4800:	9a 85       	ldd	r25, Y+10	; 0x0a
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	40 e8       	ldi	r20, 0x80	; 128
    4808:	5f e3       	ldi	r21, 0x3F	; 63
    480a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    480e:	88 23       	and	r24, r24
    4810:	2c f4       	brge	.+10     	; 0x481c <main+0x6f0>
		__ticks = 1;
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	9e 83       	std	Y+6, r25	; 0x06
    4818:	8d 83       	std	Y+5, r24	; 0x05
    481a:	3f c0       	rjmp	.+126    	; 0x489a <main+0x76e>
	else if (__tmp > 65535)
    481c:	6f 81       	ldd	r22, Y+7	; 0x07
    481e:	78 85       	ldd	r23, Y+8	; 0x08
    4820:	89 85       	ldd	r24, Y+9	; 0x09
    4822:	9a 85       	ldd	r25, Y+10	; 0x0a
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	3f ef       	ldi	r19, 0xFF	; 255
    4828:	4f e7       	ldi	r20, 0x7F	; 127
    482a:	57 e4       	ldi	r21, 0x47	; 71
    482c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4830:	18 16       	cp	r1, r24
    4832:	4c f5       	brge	.+82     	; 0x4886 <main+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4834:	6b 85       	ldd	r22, Y+11	; 0x0b
    4836:	7c 85       	ldd	r23, Y+12	; 0x0c
    4838:	8d 85       	ldd	r24, Y+13	; 0x0d
    483a:	9e 85       	ldd	r25, Y+14	; 0x0e
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	40 e2       	ldi	r20, 0x20	; 32
    4842:	51 e4       	ldi	r21, 0x41	; 65
    4844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4848:	dc 01       	movw	r26, r24
    484a:	cb 01       	movw	r24, r22
    484c:	bc 01       	movw	r22, r24
    484e:	cd 01       	movw	r24, r26
    4850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	9e 83       	std	Y+6, r25	; 0x06
    485a:	8d 83       	std	Y+5, r24	; 0x05
    485c:	0f c0       	rjmp	.+30     	; 0x487c <main+0x750>
    485e:	80 e9       	ldi	r24, 0x90	; 144
    4860:	91 e0       	ldi	r25, 0x01	; 1
    4862:	9c 83       	std	Y+4, r25	; 0x04
    4864:	8b 83       	std	Y+3, r24	; 0x03
    4866:	8b 81       	ldd	r24, Y+3	; 0x03
    4868:	9c 81       	ldd	r25, Y+4	; 0x04
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	f1 f7       	brne	.-4      	; 0x486a <main+0x73e>
    486e:	9c 83       	std	Y+4, r25	; 0x04
    4870:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4872:	8d 81       	ldd	r24, Y+5	; 0x05
    4874:	9e 81       	ldd	r25, Y+6	; 0x06
    4876:	01 97       	sbiw	r24, 0x01	; 1
    4878:	9e 83       	std	Y+6, r25	; 0x06
    487a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	9e 81       	ldd	r25, Y+6	; 0x06
    4880:	00 97       	sbiw	r24, 0x00	; 0
    4882:	69 f7       	brne	.-38     	; 0x485e <main+0x732>
    4884:	1a c0       	rjmp	.+52     	; 0x48ba <main+0x78e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4886:	6f 81       	ldd	r22, Y+7	; 0x07
    4888:	78 85       	ldd	r23, Y+8	; 0x08
    488a:	89 85       	ldd	r24, Y+9	; 0x09
    488c:	9a 85       	ldd	r25, Y+10	; 0x0a
    488e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4892:	dc 01       	movw	r26, r24
    4894:	cb 01       	movw	r24, r22
    4896:	9e 83       	std	Y+6, r25	; 0x06
    4898:	8d 83       	std	Y+5, r24	; 0x05
    489a:	8d 81       	ldd	r24, Y+5	; 0x05
    489c:	9e 81       	ldd	r25, Y+6	; 0x06
    489e:	9a 83       	std	Y+2, r25	; 0x02
    48a0:	89 83       	std	Y+1, r24	; 0x01
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	9a 81       	ldd	r25, Y+2	; 0x02
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <main+0x77a>
    48aa:	9a 83       	std	Y+2, r25	; 0x02
    48ac:	89 83       	std	Y+1, r24	; 0x01
    48ae:	05 c0       	rjmp	.+10     	; 0x48ba <main+0x78e>
            _delay_ms(500);
            _delay_ms(500);
        }
        else
        {
            LED_off(green);
    48b0:	81 e0       	ldi	r24, 0x01	; 1
    48b2:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LED_off>
            LCD_clearScreen();
    48b6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
        }

        /* Receive a message from UART */
        recievedMSG = UART_receiveByte();
    48ba:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    48be:	fe 01       	movw	r30, r28
    48c0:	eb 5a       	subi	r30, 0xAB	; 171
    48c2:	ff 4f       	sbci	r31, 0xFF	; 255
    48c4:	80 83       	st	Z, r24

        /* Process the received message */
        switch (recievedMSG)
    48c6:	fe 01       	movw	r30, r28
    48c8:	eb 5a       	subi	r30, 0xAB	; 171
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	80 81       	ld	r24, Z
    48ce:	28 2f       	mov	r18, r24
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	6c 96       	adiw	r28, 0x1c	; 28
    48d4:	3f af       	std	Y+63, r19	; 0x3f
    48d6:	2e af       	std	Y+62, r18	; 0x3e
    48d8:	6c 97       	sbiw	r28, 0x1c	; 28
    48da:	6c 96       	adiw	r28, 0x1c	; 28
    48dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    48de:	9f ad       	ldd	r25, Y+63	; 0x3f
    48e0:	6c 97       	sbiw	r28, 0x1c	; 28
    48e2:	8c 34       	cpi	r24, 0x4C	; 76
    48e4:	91 05       	cpc	r25, r1
    48e6:	09 f4       	brne	.+2      	; 0x48ea <main+0x7be>
    48e8:	71 c0       	rjmp	.+226    	; 0x49cc <main+0x8a0>
    48ea:	6c 96       	adiw	r28, 0x1c	; 28
    48ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    48ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    48f0:	6c 97       	sbiw	r28, 0x1c	; 28
    48f2:	ed 34       	cpi	r30, 0x4D	; 77
    48f4:	f1 05       	cpc	r31, r1
    48f6:	44 f5       	brge	.+80     	; 0x4948 <main+0x81c>
    48f8:	6c 96       	adiw	r28, 0x1c	; 28
    48fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    48fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    48fe:	6c 97       	sbiw	r28, 0x1c	; 28
    4900:	22 34       	cpi	r18, 0x42	; 66
    4902:	31 05       	cpc	r19, r1
    4904:	09 f4       	brne	.+2      	; 0x4908 <main+0x7dc>
    4906:	4f c0       	rjmp	.+158    	; 0x49a6 <main+0x87a>
    4908:	6c 96       	adiw	r28, 0x1c	; 28
    490a:	8e ad       	ldd	r24, Y+62	; 0x3e
    490c:	9f ad       	ldd	r25, Y+63	; 0x3f
    490e:	6c 97       	sbiw	r28, 0x1c	; 28
    4910:	83 34       	cpi	r24, 0x43	; 67
    4912:	91 05       	cpc	r25, r1
    4914:	4c f4       	brge	.+18     	; 0x4928 <main+0x7fc>
    4916:	6c 96       	adiw	r28, 0x1c	; 28
    4918:	ee ad       	ldd	r30, Y+62	; 0x3e
    491a:	ff ad       	ldd	r31, Y+63	; 0x3f
    491c:	6c 97       	sbiw	r28, 0x1c	; 28
    491e:	e1 34       	cpi	r30, 0x41	; 65
    4920:	f1 05       	cpc	r31, r1
    4922:	09 f4       	brne	.+2      	; 0x4926 <main+0x7fa>
    4924:	5b c0       	rjmp	.+182    	; 0x49dc <main+0x8b0>
    4926:	52 cc       	rjmp	.-1884   	; 0x41cc <main+0xa0>
    4928:	6c 96       	adiw	r28, 0x1c	; 28
    492a:	2e ad       	ldd	r18, Y+62	; 0x3e
    492c:	3f ad       	ldd	r19, Y+63	; 0x3f
    492e:	6c 97       	sbiw	r28, 0x1c	; 28
    4930:	26 34       	cpi	r18, 0x46	; 70
    4932:	31 05       	cpc	r19, r1
    4934:	81 f1       	breq	.+96     	; 0x4996 <main+0x86a>
    4936:	6c 96       	adiw	r28, 0x1c	; 28
    4938:	8e ad       	ldd	r24, Y+62	; 0x3e
    493a:	9f ad       	ldd	r25, Y+63	; 0x3f
    493c:	6c 97       	sbiw	r28, 0x1c	; 28
    493e:	88 34       	cpi	r24, 0x48	; 72
    4940:	91 05       	cpc	r25, r1
    4942:	09 f4       	brne	.+2      	; 0x4946 <main+0x81a>
    4944:	53 c0       	rjmp	.+166    	; 0x49ec <main+0x8c0>
    4946:	42 cc       	rjmp	.-1916   	; 0x41cc <main+0xa0>
    4948:	6c 96       	adiw	r28, 0x1c	; 28
    494a:	ee ad       	ldd	r30, Y+62	; 0x3e
    494c:	ff ad       	ldd	r31, Y+63	; 0x3f
    494e:	6c 97       	sbiw	r28, 0x1c	; 28
    4950:	e0 35       	cpi	r30, 0x50	; 80
    4952:	f1 05       	cpc	r31, r1
    4954:	09 f4       	brne	.+2      	; 0x4958 <main+0x82c>
    4956:	52 c0       	rjmp	.+164    	; 0x49fc <main+0x8d0>
    4958:	6c 96       	adiw	r28, 0x1c	; 28
    495a:	2e ad       	ldd	r18, Y+62	; 0x3e
    495c:	3f ad       	ldd	r19, Y+63	; 0x3f
    495e:	6c 97       	sbiw	r28, 0x1c	; 28
    4960:	21 35       	cpi	r18, 0x51	; 81
    4962:	31 05       	cpc	r19, r1
    4964:	4c f4       	brge	.+18     	; 0x4978 <main+0x84c>
    4966:	6c 96       	adiw	r28, 0x1c	; 28
    4968:	8e ad       	ldd	r24, Y+62	; 0x3e
    496a:	9f ad       	ldd	r25, Y+63	; 0x3f
    496c:	6c 97       	sbiw	r28, 0x1c	; 28
    496e:	8d 34       	cpi	r24, 0x4D	; 77
    4970:	91 05       	cpc	r25, r1
    4972:	09 f4       	brne	.+2      	; 0x4976 <main+0x84a>
    4974:	46 c0       	rjmp	.+140    	; 0x4a02 <main+0x8d6>
    4976:	2a cc       	rjmp	.-1964   	; 0x41cc <main+0xa0>
    4978:	6c 96       	adiw	r28, 0x1c	; 28
    497a:	ee ad       	ldd	r30, Y+62	; 0x3e
    497c:	ff ad       	ldd	r31, Y+63	; 0x3f
    497e:	6c 97       	sbiw	r28, 0x1c	; 28
    4980:	e2 35       	cpi	r30, 0x52	; 82
    4982:	f1 05       	cpc	r31, r1
    4984:	d9 f0       	breq	.+54     	; 0x49bc <main+0x890>
    4986:	6c 96       	adiw	r28, 0x1c	; 28
    4988:	2e ad       	ldd	r18, Y+62	; 0x3e
    498a:	3f ad       	ldd	r19, Y+63	; 0x3f
    498c:	6c 97       	sbiw	r28, 0x1c	; 28
    498e:	23 35       	cpi	r18, 0x53	; 83
    4990:	31 05       	cpc	r19, r1
    4992:	89 f0       	breq	.+34     	; 0x49b6 <main+0x88a>
    4994:	1b cc       	rjmp	.-1994   	; 0x41cc <main+0xa0>
        {
        case 'F':
            if (!pir_recieve1)
    4996:	80 91 d4 01 	lds	r24, 0x01D4
    499a:	88 23       	and	r24, r24
    499c:	09 f0       	breq	.+2      	; 0x49a0 <main+0x874>
    499e:	16 cc       	rjmp	.-2004   	; 0x41cc <main+0xa0>
            {
                Forward();  /* Move forward */
    49a0:	0e 94 37 11 	call	0x226e	; 0x226e <Forward>
    49a4:	13 cc       	rjmp	.-2010   	; 0x41cc <main+0xa0>
            }
            break;
        case 'B':
            if (!pir_recieve2)
    49a6:	80 91 d5 01 	lds	r24, 0x01D5
    49aa:	88 23       	and	r24, r24
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <main+0x884>
    49ae:	0e cc       	rjmp	.-2020   	; 0x41cc <main+0xa0>
            {
                Backward();  /* Move backward */
    49b0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Backward>
    49b4:	0b cc       	rjmp	.-2026   	; 0x41cc <main+0xa0>
            }
            break;
        case 'S':
            Stop();  /* Stop movement */
    49b6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
    49ba:	08 cc       	rjmp	.-2032   	; 0x41cc <main+0xa0>
            break;
        case 'R':
            if (!pir_recieve1)
    49bc:	80 91 d4 01 	lds	r24, 0x01D4
    49c0:	88 23       	and	r24, r24
    49c2:	09 f0       	breq	.+2      	; 0x49c6 <main+0x89a>
    49c4:	03 cc       	rjmp	.-2042   	; 0x41cc <main+0xa0>
            {
                Right_Forward();  /* Turn right and move forward */
    49c6:	0e 94 88 12 	call	0x2510	; 0x2510 <Right_Forward>
    49ca:	00 cc       	rjmp	.-2048   	; 0x41cc <main+0xa0>
            }
            break;
        case 'L':
            if (!pir_recieve1)
    49cc:	80 91 d4 01 	lds	r24, 0x01D4
    49d0:	88 23       	and	r24, r24
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <main+0x8aa>
    49d4:	fb cb       	rjmp	.-2058   	; 0x41cc <main+0xa0>
            {
                Left_Forward();  /* Turn left and move forward */
    49d6:	0e 94 28 13 	call	0x2650	; 0x2650 <Left_Forward>
    49da:	f8 cb       	rjmp	.-2064   	; 0x41cc <main+0xa0>
            }
            break;
        case 'A':
            if (!pir_recieve2)
    49dc:	80 91 d5 01 	lds	r24, 0x01D5
    49e0:	88 23       	and	r24, r24
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <main+0x8ba>
    49e4:	f3 cb       	rjmp	.-2074   	; 0x41cc <main+0xa0>
            {
                Right_Backward();  /* Turn right and move backward */
    49e6:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Right_Backward>
    49ea:	f0 cb       	rjmp	.-2080   	; 0x41cc <main+0xa0>
            }
            break;
        case 'H':
            if (!pir_recieve2)
    49ec:	80 91 d5 01 	lds	r24, 0x01D5
    49f0:	88 23       	and	r24, r24
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <main+0x8ca>
    49f4:	eb cb       	rjmp	.-2090   	; 0x41cc <main+0xa0>
            {
                Left_Backward();  /* Turn left and move backward */
    49f6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <Left_Backward>
    49fa:	e8 cb       	rjmp	.-2096   	; 0x41cc <main+0xa0>
            }
            break;
        case 'P':
            autoParking();  /* Perform auto-parking */
    49fc:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <autoParking>
    4a00:	e5 cb       	rjmp	.-2102   	; 0x41cc <main+0xa0>
            break;
        case 'M':
            DcMotor_Init(motorSpeed(UART_receiveByte()));  /* Reinitialize motor with new speed */
    4a02:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    4a06:	0e 94 08 25 	call	0x4a10	; 0x4a10 <motorSpeed>
    4a0a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DcMotor_Init>
    4a0e:	de cb       	rjmp	.-2116   	; 0x41cc <main+0xa0>

00004a10 <motorSpeed>:
 * - speed: The speed value received from UART.
 * Returns     :
 * - The motor speed level (MOTOR_SPEED_ONE, MOTOR_SPEED_TWO, or MOTOR_MAX_SPEED).
 */
uint8 motorSpeed(uint8 speed)
{
    4a10:	df 93       	push	r29
    4a12:	cf 93       	push	r28
    4a14:	00 d0       	rcall	.+0      	; 0x4a16 <motorSpeed+0x6>
    4a16:	00 d0       	rcall	.+0      	; 0x4a18 <motorSpeed+0x8>
    4a18:	cd b7       	in	r28, 0x3d	; 61
    4a1a:	de b7       	in	r29, 0x3e	; 62
    4a1c:	89 83       	std	Y+1, r24	; 0x01
    switch (speed)
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	28 2f       	mov	r18, r24
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	3c 83       	std	Y+4, r19	; 0x04
    4a26:	2b 83       	std	Y+3, r18	; 0x03
    4a28:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a2c:	82 33       	cpi	r24, 0x32	; 50
    4a2e:	91 05       	cpc	r25, r1
    4a30:	69 f0       	breq	.+26     	; 0x4a4c <motorSpeed+0x3c>
    4a32:	2b 81       	ldd	r18, Y+3	; 0x03
    4a34:	3c 81       	ldd	r19, Y+4	; 0x04
    4a36:	23 33       	cpi	r18, 0x33	; 51
    4a38:	31 05       	cpc	r19, r1
    4a3a:	59 f0       	breq	.+22     	; 0x4a52 <motorSpeed+0x42>
    4a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a40:	81 33       	cpi	r24, 0x31	; 49
    4a42:	91 05       	cpc	r25, r1
    4a44:	49 f4       	brne	.+18     	; 0x4a58 <motorSpeed+0x48>
    {
    case '1':
        return MOTOR_SPEED_ONE;  /* Speed level 1 */
    4a46:	96 e4       	ldi	r25, 0x46	; 70
    4a48:	9a 83       	std	Y+2, r25	; 0x02
    4a4a:	08 c0       	rjmp	.+16     	; 0x4a5c <motorSpeed+0x4c>
        break;
    case '2':
        return MOTOR_SPEED_TWO;  /* Speed level 2 */
    4a4c:	25 e5       	ldi	r18, 0x55	; 85
    4a4e:	2a 83       	std	Y+2, r18	; 0x02
    4a50:	05 c0       	rjmp	.+10     	; 0x4a5c <motorSpeed+0x4c>
        break;
    case '3':
        return MOTOR_MAX_SPEED;  /* Speed level 3 */
    4a52:	34 e6       	ldi	r19, 0x64	; 100
    4a54:	3a 83       	std	Y+2, r19	; 0x02
    4a56:	02 c0       	rjmp	.+4      	; 0x4a5c <motorSpeed+0x4c>
        break;
    }

    return MOTOR_MAX_SPEED;  /* Default speed */
    4a58:	84 e6       	ldi	r24, 0x64	; 100
    4a5a:	8a 83       	std	Y+2, r24	; 0x02
    4a5c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	cf 91       	pop	r28
    4a68:	df 91       	pop	r29
    4a6a:	08 95       	ret

00004a6c <autoParking>:
 * Description :
 * Function to handle the auto-parking functionality.
 * This function controls the car's movement to park automatically.
 */
void autoParking(void)
{
    4a6c:	0f 93       	push	r16
    4a6e:	1f 93       	push	r17
    4a70:	df 93       	push	r29
    4a72:	cf 93       	push	r28
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
    4a78:	c9 5a       	subi	r28, 0xA9	; 169
    4a7a:	d0 40       	sbci	r29, 0x00	; 0
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	cd bf       	out	0x3d, r28	; 61
    uint8 counter = 0;
    4a86:	fe 01       	movw	r30, r28
    4a88:	e7 55       	subi	r30, 0x57	; 87
    4a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8c:	10 82       	st	Z, r1

    LCD_clearScreen();
    4a8e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <LCD_clearScreen>
    4a92:	fe 01       	movw	r30, r28
    4a94:	eb 55       	subi	r30, 0x5B	; 91
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	aa ef       	ldi	r26, 0xFA	; 250
    4a9e:	b3 e4       	ldi	r27, 0x43	; 67
    4aa0:	80 83       	st	Z, r24
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	a2 83       	std	Z+2, r26	; 0x02
    4aa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa8:	8e 01       	movw	r16, r28
    4aaa:	0f 55       	subi	r16, 0x5F	; 95
    4aac:	1f 4f       	sbci	r17, 0xFF	; 255
    4aae:	fe 01       	movw	r30, r28
    4ab0:	eb 55       	subi	r30, 0x5B	; 91
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	60 81       	ld	r22, Z
    4ab6:	71 81       	ldd	r23, Z+1	; 0x01
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	93 81       	ldd	r25, Z+3	; 0x03
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	4a e7       	ldi	r20, 0x7A	; 122
    4ac2:	55 e4       	ldi	r21, 0x45	; 69
    4ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	f8 01       	movw	r30, r16
    4ace:	80 83       	st	Z, r24
    4ad0:	91 83       	std	Z+1, r25	; 0x01
    4ad2:	a2 83       	std	Z+2, r26	; 0x02
    4ad4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	ef 55       	subi	r30, 0x5F	; 95
    4ada:	ff 4f       	sbci	r31, 0xFF	; 255
    4adc:	60 81       	ld	r22, Z
    4ade:	71 81       	ldd	r23, Z+1	; 0x01
    4ae0:	82 81       	ldd	r24, Z+2	; 0x02
    4ae2:	93 81       	ldd	r25, Z+3	; 0x03
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	40 e8       	ldi	r20, 0x80	; 128
    4aea:	5f e3       	ldi	r21, 0x3F	; 63
    4aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4af0:	88 23       	and	r24, r24
    4af2:	44 f4       	brge	.+16     	; 0x4b04 <autoParking+0x98>
		__ticks = 1;
    4af4:	fe 01       	movw	r30, r28
    4af6:	e1 56       	subi	r30, 0x61	; 97
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	81 e0       	ldi	r24, 0x01	; 1
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	91 83       	std	Z+1, r25	; 0x01
    4b00:	80 83       	st	Z, r24
    4b02:	64 c0       	rjmp	.+200    	; 0x4bcc <autoParking+0x160>
	else if (__tmp > 65535)
    4b04:	fe 01       	movw	r30, r28
    4b06:	ef 55       	subi	r30, 0x5F	; 95
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	3f ef       	ldi	r19, 0xFF	; 255
    4b16:	4f e7       	ldi	r20, 0x7F	; 127
    4b18:	57 e4       	ldi	r21, 0x47	; 71
    4b1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b1e:	18 16       	cp	r1, r24
    4b20:	0c f0       	brlt	.+2      	; 0x4b24 <autoParking+0xb8>
    4b22:	43 c0       	rjmp	.+134    	; 0x4baa <autoParking+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b24:	fe 01       	movw	r30, r28
    4b26:	eb 55       	subi	r30, 0x5B	; 91
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	60 81       	ld	r22, Z
    4b2c:	71 81       	ldd	r23, Z+1	; 0x01
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e2       	ldi	r20, 0x20	; 32
    4b38:	51 e4       	ldi	r21, 0x41	; 65
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	8e 01       	movw	r16, r28
    4b44:	01 56       	subi	r16, 0x61	; 97
    4b46:	1f 4f       	sbci	r17, 0xFF	; 255
    4b48:	bc 01       	movw	r22, r24
    4b4a:	cd 01       	movw	r24, r26
    4b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	f8 01       	movw	r30, r16
    4b56:	91 83       	std	Z+1, r25	; 0x01
    4b58:	80 83       	st	Z, r24
    4b5a:	1f c0       	rjmp	.+62     	; 0x4b9a <autoParking+0x12e>
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	e3 56       	subi	r30, 0x63	; 99
    4b60:	ff 4f       	sbci	r31, 0xFF	; 255
    4b62:	80 e9       	ldi	r24, 0x90	; 144
    4b64:	91 e0       	ldi	r25, 0x01	; 1
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	80 83       	st	Z, r24
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e3 56       	subi	r30, 0x63	; 99
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	80 81       	ld	r24, Z
    4b72:	91 81       	ldd	r25, Z+1	; 0x01
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <autoParking+0x108>
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e3 56       	subi	r30, 0x63	; 99
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	91 83       	std	Z+1, r25	; 0x01
    4b80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b82:	de 01       	movw	r26, r28
    4b84:	a1 56       	subi	r26, 0x61	; 97
    4b86:	bf 4f       	sbci	r27, 0xFF	; 255
    4b88:	fe 01       	movw	r30, r28
    4b8a:	e1 56       	subi	r30, 0x61	; 97
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	80 81       	ld	r24, Z
    4b90:	91 81       	ldd	r25, Z+1	; 0x01
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	11 96       	adiw	r26, 0x01	; 1
    4b96:	9c 93       	st	X, r25
    4b98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e1 56       	subi	r30, 0x61	; 97
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	80 81       	ld	r24, Z
    4ba2:	91 81       	ldd	r25, Z+1	; 0x01
    4ba4:	00 97       	sbiw	r24, 0x00	; 0
    4ba6:	d1 f6       	brne	.-76     	; 0x4b5c <autoParking+0xf0>
    4ba8:	27 c0       	rjmp	.+78     	; 0x4bf8 <autoParking+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4baa:	8e 01       	movw	r16, r28
    4bac:	01 56       	subi	r16, 0x61	; 97
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	ef 55       	subi	r30, 0x5F	; 95
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	60 81       	ld	r22, Z
    4bb8:	71 81       	ldd	r23, Z+1	; 0x01
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	93 81       	ldd	r25, Z+3	; 0x03
    4bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	f8 01       	movw	r30, r16
    4bc8:	91 83       	std	Z+1, r25	; 0x01
    4bca:	80 83       	st	Z, r24
    4bcc:	de 01       	movw	r26, r28
    4bce:	a5 56       	subi	r26, 0x65	; 101
    4bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e1 56       	subi	r30, 0x61	; 97
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	80 81       	ld	r24, Z
    4bda:	91 81       	ldd	r25, Z+1	; 0x01
    4bdc:	8d 93       	st	X+, r24
    4bde:	9c 93       	st	X, r25
    4be0:	fe 01       	movw	r30, r28
    4be2:	e5 56       	subi	r30, 0x65	; 101
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	80 81       	ld	r24, Z
    4be8:	91 81       	ldd	r25, Z+1	; 0x01
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <autoParking+0x17e>
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e5 56       	subi	r30, 0x65	; 101
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	91 83       	std	Z+1, r25	; 0x01
    4bf6:	80 83       	st	Z, r24
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e9 56       	subi	r30, 0x69	; 105
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	aa ef       	ldi	r26, 0xFA	; 250
    4c04:	b3 e4       	ldi	r27, 0x43	; 67
    4c06:	80 83       	st	Z, r24
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	a2 83       	std	Z+2, r26	; 0x02
    4c0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c0e:	8e 01       	movw	r16, r28
    4c10:	0d 56       	subi	r16, 0x6D	; 109
    4c12:	1f 4f       	sbci	r17, 0xFF	; 255
    4c14:	fe 01       	movw	r30, r28
    4c16:	e9 56       	subi	r30, 0x69	; 105
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	60 81       	ld	r22, Z
    4c1c:	71 81       	ldd	r23, Z+1	; 0x01
    4c1e:	82 81       	ldd	r24, Z+2	; 0x02
    4c20:	93 81       	ldd	r25, Z+3	; 0x03
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	4a e7       	ldi	r20, 0x7A	; 122
    4c28:	55 e4       	ldi	r21, 0x45	; 69
    4c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	f8 01       	movw	r30, r16
    4c34:	80 83       	st	Z, r24
    4c36:	91 83       	std	Z+1, r25	; 0x01
    4c38:	a2 83       	std	Z+2, r26	; 0x02
    4c3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	ed 56       	subi	r30, 0x6D	; 109
    4c40:	ff 4f       	sbci	r31, 0xFF	; 255
    4c42:	60 81       	ld	r22, Z
    4c44:	71 81       	ldd	r23, Z+1	; 0x01
    4c46:	82 81       	ldd	r24, Z+2	; 0x02
    4c48:	93 81       	ldd	r25, Z+3	; 0x03
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e8       	ldi	r20, 0x80	; 128
    4c50:	5f e3       	ldi	r21, 0x3F	; 63
    4c52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c56:	88 23       	and	r24, r24
    4c58:	44 f4       	brge	.+16     	; 0x4c6a <autoParking+0x1fe>
		__ticks = 1;
    4c5a:	fe 01       	movw	r30, r28
    4c5c:	ef 56       	subi	r30, 0x6F	; 111
    4c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	91 83       	std	Z+1, r25	; 0x01
    4c66:	80 83       	st	Z, r24
    4c68:	64 c0       	rjmp	.+200    	; 0x4d32 <autoParking+0x2c6>
	else if (__tmp > 65535)
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	ed 56       	subi	r30, 0x6D	; 109
    4c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c70:	60 81       	ld	r22, Z
    4c72:	71 81       	ldd	r23, Z+1	; 0x01
    4c74:	82 81       	ldd	r24, Z+2	; 0x02
    4c76:	93 81       	ldd	r25, Z+3	; 0x03
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	3f ef       	ldi	r19, 0xFF	; 255
    4c7c:	4f e7       	ldi	r20, 0x7F	; 127
    4c7e:	57 e4       	ldi	r21, 0x47	; 71
    4c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c84:	18 16       	cp	r1, r24
    4c86:	0c f0       	brlt	.+2      	; 0x4c8a <autoParking+0x21e>
    4c88:	43 c0       	rjmp	.+134    	; 0x4d10 <autoParking+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e9 56       	subi	r30, 0x69	; 105
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	60 81       	ld	r22, Z
    4c92:	71 81       	ldd	r23, Z+1	; 0x01
    4c94:	82 81       	ldd	r24, Z+2	; 0x02
    4c96:	93 81       	ldd	r25, Z+3	; 0x03
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	40 e2       	ldi	r20, 0x20	; 32
    4c9e:	51 e4       	ldi	r21, 0x41	; 65
    4ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	8e 01       	movw	r16, r28
    4caa:	0f 56       	subi	r16, 0x6F	; 111
    4cac:	1f 4f       	sbci	r17, 0xFF	; 255
    4cae:	bc 01       	movw	r22, r24
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	f8 01       	movw	r30, r16
    4cbc:	91 83       	std	Z+1, r25	; 0x01
    4cbe:	80 83       	st	Z, r24
    4cc0:	1f c0       	rjmp	.+62     	; 0x4d00 <autoParking+0x294>
    4cc2:	fe 01       	movw	r30, r28
    4cc4:	e1 57       	subi	r30, 0x71	; 113
    4cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc8:	80 e9       	ldi	r24, 0x90	; 144
    4cca:	91 e0       	ldi	r25, 0x01	; 1
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	80 83       	st	Z, r24
    4cd0:	fe 01       	movw	r30, r28
    4cd2:	e1 57       	subi	r30, 0x71	; 113
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	80 81       	ld	r24, Z
    4cd8:	91 81       	ldd	r25, Z+1	; 0x01
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	f1 f7       	brne	.-4      	; 0x4cda <autoParking+0x26e>
    4cde:	fe 01       	movw	r30, r28
    4ce0:	e1 57       	subi	r30, 0x71	; 113
    4ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce4:	91 83       	std	Z+1, r25	; 0x01
    4ce6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ce8:	de 01       	movw	r26, r28
    4cea:	af 56       	subi	r26, 0x6F	; 111
    4cec:	bf 4f       	sbci	r27, 0xFF	; 255
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ef 56       	subi	r30, 0x6F	; 111
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	80 81       	ld	r24, Z
    4cf6:	91 81       	ldd	r25, Z+1	; 0x01
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	11 96       	adiw	r26, 0x01	; 1
    4cfc:	9c 93       	st	X, r25
    4cfe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d00:	fe 01       	movw	r30, r28
    4d02:	ef 56       	subi	r30, 0x6F	; 111
    4d04:	ff 4f       	sbci	r31, 0xFF	; 255
    4d06:	80 81       	ld	r24, Z
    4d08:	91 81       	ldd	r25, Z+1	; 0x01
    4d0a:	00 97       	sbiw	r24, 0x00	; 0
    4d0c:	d1 f6       	brne	.-76     	; 0x4cc2 <autoParking+0x256>
    4d0e:	27 c0       	rjmp	.+78     	; 0x4d5e <autoParking+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d10:	8e 01       	movw	r16, r28
    4d12:	0f 56       	subi	r16, 0x6F	; 111
    4d14:	1f 4f       	sbci	r17, 0xFF	; 255
    4d16:	fe 01       	movw	r30, r28
    4d18:	ed 56       	subi	r30, 0x6D	; 109
    4d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1c:	60 81       	ld	r22, Z
    4d1e:	71 81       	ldd	r23, Z+1	; 0x01
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	93 81       	ldd	r25, Z+3	; 0x03
    4d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	91 83       	std	Z+1, r25	; 0x01
    4d30:	80 83       	st	Z, r24
    4d32:	de 01       	movw	r26, r28
    4d34:	a3 57       	subi	r26, 0x73	; 115
    4d36:	bf 4f       	sbci	r27, 0xFF	; 255
    4d38:	fe 01       	movw	r30, r28
    4d3a:	ef 56       	subi	r30, 0x6F	; 111
    4d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3e:	80 81       	ld	r24, Z
    4d40:	91 81       	ldd	r25, Z+1	; 0x01
    4d42:	8d 93       	st	X+, r24
    4d44:	9c 93       	st	X, r25
    4d46:	fe 01       	movw	r30, r28
    4d48:	e3 57       	subi	r30, 0x73	; 115
    4d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4c:	80 81       	ld	r24, Z
    4d4e:	91 81       	ldd	r25, Z+1	; 0x01
    4d50:	01 97       	sbiw	r24, 0x01	; 1
    4d52:	f1 f7       	brne	.-4      	; 0x4d50 <autoParking+0x2e4>
    4d54:	fe 01       	movw	r30, r28
    4d56:	e3 57       	subi	r30, 0x73	; 115
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	91 83       	std	Z+1, r25	; 0x01
    4d5c:	80 83       	st	Z, r24

    _delay_ms(500);
    _delay_ms(500);

    readDistance();
    4d5e:	0e 94 c9 2c 	call	0x5992	; 0x5992 <readDistance>

    Forward();
    4d62:	0e 94 37 11 	call	0x226e	; 0x226e <Forward>
    4d66:	f2 c5       	rjmp	.+3044   	; 0x594c <autoParking+0xee0>

    while (distance > 40)
    {
        readDistance();
    4d68:	0e 94 c9 2c 	call	0x5992	; 0x5992 <readDistance>
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	e7 57       	subi	r30, 0x77	; 119
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	80 e0       	ldi	r24, 0x00	; 0
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	a8 ec       	ldi	r26, 0xC8	; 200
    4d78:	b2 e4       	ldi	r27, 0x42	; 66
    4d7a:	80 83       	st	Z, r24
    4d7c:	91 83       	std	Z+1, r25	; 0x01
    4d7e:	a2 83       	std	Z+2, r26	; 0x02
    4d80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d82:	8e 01       	movw	r16, r28
    4d84:	0b 57       	subi	r16, 0x7B	; 123
    4d86:	1f 4f       	sbci	r17, 0xFF	; 255
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e7 57       	subi	r30, 0x77	; 119
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	4a e7       	ldi	r20, 0x7A	; 122
    4d9c:	55 e4       	ldi	r21, 0x45	; 69
    4d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	f8 01       	movw	r30, r16
    4da8:	80 83       	st	Z, r24
    4daa:	91 83       	std	Z+1, r25	; 0x01
    4dac:	a2 83       	std	Z+2, r26	; 0x02
    4dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4db0:	fe 01       	movw	r30, r28
    4db2:	eb 57       	subi	r30, 0x7B	; 123
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	60 81       	ld	r22, Z
    4db8:	71 81       	ldd	r23, Z+1	; 0x01
    4dba:	82 81       	ldd	r24, Z+2	; 0x02
    4dbc:	93 81       	ldd	r25, Z+3	; 0x03
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	40 e8       	ldi	r20, 0x80	; 128
    4dc4:	5f e3       	ldi	r21, 0x3F	; 63
    4dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dca:	88 23       	and	r24, r24
    4dcc:	44 f4       	brge	.+16     	; 0x4dde <autoParking+0x372>
		__ticks = 1;
    4dce:	fe 01       	movw	r30, r28
    4dd0:	ed 57       	subi	r30, 0x7D	; 125
    4dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	91 83       	std	Z+1, r25	; 0x01
    4dda:	80 83       	st	Z, r24
    4ddc:	64 c0       	rjmp	.+200    	; 0x4ea6 <autoParking+0x43a>
	else if (__tmp > 65535)
    4dde:	fe 01       	movw	r30, r28
    4de0:	eb 57       	subi	r30, 0x7B	; 123
    4de2:	ff 4f       	sbci	r31, 0xFF	; 255
    4de4:	60 81       	ld	r22, Z
    4de6:	71 81       	ldd	r23, Z+1	; 0x01
    4de8:	82 81       	ldd	r24, Z+2	; 0x02
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	3f ef       	ldi	r19, 0xFF	; 255
    4df0:	4f e7       	ldi	r20, 0x7F	; 127
    4df2:	57 e4       	ldi	r21, 0x47	; 71
    4df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4df8:	18 16       	cp	r1, r24
    4dfa:	0c f0       	brlt	.+2      	; 0x4dfe <autoParking+0x392>
    4dfc:	43 c0       	rjmp	.+134    	; 0x4e84 <autoParking+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dfe:	fe 01       	movw	r30, r28
    4e00:	e7 57       	subi	r30, 0x77	; 119
    4e02:	ff 4f       	sbci	r31, 0xFF	; 255
    4e04:	60 81       	ld	r22, Z
    4e06:	71 81       	ldd	r23, Z+1	; 0x01
    4e08:	82 81       	ldd	r24, Z+2	; 0x02
    4e0a:	93 81       	ldd	r25, Z+3	; 0x03
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e2       	ldi	r20, 0x20	; 32
    4e12:	51 e4       	ldi	r21, 0x41	; 65
    4e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e18:	dc 01       	movw	r26, r24
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	8e 01       	movw	r16, r28
    4e1e:	0d 57       	subi	r16, 0x7D	; 125
    4e20:	1f 4f       	sbci	r17, 0xFF	; 255
    4e22:	bc 01       	movw	r22, r24
    4e24:	cd 01       	movw	r24, r26
    4e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	f8 01       	movw	r30, r16
    4e30:	91 83       	std	Z+1, r25	; 0x01
    4e32:	80 83       	st	Z, r24
    4e34:	1f c0       	rjmp	.+62     	; 0x4e74 <autoParking+0x408>
    4e36:	fe 01       	movw	r30, r28
    4e38:	ef 57       	subi	r30, 0x7F	; 127
    4e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3c:	80 e9       	ldi	r24, 0x90	; 144
    4e3e:	91 e0       	ldi	r25, 0x01	; 1
    4e40:	91 83       	std	Z+1, r25	; 0x01
    4e42:	80 83       	st	Z, r24
    4e44:	fe 01       	movw	r30, r28
    4e46:	ef 57       	subi	r30, 0x7F	; 127
    4e48:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4a:	80 81       	ld	r24, Z
    4e4c:	91 81       	ldd	r25, Z+1	; 0x01
    4e4e:	01 97       	sbiw	r24, 0x01	; 1
    4e50:	f1 f7       	brne	.-4      	; 0x4e4e <autoParking+0x3e2>
    4e52:	fe 01       	movw	r30, r28
    4e54:	ef 57       	subi	r30, 0x7F	; 127
    4e56:	ff 4f       	sbci	r31, 0xFF	; 255
    4e58:	91 83       	std	Z+1, r25	; 0x01
    4e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e5c:	de 01       	movw	r26, r28
    4e5e:	ad 57       	subi	r26, 0x7D	; 125
    4e60:	bf 4f       	sbci	r27, 0xFF	; 255
    4e62:	fe 01       	movw	r30, r28
    4e64:	ed 57       	subi	r30, 0x7D	; 125
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	80 81       	ld	r24, Z
    4e6a:	91 81       	ldd	r25, Z+1	; 0x01
    4e6c:	01 97       	sbiw	r24, 0x01	; 1
    4e6e:	11 96       	adiw	r26, 0x01	; 1
    4e70:	9c 93       	st	X, r25
    4e72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e74:	fe 01       	movw	r30, r28
    4e76:	ed 57       	subi	r30, 0x7D	; 125
    4e78:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7a:	80 81       	ld	r24, Z
    4e7c:	91 81       	ldd	r25, Z+1	; 0x01
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	d1 f6       	brne	.-76     	; 0x4e36 <autoParking+0x3ca>
    4e82:	27 c0       	rjmp	.+78     	; 0x4ed2 <autoParking+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e84:	8e 01       	movw	r16, r28
    4e86:	0d 57       	subi	r16, 0x7D	; 125
    4e88:	1f 4f       	sbci	r17, 0xFF	; 255
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	eb 57       	subi	r30, 0x7B	; 123
    4e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e90:	60 81       	ld	r22, Z
    4e92:	71 81       	ldd	r23, Z+1	; 0x01
    4e94:	82 81       	ldd	r24, Z+2	; 0x02
    4e96:	93 81       	ldd	r25, Z+3	; 0x03
    4e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	cb 01       	movw	r24, r22
    4ea0:	f8 01       	movw	r30, r16
    4ea2:	91 83       	std	Z+1, r25	; 0x01
    4ea4:	80 83       	st	Z, r24
    4ea6:	de 01       	movw	r26, r28
    4ea8:	a1 58       	subi	r26, 0x81	; 129
    4eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    4eac:	fe 01       	movw	r30, r28
    4eae:	ed 57       	subi	r30, 0x7D	; 125
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	80 81       	ld	r24, Z
    4eb4:	91 81       	ldd	r25, Z+1	; 0x01
    4eb6:	8d 93       	st	X+, r24
    4eb8:	9c 93       	st	X, r25
    4eba:	fe 01       	movw	r30, r28
    4ebc:	e1 58       	subi	r30, 0x81	; 129
    4ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec0:	80 81       	ld	r24, Z
    4ec2:	91 81       	ldd	r25, Z+1	; 0x01
    4ec4:	01 97       	sbiw	r24, 0x01	; 1
    4ec6:	f1 f7       	brne	.-4      	; 0x4ec4 <autoParking+0x458>
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e1 58       	subi	r30, 0x81	; 129
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	91 83       	std	Z+1, r25	; 0x01
    4ed0:	80 83       	st	Z, r24

        _delay_ms(100);

        counter++;
    4ed2:	de 01       	movw	r26, r28
    4ed4:	a7 55       	subi	r26, 0x57	; 87
    4ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ed8:	fe 01       	movw	r30, r28
    4eda:	e7 55       	subi	r30, 0x57	; 87
    4edc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ede:	80 81       	ld	r24, Z
    4ee0:	8f 5f       	subi	r24, 0xFF	; 255
    4ee2:	8c 93       	st	X, r24
        if (counter > 5)
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e7 55       	subi	r30, 0x57	; 87
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	80 81       	ld	r24, Z
    4eec:	86 30       	cpi	r24, 0x06	; 6
    4eee:	08 f4       	brcc	.+2      	; 0x4ef2 <autoParking+0x486>
    4ef0:	2d c5       	rjmp	.+2650   	; 0x594c <autoParking+0xee0>
        {
            LCD_displayStringRowColumn(1, 0, "SPACE Available");
    4ef2:	21 e9       	ldi	r18, 0x91	; 145
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	81 e0       	ldi	r24, 0x01	; 1
    4ef8:	60 e0       	ldi	r22, 0x00	; 0
    4efa:	a9 01       	movw	r20, r18
    4efc:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>

            Stop();
    4f00:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
    4f04:	fe 01       	movw	r30, r28
    4f06:	e5 58       	subi	r30, 0x85	; 133
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	aa ef       	ldi	r26, 0xFA	; 250
    4f10:	b3 e4       	ldi	r27, 0x43	; 67
    4f12:	80 83       	st	Z, r24
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	a2 83       	std	Z+2, r26	; 0x02
    4f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f1a:	8e 01       	movw	r16, r28
    4f1c:	09 58       	subi	r16, 0x89	; 137
    4f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f20:	fe 01       	movw	r30, r28
    4f22:	e5 58       	subi	r30, 0x85	; 133
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	60 81       	ld	r22, Z
    4f28:	71 81       	ldd	r23, Z+1	; 0x01
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	93 81       	ldd	r25, Z+3	; 0x03
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	4a e7       	ldi	r20, 0x7A	; 122
    4f34:	55 e4       	ldi	r21, 0x45	; 69
    4f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	f8 01       	movw	r30, r16
    4f40:	80 83       	st	Z, r24
    4f42:	91 83       	std	Z+1, r25	; 0x01
    4f44:	a2 83       	std	Z+2, r26	; 0x02
    4f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e9 58       	subi	r30, 0x89	; 137
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	60 81       	ld	r22, Z
    4f50:	71 81       	ldd	r23, Z+1	; 0x01
    4f52:	82 81       	ldd	r24, Z+2	; 0x02
    4f54:	93 81       	ldd	r25, Z+3	; 0x03
    4f56:	20 e0       	ldi	r18, 0x00	; 0
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	40 e8       	ldi	r20, 0x80	; 128
    4f5c:	5f e3       	ldi	r21, 0x3F	; 63
    4f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f62:	88 23       	and	r24, r24
    4f64:	44 f4       	brge	.+16     	; 0x4f76 <autoParking+0x50a>
		__ticks = 1;
    4f66:	fe 01       	movw	r30, r28
    4f68:	eb 58       	subi	r30, 0x8B	; 139
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	91 83       	std	Z+1, r25	; 0x01
    4f72:	80 83       	st	Z, r24
    4f74:	64 c0       	rjmp	.+200    	; 0x503e <autoParking+0x5d2>
	else if (__tmp > 65535)
    4f76:	fe 01       	movw	r30, r28
    4f78:	e9 58       	subi	r30, 0x89	; 137
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	60 81       	ld	r22, Z
    4f7e:	71 81       	ldd	r23, Z+1	; 0x01
    4f80:	82 81       	ldd	r24, Z+2	; 0x02
    4f82:	93 81       	ldd	r25, Z+3	; 0x03
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	3f ef       	ldi	r19, 0xFF	; 255
    4f88:	4f e7       	ldi	r20, 0x7F	; 127
    4f8a:	57 e4       	ldi	r21, 0x47	; 71
    4f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f90:	18 16       	cp	r1, r24
    4f92:	0c f0       	brlt	.+2      	; 0x4f96 <autoParking+0x52a>
    4f94:	43 c0       	rjmp	.+134    	; 0x501c <autoParking+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f96:	fe 01       	movw	r30, r28
    4f98:	e5 58       	subi	r30, 0x85	; 133
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	60 81       	ld	r22, Z
    4f9e:	71 81       	ldd	r23, Z+1	; 0x01
    4fa0:	82 81       	ldd	r24, Z+2	; 0x02
    4fa2:	93 81       	ldd	r25, Z+3	; 0x03
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	40 e2       	ldi	r20, 0x20	; 32
    4faa:	51 e4       	ldi	r21, 0x41	; 65
    4fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb0:	dc 01       	movw	r26, r24
    4fb2:	cb 01       	movw	r24, r22
    4fb4:	8e 01       	movw	r16, r28
    4fb6:	0b 58       	subi	r16, 0x8B	; 139
    4fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fba:	bc 01       	movw	r22, r24
    4fbc:	cd 01       	movw	r24, r26
    4fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	91 83       	std	Z+1, r25	; 0x01
    4fca:	80 83       	st	Z, r24
    4fcc:	1f c0       	rjmp	.+62     	; 0x500c <autoParking+0x5a0>
    4fce:	fe 01       	movw	r30, r28
    4fd0:	ed 58       	subi	r30, 0x8D	; 141
    4fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd4:	80 e9       	ldi	r24, 0x90	; 144
    4fd6:	91 e0       	ldi	r25, 0x01	; 1
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	80 83       	st	Z, r24
    4fdc:	fe 01       	movw	r30, r28
    4fde:	ed 58       	subi	r30, 0x8D	; 141
    4fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe2:	80 81       	ld	r24, Z
    4fe4:	91 81       	ldd	r25, Z+1	; 0x01
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	f1 f7       	brne	.-4      	; 0x4fe6 <autoParking+0x57a>
    4fea:	fe 01       	movw	r30, r28
    4fec:	ed 58       	subi	r30, 0x8D	; 141
    4fee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff0:	91 83       	std	Z+1, r25	; 0x01
    4ff2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff4:	de 01       	movw	r26, r28
    4ff6:	ab 58       	subi	r26, 0x8B	; 139
    4ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    4ffa:	fe 01       	movw	r30, r28
    4ffc:	eb 58       	subi	r30, 0x8B	; 139
    4ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    5000:	80 81       	ld	r24, Z
    5002:	91 81       	ldd	r25, Z+1	; 0x01
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	11 96       	adiw	r26, 0x01	; 1
    5008:	9c 93       	st	X, r25
    500a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    500c:	fe 01       	movw	r30, r28
    500e:	eb 58       	subi	r30, 0x8B	; 139
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	80 81       	ld	r24, Z
    5014:	91 81       	ldd	r25, Z+1	; 0x01
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	d1 f6       	brne	.-76     	; 0x4fce <autoParking+0x562>
    501a:	27 c0       	rjmp	.+78     	; 0x506a <autoParking+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    501c:	8e 01       	movw	r16, r28
    501e:	0b 58       	subi	r16, 0x8B	; 139
    5020:	1f 4f       	sbci	r17, 0xFF	; 255
    5022:	fe 01       	movw	r30, r28
    5024:	e9 58       	subi	r30, 0x89	; 137
    5026:	ff 4f       	sbci	r31, 0xFF	; 255
    5028:	60 81       	ld	r22, Z
    502a:	71 81       	ldd	r23, Z+1	; 0x01
    502c:	82 81       	ldd	r24, Z+2	; 0x02
    502e:	93 81       	ldd	r25, Z+3	; 0x03
    5030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5034:	dc 01       	movw	r26, r24
    5036:	cb 01       	movw	r24, r22
    5038:	f8 01       	movw	r30, r16
    503a:	91 83       	std	Z+1, r25	; 0x01
    503c:	80 83       	st	Z, r24
    503e:	de 01       	movw	r26, r28
    5040:	af 58       	subi	r26, 0x8F	; 143
    5042:	bf 4f       	sbci	r27, 0xFF	; 255
    5044:	fe 01       	movw	r30, r28
    5046:	eb 58       	subi	r30, 0x8B	; 139
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	8d 93       	st	X+, r24
    5050:	9c 93       	st	X, r25
    5052:	fe 01       	movw	r30, r28
    5054:	ef 58       	subi	r30, 0x8F	; 143
    5056:	ff 4f       	sbci	r31, 0xFF	; 255
    5058:	80 81       	ld	r24, Z
    505a:	91 81       	ldd	r25, Z+1	; 0x01
    505c:	01 97       	sbiw	r24, 0x01	; 1
    505e:	f1 f7       	brne	.-4      	; 0x505c <autoParking+0x5f0>
    5060:	fe 01       	movw	r30, r28
    5062:	ef 58       	subi	r30, 0x8F	; 143
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	80 83       	st	Z, r24
    506a:	fe 01       	movw	r30, r28
    506c:	e3 59       	subi	r30, 0x93	; 147
    506e:	ff 4f       	sbci	r31, 0xFF	; 255
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	aa ef       	ldi	r26, 0xFA	; 250
    5076:	b3 e4       	ldi	r27, 0x43	; 67
    5078:	80 83       	st	Z, r24
    507a:	91 83       	std	Z+1, r25	; 0x01
    507c:	a2 83       	std	Z+2, r26	; 0x02
    507e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5080:	8e 01       	movw	r16, r28
    5082:	07 59       	subi	r16, 0x97	; 151
    5084:	1f 4f       	sbci	r17, 0xFF	; 255
    5086:	fe 01       	movw	r30, r28
    5088:	e3 59       	subi	r30, 0x93	; 147
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	60 81       	ld	r22, Z
    508e:	71 81       	ldd	r23, Z+1	; 0x01
    5090:	82 81       	ldd	r24, Z+2	; 0x02
    5092:	93 81       	ldd	r25, Z+3	; 0x03
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	4a e7       	ldi	r20, 0x7A	; 122
    509a:	55 e4       	ldi	r21, 0x45	; 69
    509c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	f8 01       	movw	r30, r16
    50a6:	80 83       	st	Z, r24
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	a2 83       	std	Z+2, r26	; 0x02
    50ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ae:	fe 01       	movw	r30, r28
    50b0:	e7 59       	subi	r30, 0x97	; 151
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	60 81       	ld	r22, Z
    50b6:	71 81       	ldd	r23, Z+1	; 0x01
    50b8:	82 81       	ldd	r24, Z+2	; 0x02
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e8       	ldi	r20, 0x80	; 128
    50c2:	5f e3       	ldi	r21, 0x3F	; 63
    50c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50c8:	88 23       	and	r24, r24
    50ca:	44 f4       	brge	.+16     	; 0x50dc <autoParking+0x670>
		__ticks = 1;
    50cc:	fe 01       	movw	r30, r28
    50ce:	e9 59       	subi	r30, 0x99	; 153
    50d0:	ff 4f       	sbci	r31, 0xFF	; 255
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24
    50da:	64 c0       	rjmp	.+200    	; 0x51a4 <autoParking+0x738>
	else if (__tmp > 65535)
    50dc:	fe 01       	movw	r30, r28
    50de:	e7 59       	subi	r30, 0x97	; 151
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	60 81       	ld	r22, Z
    50e4:	71 81       	ldd	r23, Z+1	; 0x01
    50e6:	82 81       	ldd	r24, Z+2	; 0x02
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	3f ef       	ldi	r19, 0xFF	; 255
    50ee:	4f e7       	ldi	r20, 0x7F	; 127
    50f0:	57 e4       	ldi	r21, 0x47	; 71
    50f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50f6:	18 16       	cp	r1, r24
    50f8:	0c f0       	brlt	.+2      	; 0x50fc <autoParking+0x690>
    50fa:	43 c0       	rjmp	.+134    	; 0x5182 <autoParking+0x716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50fc:	fe 01       	movw	r30, r28
    50fe:	e3 59       	subi	r30, 0x93	; 147
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	60 81       	ld	r22, Z
    5104:	71 81       	ldd	r23, Z+1	; 0x01
    5106:	82 81       	ldd	r24, Z+2	; 0x02
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e2       	ldi	r20, 0x20	; 32
    5110:	51 e4       	ldi	r21, 0x41	; 65
    5112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	8e 01       	movw	r16, r28
    511c:	09 59       	subi	r16, 0x99	; 153
    511e:	1f 4f       	sbci	r17, 0xFF	; 255
    5120:	bc 01       	movw	r22, r24
    5122:	cd 01       	movw	r24, r26
    5124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	f8 01       	movw	r30, r16
    512e:	91 83       	std	Z+1, r25	; 0x01
    5130:	80 83       	st	Z, r24
    5132:	1f c0       	rjmp	.+62     	; 0x5172 <autoParking+0x706>
    5134:	fe 01       	movw	r30, r28
    5136:	eb 59       	subi	r30, 0x9B	; 155
    5138:	ff 4f       	sbci	r31, 0xFF	; 255
    513a:	80 e9       	ldi	r24, 0x90	; 144
    513c:	91 e0       	ldi	r25, 0x01	; 1
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	80 83       	st	Z, r24
    5142:	fe 01       	movw	r30, r28
    5144:	eb 59       	subi	r30, 0x9B	; 155
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	80 81       	ld	r24, Z
    514a:	91 81       	ldd	r25, Z+1	; 0x01
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <autoParking+0x6e0>
    5150:	fe 01       	movw	r30, r28
    5152:	eb 59       	subi	r30, 0x9B	; 155
    5154:	ff 4f       	sbci	r31, 0xFF	; 255
    5156:	91 83       	std	Z+1, r25	; 0x01
    5158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515a:	de 01       	movw	r26, r28
    515c:	a9 59       	subi	r26, 0x99	; 153
    515e:	bf 4f       	sbci	r27, 0xFF	; 255
    5160:	fe 01       	movw	r30, r28
    5162:	e9 59       	subi	r30, 0x99	; 153
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	80 81       	ld	r24, Z
    5168:	91 81       	ldd	r25, Z+1	; 0x01
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	11 96       	adiw	r26, 0x01	; 1
    516e:	9c 93       	st	X, r25
    5170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5172:	fe 01       	movw	r30, r28
    5174:	e9 59       	subi	r30, 0x99	; 153
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	91 81       	ldd	r25, Z+1	; 0x01
    517c:	00 97       	sbiw	r24, 0x00	; 0
    517e:	d1 f6       	brne	.-76     	; 0x5134 <autoParking+0x6c8>
    5180:	27 c0       	rjmp	.+78     	; 0x51d0 <autoParking+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5182:	8e 01       	movw	r16, r28
    5184:	09 59       	subi	r16, 0x99	; 153
    5186:	1f 4f       	sbci	r17, 0xFF	; 255
    5188:	fe 01       	movw	r30, r28
    518a:	e7 59       	subi	r30, 0x97	; 151
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	f8 01       	movw	r30, r16
    51a0:	91 83       	std	Z+1, r25	; 0x01
    51a2:	80 83       	st	Z, r24
    51a4:	de 01       	movw	r26, r28
    51a6:	ad 59       	subi	r26, 0x9D	; 157
    51a8:	bf 4f       	sbci	r27, 0xFF	; 255
    51aa:	fe 01       	movw	r30, r28
    51ac:	e9 59       	subi	r30, 0x99	; 153
    51ae:	ff 4f       	sbci	r31, 0xFF	; 255
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	8d 93       	st	X+, r24
    51b6:	9c 93       	st	X, r25
    51b8:	fe 01       	movw	r30, r28
    51ba:	ed 59       	subi	r30, 0x9D	; 157
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	80 81       	ld	r24, Z
    51c0:	91 81       	ldd	r25, Z+1	; 0x01
    51c2:	01 97       	sbiw	r24, 0x01	; 1
    51c4:	f1 f7       	brne	.-4      	; 0x51c2 <autoParking+0x756>
    51c6:	fe 01       	movw	r30, r28
    51c8:	ed 59       	subi	r30, 0x9D	; 157
    51ca:	ff 4f       	sbci	r31, 0xFF	; 255
    51cc:	91 83       	std	Z+1, r25	; 0x01
    51ce:	80 83       	st	Z, r24

            _delay_ms(500);
            _delay_ms(500);

            Left_Forward_Parking();
    51d0:	0e 94 c8 13 	call	0x2790	; 0x2790 <Left_Forward_Parking>
    51d4:	fe 01       	movw	r30, r28
    51d6:	e1 5a       	subi	r30, 0xA1	; 161
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	aa ef       	ldi	r26, 0xFA	; 250
    51e0:	b3 e4       	ldi	r27, 0x43	; 67
    51e2:	80 83       	st	Z, r24
    51e4:	91 83       	std	Z+1, r25	; 0x01
    51e6:	a2 83       	std	Z+2, r26	; 0x02
    51e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ea:	8e 01       	movw	r16, r28
    51ec:	05 5a       	subi	r16, 0xA5	; 165
    51ee:	1f 4f       	sbci	r17, 0xFF	; 255
    51f0:	fe 01       	movw	r30, r28
    51f2:	e1 5a       	subi	r30, 0xA1	; 161
    51f4:	ff 4f       	sbci	r31, 0xFF	; 255
    51f6:	60 81       	ld	r22, Z
    51f8:	71 81       	ldd	r23, Z+1	; 0x01
    51fa:	82 81       	ldd	r24, Z+2	; 0x02
    51fc:	93 81       	ldd	r25, Z+3	; 0x03
    51fe:	20 e0       	ldi	r18, 0x00	; 0
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	4a e7       	ldi	r20, 0x7A	; 122
    5204:	55 e4       	ldi	r21, 0x45	; 69
    5206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	f8 01       	movw	r30, r16
    5210:	80 83       	st	Z, r24
    5212:	91 83       	std	Z+1, r25	; 0x01
    5214:	a2 83       	std	Z+2, r26	; 0x02
    5216:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5218:	fe 01       	movw	r30, r28
    521a:	e5 5a       	subi	r30, 0xA5	; 165
    521c:	ff 4f       	sbci	r31, 0xFF	; 255
    521e:	60 81       	ld	r22, Z
    5220:	71 81       	ldd	r23, Z+1	; 0x01
    5222:	82 81       	ldd	r24, Z+2	; 0x02
    5224:	93 81       	ldd	r25, Z+3	; 0x03
    5226:	20 e0       	ldi	r18, 0x00	; 0
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	40 e8       	ldi	r20, 0x80	; 128
    522c:	5f e3       	ldi	r21, 0x3F	; 63
    522e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5232:	88 23       	and	r24, r24
    5234:	44 f4       	brge	.+16     	; 0x5246 <autoParking+0x7da>
		__ticks = 1;
    5236:	fe 01       	movw	r30, r28
    5238:	e7 5a       	subi	r30, 0xA7	; 167
    523a:	ff 4f       	sbci	r31, 0xFF	; 255
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	91 83       	std	Z+1, r25	; 0x01
    5242:	80 83       	st	Z, r24
    5244:	64 c0       	rjmp	.+200    	; 0x530e <autoParking+0x8a2>
	else if (__tmp > 65535)
    5246:	fe 01       	movw	r30, r28
    5248:	e5 5a       	subi	r30, 0xA5	; 165
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	60 81       	ld	r22, Z
    524e:	71 81       	ldd	r23, Z+1	; 0x01
    5250:	82 81       	ldd	r24, Z+2	; 0x02
    5252:	93 81       	ldd	r25, Z+3	; 0x03
    5254:	20 e0       	ldi	r18, 0x00	; 0
    5256:	3f ef       	ldi	r19, 0xFF	; 255
    5258:	4f e7       	ldi	r20, 0x7F	; 127
    525a:	57 e4       	ldi	r21, 0x47	; 71
    525c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5260:	18 16       	cp	r1, r24
    5262:	0c f0       	brlt	.+2      	; 0x5266 <autoParking+0x7fa>
    5264:	43 c0       	rjmp	.+134    	; 0x52ec <autoParking+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5266:	fe 01       	movw	r30, r28
    5268:	e1 5a       	subi	r30, 0xA1	; 161
    526a:	ff 4f       	sbci	r31, 0xFF	; 255
    526c:	60 81       	ld	r22, Z
    526e:	71 81       	ldd	r23, Z+1	; 0x01
    5270:	82 81       	ldd	r24, Z+2	; 0x02
    5272:	93 81       	ldd	r25, Z+3	; 0x03
    5274:	20 e0       	ldi	r18, 0x00	; 0
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	40 e2       	ldi	r20, 0x20	; 32
    527a:	51 e4       	ldi	r21, 0x41	; 65
    527c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5280:	dc 01       	movw	r26, r24
    5282:	cb 01       	movw	r24, r22
    5284:	8e 01       	movw	r16, r28
    5286:	07 5a       	subi	r16, 0xA7	; 167
    5288:	1f 4f       	sbci	r17, 0xFF	; 255
    528a:	bc 01       	movw	r22, r24
    528c:	cd 01       	movw	r24, r26
    528e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	f8 01       	movw	r30, r16
    5298:	91 83       	std	Z+1, r25	; 0x01
    529a:	80 83       	st	Z, r24
    529c:	1f c0       	rjmp	.+62     	; 0x52dc <autoParking+0x870>
    529e:	fe 01       	movw	r30, r28
    52a0:	e9 5a       	subi	r30, 0xA9	; 169
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	80 e9       	ldi	r24, 0x90	; 144
    52a6:	91 e0       	ldi	r25, 0x01	; 1
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
    52ac:	fe 01       	movw	r30, r28
    52ae:	e9 5a       	subi	r30, 0xA9	; 169
    52b0:	ff 4f       	sbci	r31, 0xFF	; 255
    52b2:	80 81       	ld	r24, Z
    52b4:	91 81       	ldd	r25, Z+1	; 0x01
    52b6:	01 97       	sbiw	r24, 0x01	; 1
    52b8:	f1 f7       	brne	.-4      	; 0x52b6 <autoParking+0x84a>
    52ba:	fe 01       	movw	r30, r28
    52bc:	e9 5a       	subi	r30, 0xA9	; 169
    52be:	ff 4f       	sbci	r31, 0xFF	; 255
    52c0:	91 83       	std	Z+1, r25	; 0x01
    52c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c4:	de 01       	movw	r26, r28
    52c6:	a7 5a       	subi	r26, 0xA7	; 167
    52c8:	bf 4f       	sbci	r27, 0xFF	; 255
    52ca:	fe 01       	movw	r30, r28
    52cc:	e7 5a       	subi	r30, 0xA7	; 167
    52ce:	ff 4f       	sbci	r31, 0xFF	; 255
    52d0:	80 81       	ld	r24, Z
    52d2:	91 81       	ldd	r25, Z+1	; 0x01
    52d4:	01 97       	sbiw	r24, 0x01	; 1
    52d6:	11 96       	adiw	r26, 0x01	; 1
    52d8:	9c 93       	st	X, r25
    52da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52dc:	fe 01       	movw	r30, r28
    52de:	e7 5a       	subi	r30, 0xA7	; 167
    52e0:	ff 4f       	sbci	r31, 0xFF	; 255
    52e2:	80 81       	ld	r24, Z
    52e4:	91 81       	ldd	r25, Z+1	; 0x01
    52e6:	00 97       	sbiw	r24, 0x00	; 0
    52e8:	d1 f6       	brne	.-76     	; 0x529e <autoParking+0x832>
    52ea:	27 c0       	rjmp	.+78     	; 0x533a <autoParking+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ec:	8e 01       	movw	r16, r28
    52ee:	07 5a       	subi	r16, 0xA7	; 167
    52f0:	1f 4f       	sbci	r17, 0xFF	; 255
    52f2:	fe 01       	movw	r30, r28
    52f4:	e5 5a       	subi	r30, 0xA5	; 165
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	60 81       	ld	r22, Z
    52fa:	71 81       	ldd	r23, Z+1	; 0x01
    52fc:	82 81       	ldd	r24, Z+2	; 0x02
    52fe:	93 81       	ldd	r25, Z+3	; 0x03
    5300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	f8 01       	movw	r30, r16
    530a:	91 83       	std	Z+1, r25	; 0x01
    530c:	80 83       	st	Z, r24
    530e:	de 01       	movw	r26, r28
    5310:	ab 5a       	subi	r26, 0xAB	; 171
    5312:	bf 4f       	sbci	r27, 0xFF	; 255
    5314:	fe 01       	movw	r30, r28
    5316:	e7 5a       	subi	r30, 0xA7	; 167
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 81       	ld	r24, Z
    531c:	91 81       	ldd	r25, Z+1	; 0x01
    531e:	8d 93       	st	X+, r24
    5320:	9c 93       	st	X, r25
    5322:	fe 01       	movw	r30, r28
    5324:	eb 5a       	subi	r30, 0xAB	; 171
    5326:	ff 4f       	sbci	r31, 0xFF	; 255
    5328:	80 81       	ld	r24, Z
    532a:	91 81       	ldd	r25, Z+1	; 0x01
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	f1 f7       	brne	.-4      	; 0x532c <autoParking+0x8c0>
    5330:	fe 01       	movw	r30, r28
    5332:	eb 5a       	subi	r30, 0xAB	; 171
    5334:	ff 4f       	sbci	r31, 0xFF	; 255
    5336:	91 83       	std	Z+1, r25	; 0x01
    5338:	80 83       	st	Z, r24

            _delay_ms(500);

            Stop();
    533a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
    533e:	fe 01       	movw	r30, r28
    5340:	ef 5a       	subi	r30, 0xAF	; 175
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	aa ef       	ldi	r26, 0xFA	; 250
    534a:	b3 e4       	ldi	r27, 0x43	; 67
    534c:	80 83       	st	Z, r24
    534e:	91 83       	std	Z+1, r25	; 0x01
    5350:	a2 83       	std	Z+2, r26	; 0x02
    5352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5354:	8e 01       	movw	r16, r28
    5356:	03 5b       	subi	r16, 0xB3	; 179
    5358:	1f 4f       	sbci	r17, 0xFF	; 255
    535a:	fe 01       	movw	r30, r28
    535c:	ef 5a       	subi	r30, 0xAF	; 175
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	60 81       	ld	r22, Z
    5362:	71 81       	ldd	r23, Z+1	; 0x01
    5364:	82 81       	ldd	r24, Z+2	; 0x02
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	4a e7       	ldi	r20, 0x7A	; 122
    536e:	55 e4       	ldi	r21, 0x45	; 69
    5370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	f8 01       	movw	r30, r16
    537a:	80 83       	st	Z, r24
    537c:	91 83       	std	Z+1, r25	; 0x01
    537e:	a2 83       	std	Z+2, r26	; 0x02
    5380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5382:	fe 01       	movw	r30, r28
    5384:	e3 5b       	subi	r30, 0xB3	; 179
    5386:	ff 4f       	sbci	r31, 0xFF	; 255
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	40 e8       	ldi	r20, 0x80	; 128
    5396:	5f e3       	ldi	r21, 0x3F	; 63
    5398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    539c:	88 23       	and	r24, r24
    539e:	44 f4       	brge	.+16     	; 0x53b0 <autoParking+0x944>
		__ticks = 1;
    53a0:	fe 01       	movw	r30, r28
    53a2:	e5 5b       	subi	r30, 0xB5	; 181
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	91 83       	std	Z+1, r25	; 0x01
    53ac:	80 83       	st	Z, r24
    53ae:	64 c0       	rjmp	.+200    	; 0x5478 <autoParking+0xa0c>
	else if (__tmp > 65535)
    53b0:	fe 01       	movw	r30, r28
    53b2:	e3 5b       	subi	r30, 0xB3	; 179
    53b4:	ff 4f       	sbci	r31, 0xFF	; 255
    53b6:	60 81       	ld	r22, Z
    53b8:	71 81       	ldd	r23, Z+1	; 0x01
    53ba:	82 81       	ldd	r24, Z+2	; 0x02
    53bc:	93 81       	ldd	r25, Z+3	; 0x03
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	3f ef       	ldi	r19, 0xFF	; 255
    53c2:	4f e7       	ldi	r20, 0x7F	; 127
    53c4:	57 e4       	ldi	r21, 0x47	; 71
    53c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53ca:	18 16       	cp	r1, r24
    53cc:	0c f0       	brlt	.+2      	; 0x53d0 <autoParking+0x964>
    53ce:	43 c0       	rjmp	.+134    	; 0x5456 <autoParking+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53d0:	fe 01       	movw	r30, r28
    53d2:	ef 5a       	subi	r30, 0xAF	; 175
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	60 81       	ld	r22, Z
    53d8:	71 81       	ldd	r23, Z+1	; 0x01
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	93 81       	ldd	r25, Z+3	; 0x03
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	40 e2       	ldi	r20, 0x20	; 32
    53e4:	51 e4       	ldi	r21, 0x41	; 65
    53e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	8e 01       	movw	r16, r28
    53f0:	05 5b       	subi	r16, 0xB5	; 181
    53f2:	1f 4f       	sbci	r17, 0xFF	; 255
    53f4:	bc 01       	movw	r22, r24
    53f6:	cd 01       	movw	r24, r26
    53f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	f8 01       	movw	r30, r16
    5402:	91 83       	std	Z+1, r25	; 0x01
    5404:	80 83       	st	Z, r24
    5406:	1f c0       	rjmp	.+62     	; 0x5446 <autoParking+0x9da>
    5408:	fe 01       	movw	r30, r28
    540a:	e7 5b       	subi	r30, 0xB7	; 183
    540c:	ff 4f       	sbci	r31, 0xFF	; 255
    540e:	80 e9       	ldi	r24, 0x90	; 144
    5410:	91 e0       	ldi	r25, 0x01	; 1
    5412:	91 83       	std	Z+1, r25	; 0x01
    5414:	80 83       	st	Z, r24
    5416:	fe 01       	movw	r30, r28
    5418:	e7 5b       	subi	r30, 0xB7	; 183
    541a:	ff 4f       	sbci	r31, 0xFF	; 255
    541c:	80 81       	ld	r24, Z
    541e:	91 81       	ldd	r25, Z+1	; 0x01
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	f1 f7       	brne	.-4      	; 0x5420 <autoParking+0x9b4>
    5424:	fe 01       	movw	r30, r28
    5426:	e7 5b       	subi	r30, 0xB7	; 183
    5428:	ff 4f       	sbci	r31, 0xFF	; 255
    542a:	91 83       	std	Z+1, r25	; 0x01
    542c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    542e:	de 01       	movw	r26, r28
    5430:	a5 5b       	subi	r26, 0xB5	; 181
    5432:	bf 4f       	sbci	r27, 0xFF	; 255
    5434:	fe 01       	movw	r30, r28
    5436:	e5 5b       	subi	r30, 0xB5	; 181
    5438:	ff 4f       	sbci	r31, 0xFF	; 255
    543a:	80 81       	ld	r24, Z
    543c:	91 81       	ldd	r25, Z+1	; 0x01
    543e:	01 97       	sbiw	r24, 0x01	; 1
    5440:	11 96       	adiw	r26, 0x01	; 1
    5442:	9c 93       	st	X, r25
    5444:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5446:	fe 01       	movw	r30, r28
    5448:	e5 5b       	subi	r30, 0xB5	; 181
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	80 81       	ld	r24, Z
    544e:	91 81       	ldd	r25, Z+1	; 0x01
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	d1 f6       	brne	.-76     	; 0x5408 <autoParking+0x99c>
    5454:	27 c0       	rjmp	.+78     	; 0x54a4 <autoParking+0xa38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5456:	8e 01       	movw	r16, r28
    5458:	05 5b       	subi	r16, 0xB5	; 181
    545a:	1f 4f       	sbci	r17, 0xFF	; 255
    545c:	fe 01       	movw	r30, r28
    545e:	e3 5b       	subi	r30, 0xB3	; 179
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	60 81       	ld	r22, Z
    5464:	71 81       	ldd	r23, Z+1	; 0x01
    5466:	82 81       	ldd	r24, Z+2	; 0x02
    5468:	93 81       	ldd	r25, Z+3	; 0x03
    546a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	f8 01       	movw	r30, r16
    5474:	91 83       	std	Z+1, r25	; 0x01
    5476:	80 83       	st	Z, r24
    5478:	de 01       	movw	r26, r28
    547a:	a9 5b       	subi	r26, 0xB9	; 185
    547c:	bf 4f       	sbci	r27, 0xFF	; 255
    547e:	fe 01       	movw	r30, r28
    5480:	e5 5b       	subi	r30, 0xB5	; 181
    5482:	ff 4f       	sbci	r31, 0xFF	; 255
    5484:	80 81       	ld	r24, Z
    5486:	91 81       	ldd	r25, Z+1	; 0x01
    5488:	8d 93       	st	X+, r24
    548a:	9c 93       	st	X, r25
    548c:	fe 01       	movw	r30, r28
    548e:	e9 5b       	subi	r30, 0xB9	; 185
    5490:	ff 4f       	sbci	r31, 0xFF	; 255
    5492:	80 81       	ld	r24, Z
    5494:	91 81       	ldd	r25, Z+1	; 0x01
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	f1 f7       	brne	.-4      	; 0x5496 <autoParking+0xa2a>
    549a:	fe 01       	movw	r30, r28
    549c:	e9 5b       	subi	r30, 0xB9	; 185
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	91 83       	std	Z+1, r25	; 0x01
    54a2:	80 83       	st	Z, r24

            _delay_ms(500);

            Backward();
    54a4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Backward>
    54a8:	fe 01       	movw	r30, r28
    54aa:	ed 5b       	subi	r30, 0xBD	; 189
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	80 e0       	ldi	r24, 0x00	; 0
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	aa ef       	ldi	r26, 0xFA	; 250
    54b4:	b3 e4       	ldi	r27, 0x43	; 67
    54b6:	80 83       	st	Z, r24
    54b8:	91 83       	std	Z+1, r25	; 0x01
    54ba:	a2 83       	std	Z+2, r26	; 0x02
    54bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54be:	8e 01       	movw	r16, r28
    54c0:	01 5c       	subi	r16, 0xC1	; 193
    54c2:	1f 4f       	sbci	r17, 0xFF	; 255
    54c4:	fe 01       	movw	r30, r28
    54c6:	ed 5b       	subi	r30, 0xBD	; 189
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	60 81       	ld	r22, Z
    54cc:	71 81       	ldd	r23, Z+1	; 0x01
    54ce:	82 81       	ldd	r24, Z+2	; 0x02
    54d0:	93 81       	ldd	r25, Z+3	; 0x03
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	4a e7       	ldi	r20, 0x7A	; 122
    54d8:	55 e4       	ldi	r21, 0x45	; 69
    54da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	f8 01       	movw	r30, r16
    54e4:	80 83       	st	Z, r24
    54e6:	91 83       	std	Z+1, r25	; 0x01
    54e8:	a2 83       	std	Z+2, r26	; 0x02
    54ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54ec:	fe 01       	movw	r30, r28
    54ee:	ff 96       	adiw	r30, 0x3f	; 63
    54f0:	60 81       	ld	r22, Z
    54f2:	71 81       	ldd	r23, Z+1	; 0x01
    54f4:	82 81       	ldd	r24, Z+2	; 0x02
    54f6:	93 81       	ldd	r25, Z+3	; 0x03
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	40 e8       	ldi	r20, 0x80	; 128
    54fe:	5f e3       	ldi	r21, 0x3F	; 63
    5500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5504:	88 23       	and	r24, r24
    5506:	2c f4       	brge	.+10     	; 0x5512 <autoParking+0xaa6>
		__ticks = 1;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	9e af       	std	Y+62, r25	; 0x3e
    550e:	8d af       	std	Y+61, r24	; 0x3d
    5510:	46 c0       	rjmp	.+140    	; 0x559e <autoParking+0xb32>
	else if (__tmp > 65535)
    5512:	fe 01       	movw	r30, r28
    5514:	ff 96       	adiw	r30, 0x3f	; 63
    5516:	60 81       	ld	r22, Z
    5518:	71 81       	ldd	r23, Z+1	; 0x01
    551a:	82 81       	ldd	r24, Z+2	; 0x02
    551c:	93 81       	ldd	r25, Z+3	; 0x03
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	3f ef       	ldi	r19, 0xFF	; 255
    5522:	4f e7       	ldi	r20, 0x7F	; 127
    5524:	57 e4       	ldi	r21, 0x47	; 71
    5526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    552a:	18 16       	cp	r1, r24
    552c:	64 f5       	brge	.+88     	; 0x5586 <autoParking+0xb1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    552e:	fe 01       	movw	r30, r28
    5530:	ed 5b       	subi	r30, 0xBD	; 189
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	60 81       	ld	r22, Z
    5536:	71 81       	ldd	r23, Z+1	; 0x01
    5538:	82 81       	ldd	r24, Z+2	; 0x02
    553a:	93 81       	ldd	r25, Z+3	; 0x03
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	40 e2       	ldi	r20, 0x20	; 32
    5542:	51 e4       	ldi	r21, 0x41	; 65
    5544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5548:	dc 01       	movw	r26, r24
    554a:	cb 01       	movw	r24, r22
    554c:	bc 01       	movw	r22, r24
    554e:	cd 01       	movw	r24, r26
    5550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	9e af       	std	Y+62, r25	; 0x3e
    555a:	8d af       	std	Y+61, r24	; 0x3d
    555c:	0f c0       	rjmp	.+30     	; 0x557c <autoParking+0xb10>
    555e:	80 e9       	ldi	r24, 0x90	; 144
    5560:	91 e0       	ldi	r25, 0x01	; 1
    5562:	9c af       	std	Y+60, r25	; 0x3c
    5564:	8b af       	std	Y+59, r24	; 0x3b
    5566:	8b ad       	ldd	r24, Y+59	; 0x3b
    5568:	9c ad       	ldd	r25, Y+60	; 0x3c
    556a:	01 97       	sbiw	r24, 0x01	; 1
    556c:	f1 f7       	brne	.-4      	; 0x556a <autoParking+0xafe>
    556e:	9c af       	std	Y+60, r25	; 0x3c
    5570:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5572:	8d ad       	ldd	r24, Y+61	; 0x3d
    5574:	9e ad       	ldd	r25, Y+62	; 0x3e
    5576:	01 97       	sbiw	r24, 0x01	; 1
    5578:	9e af       	std	Y+62, r25	; 0x3e
    557a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    557c:	8d ad       	ldd	r24, Y+61	; 0x3d
    557e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5580:	00 97       	sbiw	r24, 0x00	; 0
    5582:	69 f7       	brne	.-38     	; 0x555e <autoParking+0xaf2>
    5584:	16 c0       	rjmp	.+44     	; 0x55b2 <autoParking+0xb46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5586:	fe 01       	movw	r30, r28
    5588:	ff 96       	adiw	r30, 0x3f	; 63
    558a:	60 81       	ld	r22, Z
    558c:	71 81       	ldd	r23, Z+1	; 0x01
    558e:	82 81       	ldd	r24, Z+2	; 0x02
    5590:	93 81       	ldd	r25, Z+3	; 0x03
    5592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5596:	dc 01       	movw	r26, r24
    5598:	cb 01       	movw	r24, r22
    559a:	9e af       	std	Y+62, r25	; 0x3e
    559c:	8d af       	std	Y+61, r24	; 0x3d
    559e:	8d ad       	ldd	r24, Y+61	; 0x3d
    55a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    55a2:	9a af       	std	Y+58, r25	; 0x3a
    55a4:	89 af       	std	Y+57, r24	; 0x39
    55a6:	89 ad       	ldd	r24, Y+57	; 0x39
    55a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    55aa:	01 97       	sbiw	r24, 0x01	; 1
    55ac:	f1 f7       	brne	.-4      	; 0x55aa <autoParking+0xb3e>
    55ae:	9a af       	std	Y+58, r25	; 0x3a
    55b0:	89 af       	std	Y+57, r24	; 0x39
    55b2:	80 e0       	ldi	r24, 0x00	; 0
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	aa ef       	ldi	r26, 0xFA	; 250
    55b8:	b3 e4       	ldi	r27, 0x43	; 67
    55ba:	8d ab       	std	Y+53, r24	; 0x35
    55bc:	9e ab       	std	Y+54, r25	; 0x36
    55be:	af ab       	std	Y+55, r26	; 0x37
    55c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55c2:	6d a9       	ldd	r22, Y+53	; 0x35
    55c4:	7e a9       	ldd	r23, Y+54	; 0x36
    55c6:	8f a9       	ldd	r24, Y+55	; 0x37
    55c8:	98 ad       	ldd	r25, Y+56	; 0x38
    55ca:	20 e0       	ldi	r18, 0x00	; 0
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	4a e7       	ldi	r20, 0x7A	; 122
    55d0:	55 e4       	ldi	r21, 0x45	; 69
    55d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d6:	dc 01       	movw	r26, r24
    55d8:	cb 01       	movw	r24, r22
    55da:	89 ab       	std	Y+49, r24	; 0x31
    55dc:	9a ab       	std	Y+50, r25	; 0x32
    55de:	ab ab       	std	Y+51, r26	; 0x33
    55e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    55e2:	69 a9       	ldd	r22, Y+49	; 0x31
    55e4:	7a a9       	ldd	r23, Y+50	; 0x32
    55e6:	8b a9       	ldd	r24, Y+51	; 0x33
    55e8:	9c a9       	ldd	r25, Y+52	; 0x34
    55ea:	20 e0       	ldi	r18, 0x00	; 0
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	40 e8       	ldi	r20, 0x80	; 128
    55f0:	5f e3       	ldi	r21, 0x3F	; 63
    55f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55f6:	88 23       	and	r24, r24
    55f8:	2c f4       	brge	.+10     	; 0x5604 <autoParking+0xb98>
		__ticks = 1;
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	98 ab       	std	Y+48, r25	; 0x30
    5600:	8f a7       	std	Y+47, r24	; 0x2f
    5602:	3f c0       	rjmp	.+126    	; 0x5682 <autoParking+0xc16>
	else if (__tmp > 65535)
    5604:	69 a9       	ldd	r22, Y+49	; 0x31
    5606:	7a a9       	ldd	r23, Y+50	; 0x32
    5608:	8b a9       	ldd	r24, Y+51	; 0x33
    560a:	9c a9       	ldd	r25, Y+52	; 0x34
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	3f ef       	ldi	r19, 0xFF	; 255
    5610:	4f e7       	ldi	r20, 0x7F	; 127
    5612:	57 e4       	ldi	r21, 0x47	; 71
    5614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5618:	18 16       	cp	r1, r24
    561a:	4c f5       	brge	.+82     	; 0x566e <autoParking+0xc02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    561c:	6d a9       	ldd	r22, Y+53	; 0x35
    561e:	7e a9       	ldd	r23, Y+54	; 0x36
    5620:	8f a9       	ldd	r24, Y+55	; 0x37
    5622:	98 ad       	ldd	r25, Y+56	; 0x38
    5624:	20 e0       	ldi	r18, 0x00	; 0
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	40 e2       	ldi	r20, 0x20	; 32
    562a:	51 e4       	ldi	r21, 0x41	; 65
    562c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	bc 01       	movw	r22, r24
    5636:	cd 01       	movw	r24, r26
    5638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    563c:	dc 01       	movw	r26, r24
    563e:	cb 01       	movw	r24, r22
    5640:	98 ab       	std	Y+48, r25	; 0x30
    5642:	8f a7       	std	Y+47, r24	; 0x2f
    5644:	0f c0       	rjmp	.+30     	; 0x5664 <autoParking+0xbf8>
    5646:	80 e9       	ldi	r24, 0x90	; 144
    5648:	91 e0       	ldi	r25, 0x01	; 1
    564a:	9e a7       	std	Y+46, r25	; 0x2e
    564c:	8d a7       	std	Y+45, r24	; 0x2d
    564e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5650:	9e a5       	ldd	r25, Y+46	; 0x2e
    5652:	01 97       	sbiw	r24, 0x01	; 1
    5654:	f1 f7       	brne	.-4      	; 0x5652 <autoParking+0xbe6>
    5656:	9e a7       	std	Y+46, r25	; 0x2e
    5658:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    565a:	8f a5       	ldd	r24, Y+47	; 0x2f
    565c:	98 a9       	ldd	r25, Y+48	; 0x30
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	98 ab       	std	Y+48, r25	; 0x30
    5662:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5664:	8f a5       	ldd	r24, Y+47	; 0x2f
    5666:	98 a9       	ldd	r25, Y+48	; 0x30
    5668:	00 97       	sbiw	r24, 0x00	; 0
    566a:	69 f7       	brne	.-38     	; 0x5646 <autoParking+0xbda>
    566c:	14 c0       	rjmp	.+40     	; 0x5696 <autoParking+0xc2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    566e:	69 a9       	ldd	r22, Y+49	; 0x31
    5670:	7a a9       	ldd	r23, Y+50	; 0x32
    5672:	8b a9       	ldd	r24, Y+51	; 0x33
    5674:	9c a9       	ldd	r25, Y+52	; 0x34
    5676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    567a:	dc 01       	movw	r26, r24
    567c:	cb 01       	movw	r24, r22
    567e:	98 ab       	std	Y+48, r25	; 0x30
    5680:	8f a7       	std	Y+47, r24	; 0x2f
    5682:	8f a5       	ldd	r24, Y+47	; 0x2f
    5684:	98 a9       	ldd	r25, Y+48	; 0x30
    5686:	9c a7       	std	Y+44, r25	; 0x2c
    5688:	8b a7       	std	Y+43, r24	; 0x2b
    568a:	8b a5       	ldd	r24, Y+43	; 0x2b
    568c:	9c a5       	ldd	r25, Y+44	; 0x2c
    568e:	01 97       	sbiw	r24, 0x01	; 1
    5690:	f1 f7       	brne	.-4      	; 0x568e <autoParking+0xc22>
    5692:	9c a7       	std	Y+44, r25	; 0x2c
    5694:	8b a7       	std	Y+43, r24	; 0x2b

            _delay_ms(500);
            _delay_ms(500);

            Stop();
    5696:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	aa ef       	ldi	r26, 0xFA	; 250
    56a0:	b3 e4       	ldi	r27, 0x43	; 67
    56a2:	8f a3       	std	Y+39, r24	; 0x27
    56a4:	98 a7       	std	Y+40, r25	; 0x28
    56a6:	a9 a7       	std	Y+41, r26	; 0x29
    56a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56aa:	6f a1       	ldd	r22, Y+39	; 0x27
    56ac:	78 a5       	ldd	r23, Y+40	; 0x28
    56ae:	89 a5       	ldd	r24, Y+41	; 0x29
    56b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    56b2:	20 e0       	ldi	r18, 0x00	; 0
    56b4:	30 e0       	ldi	r19, 0x00	; 0
    56b6:	4a e7       	ldi	r20, 0x7A	; 122
    56b8:	55 e4       	ldi	r21, 0x45	; 69
    56ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	8b a3       	std	Y+35, r24	; 0x23
    56c4:	9c a3       	std	Y+36, r25	; 0x24
    56c6:	ad a3       	std	Y+37, r26	; 0x25
    56c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56ca:	6b a1       	ldd	r22, Y+35	; 0x23
    56cc:	7c a1       	ldd	r23, Y+36	; 0x24
    56ce:	8d a1       	ldd	r24, Y+37	; 0x25
    56d0:	9e a1       	ldd	r25, Y+38	; 0x26
    56d2:	20 e0       	ldi	r18, 0x00	; 0
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	40 e8       	ldi	r20, 0x80	; 128
    56d8:	5f e3       	ldi	r21, 0x3F	; 63
    56da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56de:	88 23       	and	r24, r24
    56e0:	2c f4       	brge	.+10     	; 0x56ec <autoParking+0xc80>
		__ticks = 1;
    56e2:	81 e0       	ldi	r24, 0x01	; 1
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	9a a3       	std	Y+34, r25	; 0x22
    56e8:	89 a3       	std	Y+33, r24	; 0x21
    56ea:	3f c0       	rjmp	.+126    	; 0x576a <autoParking+0xcfe>
	else if (__tmp > 65535)
    56ec:	6b a1       	ldd	r22, Y+35	; 0x23
    56ee:	7c a1       	ldd	r23, Y+36	; 0x24
    56f0:	8d a1       	ldd	r24, Y+37	; 0x25
    56f2:	9e a1       	ldd	r25, Y+38	; 0x26
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	3f ef       	ldi	r19, 0xFF	; 255
    56f8:	4f e7       	ldi	r20, 0x7F	; 127
    56fa:	57 e4       	ldi	r21, 0x47	; 71
    56fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5700:	18 16       	cp	r1, r24
    5702:	4c f5       	brge	.+82     	; 0x5756 <autoParking+0xcea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5704:	6f a1       	ldd	r22, Y+39	; 0x27
    5706:	78 a5       	ldd	r23, Y+40	; 0x28
    5708:	89 a5       	ldd	r24, Y+41	; 0x29
    570a:	9a a5       	ldd	r25, Y+42	; 0x2a
    570c:	20 e0       	ldi	r18, 0x00	; 0
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	40 e2       	ldi	r20, 0x20	; 32
    5712:	51 e4       	ldi	r21, 0x41	; 65
    5714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5718:	dc 01       	movw	r26, r24
    571a:	cb 01       	movw	r24, r22
    571c:	bc 01       	movw	r22, r24
    571e:	cd 01       	movw	r24, r26
    5720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5724:	dc 01       	movw	r26, r24
    5726:	cb 01       	movw	r24, r22
    5728:	9a a3       	std	Y+34, r25	; 0x22
    572a:	89 a3       	std	Y+33, r24	; 0x21
    572c:	0f c0       	rjmp	.+30     	; 0x574c <autoParking+0xce0>
    572e:	80 e9       	ldi	r24, 0x90	; 144
    5730:	91 e0       	ldi	r25, 0x01	; 1
    5732:	98 a3       	std	Y+32, r25	; 0x20
    5734:	8f 8f       	std	Y+31, r24	; 0x1f
    5736:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5738:	98 a1       	ldd	r25, Y+32	; 0x20
    573a:	01 97       	sbiw	r24, 0x01	; 1
    573c:	f1 f7       	brne	.-4      	; 0x573a <autoParking+0xcce>
    573e:	98 a3       	std	Y+32, r25	; 0x20
    5740:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5742:	89 a1       	ldd	r24, Y+33	; 0x21
    5744:	9a a1       	ldd	r25, Y+34	; 0x22
    5746:	01 97       	sbiw	r24, 0x01	; 1
    5748:	9a a3       	std	Y+34, r25	; 0x22
    574a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    574c:	89 a1       	ldd	r24, Y+33	; 0x21
    574e:	9a a1       	ldd	r25, Y+34	; 0x22
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	69 f7       	brne	.-38     	; 0x572e <autoParking+0xcc2>
    5754:	14 c0       	rjmp	.+40     	; 0x577e <autoParking+0xd12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5756:	6b a1       	ldd	r22, Y+35	; 0x23
    5758:	7c a1       	ldd	r23, Y+36	; 0x24
    575a:	8d a1       	ldd	r24, Y+37	; 0x25
    575c:	9e a1       	ldd	r25, Y+38	; 0x26
    575e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5762:	dc 01       	movw	r26, r24
    5764:	cb 01       	movw	r24, r22
    5766:	9a a3       	std	Y+34, r25	; 0x22
    5768:	89 a3       	std	Y+33, r24	; 0x21
    576a:	89 a1       	ldd	r24, Y+33	; 0x21
    576c:	9a a1       	ldd	r25, Y+34	; 0x22
    576e:	9e 8f       	std	Y+30, r25	; 0x1e
    5770:	8d 8f       	std	Y+29, r24	; 0x1d
    5772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5774:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5776:	01 97       	sbiw	r24, 0x01	; 1
    5778:	f1 f7       	brne	.-4      	; 0x5776 <autoParking+0xd0a>
    577a:	9e 8f       	std	Y+30, r25	; 0x1e
    577c:	8d 8f       	std	Y+29, r24	; 0x1d

            _delay_ms(500);

            Left_Backward();
    577e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <Left_Backward>
    5782:	80 e0       	ldi	r24, 0x00	; 0
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	af e2       	ldi	r26, 0x2F	; 47
    5788:	b4 e4       	ldi	r27, 0x44	; 68
    578a:	89 8f       	std	Y+25, r24	; 0x19
    578c:	9a 8f       	std	Y+26, r25	; 0x1a
    578e:	ab 8f       	std	Y+27, r26	; 0x1b
    5790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5792:	69 8d       	ldd	r22, Y+25	; 0x19
    5794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    579a:	20 e0       	ldi	r18, 0x00	; 0
    579c:	30 e0       	ldi	r19, 0x00	; 0
    579e:	4a e7       	ldi	r20, 0x7A	; 122
    57a0:	55 e4       	ldi	r21, 0x45	; 69
    57a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57a6:	dc 01       	movw	r26, r24
    57a8:	cb 01       	movw	r24, r22
    57aa:	8d 8b       	std	Y+21, r24	; 0x15
    57ac:	9e 8b       	std	Y+22, r25	; 0x16
    57ae:	af 8b       	std	Y+23, r26	; 0x17
    57b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57b2:	6d 89       	ldd	r22, Y+21	; 0x15
    57b4:	7e 89       	ldd	r23, Y+22	; 0x16
    57b6:	8f 89       	ldd	r24, Y+23	; 0x17
    57b8:	98 8d       	ldd	r25, Y+24	; 0x18
    57ba:	20 e0       	ldi	r18, 0x00	; 0
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	40 e8       	ldi	r20, 0x80	; 128
    57c0:	5f e3       	ldi	r21, 0x3F	; 63
    57c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57c6:	88 23       	and	r24, r24
    57c8:	2c f4       	brge	.+10     	; 0x57d4 <autoParking+0xd68>
		__ticks = 1;
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	9c 8b       	std	Y+20, r25	; 0x14
    57d0:	8b 8b       	std	Y+19, r24	; 0x13
    57d2:	3f c0       	rjmp	.+126    	; 0x5852 <autoParking+0xde6>
	else if (__tmp > 65535)
    57d4:	6d 89       	ldd	r22, Y+21	; 0x15
    57d6:	7e 89       	ldd	r23, Y+22	; 0x16
    57d8:	8f 89       	ldd	r24, Y+23	; 0x17
    57da:	98 8d       	ldd	r25, Y+24	; 0x18
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	3f ef       	ldi	r19, 0xFF	; 255
    57e0:	4f e7       	ldi	r20, 0x7F	; 127
    57e2:	57 e4       	ldi	r21, 0x47	; 71
    57e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57e8:	18 16       	cp	r1, r24
    57ea:	4c f5       	brge	.+82     	; 0x583e <autoParking+0xdd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ec:	69 8d       	ldd	r22, Y+25	; 0x19
    57ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57f4:	20 e0       	ldi	r18, 0x00	; 0
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	40 e2       	ldi	r20, 0x20	; 32
    57fa:	51 e4       	ldi	r21, 0x41	; 65
    57fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5800:	dc 01       	movw	r26, r24
    5802:	cb 01       	movw	r24, r22
    5804:	bc 01       	movw	r22, r24
    5806:	cd 01       	movw	r24, r26
    5808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	9c 8b       	std	Y+20, r25	; 0x14
    5812:	8b 8b       	std	Y+19, r24	; 0x13
    5814:	0f c0       	rjmp	.+30     	; 0x5834 <autoParking+0xdc8>
    5816:	80 e9       	ldi	r24, 0x90	; 144
    5818:	91 e0       	ldi	r25, 0x01	; 1
    581a:	9a 8b       	std	Y+18, r25	; 0x12
    581c:	89 8b       	std	Y+17, r24	; 0x11
    581e:	89 89       	ldd	r24, Y+17	; 0x11
    5820:	9a 89       	ldd	r25, Y+18	; 0x12
    5822:	01 97       	sbiw	r24, 0x01	; 1
    5824:	f1 f7       	brne	.-4      	; 0x5822 <autoParking+0xdb6>
    5826:	9a 8b       	std	Y+18, r25	; 0x12
    5828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582a:	8b 89       	ldd	r24, Y+19	; 0x13
    582c:	9c 89       	ldd	r25, Y+20	; 0x14
    582e:	01 97       	sbiw	r24, 0x01	; 1
    5830:	9c 8b       	std	Y+20, r25	; 0x14
    5832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5834:	8b 89       	ldd	r24, Y+19	; 0x13
    5836:	9c 89       	ldd	r25, Y+20	; 0x14
    5838:	00 97       	sbiw	r24, 0x00	; 0
    583a:	69 f7       	brne	.-38     	; 0x5816 <autoParking+0xdaa>
    583c:	14 c0       	rjmp	.+40     	; 0x5866 <autoParking+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583e:	6d 89       	ldd	r22, Y+21	; 0x15
    5840:	7e 89       	ldd	r23, Y+22	; 0x16
    5842:	8f 89       	ldd	r24, Y+23	; 0x17
    5844:	98 8d       	ldd	r25, Y+24	; 0x18
    5846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584a:	dc 01       	movw	r26, r24
    584c:	cb 01       	movw	r24, r22
    584e:	9c 8b       	std	Y+20, r25	; 0x14
    5850:	8b 8b       	std	Y+19, r24	; 0x13
    5852:	8b 89       	ldd	r24, Y+19	; 0x13
    5854:	9c 89       	ldd	r25, Y+20	; 0x14
    5856:	98 8b       	std	Y+16, r25	; 0x10
    5858:	8f 87       	std	Y+15, r24	; 0x0f
    585a:	8f 85       	ldd	r24, Y+15	; 0x0f
    585c:	98 89       	ldd	r25, Y+16	; 0x10
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	f1 f7       	brne	.-4      	; 0x585e <autoParking+0xdf2>
    5862:	98 8b       	std	Y+16, r25	; 0x10
    5864:	8f 87       	std	Y+15, r24	; 0x0f
    5866:	80 e0       	ldi	r24, 0x00	; 0
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	af e2       	ldi	r26, 0x2F	; 47
    586c:	b4 e4       	ldi	r27, 0x44	; 68
    586e:	8b 87       	std	Y+11, r24	; 0x0b
    5870:	9c 87       	std	Y+12, r25	; 0x0c
    5872:	ad 87       	std	Y+13, r26	; 0x0d
    5874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5876:	6b 85       	ldd	r22, Y+11	; 0x0b
    5878:	7c 85       	ldd	r23, Y+12	; 0x0c
    587a:	8d 85       	ldd	r24, Y+13	; 0x0d
    587c:	9e 85       	ldd	r25, Y+14	; 0x0e
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	4a e7       	ldi	r20, 0x7A	; 122
    5884:	55 e4       	ldi	r21, 0x45	; 69
    5886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	8f 83       	std	Y+7, r24	; 0x07
    5890:	98 87       	std	Y+8, r25	; 0x08
    5892:	a9 87       	std	Y+9, r26	; 0x09
    5894:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5896:	6f 81       	ldd	r22, Y+7	; 0x07
    5898:	78 85       	ldd	r23, Y+8	; 0x08
    589a:	89 85       	ldd	r24, Y+9	; 0x09
    589c:	9a 85       	ldd	r25, Y+10	; 0x0a
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e8       	ldi	r20, 0x80	; 128
    58a4:	5f e3       	ldi	r21, 0x3F	; 63
    58a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58aa:	88 23       	and	r24, r24
    58ac:	2c f4       	brge	.+10     	; 0x58b8 <autoParking+0xe4c>
		__ticks = 1;
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	9e 83       	std	Y+6, r25	; 0x06
    58b4:	8d 83       	std	Y+5, r24	; 0x05
    58b6:	3f c0       	rjmp	.+126    	; 0x5936 <autoParking+0xeca>
	else if (__tmp > 65535)
    58b8:	6f 81       	ldd	r22, Y+7	; 0x07
    58ba:	78 85       	ldd	r23, Y+8	; 0x08
    58bc:	89 85       	ldd	r24, Y+9	; 0x09
    58be:	9a 85       	ldd	r25, Y+10	; 0x0a
    58c0:	20 e0       	ldi	r18, 0x00	; 0
    58c2:	3f ef       	ldi	r19, 0xFF	; 255
    58c4:	4f e7       	ldi	r20, 0x7F	; 127
    58c6:	57 e4       	ldi	r21, 0x47	; 71
    58c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58cc:	18 16       	cp	r1, r24
    58ce:	4c f5       	brge	.+82     	; 0x5922 <autoParking+0xeb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    58d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    58d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    58d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    58d8:	20 e0       	ldi	r18, 0x00	; 0
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	40 e2       	ldi	r20, 0x20	; 32
    58de:	51 e4       	ldi	r21, 0x41	; 65
    58e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	bc 01       	movw	r22, r24
    58ea:	cd 01       	movw	r24, r26
    58ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f0:	dc 01       	movw	r26, r24
    58f2:	cb 01       	movw	r24, r22
    58f4:	9e 83       	std	Y+6, r25	; 0x06
    58f6:	8d 83       	std	Y+5, r24	; 0x05
    58f8:	0f c0       	rjmp	.+30     	; 0x5918 <autoParking+0xeac>
    58fa:	80 e9       	ldi	r24, 0x90	; 144
    58fc:	91 e0       	ldi	r25, 0x01	; 1
    58fe:	9c 83       	std	Y+4, r25	; 0x04
    5900:	8b 83       	std	Y+3, r24	; 0x03
    5902:	8b 81       	ldd	r24, Y+3	; 0x03
    5904:	9c 81       	ldd	r25, Y+4	; 0x04
    5906:	01 97       	sbiw	r24, 0x01	; 1
    5908:	f1 f7       	brne	.-4      	; 0x5906 <autoParking+0xe9a>
    590a:	9c 83       	std	Y+4, r25	; 0x04
    590c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    590e:	8d 81       	ldd	r24, Y+5	; 0x05
    5910:	9e 81       	ldd	r25, Y+6	; 0x06
    5912:	01 97       	sbiw	r24, 0x01	; 1
    5914:	9e 83       	std	Y+6, r25	; 0x06
    5916:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5918:	8d 81       	ldd	r24, Y+5	; 0x05
    591a:	9e 81       	ldd	r25, Y+6	; 0x06
    591c:	00 97       	sbiw	r24, 0x00	; 0
    591e:	69 f7       	brne	.-38     	; 0x58fa <autoParking+0xe8e>
    5920:	1d c0       	rjmp	.+58     	; 0x595c <autoParking+0xef0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5922:	6f 81       	ldd	r22, Y+7	; 0x07
    5924:	78 85       	ldd	r23, Y+8	; 0x08
    5926:	89 85       	ldd	r24, Y+9	; 0x09
    5928:	9a 85       	ldd	r25, Y+10	; 0x0a
    592a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	9e 83       	std	Y+6, r25	; 0x06
    5934:	8d 83       	std	Y+5, r24	; 0x05
    5936:	8d 81       	ldd	r24, Y+5	; 0x05
    5938:	9e 81       	ldd	r25, Y+6	; 0x06
    593a:	9a 83       	std	Y+2, r25	; 0x02
    593c:	89 83       	std	Y+1, r24	; 0x01
    593e:	89 81       	ldd	r24, Y+1	; 0x01
    5940:	9a 81       	ldd	r25, Y+2	; 0x02
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	f1 f7       	brne	.-4      	; 0x5942 <autoParking+0xed6>
    5946:	9a 83       	std	Y+2, r25	; 0x02
    5948:	89 83       	std	Y+1, r24	; 0x01
    594a:	08 c0       	rjmp	.+16     	; 0x595c <autoParking+0xef0>

    readDistance();

    Forward();

    while (distance > 40)
    594c:	80 91 d6 01 	lds	r24, 0x01D6
    5950:	90 91 d7 01 	lds	r25, 0x01D7
    5954:	89 32       	cpi	r24, 0x29	; 41
    5956:	91 05       	cpc	r25, r1
    5958:	08 f0       	brcs	.+2      	; 0x595c <autoParking+0xef0>
    595a:	06 ca       	rjmp	.-3060   	; 0x4d68 <autoParking+0x2fc>

            break;
        }
    }

    if (counter < 5)
    595c:	fe 01       	movw	r30, r28
    595e:	e7 55       	subi	r30, 0x57	; 87
    5960:	ff 4f       	sbci	r31, 0xFF	; 255
    5962:	80 81       	ld	r24, Z
    5964:	85 30       	cpi	r24, 0x05	; 5
    5966:	38 f4       	brcc	.+14     	; 0x5976 <autoParking+0xf0a>
    {
        LCD_displayStringRowColumn(1, 0, "NO SPACE");
    5968:	21 ea       	ldi	r18, 0xA1	; 161
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	60 e0       	ldi	r22, 0x00	; 0
    5970:	a9 01       	movw	r20, r18
    5972:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    }

    Stop();
    5976:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Stop>
}
    597a:	c7 55       	subi	r28, 0x57	; 87
    597c:	df 4f       	sbci	r29, 0xFF	; 255
    597e:	0f b6       	in	r0, 0x3f	; 63
    5980:	f8 94       	cli
    5982:	de bf       	out	0x3e, r29	; 62
    5984:	0f be       	out	0x3f, r0	; 63
    5986:	cd bf       	out	0x3d, r28	; 61
    5988:	cf 91       	pop	r28
    598a:	df 91       	pop	r29
    598c:	1f 91       	pop	r17
    598e:	0f 91       	pop	r16
    5990:	08 95       	ret

00005992 <readDistance>:
/*
 * Description :
 * Function to read the distance from the ultrasonic sensor and display it on the LCD.
 */
void readDistance(void)
{
    5992:	df 93       	push	r29
    5994:	cf 93       	push	r28
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
    distance = Ultrasonic_readDistance();
    599a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Ultrasonic_readDistance>
    599e:	90 93 d7 01 	sts	0x01D7, r25
    59a2:	80 93 d6 01 	sts	0x01D6, r24
    LCD_displayStringRowColumn(0, 0, "D1 = ");
    59a6:	2a ea       	ldi	r18, 0xAA	; 170
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	80 e0       	ldi	r24, 0x00	; 0
    59ac:	60 e0       	ldi	r22, 0x00	; 0
    59ae:	a9 01       	movw	r20, r18
    59b0:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    LCD_intgerToString(distance);
    59b4:	80 91 d6 01 	lds	r24, 0x01D6
    59b8:	90 91 d7 01 	lds	r25, 0x01D7
    59bc:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <LCD_intgerToString>
    LCD_displayStringRowColumn(0, 8, "cm");
    59c0:	20 eb       	ldi	r18, 0xB0	; 176
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	68 e0       	ldi	r22, 0x08	; 8
    59c8:	a9 01       	movw	r20, r18
    59ca:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>

    if (distance < 10)
    59ce:	80 91 d6 01 	lds	r24, 0x01D6
    59d2:	90 91 d7 01 	lds	r25, 0x01D7
    59d6:	8a 30       	cpi	r24, 0x0A	; 10
    59d8:	91 05       	cpc	r25, r1
    59da:	38 f4       	brcc	.+14     	; 0x59ea <readDistance+0x58>
    {
        LCD_displayStringRowColumn(0, 6, " ");
    59dc:	23 eb       	ldi	r18, 0xB3	; 179
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	80 e0       	ldi	r24, 0x00	; 0
    59e2:	66 e0       	ldi	r22, 0x06	; 6
    59e4:	a9 01       	movw	r20, r18
    59e6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    }

    if (distance < 100)
    59ea:	80 91 d6 01 	lds	r24, 0x01D6
    59ee:	90 91 d7 01 	lds	r25, 0x01D7
    59f2:	84 36       	cpi	r24, 0x64	; 100
    59f4:	91 05       	cpc	r25, r1
    59f6:	38 f4       	brcc	.+14     	; 0x5a06 <readDistance+0x74>
    {
        LCD_displayStringRowColumn(0, 7, " ");
    59f8:	23 eb       	ldi	r18, 0xB3	; 179
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	80 e0       	ldi	r24, 0x00	; 0
    59fe:	67 e0       	ldi	r22, 0x07	; 7
    5a00:	a9 01       	movw	r20, r18
    5a02:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    }

    if (distance >= 100)
    5a06:	80 91 d6 01 	lds	r24, 0x01D6
    5a0a:	90 91 d7 01 	lds	r25, 0x01D7
    5a0e:	84 36       	cpi	r24, 0x64	; 100
    5a10:	91 05       	cpc	r25, r1
    5a12:	38 f0       	brcs	.+14     	; 0x5a22 <readDistance+0x90>
    {
        LCD_displayStringRowColumn(0, 5, "99 ");
    5a14:	25 eb       	ldi	r18, 0xB5	; 181
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	65 e0       	ldi	r22, 0x05	; 5
    5a1c:	a9 01       	movw	r20, r18
    5a1e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_displayStringRowColumn>
    }
}
    5a22:	cf 91       	pop	r28
    5a24:	df 91       	pop	r29
    5a26:	08 95       	ret

00005a28 <__divmodhi4>:
    5a28:	97 fb       	bst	r25, 7
    5a2a:	09 2e       	mov	r0, r25
    5a2c:	07 26       	eor	r0, r23
    5a2e:	0a d0       	rcall	.+20     	; 0x5a44 <__divmodhi4_neg1>
    5a30:	77 fd       	sbrc	r23, 7
    5a32:	04 d0       	rcall	.+8      	; 0x5a3c <__divmodhi4_neg2>
    5a34:	2e d0       	rcall	.+92     	; 0x5a92 <__udivmodhi4>
    5a36:	06 d0       	rcall	.+12     	; 0x5a44 <__divmodhi4_neg1>
    5a38:	00 20       	and	r0, r0
    5a3a:	1a f4       	brpl	.+6      	; 0x5a42 <__divmodhi4_exit>

00005a3c <__divmodhi4_neg2>:
    5a3c:	70 95       	com	r23
    5a3e:	61 95       	neg	r22
    5a40:	7f 4f       	sbci	r23, 0xFF	; 255

00005a42 <__divmodhi4_exit>:
    5a42:	08 95       	ret

00005a44 <__divmodhi4_neg1>:
    5a44:	f6 f7       	brtc	.-4      	; 0x5a42 <__divmodhi4_exit>
    5a46:	90 95       	com	r25
    5a48:	81 95       	neg	r24
    5a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4c:	08 95       	ret

00005a4e <__udivmodsi4>:
    5a4e:	a1 e2       	ldi	r26, 0x21	; 33
    5a50:	1a 2e       	mov	r1, r26
    5a52:	aa 1b       	sub	r26, r26
    5a54:	bb 1b       	sub	r27, r27
    5a56:	fd 01       	movw	r30, r26
    5a58:	0d c0       	rjmp	.+26     	; 0x5a74 <__udivmodsi4_ep>

00005a5a <__udivmodsi4_loop>:
    5a5a:	aa 1f       	adc	r26, r26
    5a5c:	bb 1f       	adc	r27, r27
    5a5e:	ee 1f       	adc	r30, r30
    5a60:	ff 1f       	adc	r31, r31
    5a62:	a2 17       	cp	r26, r18
    5a64:	b3 07       	cpc	r27, r19
    5a66:	e4 07       	cpc	r30, r20
    5a68:	f5 07       	cpc	r31, r21
    5a6a:	20 f0       	brcs	.+8      	; 0x5a74 <__udivmodsi4_ep>
    5a6c:	a2 1b       	sub	r26, r18
    5a6e:	b3 0b       	sbc	r27, r19
    5a70:	e4 0b       	sbc	r30, r20
    5a72:	f5 0b       	sbc	r31, r21

00005a74 <__udivmodsi4_ep>:
    5a74:	66 1f       	adc	r22, r22
    5a76:	77 1f       	adc	r23, r23
    5a78:	88 1f       	adc	r24, r24
    5a7a:	99 1f       	adc	r25, r25
    5a7c:	1a 94       	dec	r1
    5a7e:	69 f7       	brne	.-38     	; 0x5a5a <__udivmodsi4_loop>
    5a80:	60 95       	com	r22
    5a82:	70 95       	com	r23
    5a84:	80 95       	com	r24
    5a86:	90 95       	com	r25
    5a88:	9b 01       	movw	r18, r22
    5a8a:	ac 01       	movw	r20, r24
    5a8c:	bd 01       	movw	r22, r26
    5a8e:	cf 01       	movw	r24, r30
    5a90:	08 95       	ret

00005a92 <__udivmodhi4>:
    5a92:	aa 1b       	sub	r26, r26
    5a94:	bb 1b       	sub	r27, r27
    5a96:	51 e1       	ldi	r21, 0x11	; 17
    5a98:	07 c0       	rjmp	.+14     	; 0x5aa8 <__udivmodhi4_ep>

00005a9a <__udivmodhi4_loop>:
    5a9a:	aa 1f       	adc	r26, r26
    5a9c:	bb 1f       	adc	r27, r27
    5a9e:	a6 17       	cp	r26, r22
    5aa0:	b7 07       	cpc	r27, r23
    5aa2:	10 f0       	brcs	.+4      	; 0x5aa8 <__udivmodhi4_ep>
    5aa4:	a6 1b       	sub	r26, r22
    5aa6:	b7 0b       	sbc	r27, r23

00005aa8 <__udivmodhi4_ep>:
    5aa8:	88 1f       	adc	r24, r24
    5aaa:	99 1f       	adc	r25, r25
    5aac:	5a 95       	dec	r21
    5aae:	a9 f7       	brne	.-22     	; 0x5a9a <__udivmodhi4_loop>
    5ab0:	80 95       	com	r24
    5ab2:	90 95       	com	r25
    5ab4:	bc 01       	movw	r22, r24
    5ab6:	cd 01       	movw	r24, r26
    5ab8:	08 95       	ret

00005aba <__prologue_saves__>:
    5aba:	2f 92       	push	r2
    5abc:	3f 92       	push	r3
    5abe:	4f 92       	push	r4
    5ac0:	5f 92       	push	r5
    5ac2:	6f 92       	push	r6
    5ac4:	7f 92       	push	r7
    5ac6:	8f 92       	push	r8
    5ac8:	9f 92       	push	r9
    5aca:	af 92       	push	r10
    5acc:	bf 92       	push	r11
    5ace:	cf 92       	push	r12
    5ad0:	df 92       	push	r13
    5ad2:	ef 92       	push	r14
    5ad4:	ff 92       	push	r15
    5ad6:	0f 93       	push	r16
    5ad8:	1f 93       	push	r17
    5ada:	cf 93       	push	r28
    5adc:	df 93       	push	r29
    5ade:	cd b7       	in	r28, 0x3d	; 61
    5ae0:	de b7       	in	r29, 0x3e	; 62
    5ae2:	ca 1b       	sub	r28, r26
    5ae4:	db 0b       	sbc	r29, r27
    5ae6:	0f b6       	in	r0, 0x3f	; 63
    5ae8:	f8 94       	cli
    5aea:	de bf       	out	0x3e, r29	; 62
    5aec:	0f be       	out	0x3f, r0	; 63
    5aee:	cd bf       	out	0x3d, r28	; 61
    5af0:	09 94       	ijmp

00005af2 <__epilogue_restores__>:
    5af2:	2a 88       	ldd	r2, Y+18	; 0x12
    5af4:	39 88       	ldd	r3, Y+17	; 0x11
    5af6:	48 88       	ldd	r4, Y+16	; 0x10
    5af8:	5f 84       	ldd	r5, Y+15	; 0x0f
    5afa:	6e 84       	ldd	r6, Y+14	; 0x0e
    5afc:	7d 84       	ldd	r7, Y+13	; 0x0d
    5afe:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b00:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b02:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b04:	b9 84       	ldd	r11, Y+9	; 0x09
    5b06:	c8 84       	ldd	r12, Y+8	; 0x08
    5b08:	df 80       	ldd	r13, Y+7	; 0x07
    5b0a:	ee 80       	ldd	r14, Y+6	; 0x06
    5b0c:	fd 80       	ldd	r15, Y+5	; 0x05
    5b0e:	0c 81       	ldd	r16, Y+4	; 0x04
    5b10:	1b 81       	ldd	r17, Y+3	; 0x03
    5b12:	aa 81       	ldd	r26, Y+2	; 0x02
    5b14:	b9 81       	ldd	r27, Y+1	; 0x01
    5b16:	ce 0f       	add	r28, r30
    5b18:	d1 1d       	adc	r29, r1
    5b1a:	0f b6       	in	r0, 0x3f	; 63
    5b1c:	f8 94       	cli
    5b1e:	de bf       	out	0x3e, r29	; 62
    5b20:	0f be       	out	0x3f, r0	; 63
    5b22:	cd bf       	out	0x3d, r28	; 61
    5b24:	ed 01       	movw	r28, r26
    5b26:	08 95       	ret

00005b28 <itoa>:
    5b28:	fb 01       	movw	r30, r22
    5b2a:	9f 01       	movw	r18, r30
    5b2c:	e8 94       	clt
    5b2e:	42 30       	cpi	r20, 0x02	; 2
    5b30:	c4 f0       	brlt	.+48     	; 0x5b62 <itoa+0x3a>
    5b32:	45 32       	cpi	r20, 0x25	; 37
    5b34:	b4 f4       	brge	.+44     	; 0x5b62 <itoa+0x3a>
    5b36:	4a 30       	cpi	r20, 0x0A	; 10
    5b38:	29 f4       	brne	.+10     	; 0x5b44 <itoa+0x1c>
    5b3a:	97 fb       	bst	r25, 7
    5b3c:	1e f4       	brtc	.+6      	; 0x5b44 <itoa+0x1c>
    5b3e:	90 95       	com	r25
    5b40:	81 95       	neg	r24
    5b42:	9f 4f       	sbci	r25, 0xFF	; 255
    5b44:	64 2f       	mov	r22, r20
    5b46:	77 27       	eor	r23, r23
    5b48:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__udivmodhi4>
    5b4c:	80 5d       	subi	r24, 0xD0	; 208
    5b4e:	8a 33       	cpi	r24, 0x3A	; 58
    5b50:	0c f0       	brlt	.+2      	; 0x5b54 <itoa+0x2c>
    5b52:	89 5d       	subi	r24, 0xD9	; 217
    5b54:	81 93       	st	Z+, r24
    5b56:	cb 01       	movw	r24, r22
    5b58:	00 97       	sbiw	r24, 0x00	; 0
    5b5a:	a1 f7       	brne	.-24     	; 0x5b44 <itoa+0x1c>
    5b5c:	16 f4       	brtc	.+4      	; 0x5b62 <itoa+0x3a>
    5b5e:	5d e2       	ldi	r21, 0x2D	; 45
    5b60:	51 93       	st	Z+, r21
    5b62:	10 82       	st	Z, r1
    5b64:	c9 01       	movw	r24, r18
    5b66:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <strrev>

00005b6a <strrev>:
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	67 2f       	mov	r22, r23
    5b70:	71 91       	ld	r23, Z+
    5b72:	77 23       	and	r23, r23
    5b74:	e1 f7       	brne	.-8      	; 0x5b6e <strrev+0x4>
    5b76:	32 97       	sbiw	r30, 0x02	; 2
    5b78:	04 c0       	rjmp	.+8      	; 0x5b82 <strrev+0x18>
    5b7a:	7c 91       	ld	r23, X
    5b7c:	6d 93       	st	X+, r22
    5b7e:	70 83       	st	Z, r23
    5b80:	62 91       	ld	r22, -Z
    5b82:	ae 17       	cp	r26, r30
    5b84:	bf 07       	cpc	r27, r31
    5b86:	c8 f3       	brcs	.-14     	; 0x5b7a <strrev+0x10>
    5b88:	08 95       	ret

00005b8a <_exit>:
    5b8a:	f8 94       	cli

00005b8c <__stop_program>:
    5b8c:	ff cf       	rjmp	.-2      	; 0x5b8c <__stop_program>
