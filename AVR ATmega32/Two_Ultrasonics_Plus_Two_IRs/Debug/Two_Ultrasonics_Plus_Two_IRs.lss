
Two_Ultrasonics_Plus_Two_IRs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000041e6  0000427a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800188  00800188  000043a2  2**0
                  ALLOC
  3 .stab         0000450c  00000000  00000000  000043a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028ec  00000000  00000000  000088b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b52e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ecbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fe98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001034e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_1>
       8:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__vector_2>
       c:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__vector_3>
      10:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_4>
      14:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_5>
      18:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_6>
      1c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_9>
      28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_10>
      2c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <main>
      8a:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 20 	jmp	0x414a	; 0x414a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 20 	jmp	0x412a	; 0x412a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 20 	jmp	0x412a	; 0x412a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 20 	jmp	0x414a	; 0x414a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 20 	jmp	0x412a	; 0x412a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 20 	jmp	0x412a	; 0x412a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 20 	jmp	0x412a	; 0x412a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b5 20 	jmp	0x416a	; 0x416a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 58       	subi	r30, 0x80	; 128
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_11>:
 *******************************************************************************/
/*
 * ISR For Timer0 Overflow
 */
ISR(TIMER0_OVF_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
     e58:	80 91 88 01 	lds	r24, 0x0188
     e5c:	90 91 89 01 	lds	r25, 0x0189
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer0)();
     e64:	e0 91 88 01 	lds	r30, 0x0188
     e68:	f0 91 89 01 	lds	r31, 0x0189
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_10>:

/*
 * ISR For Timer0 Compare Match
 */
ISR(TIMER0_COMP_vect)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
     ebe:	80 91 88 01 	lds	r24, 0x0188
     ec2:	90 91 89 01 	lds	r25, 0x0189
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer0)();
     eca:	e0 91 88 01 	lds	r30, 0x0188
     ece:	f0 91 89 01 	lds	r31, 0x0189
     ed2:	09 95       	icall
	}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_9>:

/*
 * ISR For Timer1 Overflow
 */
ISR(TIMER1_OVF_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
     f24:	80 91 8a 01 	lds	r24, 0x018A
     f28:	90 91 8b 01 	lds	r25, 0x018B
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer1)();
     f30:	e0 91 8a 01 	lds	r30, 0x018A
     f34:	f0 91 8b 01 	lds	r31, 0x018B
     f38:	09 95       	icall
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_7>:

/*
 * ISR For Timer1 Compare Match A
 */
ISR(TIMER1_COMPA_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
     f8a:	80 91 8a 01 	lds	r24, 0x018A
     f8e:	90 91 8b 01 	lds	r25, 0x018B
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer1)();
     f96:	e0 91 8a 01 	lds	r30, 0x018A
     f9a:	f0 91 8b 01 	lds	r31, 0x018B
     f9e:	09 95       	icall
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_5>:

/*
 * ISR For Timer2 Overflow
 */
ISR(TIMER2_OVF_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
     ff0:	80 91 8c 01 	lds	r24, 0x018C
     ff4:	90 91 8d 01 	lds	r25, 0x018D
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer2)();
     ffc:	e0 91 8c 01 	lds	r30, 0x018C
    1000:	f0 91 8d 01 	lds	r31, 0x018D
    1004:	09 95       	icall
	}
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_4>:

/*
 * ISR For Timer2 Compare Match
 */
ISR(TIMER2_COMP_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    1056:	80 91 8c 01 	lds	r24, 0x018C
    105a:	90 91 8d 01 	lds	r25, 0x018D
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	29 f0       	breq	.+10     	; 0x106c <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer2)();
    1062:	e0 91 8c 01 	lds	r30, 0x018C
    1066:	f0 91 8d 01 	lds	r31, 0x018D
    106a:	09 95       	icall
	}
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <Timer_init>:
/*
 * Function to initialize the Timer driver.
 * Config_Ptr: Pointer to the Timer configuration structure.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <Timer_init+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <Timer_init+0x8>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	84 81       	ldd	r24, Z+4	; 0x04
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3c 83       	std	Y+4, r19	; 0x04
    10ae:	2b 83       	std	Y+3, r18	; 0x03
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <Timer_init+0x2a>
    10ba:	47 c0       	rjmp	.+142    	; 0x114a <Timer_init+0xb8>
    10bc:	2b 81       	ldd	r18, Y+3	; 0x03
    10be:	3c 81       	ldd	r19, Y+4	; 0x04
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <Timer_init+0x36>
    10c6:	85 c0       	rjmp	.+266    	; 0x11d2 <Timer_init+0x140>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <Timer_init+0x40>
    10d0:	bb c0       	rjmp	.+374    	; 0x1248 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS00 & CS01 & CS02.
		 */
		TCCR0 = (1<<FOC0) | ((Config_Ptr->timer_mode)<<WGM01) | ((Config_Ptr->timer_clock)<<CS00);
    10d2:	a3 e5       	ldi	r26, 0x53	; 83
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e9 81       	ldd	r30, Y+1	; 0x01
    10d8:	fa 81       	ldd	r31, Y+2	; 0x02
    10da:	86 81       	ldd	r24, Z+6	; 0x06
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	98 2f       	mov	r25, r24
    10ee:	90 68       	ori	r25, 0x80	; 128
    10f0:	e9 81       	ldd	r30, Y+1	; 0x01
    10f2:	fa 81       	ldd	r31, Y+2	; 0x02
    10f4:	85 81       	ldd	r24, Z+5	; 0x05
    10f6:	89 2b       	or	r24, r25
    10f8:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT0 */
		TCNT0 = Config_Ptr->timer_InitialValue;
    10fa:	a2 e5       	ldi	r26, 0x52	; 82
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1100:	fa 81       	ldd	r31, Y+2	; 0x02
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1108:	e9 81       	ldd	r30, Y+1	; 0x01
    110a:	fa 81       	ldd	r31, Y+2	; 0x02
    110c:	86 81       	ldd	r24, Z+6	; 0x06
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	39 f4       	brne	.+14     	; 0x1120 <Timer_init+0x8e>
		{
			/* Set Output Compare Register – OCR0 */
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1112:	ac e5       	ldi	r26, 0x5C	; 92
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1120:	e9 81       	ldd	r30, Y+1	; 0x01
    1122:	fa 81       	ldd	r31, Y+2	; 0x02
    1124:	86 81       	ldd	r24, Z+6	; 0x06
    1126:	88 23       	and	r24, r24
    1128:	41 f4       	brne	.+16     	; 0x113a <Timer_init+0xa8>
		{
			TIMSK |= (1<<TOIE0);
    112a:	a9 e5       	ldi	r26, 0x59	; 89
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e9 e5       	ldi	r30, 0x59	; 89
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	8c 93       	st	X, r24
    1138:	87 c0       	rjmp	.+270    	; 0x1248 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE0);
    113a:	a9 e5       	ldi	r26, 0x59	; 89
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e9 e5       	ldi	r30, 0x59	; 89
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	82 60       	ori	r24, 0x02	; 2
    1146:	8c 93       	st	X, r24
    1148:	7f c0       	rjmp	.+254    	; 0x1248 <Timer_init+0x1b6>
		 * The FOC1A/FOC1B = 1 when the WGM13:0 bits specifies a non-PWM mode.
		 * Normal mode WGM10 = 0, WGM11 = 0, WGM12 = 0; WGM13 = 0
		 * Compare mode WGM10 = 0, WGM11 = 0, WGM12 = 1; WGM13 = 0
		 * Set clock as we need from CS10 & CS11 & CS12.
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    114a:	ef e4       	ldi	r30, 0x4F	; 79
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	80 83       	st	Z, r24
		TCCR1B = ((Config_Ptr->timer_mode)<<WGM12) | ((Config_Ptr->timer_clock)<<CS10);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e9 81       	ldd	r30, Y+1	; 0x01
    1158:	fa 81       	ldd	r31, Y+2	; 0x02
    115a:	86 81       	ldd	r24, Z+6	; 0x06
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	98 2f       	mov	r25, r24
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	85 81       	ldd	r24, Z+5	; 0x05
    1174:	89 2b       	or	r24, r25
    1176:	8c 93       	st	X, r24

		/* Set Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = Config_Ptr->timer_InitialValue;
    1178:	ac e4       	ldi	r26, 0x4C	; 76
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	86 81       	ldd	r24, Z+6	; 0x06
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	51 f4       	brne	.+20     	; 0x11a8 <Timer_init+0x116>
		{
			/* Set Output Compare Register 1 A – OCR1AH and OCR1AL */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1194:	ea e4       	ldi	r30, 0x4A	; 74
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	a9 81       	ldd	r26, Y+1	; 0x01
    119a:	ba 81       	ldd	r27, Y+2	; 0x02
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	8d 91       	ld	r24, X+
    11a0:	9c 91       	ld	r25, X
    11a2:	13 97       	sbiw	r26, 0x03	; 3
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	86 81       	ldd	r24, Z+6	; 0x06
    11ae:	88 23       	and	r24, r24
    11b0:	41 f4       	brne	.+16     	; 0x11c2 <Timer_init+0x130>
		{
			TIMSK |= (1<<TOIE1);
    11b2:	a9 e5       	ldi	r26, 0x59	; 89
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e9 e5       	ldi	r30, 0x59	; 89
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	84 60       	ori	r24, 0x04	; 4
    11be:	8c 93       	st	X, r24
    11c0:	43 c0       	rjmp	.+134    	; 0x1248 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE1A);
    11c2:	a9 e5       	ldi	r26, 0x59	; 89
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	8c 93       	st	X, r24
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS20 & CS21 & CS22.
		 */
		TCCR2 = (1<<FOC2) | ((Config_Ptr->timer_mode)<<WGM21) | ((Config_Ptr->timer_clock)<<CS20);
    11d2:	a5 e4       	ldi	r26, 0x45	; 69
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	86 81       	ldd	r24, Z+6	; 0x06
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	98 2f       	mov	r25, r24
    11ee:	90 68       	ori	r25, 0x80	; 128
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	85 81       	ldd	r24, Z+5	; 0x05
    11f6:	89 2b       	or	r24, r25
    11f8:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT2 */
		TCNT2 = Config_Ptr->timer_InitialValue;
    11fa:	a4 e4       	ldi	r26, 0x44	; 68
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1200:	fa 81       	ldd	r31, Y+2	; 0x02
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	86 81       	ldd	r24, Z+6	; 0x06
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	39 f4       	brne	.+14     	; 0x1220 <Timer_init+0x18e>
		{
			/* Set Output Compare Register – OCR2 */
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    1212:	a3 e4       	ldi	r26, 0x43	; 67
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e9 81       	ldd	r30, Y+1	; 0x01
    1218:	fa 81       	ldd	r31, Y+2	; 0x02
    121a:	82 81       	ldd	r24, Z+2	; 0x02
    121c:	93 81       	ldd	r25, Z+3	; 0x03
    121e:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1220:	e9 81       	ldd	r30, Y+1	; 0x01
    1222:	fa 81       	ldd	r31, Y+2	; 0x02
    1224:	86 81       	ldd	r24, Z+6	; 0x06
    1226:	88 23       	and	r24, r24
    1228:	41 f4       	brne	.+16     	; 0x123a <Timer_init+0x1a8>
		{
			TIMSK |= (1<<TOIE2);
    122a:	a9 e5       	ldi	r26, 0x59	; 89
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e9 e5       	ldi	r30, 0x59	; 89
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 64       	ori	r24, 0x40	; 64
    1236:	8c 93       	st	X, r24
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE2);
    123a:	a9 e5       	ldi	r26, 0x59	; 89
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e9 e5       	ldi	r30, 0x59	; 89
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 68       	ori	r24, 0x80	; 128
    1246:	8c 93       	st	X, r24
		}
		break;
	}
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <Timer_deInit>:
/*
 * Function to disable the Timer via Timer_ID.
 * timer_type: The ID of the timer to be disabled.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <Timer_deInit+0x6>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3b 83       	std	Y+3, r19	; 0x03
    126c:	2a 83       	std	Y+2, r18	; 0x02
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	11 f1       	breq	.+68     	; 0x12bc <Timer_deInit+0x66>
    1278:	2a 81       	ldd	r18, Y+2	; 0x02
    127a:	3b 81       	ldd	r19, Y+3	; 0x03
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	d1 f1       	breq	.+116    	; 0x12f6 <Timer_deInit+0xa0>
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	9b 81       	ldd	r25, Y+3	; 0x03
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	09 f0       	breq	.+2      	; 0x128c <Timer_deInit+0x36>
    128a:	4c c0       	rjmp	.+152    	; 0x1324 <Timer_deInit+0xce>
	case TIMER0_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR0 = 0;
    128c:	e3 e5       	ldi	r30, 0x53	; 83
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT0 */
		TCNT0 = 0;
    1292:	e2 e5       	ldi	r30, 0x52	; 82
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR0 */
		OCR0 = 0;
    1298:	ec e5       	ldi	r30, 0x5C	; 92
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE0);
    129e:	a9 e5       	ldi	r26, 0x59	; 89
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e9 e5       	ldi	r30, 0x59	; 89
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8e 7f       	andi	r24, 0xFE	; 254
    12aa:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    12ac:	a9 e5       	ldi	r26, 0x59	; 89
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e9 e5       	ldi	r30, 0x59	; 89
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8d 7f       	andi	r24, 0xFD	; 253
    12b8:	8c 93       	st	X, r24
    12ba:	34 c0       	rjmp	.+104    	; 0x1324 <Timer_deInit+0xce>
	case TIMER1_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR1A = 0;
    12bc:	ef e4       	ldi	r30, 0x4F	; 79
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
		TCCR1B = 0;
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	10 82       	st	Z, r1

		/* Reset Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = 0;
    12c8:	ec e4       	ldi	r30, 0x4C	; 76
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	11 82       	std	Z+1, r1	; 0x01
    12ce:	10 82       	st	Z, r1

		/* Reset Output Compare Register 1 A – OCR1AH and OCR1AL */
		OCR1A = 0;
    12d0:	ea e4       	ldi	r30, 0x4A	; 74
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	11 82       	std	Z+1, r1	; 0x01
    12d6:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE1);
    12d8:	a9 e5       	ldi	r26, 0x59	; 89
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e9 e5       	ldi	r30, 0x59	; 89
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8b 7f       	andi	r24, 0xFB	; 251
    12e4:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    12e6:	a9 e5       	ldi	r26, 0x59	; 89
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e9 e5       	ldi	r30, 0x59	; 89
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	8c 93       	st	X, r24
    12f4:	17 c0       	rjmp	.+46     	; 0x1324 <Timer_deInit+0xce>
	case TIMER2_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR2 = 0;
    12f6:	e5 e4       	ldi	r30, 0x45	; 69
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT2 */
		TCNT2 = 0;
    12fc:	e4 e4       	ldi	r30, 0x44	; 68
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR2 */
		OCR2 = 0;
    1302:	e3 e4       	ldi	r30, 0x43	; 67
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE2);
    1308:	a9 e5       	ldi	r26, 0x59	; 89
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e9 e5       	ldi	r30, 0x59	; 89
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7b       	andi	r24, 0xBF	; 191
    1314:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    1316:	a9 e5       	ldi	r26, 0x59	; 89
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e9 e5       	ldi	r30, 0x59	; 89
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 77       	andi	r24, 0x7F	; 127
    1322:	8c 93       	st	X, r24
		break;
	}
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <Timer_getTimerValue>:
 * Function to get the Timer Value.
 * timer_type: The ID of the timer to get the value from.
 * Returns: The current value of the timer.
 */
uint16 Timer_getTimerValue(Timer_ID_Type timer_type)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	27 97       	sbiw	r28, 0x07	; 7
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 83       	std	Y+5, r19	; 0x05
    134e:	2c 83       	std	Y+4, r18	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	89 f0       	breq	.+34     	; 0x137c <Timer_getTimerValue+0x4c>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	99 f0       	breq	.+38     	; 0x138a <Timer_getTimerValue+0x5a>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	b9 f4       	brne	.+46     	; 0x139a <Timer_getTimerValue+0x6a>
	{
	case TIMER0_ID:
		return TCNT0;
    136c:	e2 e5       	ldi	r30, 0x52	; 82
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3b 83       	std	Y+3, r19	; 0x03
    1378:	2a 83       	std	Y+2, r18	; 0x02
    137a:	10 c0       	rjmp	.+32     	; 0x139c <Timer_getTimerValue+0x6c>
		break;
	case TIMER1_ID:
		return TCNT1;
    137c:	ec e4       	ldi	r30, 0x4C	; 76
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	09 c0       	rjmp	.+18     	; 0x139c <Timer_getTimerValue+0x6c>
		break;
	case TIMER2_ID:
		return TCNT2;
    138a:	e4 e4       	ldi	r30, 0x44	; 68
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3b 83       	std	Y+3, r19	; 0x03
    1396:	2a 83       	std	Y+2, r18	; 0x02
    1398:	01 c0       	rjmp	.+2      	; 0x139c <Timer_getTimerValue+0x6c>
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <Timer_getTimerValue+0x74>
		break;
	}
}
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	9f 83       	std	Y+7, r25	; 0x07
    13a2:	8e 83       	std	Y+6, r24	; 0x06
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	27 96       	adiw	r28, 0x07	; 7
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Timer_setCallBack>:
 * Function to set the Call Back function address to the required Timer.
 * a_ptr: Pointer to the callback function.
 * timer_type: The ID of the timer to set the callback for.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_type)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <Timer_setCallBack+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <Timer_setCallBack+0x8>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3d 83       	std	Y+5, r19	; 0x05
    13d6:	2c 83       	std	Y+4, r18	; 0x04
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <Timer_setCallBack+0x48>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	91 f0       	breq	.+36     	; 0x1410 <Timer_setCallBack+0x56>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	a1 f4       	brne	.+40     	; 0x141c <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_timer0 = a_ptr;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	90 93 89 01 	sts	0x0189, r25
    13fc:	80 93 88 01 	sts	0x0188, r24
    1400:	0d c0       	rjmp	.+26     	; 0x141c <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_timer1 = a_ptr;
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	90 93 8b 01 	sts	0x018B, r25
    140a:	80 93 8a 01 	sts	0x018A, r24
    140e:	06 c0       	rjmp	.+12     	; 0x141c <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_timer2 = a_ptr;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	90 93 8d 01 	sts	0x018D, r25
    1418:	80 93 8c 01 	sts	0x018C, r24
		break;
	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <__vector_6>:

/*
 * ISR for Timer1 Capture Event
 */
ISR(TIMER1_CAPT_vect)
{
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1456:	80 91 8e 01 	lds	r24, 0x018E
    145a:	90 91 8f 01 	lds	r25, 0x018F
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	29 f0       	breq	.+10     	; 0x146c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1462:	e0 91 8e 01 	lds	r30, 0x018E
    1466:	f0 91 8f 01 	lds	r31, 0x018F
    146a:	09 95       	icall
	}
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	bf 91       	pop	r27
    1476:	af 91       	pop	r26
    1478:	9f 91       	pop	r25
    147a:	8f 91       	pop	r24
    147c:	7f 91       	pop	r23
    147e:	6f 91       	pop	r22
    1480:	5f 91       	pop	r21
    1482:	4f 91       	pop	r20
    1484:	3f 91       	pop	r19
    1486:	2f 91       	pop	r18
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <ICU_init>:
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 * Config_Ptr: Pointer to the ICU configuration structure.
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <ICU_init+0x6>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as input pin */
	DDRD &= ~(1<<PD6);
    14a0:	a1 e3       	ldi	r26, 0x31	; 49
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e1 e3       	ldi	r30, 0x31	; 49
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 7b       	andi	r24, 0xBF	; 191
    14ac:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    14ae:	ef e4       	ldi	r30, 0x4F	; 79
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8c e0       	ldi	r24, 0x0C	; 12
    14b4:	80 83       	st	Z, r24

	/*
	 * Insert the required clock value in the first three bits (CS10, CS11, and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ee e4       	ldi	r30, 0x4E	; 78
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	98 2f       	mov	r25, r24
    14c2:	98 7f       	andi	r25, 0xF8	; 248
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	80 81       	ld	r24, Z
    14ca:	89 2b       	or	r24, r25
    14cc:	8c 93       	st	X, r24

	/*
	 * Insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    14ce:	ae e4       	ldi	r26, 0x4E	; 78
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ee e4       	ldi	r30, 0x4E	; 78
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	28 2f       	mov	r18, r24
    14da:	2f 7b       	andi	r18, 0xBF	; 191
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	81 81       	ldd	r24, Z+1	; 0x01
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	00 24       	eor	r0, r0
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	07 94       	ror	r0
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	07 94       	ror	r0
    14f4:	98 2f       	mov	r25, r24
    14f6:	80 2d       	mov	r24, r0
    14f8:	82 2b       	or	r24, r18
    14fa:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    14fc:	ec e4       	ldi	r30, 0x4C	; 76
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	11 82       	std	Z+1, r1	; 0x01
    1502:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1504:	e6 e4       	ldi	r30, 0x46	; 70
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	11 82       	std	Z+1, r1	; 0x01
    150a:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    150c:	a9 e5       	ldi	r26, 0x59	; 89
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e9 e5       	ldi	r30, 0x59	; 89
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 62       	ori	r24, 0x20	; 32
    1518:	8c 93       	st	X, r24
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <ICU_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 * a_ptr: Pointer to the callback function.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <ICU_setCallBack+0x6>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	90 93 8f 01 	sts	0x018F, r25
    153a:	80 93 8e 01 	sts	0x018E, r24
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <ICU_setEdgeDetectionType>:
/*
 * Description: Function to set the required edge detection.
 * a_edgeType: The edge detection type to be set.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1554:	ae e4       	ldi	r26, 0x4E	; 78
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ee e4       	ldi	r30, 0x4E	; 78
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	2f 7b       	andi	r18, 0xBF	; 191
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	00 24       	eor	r0, r0
    156a:	96 95       	lsr	r25
    156c:	87 95       	ror	r24
    156e:	07 94       	ror	r0
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	07 94       	ror	r0
    1576:	98 2f       	mov	r25, r24
    1578:	80 2d       	mov	r24, r0
    157a:	82 2b       	or	r24, r18
    157c:	8c 93       	st	X, r24
}
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured.
 * Returns: The value stored at Input Capture Register ICR1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    158e:	e6 e4       	ldi	r30, 0x46	; 70
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO.
 */
void ICU_clearTimerValue(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    15a4:	ec e4       	ldi	r30, 0x4C	; 76
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	11 82       	std	Z+1, r1	; 0x01
    15aa:	10 82       	st	Z, r1
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver.
 */
void ICU_deInit(void)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    15ba:	ef e4       	ldi	r30, 0x4F	; 79
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	10 82       	st	Z, r1
	TCCR1B = 0;
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	10 82       	st	Z, r1
	TCNT1 = 0;
    15c6:	ec e4       	ldi	r30, 0x4C	; 76
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	11 82       	std	Z+1, r1	; 0x01
    15cc:	10 82       	st	Z, r1
	ICR1 = 0;
    15ce:	e6 e4       	ldi	r30, 0x46	; 70
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	11 82       	std	Z+1, r1	; 0x01
    15d4:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    15d6:	a9 e5       	ldi	r26, 0x59	; 89
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 e5       	ldi	r30, 0x59	; 89
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 7d       	andi	r24, 0xDF	; 223
    15e2:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    15e4:	10 92 8f 01 	sts	0x018F, r1
    15e8:	10 92 8e 01 	sts	0x018E, r1
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_setupPinDirection+0x6>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_setupPinDirection+0x8>
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	6a 83       	std	Y+2, r22	; 0x02
    1604:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
     * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
     * In this case the input is not valid port/pin number
     */
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	08 f0       	brcs	.+2      	; 0x160e <GPIO_setupPinDirection+0x1c>
    160c:	d5 c0       	rjmp	.+426    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	08 f0       	brcs	.+2      	; 0x1616 <GPIO_setupPinDirection+0x24>
    1614:	d1 c0       	rjmp	.+418    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Setup the pin direction as required */
        switch(port_num)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3d 83       	std	Y+5, r19	; 0x05
    161e:	2c 83       	std	Y+4, r18	; 0x04
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <GPIO_setupPinDirection+0x3a>
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <GPIO_setupPinDirection+0xc0>
    162c:	2c 81       	ldd	r18, Y+4	; 0x04
    162e:	3d 81       	ldd	r19, Y+5	; 0x05
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	2c f4       	brge	.+10     	; 0x1640 <GPIO_setupPinDirection+0x4e>
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	71 f0       	breq	.+28     	; 0x165a <GPIO_setupPinDirection+0x68>
    163e:	bc c0       	rjmp	.+376    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
    1640:	2c 81       	ldd	r18, Y+4	; 0x04
    1642:	3d 81       	ldd	r19, Y+5	; 0x05
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <GPIO_setupPinDirection+0x5a>
    164a:	5f c0       	rjmp	.+190    	; 0x170a <GPIO_setupPinDirection+0x118>
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <GPIO_setupPinDirection+0x66>
    1656:	85 c0       	rjmp	.+266    	; 0x1762 <GPIO_setupPinDirection+0x170>
    1658:	af c0       	rjmp	.+350    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
        {
        case PORTA_ID:
            if(direction == PIN_OUTPUT)
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	a1 f4       	brne	.+40     	; 0x1688 <GPIO_setupPinDirection+0x96>
            {
                SET_BIT(DDRA, pin_num);
    1660:	aa e3       	ldi	r26, 0x3A	; 58
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ea e3       	ldi	r30, 0x3A	; 58
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GPIO_setupPinDirection+0x8c>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <GPIO_setupPinDirection+0x88>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	98 c0       	rjmp	.+304    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRA, pin_num);
    1688:	aa e3       	ldi	r26, 0x3A	; 58
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ea e3       	ldi	r30, 0x3A	; 58
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_setupPinDirection+0xb4>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_setupPinDirection+0xb0>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	83 c0       	rjmp	.+262    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTB_ID:
            if(direction == PIN_OUTPUT)
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	a1 f4       	brne	.+40     	; 0x16e0 <GPIO_setupPinDirection+0xee>
            {
                SET_BIT(DDRB, pin_num);
    16b8:	a7 e3       	ldi	r26, 0x37	; 55
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e7 e3       	ldi	r30, 0x37	; 55
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <GPIO_setupPinDirection+0xe4>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <GPIO_setupPinDirection+0xe0>
    16da:	84 2b       	or	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	6c c0       	rjmp	.+216    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRB, pin_num);
    16e0:	a7 e3       	ldi	r26, 0x37	; 55
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e7 e3       	ldi	r30, 0x37	; 55
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <GPIO_setupPinDirection+0x10c>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <GPIO_setupPinDirection+0x108>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	57 c0       	rjmp	.+174    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTC_ID:
            if(direction == PIN_OUTPUT)
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	a1 f4       	brne	.+40     	; 0x1738 <GPIO_setupPinDirection+0x146>
            {
                SET_BIT(DDRC, pin_num);
    1710:	a4 e3       	ldi	r26, 0x34	; 52
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e4 e3       	ldi	r30, 0x34	; 52
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <GPIO_setupPinDirection+0x13c>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <GPIO_setupPinDirection+0x138>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	40 c0       	rjmp	.+128    	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRC, pin_num);
    1738:	a4 e3       	ldi	r26, 0x34	; 52
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e4 e3       	ldi	r30, 0x34	; 52
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <GPIO_setupPinDirection+0x164>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <GPIO_setupPinDirection+0x160>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	2b c0       	rjmp	.+86     	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTD_ID:
            if(direction == PIN_OUTPUT)
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	a1 f4       	brne	.+40     	; 0x1790 <GPIO_setupPinDirection+0x19e>
            {
                SET_BIT(DDRD, pin_num);
    1768:	a1 e3       	ldi	r26, 0x31	; 49
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e1 e3       	ldi	r30, 0x31	; 49
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_setupPinDirection+0x194>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_setupPinDirection+0x190>
    178a:	84 2b       	or	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRD, pin_num);
    1790:	a1 e3       	ldi	r26, 0x31	; 49
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e1 e3       	ldi	r30, 0x31	; 49
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_setupPinDirection+0x1bc>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_setupPinDirection+0x1b8>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <GPIO_writePin+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <GPIO_writePin+0x8>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	6a 83       	std	Y+2, r22	; 0x02
    17da:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
     * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
     * In this case the input is not valid port/pin number
     */
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <GPIO_writePin+0x1c>
    17e2:	d5 c0       	rjmp	.+426    	; 0x198e <GPIO_writePin+0x1c6>
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <GPIO_writePin+0x24>
    17ea:	d1 c0       	rjmp	.+418    	; 0x198e <GPIO_writePin+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Write the pin value as required */
        switch(port_num)
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3d 83       	std	Y+5, r19	; 0x05
    17f4:	2c 83       	std	Y+4, r18	; 0x04
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <GPIO_writePin+0x3a>
    1800:	43 c0       	rjmp	.+134    	; 0x1888 <GPIO_writePin+0xc0>
    1802:	2c 81       	ldd	r18, Y+4	; 0x04
    1804:	3d 81       	ldd	r19, Y+5	; 0x05
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	2c f4       	brge	.+10     	; 0x1816 <GPIO_writePin+0x4e>
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	71 f0       	breq	.+28     	; 0x1830 <GPIO_writePin+0x68>
    1814:	bc c0       	rjmp	.+376    	; 0x198e <GPIO_writePin+0x1c6>
    1816:	2c 81       	ldd	r18, Y+4	; 0x04
    1818:	3d 81       	ldd	r19, Y+5	; 0x05
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <GPIO_writePin+0x5a>
    1820:	5f c0       	rjmp	.+190    	; 0x18e0 <GPIO_writePin+0x118>
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <GPIO_writePin+0x66>
    182c:	85 c0       	rjmp	.+266    	; 0x1938 <GPIO_writePin+0x170>
    182e:	af c0       	rjmp	.+350    	; 0x198e <GPIO_writePin+0x1c6>
        {
        case PORTA_ID:
            if(value == LOGIC_HIGH)
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	a1 f4       	brne	.+40     	; 0x185e <GPIO_writePin+0x96>
            {
                SET_BIT(PORTA, pin_num);
    1836:	ab e3       	ldi	r26, 0x3B	; 59
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <GPIO_writePin+0x8c>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <GPIO_writePin+0x88>
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	98 c0       	rjmp	.+304    	; 0x198e <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTA, pin_num);
    185e:	ab e3       	ldi	r26, 0x3B	; 59
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	eb e3       	ldi	r30, 0x3B	; 59
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_writePin+0xb4>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_writePin+0xb0>
    1880:	80 95       	com	r24
    1882:	84 23       	and	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	83 c0       	rjmp	.+262    	; 0x198e <GPIO_writePin+0x1c6>
            }
            break;
        case PORTB_ID:
            if(value == LOGIC_HIGH)
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	a1 f4       	brne	.+40     	; 0x18b6 <GPIO_writePin+0xee>
            {
                SET_BIT(PORTB, pin_num);
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <GPIO_writePin+0xe4>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <GPIO_writePin+0xe0>
    18b0:	84 2b       	or	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	6c c0       	rjmp	.+216    	; 0x198e <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTB, pin_num);
    18b6:	a8 e3       	ldi	r26, 0x38	; 56
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e8 e3       	ldi	r30, 0x38	; 56
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <GPIO_writePin+0x10c>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <GPIO_writePin+0x108>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	57 c0       	rjmp	.+174    	; 0x198e <GPIO_writePin+0x1c6>
            }
            break;
        case PORTC_ID:
            if(value == LOGIC_HIGH)
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	a1 f4       	brne	.+40     	; 0x190e <GPIO_writePin+0x146>
            {
                SET_BIT(PORTC, pin_num);
    18e6:	a5 e3       	ldi	r26, 0x35	; 53
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <GPIO_writePin+0x13c>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <GPIO_writePin+0x138>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	40 c0       	rjmp	.+128    	; 0x198e <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTC, pin_num);
    190e:	a5 e3       	ldi	r26, 0x35	; 53
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e3       	ldi	r30, 0x35	; 53
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_writePin+0x164>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_writePin+0x160>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	2b c0       	rjmp	.+86     	; 0x198e <GPIO_writePin+0x1c6>
            }
            break;
        case PORTD_ID:
            if(value == LOGIC_HIGH)
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	a1 f4       	brne	.+40     	; 0x1966 <GPIO_writePin+0x19e>
            {
                SET_BIT(PORTD, pin_num);
    193e:	a2 e3       	ldi	r26, 0x32	; 50
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e2 e3       	ldi	r30, 0x32	; 50
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <GPIO_writePin+0x194>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <GPIO_writePin+0x190>
    1960:	84 2b       	or	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	14 c0       	rjmp	.+40     	; 0x198e <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTD, pin_num);
    1966:	a2 e3       	ldi	r26, 0x32	; 50
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e2 e3       	ldi	r30, 0x32	; 50
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_writePin+0x1bc>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <GPIO_writePin+0x1b8>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <GPIO_readPin+0x6>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <GPIO_readPin+0x8>
    19a6:	0f 92       	push	r0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    /*
     * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
       Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
     * In this case the input is not valid port/pin number
     */
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <GPIO_readPin+0x1c>
    19b8:	84 c0       	rjmp	.+264    	; 0x1ac2 <GPIO_readPin+0x124>
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <GPIO_readPin+0x24>
    19c0:	80 c0       	rjmp	.+256    	; 0x1ac2 <GPIO_readPin+0x124>
        /* Do Nothing */
    }
    else
    {
        /* Read the pin value as required */
        switch(port_num)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3d 83       	std	Y+5, r19	; 0x05
    19ca:	2c 83       	std	Y+4, r18	; 0x04
    19cc:	4c 81       	ldd	r20, Y+4	; 0x04
    19ce:	5d 81       	ldd	r21, Y+5	; 0x05
    19d0:	41 30       	cpi	r20, 0x01	; 1
    19d2:	51 05       	cpc	r21, r1
    19d4:	79 f1       	breq	.+94     	; 0x1a34 <GPIO_readPin+0x96>
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	9d 81       	ldd	r25, Y+5	; 0x05
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	91 05       	cpc	r25, r1
    19de:	34 f4       	brge	.+12     	; 0x19ec <GPIO_readPin+0x4e>
    19e0:	2c 81       	ldd	r18, Y+4	; 0x04
    19e2:	3d 81       	ldd	r19, Y+5	; 0x05
    19e4:	21 15       	cp	r18, r1
    19e6:	31 05       	cpc	r19, r1
    19e8:	69 f0       	breq	.+26     	; 0x1a04 <GPIO_readPin+0x66>
    19ea:	6b c0       	rjmp	.+214    	; 0x1ac2 <GPIO_readPin+0x124>
    19ec:	4c 81       	ldd	r20, Y+4	; 0x04
    19ee:	5d 81       	ldd	r21, Y+5	; 0x05
    19f0:	42 30       	cpi	r20, 0x02	; 2
    19f2:	51 05       	cpc	r21, r1
    19f4:	b9 f1       	breq	.+110    	; 0x1a64 <GPIO_readPin+0xc6>
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <GPIO_readPin+0x64>
    1a00:	49 c0       	rjmp	.+146    	; 0x1a94 <GPIO_readPin+0xf6>
    1a02:	5f c0       	rjmp	.+190    	; 0x1ac2 <GPIO_readPin+0x124>
        {
        case PORTA_ID:
            if(BIT_IS_SET(PINA, pin_num))
    1a04:	e9 e3       	ldi	r30, 0x39	; 57
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <GPIO_readPin+0x7e>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <GPIO_readPin+0x7a>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	90 70       	andi	r25, 0x00	; 0
    1a26:	88 23       	and	r24, r24
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <GPIO_readPin+0x92>
            {
                pin_value = LOGIC_HIGH;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	49 c0       	rjmp	.+146    	; 0x1ac2 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1a30:	19 82       	std	Y+1, r1	; 0x01
    1a32:	47 c0       	rjmp	.+142    	; 0x1ac2 <GPIO_readPin+0x124>
            }
            break;
        case PORTB_ID:
            if(BIT_IS_SET(PINB, pin_num))
    1a34:	e6 e3       	ldi	r30, 0x36	; 54
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a9 01       	movw	r20, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_readPin+0xae>
    1a48:	55 95       	asr	r21
    1a4a:	47 95       	ror	r20
    1a4c:	8a 95       	dec	r24
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_readPin+0xaa>
    1a50:	ca 01       	movw	r24, r20
    1a52:	81 70       	andi	r24, 0x01	; 1
    1a54:	90 70       	andi	r25, 0x00	; 0
    1a56:	88 23       	and	r24, r24
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <GPIO_readPin+0xc2>
            {
                pin_value = LOGIC_HIGH;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	31 c0       	rjmp	.+98     	; 0x1ac2 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1a60:	19 82       	std	Y+1, r1	; 0x01
    1a62:	2f c0       	rjmp	.+94     	; 0x1ac2 <GPIO_readPin+0x124>
            }
            break;
        case PORTC_ID:
            if(BIT_IS_SET(PINC, pin_num))
    1a64:	e3 e3       	ldi	r30, 0x33	; 51
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_readPin+0xde>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <GPIO_readPin+0xda>
    1a80:	ca 01       	movw	r24, r20
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	90 70       	andi	r25, 0x00	; 0
    1a86:	88 23       	and	r24, r24
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <GPIO_readPin+0xf2>
            {
                pin_value = LOGIC_HIGH;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	19 c0       	rjmp	.+50     	; 0x1ac2 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	17 c0       	rjmp	.+46     	; 0x1ac2 <GPIO_readPin+0x124>
            }
            break;
        case PORTD_ID:
            if(BIT_IS_SET(PIND, pin_num))
    1a94:	e0 e3       	ldi	r30, 0x30	; 48
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <GPIO_readPin+0x10e>
    1aa8:	55 95       	asr	r21
    1aaa:	47 95       	ror	r20
    1aac:	8a 95       	dec	r24
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <GPIO_readPin+0x10a>
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	88 23       	and	r24, r24
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <GPIO_readPin+0x122>
            {
                pin_value = LOGIC_HIGH;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1ac0:	19 82       	std	Y+1, r1	; 0x01
            }
            break;
        }
    }

    return pin_value;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <GPIO_setupPortDirection+0x6>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <GPIO_setupPortDirection+0x8>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input number is greater than NUM_OF_PORTS value.
     * In this case the input is not valid port number
     */
    if(port_num >= NUM_OF_PORTS)
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	84 30       	cpi	r24, 0x04	; 4
    1ae8:	90 f5       	brcc	.+100    	; 0x1b4e <GPIO_setupPortDirection+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Setup the port direction as required */
        switch(port_num)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3c 83       	std	Y+4, r19	; 0x04
    1af2:	2b 83       	std	Y+3, r18	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	d1 f0       	breq	.+52     	; 0x1b32 <GPIO_setupPortDirection+0x5e>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <GPIO_setupPortDirection+0x3e>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	61 f0       	breq	.+24     	; 0x1b28 <GPIO_setupPortDirection+0x54>
    1b10:	1e c0       	rjmp	.+60     	; 0x1b4e <GPIO_setupPortDirection+0x7a>
    1b12:	2b 81       	ldd	r18, Y+3	; 0x03
    1b14:	3c 81       	ldd	r19, Y+4	; 0x04
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	81 f0       	breq	.+32     	; 0x1b3c <GPIO_setupPortDirection+0x68>
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	91 05       	cpc	r25, r1
    1b24:	81 f0       	breq	.+32     	; 0x1b46 <GPIO_setupPortDirection+0x72>
    1b26:	13 c0       	rjmp	.+38     	; 0x1b4e <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;
    1b28:	ea e3       	ldi	r30, 0x3A	; 58
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	80 83       	st	Z, r24
    1b30:	0e c0       	rjmp	.+28     	; 0x1b4e <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;
    1b32:	e7 e3       	ldi	r30, 0x37	; 55
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	80 83       	st	Z, r24
    1b3a:	09 c0       	rjmp	.+18     	; 0x1b4e <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;
    1b3c:	e4 e3       	ldi	r30, 0x34	; 52
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	80 83       	st	Z, r24
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;
    1b46:	e1 e3       	ldi	r30, 0x31	; 49
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	80 83       	st	Z, r24
            break;
        }
    }
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <GPIO_writePort+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <GPIO_writePort+0x8>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input number is greater than NUM_OF_PORTS value.
     * In this case the input is not valid port number
     */
    if(port_num >= NUM_OF_PORTS)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	84 30       	cpi	r24, 0x04	; 4
    1b70:	90 f5       	brcc	.+100    	; 0x1bd6 <GPIO_writePort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Write the port value as required */
        switch(port_num)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3c 83       	std	Y+4, r19	; 0x04
    1b7a:	2b 83       	std	Y+3, r18	; 0x03
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	d1 f0       	breq	.+52     	; 0x1bba <GPIO_writePort+0x5e>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <GPIO_writePort+0x3e>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	61 f0       	breq	.+24     	; 0x1bb0 <GPIO_writePort+0x54>
    1b98:	1e c0       	rjmp	.+60     	; 0x1bd6 <GPIO_writePort+0x7a>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <GPIO_writePort+0x68>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	81 f0       	breq	.+32     	; 0x1bce <GPIO_writePort+0x72>
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	0e c0       	rjmp	.+28     	; 0x1bd6 <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;
    1bba:	e8 e3       	ldi	r30, 0x38	; 56
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	80 83       	st	Z, r24
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;
    1bce:	e2 e3       	ldi	r30, 0x32	; 50
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	80 83       	st	Z, r24
            break;
        }
    }
}
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <GPIO_readPort+0x6>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <GPIO_readPort+0x8>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
    1bf2:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input number is greater than NUM_OF_PORTS value.
     * In this case the input is not valid port number
     */
    if(port_num >= NUM_OF_PORTS)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	90 f5       	brcc	.+100    	; 0x1c5e <GPIO_readPort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Read the port value as required */
        switch(port_num)
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	3c 83       	std	Y+4, r19	; 0x04
    1c02:	2b 83       	std	Y+3, r18	; 0x03
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	d1 f0       	breq	.+52     	; 0x1c42 <GPIO_readPort+0x5e>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <GPIO_readPort+0x3e>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	61 f0       	breq	.+24     	; 0x1c38 <GPIO_readPort+0x54>
    1c20:	1e c0       	rjmp	.+60     	; 0x1c5e <GPIO_readPort+0x7a>
    1c22:	2b 81       	ldd	r18, Y+3	; 0x03
    1c24:	3c 81       	ldd	r19, Y+4	; 0x04
    1c26:	22 30       	cpi	r18, 0x02	; 2
    1c28:	31 05       	cpc	r19, r1
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <GPIO_readPort+0x68>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	91 05       	cpc	r25, r1
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <GPIO_readPort+0x72>
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            value = PINA;
    1c38:	e9 e3       	ldi	r30, 0x39	; 57
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	0e c0       	rjmp	.+28     	; 0x1c5e <GPIO_readPort+0x7a>
            break;
        case PORTB_ID:
            value = PINB;
    1c42:	e6 e3       	ldi	r30, 0x36	; 54
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <GPIO_readPort+0x7a>
            break;
        case PORTC_ID:
            value = PINC;
    1c4c:	e3 e3       	ldi	r30, 0x33	; 51
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <GPIO_readPort+0x7a>
            break;
        case PORTD_ID:
            value = PIND;
    1c56:	e0 e3       	ldi	r30, 0x30	; 48
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return value;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <__vector_1>:
/*
 * ISR for INT0.
 * This ISR is called when an interrupt is triggered on INT0.
 */
ISR(INT0_vect)
{
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr_INT0 != NULL_PTR)
    1c98:	80 91 90 01 	lds	r24, 0x0190
    1c9c:	90 91 91 01 	lds	r25, 0x0191
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	29 f0       	breq	.+10     	; 0x1cae <__vector_1+0x40>
    {
        /* Call the Call Back function in the application after the edge is detected */
        (*g_callBackPtr_INT0)();
    1ca4:	e0 91 90 01 	lds	r30, 0x0190
    1ca8:	f0 91 91 01 	lds	r31, 0x0191
    1cac:	09 95       	icall
    }
}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	ff 91       	pop	r31
    1cb4:	ef 91       	pop	r30
    1cb6:	bf 91       	pop	r27
    1cb8:	af 91       	pop	r26
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	7f 91       	pop	r23
    1cc0:	6f 91       	pop	r22
    1cc2:	5f 91       	pop	r21
    1cc4:	4f 91       	pop	r20
    1cc6:	3f 91       	pop	r19
    1cc8:	2f 91       	pop	r18
    1cca:	0f 90       	pop	r0
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	0f 90       	pop	r0
    1cd0:	1f 90       	pop	r1
    1cd2:	18 95       	reti

00001cd4 <__vector_2>:
/*
 * ISR for INT1.
 * This ISR is called when an interrupt is triggered on INT1.
 */
ISR(INT1_vect)
{
    1cd4:	1f 92       	push	r1
    1cd6:	0f 92       	push	r0
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	0f 92       	push	r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	2f 93       	push	r18
    1ce0:	3f 93       	push	r19
    1ce2:	4f 93       	push	r20
    1ce4:	5f 93       	push	r21
    1ce6:	6f 93       	push	r22
    1ce8:	7f 93       	push	r23
    1cea:	8f 93       	push	r24
    1cec:	9f 93       	push	r25
    1cee:	af 93       	push	r26
    1cf0:	bf 93       	push	r27
    1cf2:	ef 93       	push	r30
    1cf4:	ff 93       	push	r31
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr_INT1 != NULL_PTR)
    1cfe:	80 91 92 01 	lds	r24, 0x0192
    1d02:	90 91 93 01 	lds	r25, 0x0193
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	29 f0       	breq	.+10     	; 0x1d14 <__vector_2+0x40>
    {
        /* Call the Call Back function in the application after the edge is detected */
        (*g_callBackPtr_INT1)();
    1d0a:	e0 91 92 01 	lds	r30, 0x0192
    1d0e:	f0 91 93 01 	lds	r31, 0x0193
    1d12:	09 95       	icall
    }
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	bf 91       	pop	r27
    1d1e:	af 91       	pop	r26
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	7f 91       	pop	r23
    1d26:	6f 91       	pop	r22
    1d28:	5f 91       	pop	r21
    1d2a:	4f 91       	pop	r20
    1d2c:	3f 91       	pop	r19
    1d2e:	2f 91       	pop	r18
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <__vector_3>:
/*
 * ISR for INT2.
 * This ISR is called when an interrupt is triggered on INT2.
 */
ISR(INT2_vect)
{
    1d3a:	1f 92       	push	r1
    1d3c:	0f 92       	push	r0
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	0f 92       	push	r0
    1d42:	11 24       	eor	r1, r1
    1d44:	2f 93       	push	r18
    1d46:	3f 93       	push	r19
    1d48:	4f 93       	push	r20
    1d4a:	5f 93       	push	r21
    1d4c:	6f 93       	push	r22
    1d4e:	7f 93       	push	r23
    1d50:	8f 93       	push	r24
    1d52:	9f 93       	push	r25
    1d54:	af 93       	push	r26
    1d56:	bf 93       	push	r27
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr_INT2 != NULL_PTR)
    1d64:	80 91 94 01 	lds	r24, 0x0194
    1d68:	90 91 95 01 	lds	r25, 0x0195
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <__vector_3+0x40>
    {
        /* Call the Call Back function in the application after the edge is detected */
        (*g_callBackPtr_INT2)();
    1d70:	e0 91 94 01 	lds	r30, 0x0194
    1d74:	f0 91 95 01 	lds	r31, 0x0195
    1d78:	09 95       	icall
    }
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	ff 91       	pop	r31
    1d80:	ef 91       	pop	r30
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti

00001da0 <external_interrupt_init>:
 * Function to initialize the external interrupt.
 * This function configures the interrupt sense control and enables the interrupt.
 * a_ptr: Pointer to the external interrupt configuration structure.
 */
void external_interrupt_init(const EXT_INT_ConfigType * a_ptr)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <external_interrupt_init+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <external_interrupt_init+0x8>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    switch(a_ptr->INT_ID)
    1db0:	e9 81       	ldd	r30, Y+1	; 0x01
    1db2:	fa 81       	ldd	r31, Y+2	; 0x02
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	3c 83       	std	Y+4, r19	; 0x04
    1dbc:	2b 83       	std	Y+3, r18	; 0x03
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	31 f1       	breq	.+76     	; 0x1e14 <external_interrupt_init+0x74>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <external_interrupt_init+0x34>
    1dd2:	41 c0       	rjmp	.+130    	; 0x1e56 <external_interrupt_init+0xb6>
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	09 f0       	breq	.+2      	; 0x1dde <external_interrupt_init+0x3e>
    1ddc:	5e c0       	rjmp	.+188    	; 0x1e9a <external_interrupt_init+0xfa>
    {
    case INT_0:
    	DDRD &= (~(1<<PD2));               /* Configure INT0/PD2 as input pin */
    1dde:	a1 e3       	ldi	r26, 0x31	; 49
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e1 e3       	ldi	r30, 0x31	; 49
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8b 7f       	andi	r24, 0xFB	; 251
    1dea:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT0.
         * Falling -> ISC00 = 0, ISC01 = 1
         * Rising -> ISC00 = 1, ISC01 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC00 | 1 << ISC01)) | ((a_ptr->INT_Sense) << ISC00);
    1dec:	a5 e5       	ldi	r26, 0x55	; 85
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e5       	ldi	r30, 0x55	; 85
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	98 2f       	mov	r25, r24
    1df8:	9c 7f       	andi	r25, 0xFC	; 252
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	81 81       	ldd	r24, Z+1	; 0x01
    1e00:	89 2b       	or	r24, r25
    1e02:	8c 93       	st	X, r24

        /* Enable external interrupt INT0. */
        GICR |= (1 << INT0);
    1e04:	ab e5       	ldi	r26, 0x5B	; 91
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	eb e5       	ldi	r30, 0x5B	; 91
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 64       	ori	r24, 0x40	; 64
    1e10:	8c 93       	st	X, r24
    1e12:	43 c0       	rjmp	.+134    	; 0x1e9a <external_interrupt_init+0xfa>
        break;

    case INT_1:
    	DDRD &= (~(1<<PD3));               /* Configure INT1/PD3 as input pin */
    1e14:	a1 e3       	ldi	r26, 0x31	; 49
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e1 e3       	ldi	r30, 0x31	; 49
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	87 7f       	andi	r24, 0xF7	; 247
    1e20:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT1.
         * Falling -> ISC10 = 0, ISC11 = 1
         * Rising -> ISC10 = 1, ISC11 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC10 | 1 << ISC11)) | ((a_ptr->INT_Sense) << ISC10);
    1e22:	a5 e5       	ldi	r26, 0x55	; 85
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e5       	ldi	r30, 0x55	; 85
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	23 7f       	andi	r18, 0xF3	; 243
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	81 81       	ldd	r24, Z+1	; 0x01
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	82 2b       	or	r24, r18
    1e44:	8c 93       	st	X, r24

        /* Enable external interrupt INT1. */
        GICR |= (1 << INT1);
    1e46:	ab e5       	ldi	r26, 0x5B	; 91
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	eb e5       	ldi	r30, 0x5B	; 91
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	8c 93       	st	X, r24
    1e54:	22 c0       	rjmp	.+68     	; 0x1e9a <external_interrupt_init+0xfa>
        break;

    case INT_2:
    	DDRB &= (~(1<<PB2));   			/* Configure INT2/PB2 as input pin */
    1e56:	a7 e3       	ldi	r26, 0x37	; 55
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e7 e3       	ldi	r30, 0x37	; 55
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8b 7f       	andi	r24, 0xFB	; 251
    1e62:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT2.
         * Falling -> ISC2 = 0
         * Rising -> ISC2 = 1
         */
        if (a_ptr->INT_Sense == RISING_EDGE_INT2) {
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	41 f4       	brne	.+16     	; 0x1e7e <external_interrupt_init+0xde>
            MCUCSR |= (1 << ISC2);
    1e6e:	a4 e5       	ldi	r26, 0x54	; 84
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e4 e5       	ldi	r30, 0x54	; 84
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	80 64       	ori	r24, 0x40	; 64
    1e7a:	8c 93       	st	X, r24
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <external_interrupt_init+0xec>
        } else {
            MCUCSR &= ~(1 << ISC2);
    1e7e:	a4 e5       	ldi	r26, 0x54	; 84
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e4 e5       	ldi	r30, 0x54	; 84
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7b       	andi	r24, 0xBF	; 191
    1e8a:	8c 93       	st	X, r24
        }

        /* Enable external interrupt INT2. */
        GICR |= (1 << INT2);
    1e8c:	ab e5       	ldi	r26, 0x5B	; 91
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	eb e5       	ldi	r30, 0x5B	; 91
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 62       	ori	r24, 0x20	; 32
    1e98:	8c 93       	st	X, r24
        break;
    }
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <external_interrupt_deinit>:
 * Function to disable external interrupt via INT_ID.
 * This function disables the specified external interrupt.
 * INT_ID: The ID of the external interrupt to be disabled.
 */
void external_interrupt_deinit(EXT_INT_Type INT_ID)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <external_interrupt_deinit+0x6>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    switch(INT_ID)
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3b 83       	std	Y+3, r19	; 0x03
    1ebe:	2a 83       	std	Y+2, r18	; 0x02
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	c1 f0       	breq	.+48     	; 0x1efa <external_interrupt_deinit+0x52>
    1eca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ecc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	11 f1       	breq	.+68     	; 0x1f18 <external_interrupt_deinit+0x70>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	61 f5       	brne	.+88     	; 0x1f34 <external_interrupt_deinit+0x8c>
    {
    case INT_0:
        /* Clear the sense control bits for INT0. */
        MCUCR &= ~(1 << ISC00) & ~(1 << ISC01);
    1edc:	a5 e5       	ldi	r26, 0x55	; 85
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e5       	ldi	r30, 0x55	; 85
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8c 7f       	andi	r24, 0xFC	; 252
    1ee8:	8c 93       	st	X, r24

        /* Disable external interrupt INT0. */
        GICR &= ~(1 << INT0);
    1eea:	ab e5       	ldi	r26, 0x5B	; 91
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e5       	ldi	r30, 0x5B	; 91
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 7b       	andi	r24, 0xBF	; 191
    1ef6:	8c 93       	st	X, r24
    1ef8:	1d c0       	rjmp	.+58     	; 0x1f34 <external_interrupt_deinit+0x8c>
        break;

    case INT_1:
        /* Clear the sense control bits for INT1. */
        MCUCR &= ~(1 << ISC10) & ~(1 << ISC11);
    1efa:	a5 e5       	ldi	r26, 0x55	; 85
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e5 e5       	ldi	r30, 0x55	; 85
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	83 7f       	andi	r24, 0xF3	; 243
    1f06:	8c 93       	st	X, r24

        /* Disable external interrupt INT1. */
        GICR &= ~(1 << INT1);
    1f08:	ab e5       	ldi	r26, 0x5B	; 91
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	eb e5       	ldi	r30, 0x5B	; 91
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8f 77       	andi	r24, 0x7F	; 127
    1f14:	8c 93       	st	X, r24
    1f16:	0e c0       	rjmp	.+28     	; 0x1f34 <external_interrupt_deinit+0x8c>
        break;

    case INT_2:
        /* Clear the sense control bit for INT2. */
        MCUCSR &= ~(1 << ISC2);
    1f18:	a4 e5       	ldi	r26, 0x54	; 84
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e4 e5       	ldi	r30, 0x54	; 84
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8f 7b       	andi	r24, 0xBF	; 191
    1f24:	8c 93       	st	X, r24

        /* Disable external interrupt INT2. */
        GICR &= ~(1 << INT2);
    1f26:	ab e5       	ldi	r26, 0x5B	; 91
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e5       	ldi	r30, 0x5B	; 91
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8f 7d       	andi	r24, 0xDF	; 223
    1f32:	8c 93       	st	X, r24
        break;
    }
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <external_interrupt_setCallBack>:
 * This function assigns the callback function to be called when the specified interrupt occurs.
 * a_ptr: Pointer to the callback function.
 * INT_ID: The ID of the external interrupt to set the callback for.
 */
void external_interrupt_setCallBack(void(*a_ptr)(void), EXT_INT_Type INT_ID)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <external_interrupt_setCallBack+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <external_interrupt_setCallBack+0x8>
    1f48:	0f 92       	push	r0
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	6b 83       	std	Y+3, r22	; 0x03
    switch(INT_ID)
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	3d 83       	std	Y+5, r19	; 0x05
    1f5c:	2c 83       	std	Y+4, r18	; 0x04
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	91 05       	cpc	r25, r1
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <external_interrupt_setCallBack+0x48>
    1f68:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6c:	22 30       	cpi	r18, 0x02	; 2
    1f6e:	31 05       	cpc	r19, r1
    1f70:	91 f0       	breq	.+36     	; 0x1f96 <external_interrupt_setCallBack+0x56>
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	9d 81       	ldd	r25, Y+5	; 0x05
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	a1 f4       	brne	.+40     	; 0x1fa2 <external_interrupt_setCallBack+0x62>
    {
    case INT_0:
        g_callBackPtr_INT0 = a_ptr;
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	90 93 91 01 	sts	0x0191, r25
    1f82:	80 93 90 01 	sts	0x0190, r24
    1f86:	0d c0       	rjmp	.+26     	; 0x1fa2 <external_interrupt_setCallBack+0x62>
        break;
    case INT_1:
        g_callBackPtr_INT1 = a_ptr;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	90 93 93 01 	sts	0x0193, r25
    1f90:	80 93 92 01 	sts	0x0192, r24
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <external_interrupt_setCallBack+0x62>
        break;
    case INT_2:
        g_callBackPtr_INT2 = a_ptr;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	90 93 95 01 	sts	0x0195, r25
    1f9e:	80 93 94 01 	sts	0x0194, r24
        break;
    }
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <ADC_init>:
/*
 * Description :
 * Function responsible for initializing the ADC driver.
 */
void ADC_init(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 11 to choose to connect Internal 2.56V Voltage Reference with external capacitor at AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (1<<REFS0) | (1<<REFS1);
    1fba:	e7 e2       	ldi	r30, 0x27	; 39
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 ec       	ldi	r24, 0xC0	; 192
    1fc0:	80 83       	st	Z, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1fc2:	e6 e2       	ldi	r30, 0x26	; 38
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	87 e8       	ldi	r24, 0x87	; 135
    1fc8:	80 83       	st	Z, r24
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <ADC_readChannel>:
 * and converting it to digital using the ADC driver.
 * channel_num: The ADC channel number to read from.
 * Returns: The digital value corresponding to the analog input.
 */
uint16 ADC_readChannel(uint8 channel_num)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; 		/* Input channel number must be from 0 to 7 */
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	87 70       	andi	r24, 0x07	; 7
    1fe0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; 				/* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before setting the required channel */
    1fe2:	a7 e2       	ldi	r26, 0x27	; 39
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e7 e2       	ldi	r30, 0x27	; 39
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	80 7e       	andi	r24, 0xE0	; 224
    1fee:	8c 93       	st	X, r24
	ADMUX |= channel_num; 		/* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1ff0:	a7 e2       	ldi	r26, 0x27	; 39
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e7 e2       	ldi	r30, 0x27	; 39
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	90 81       	ld	r25, Z
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	89 2b       	or	r24, r25
    1ffe:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); 		/* Start conversion by writing '1' to ADSC */
    2000:	a6 e2       	ldi	r26, 0x26	; 38
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e6 e2       	ldi	r30, 0x26	; 38
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 64       	ori	r24, 0x40	; 64
    200c:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA, ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    200e:	e6 e2       	ldi	r30, 0x26	; 38
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	80 71       	andi	r24, 0x10	; 16
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	b9 f3       	breq	.-18     	; 0x200e <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA, ADIF); 		/* Clear ADIF by writing '1' to it */
    2020:	a6 e2       	ldi	r26, 0x26	; 38
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e2       	ldi	r30, 0x26	; 38
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	80 61       	ori	r24, 0x10	; 16
    202c:	8c 93       	st	X, r24
	return ADC; 				/* Read the digital value from the data register */
    202e:	e4 e2       	ldi	r30, 0x24	; 36
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
}
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <Ultrasonic_init>:
 * Description:
 * Initialize the Ultrasonic sensor.
 * use: Specifies whether to use ICU or External Interrupt.
 */
void Ultrasonic_init(Ultrasonic_Use use)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <Ultrasonic_init+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <Ultrasonic_init+0x8>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	8d 83       	std	Y+5, r24	; 0x05
	if(use == ICU)
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	88 23       	and	r24, r24
    2052:	69 f4       	brne	.+26     	; 0x206e <Ultrasonic_init+0x30>
		/*
		 * Set up ICU Configuration.
		 * Initialize ICU.
		 * Set call back function.
		 */
		ICU_ConfigType ICU_Configurations = {ICU_F_CPU_8, RAISING};
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	8a 83       	std	Y+2, r24	; 0x02
		ICU_setCallBack(Ultrasonic_edgeProcessing);
    205c:	8c e5       	ldi	r24, 0x5C	; 92
    205e:	92 e1       	ldi	r25, 0x12	; 18
    2060:	0e 94 92 0a 	call	0x1524	; 0x1524 <ICU_setCallBack>
		ICU_init(&ICU_Configurations);
    2064:	ce 01       	movw	r24, r28
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	0e 94 49 0a 	call	0x1492	; 0x1492 <ICU_init>
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <Ultrasonic_init+0x4a>
	}
	else
	{
		EXT_INT_ConfigType EXT_INT_Configrations = {INT_2, RISING_EDGE_INT2}; // Configure INT2 for rising edge detection
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	8b 83       	std	Y+3, r24	; 0x03
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	8c 83       	std	Y+4, r24	; 0x04
		external_interrupt_setCallBack(Ultrasonic_edgeProcessing_EXT_INT, INT_2); // Set the callback function for INT2
    2076:	83 e8       	ldi	r24, 0x83	; 131
    2078:	92 e1       	ldi	r25, 0x12	; 18
    207a:	62 e0       	ldi	r22, 0x02	; 2
    207c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <external_interrupt_setCallBack>
		external_interrupt_init(&EXT_INT_Configrations); // Initialize INT2 with the specified configuration
    2080:	ce 01       	movw	r24, r28
    2082:	03 96       	adiw	r24, 0x03	; 3
    2084:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <external_interrupt_init>
	}
	/* Set up pin direction for trigger pin as output. */
	GPIO_setupPinDirection(TRIGGER_PORT_CONNECTION1, TRIGGER_PIN1, PIN_OUTPUT);
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	67 e0       	ldi	r22, 0x07	; 7
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGER_PORT_CONNECTION2, TRIGGER_PIN2, PIN_OUTPUT);
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <timer0_setCallBack>:

/* Timer0 overflow callback function */
static void timer0_setCallBack(void)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	timer_overflow_count++; // Increment overflow count on each timer overflow
    20b4:	80 91 9a 01 	lds	r24, 0x019A
    20b8:	8f 5f       	subi	r24, 0xFF	; 255
    20ba:	80 93 9a 01 	sts	0x019A, r24
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <Ultrasonic_Trigger>:
 * Description:
 * Send the trigger pulse to the ultrasonic sensor.
 * use: Specifies whether to use ICU or External Interrupt.
 */
static void Ultrasonic_Trigger(Ultrasonic_Use use)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	e1 97       	sbiw	r28, 0x31	; 49
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	89 ab       	std	Y+49, r24	; 0x31
	if(use == ICU)
    20da:	89 a9       	ldd	r24, Y+49	; 0x31
    20dc:	88 23       	and	r24, r24
    20de:	09 f0       	breq	.+2      	; 0x20e2 <Ultrasonic_Trigger+0x1e>
    20e0:	c9 c0       	rjmp	.+402    	; 0x2274 <Ultrasonic_Trigger+0x1b0>
	{
		GPIO_writePin(TRIGGER_PORT_CONNECTION1, TRIGGER_PIN1, LOGIC_HIGH);
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	67 e0       	ldi	r22, 0x07	; 7
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e2       	ldi	r26, 0x20	; 32
    20f2:	b1 e4       	ldi	r27, 0x41	; 65
    20f4:	8d a7       	std	Y+45, r24	; 0x2d
    20f6:	9e a7       	std	Y+46, r25	; 0x2e
    20f8:	af a7       	std	Y+47, r26	; 0x2f
    20fa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    20fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2100:	8f a5       	ldd	r24, Y+47	; 0x2f
    2102:	98 a9       	ldd	r25, Y+48	; 0x30
    2104:	2b ea       	ldi	r18, 0xAB	; 171
    2106:	3a ea       	ldi	r19, 0xAA	; 170
    2108:	4a ea       	ldi	r20, 0xAA	; 170
    210a:	50 e4       	ldi	r21, 0x40	; 64
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	89 a7       	std	Y+41, r24	; 0x29
    2116:	9a a7       	std	Y+42, r25	; 0x2a
    2118:	ab a7       	std	Y+43, r26	; 0x2b
    211a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    211c:	69 a5       	ldd	r22, Y+41	; 0x29
    211e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2120:	8b a5       	ldd	r24, Y+43	; 0x2b
    2122:	9c a5       	ldd	r25, Y+44	; 0x2c
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	1c f4       	brge	.+6      	; 0x213a <Ultrasonic_Trigger+0x76>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	88 a7       	std	Y+40, r24	; 0x28
    2138:	91 c0       	rjmp	.+290    	; 0x225c <Ultrasonic_Trigger+0x198>
	else if (__tmp > 255)
    213a:	69 a5       	ldd	r22, Y+41	; 0x29
    213c:	7a a5       	ldd	r23, Y+42	; 0x2a
    213e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2140:	9c a5       	ldd	r25, Y+44	; 0x2c
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	53 e4       	ldi	r21, 0x43	; 67
    214a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	0c f0       	brlt	.+2      	; 0x2154 <Ultrasonic_Trigger+0x90>
    2152:	7b c0       	rjmp	.+246    	; 0x224a <Ultrasonic_Trigger+0x186>
	{
		_delay_ms(__us / 1000.0);
    2154:	6d a5       	ldd	r22, Y+45	; 0x2d
    2156:	7e a5       	ldd	r23, Y+46	; 0x2e
    2158:	8f a5       	ldd	r24, Y+47	; 0x2f
    215a:	98 a9       	ldd	r25, Y+48	; 0x30
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a e7       	ldi	r20, 0x7A	; 122
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8c a3       	std	Y+36, r24	; 0x24
    216e:	9d a3       	std	Y+37, r25	; 0x25
    2170:	ae a3       	std	Y+38, r26	; 0x26
    2172:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	6c a1       	ldd	r22, Y+36	; 0x24
    2176:	7d a1       	ldd	r23, Y+37	; 0x25
    2178:	8e a1       	ldd	r24, Y+38	; 0x26
    217a:	9f a1       	ldd	r25, Y+39	; 0x27
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a e7       	ldi	r20, 0x7A	; 122
    2182:	55 e4       	ldi	r21, 0x45	; 69
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	88 a3       	std	Y+32, r24	; 0x20
    218e:	99 a3       	std	Y+33, r25	; 0x21
    2190:	aa a3       	std	Y+34, r26	; 0x22
    2192:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2194:	68 a1       	ldd	r22, Y+32	; 0x20
    2196:	79 a1       	ldd	r23, Y+33	; 0x21
    2198:	8a a1       	ldd	r24, Y+34	; 0x22
    219a:	9b a1       	ldd	r25, Y+35	; 0x23
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <Ultrasonic_Trigger+0xf2>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9f 8f       	std	Y+31, r25	; 0x1f
    21b2:	8e 8f       	std	Y+30, r24	; 0x1e
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <Ultrasonic_Trigger+0x170>
	else if (__tmp > 65535)
    21b6:	68 a1       	ldd	r22, Y+32	; 0x20
    21b8:	79 a1       	ldd	r23, Y+33	; 0x21
    21ba:	8a a1       	ldd	r24, Y+34	; 0x22
    21bc:	9b a1       	ldd	r25, Y+35	; 0x23
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <Ultrasonic_Trigger+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	6c a1       	ldd	r22, Y+36	; 0x24
    21d0:	7d a1       	ldd	r23, Y+37	; 0x25
    21d2:	8e a1       	ldd	r24, Y+38	; 0x26
    21d4:	9f a1       	ldd	r25, Y+39	; 0x27
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9f 8f       	std	Y+31, r25	; 0x1f
    21f4:	8e 8f       	std	Y+30, r24	; 0x1e
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <Ultrasonic_Trigger+0x152>
    21f8:	80 e9       	ldi	r24, 0x90	; 144
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	9d 8f       	std	Y+29, r25	; 0x1d
    21fe:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2200:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2202:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <Ultrasonic_Trigger+0x140>
    2208:	9d 8f       	std	Y+29, r25	; 0x1d
    220a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    220e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9f 8f       	std	Y+31, r25	; 0x1f
    2214:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2218:	9f 8d       	ldd	r25, Y+31	; 0x1f
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <Ultrasonic_Trigger+0x134>
    221e:	24 c0       	rjmp	.+72     	; 0x2268 <Ultrasonic_Trigger+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	68 a1       	ldd	r22, Y+32	; 0x20
    2222:	79 a1       	ldd	r23, Y+33	; 0x21
    2224:	8a a1       	ldd	r24, Y+34	; 0x22
    2226:	9b a1       	ldd	r25, Y+35	; 0x23
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9f 8f       	std	Y+31, r25	; 0x1f
    2232:	8e 8f       	std	Y+30, r24	; 0x1e
    2234:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2236:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2238:	9b 8f       	std	Y+27, r25	; 0x1b
    223a:	8a 8f       	std	Y+26, r24	; 0x1a
    223c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    223e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <Ultrasonic_Trigger+0x17c>
    2244:	9b 8f       	std	Y+27, r25	; 0x1b
    2246:	8a 8f       	std	Y+26, r24	; 0x1a
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <Ultrasonic_Trigger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    224a:	69 a5       	ldd	r22, Y+41	; 0x29
    224c:	7a a5       	ldd	r23, Y+42	; 0x2a
    224e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2250:	9c a5       	ldd	r25, Y+44	; 0x2c
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	88 a7       	std	Y+40, r24	; 0x28
    225c:	88 a5       	ldd	r24, Y+40	; 0x28
    225e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2260:	89 8d       	ldd	r24, Y+25	; 0x19
    2262:	8a 95       	dec	r24
    2264:	f1 f7       	brne	.-4      	; 0x2262 <Ultrasonic_Trigger+0x19e>
    2266:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		GPIO_writePin(TRIGGER_PORT_CONNECTION1, TRIGGER_PIN1, LOGIC_LOW);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	67 e0       	ldi	r22, 0x07	; 7
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2272:	c8 c0       	rjmp	.+400    	; 0x2404 <Ultrasonic_Trigger+0x340>
	}
	else
	{
		GPIO_writePin(TRIGGER_PORT_CONNECTION2, TRIGGER_PIN2, LOGIC_HIGH); // Set trigger pin high
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	61 e0       	ldi	r22, 0x01	; 1
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e2       	ldi	r26, 0x20	; 32
    2284:	b1 e4       	ldi	r27, 0x41	; 65
    2286:	8d 8b       	std	Y+21, r24	; 0x15
    2288:	9e 8b       	std	Y+22, r25	; 0x16
    228a:	af 8b       	std	Y+23, r26	; 0x17
    228c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228e:	6d 89       	ldd	r22, Y+21	; 0x15
    2290:	7e 89       	ldd	r23, Y+22	; 0x16
    2292:	8f 89       	ldd	r24, Y+23	; 0x17
    2294:	98 8d       	ldd	r25, Y+24	; 0x18
    2296:	2b ea       	ldi	r18, 0xAB	; 171
    2298:	3a ea       	ldi	r19, 0xAA	; 170
    229a:	4a ea       	ldi	r20, 0xAA	; 170
    229c:	50 e4       	ldi	r21, 0x40	; 64
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	89 8b       	std	Y+17, r24	; 0x11
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	ab 8b       	std	Y+19, r26	; 0x13
    22ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22ae:	69 89       	ldd	r22, Y+17	; 0x11
    22b0:	7a 89       	ldd	r23, Y+18	; 0x12
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	1c f4       	brge	.+6      	; 0x22cc <Ultrasonic_Trigger+0x208>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	88 8b       	std	Y+16, r24	; 0x10
    22ca:	91 c0       	rjmp	.+290    	; 0x23ee <Ultrasonic_Trigger+0x32a>
	else if (__tmp > 255)
    22cc:	69 89       	ldd	r22, Y+17	; 0x11
    22ce:	7a 89       	ldd	r23, Y+18	; 0x12
    22d0:	8b 89       	ldd	r24, Y+19	; 0x13
    22d2:	9c 89       	ldd	r25, Y+20	; 0x14
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	0c f0       	brlt	.+2      	; 0x22e6 <Ultrasonic_Trigger+0x222>
    22e4:	7b c0       	rjmp	.+246    	; 0x23dc <Ultrasonic_Trigger+0x318>
	{
		_delay_ms(__us / 1000.0);
    22e6:	6d 89       	ldd	r22, Y+21	; 0x15
    22e8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ea:	8f 89       	ldd	r24, Y+23	; 0x17
    22ec:	98 8d       	ldd	r25, Y+24	; 0x18
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8c 87       	std	Y+12, r24	; 0x0c
    2300:	9d 87       	std	Y+13, r25	; 0x0d
    2302:	ae 87       	std	Y+14, r26	; 0x0e
    2304:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6c 85       	ldd	r22, Y+12	; 0x0c
    2308:	7d 85       	ldd	r23, Y+13	; 0x0d
    230a:	8e 85       	ldd	r24, Y+14	; 0x0e
    230c:	9f 85       	ldd	r25, Y+15	; 0x0f
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	55 e4       	ldi	r21, 0x45	; 69
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	88 87       	std	Y+8, r24	; 0x08
    2320:	99 87       	std	Y+9, r25	; 0x09
    2322:	aa 87       	std	Y+10, r26	; 0x0a
    2324:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2326:	68 85       	ldd	r22, Y+8	; 0x08
    2328:	79 85       	ldd	r23, Y+9	; 0x09
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	9b 85       	ldd	r25, Y+11	; 0x0b
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <Ultrasonic_Trigger+0x284>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9f 83       	std	Y+7, r25	; 0x07
    2344:	8e 83       	std	Y+6, r24	; 0x06
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <Ultrasonic_Trigger+0x302>
	else if (__tmp > 65535)
    2348:	68 85       	ldd	r22, Y+8	; 0x08
    234a:	79 85       	ldd	r23, Y+9	; 0x09
    234c:	8a 85       	ldd	r24, Y+10	; 0x0a
    234e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <Ultrasonic_Trigger+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6c 85       	ldd	r22, Y+12	; 0x0c
    2362:	7d 85       	ldd	r23, Y+13	; 0x0d
    2364:	8e 85       	ldd	r24, Y+14	; 0x0e
    2366:	9f 85       	ldd	r25, Y+15	; 0x0f
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9f 83       	std	Y+7, r25	; 0x07
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <Ultrasonic_Trigger+0x2e4>
    238a:	80 e9       	ldi	r24, 0x90	; 144
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	9d 83       	std	Y+5, r25	; 0x05
    2390:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	9d 81       	ldd	r25, Y+5	; 0x05
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <Ultrasonic_Trigger+0x2d2>
    239a:	9d 83       	std	Y+5, r25	; 0x05
    239c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8e 81       	ldd	r24, Y+6	; 0x06
    23a0:	9f 81       	ldd	r25, Y+7	; 0x07
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9f 83       	std	Y+7, r25	; 0x07
    23a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8e 81       	ldd	r24, Y+6	; 0x06
    23aa:	9f 81       	ldd	r25, Y+7	; 0x07
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <Ultrasonic_Trigger+0x2c6>
    23b0:	24 c0       	rjmp	.+72     	; 0x23fa <Ultrasonic_Trigger+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	68 85       	ldd	r22, Y+8	; 0x08
    23b4:	79 85       	ldd	r23, Y+9	; 0x09
    23b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9f 83       	std	Y+7, r25	; 0x07
    23c4:	8e 83       	std	Y+6, r24	; 0x06
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <Ultrasonic_Trigger+0x30e>
    23d6:	9b 83       	std	Y+3, r25	; 0x03
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <Ultrasonic_Trigger+0x336>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23dc:	69 89       	ldd	r22, Y+17	; 0x11
    23de:	7a 89       	ldd	r23, Y+18	; 0x12
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	88 8b       	std	Y+16, r24	; 0x10
    23ee:	88 89       	ldd	r24, Y+16	; 0x10
    23f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	8a 95       	dec	r24
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <Ultrasonic_Trigger+0x330>
    23f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10); // Wait for 10 microseconds
		GPIO_writePin(TRIGGER_PORT_CONNECTION2, TRIGGER_PIN2, LOGIC_LOW); // Set trigger pin low
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	}
}
    2404:	e1 96       	adiw	r28, 0x31	; 49
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <Ultrasonic_readDistance>:
 * Start the measurement process via the ICU driver.
 * Returns: The measured distance in centimeters.
 * use: Specifies whether to use ICU or External Interrupt.
 */
uint16 Ultrasonic_readDistance(Ultrasonic_Use use)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <Ultrasonic_readDistance+0x6>
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	89 83       	std	Y+1, r24	; 0x01
	if(use == ICU)
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	88 23       	and	r24, r24
    2428:	69 f5       	brne	.+90     	; 0x2484 <Ultrasonic_readDistance+0x6e>
	{
		Ultrasonic_Trigger(ICU);
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <Ultrasonic_Trigger>
		return (g_highTime_ICU / 117.6) + 1;
    2430:	80 91 97 01 	lds	r24, 0x0197
    2434:	90 91 98 01 	lds	r25, 0x0198
    2438:	cc 01       	movw	r24, r24
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	23 e3       	ldi	r18, 0x33	; 51
    2450:	33 e3       	ldi	r19, 0x33	; 51
    2452:	4b ee       	ldi	r20, 0xEB	; 235
    2454:	52 e4       	ldi	r21, 0x42	; 66
    2456:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9b 83       	std	Y+3, r25	; 0x03
    2480:	8a 83       	std	Y+2, r24	; 0x02
    2482:	12 c0       	rjmp	.+36     	; 0x24a8 <Ultrasonic_readDistance+0x92>
	}
	else
	{
		Ultrasonic_Trigger(EXT_INT); // Trigger the ultrasonic sensor
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	0e 94 62 10 	call	0x20c4	; 0x20c4 <Ultrasonic_Trigger>
		return (g_highTime_ICU_EXT_INT / 117) + 1; // Convert pulse width to distance in cm
    248a:	80 91 9b 01 	lds	r24, 0x019B
    248e:	90 91 9c 01 	lds	r25, 0x019C
    2492:	25 e7       	ldi	r18, 0x75	; 117
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	b9 01       	movw	r22, r18
    2498:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    249c:	cb 01       	movw	r24, r22
    249e:	9c 01       	movw	r18, r24
    24a0:	2f 5f       	subi	r18, 0xFF	; 255
    24a2:	3f 4f       	sbci	r19, 0xFF	; 255
    24a4:	3b 83       	std	Y+3, r19	; 0x03
    24a6:	2a 83       	std	Y+2, r18	; 0x02
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <Ultrasonic_edgeProcessing>:
 * Description:
 * This is the callback function called by the ICU driver.
 * It calculates the high time (pulse time) generated by the ultrasonic sensor.
 */
static void Ultrasonic_edgeProcessing(void)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	g_edgeTime_ICU++;
    24c0:	80 91 96 01 	lds	r24, 0x0196
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	80 93 96 01 	sts	0x0196, r24
	if(g_edgeTime_ICU == 1)
    24ca:	80 91 96 01 	lds	r24, 0x0196
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	31 f4       	brne	.+12     	; 0x24de <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    24d2:	0e 94 ce 0a 	call	0x159c	; 0x159c <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ICU_setEdgeDetectionType>
    24dc:	11 c0       	rjmp	.+34     	; 0x2500 <Ultrasonic_edgeProcessing+0x48>
	}
	else if(2 == g_edgeTime_ICU)
    24de:	80 91 96 01 	lds	r24, 0x0196
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	69 f4       	brne	.+26     	; 0x2500 <Ultrasonic_edgeProcessing+0x48>
	{
		g_highTime_ICU = ICU_getInputCaptureValue();		/* Get the high time. */
    24e6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ICU_getInputCaptureValue>
    24ea:	90 93 98 01 	sts	0x0198, r25
    24ee:	80 93 97 01 	sts	0x0197, r24

		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ICU_setEdgeDetectionType>

		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    24f8:	0e 94 ce 0a 	call	0x159c	; 0x159c <ICU_clearTimerValue>

		g_edgeTime_ICU = 0;			/* Clear the counter to start from zero again. */
    24fc:	10 92 96 01 	sts	0x0196, r1
	}
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <Ultrasonic_edgeProcessing_EXT_INT>:
 * Description:
 * This is the callback function called by the external interrupt driver.
 * It calculates the high time (pulse time) generated by the ultrasonic sensor.
 */
static void Ultrasonic_edgeProcessing_EXT_INT(void)
{
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	60 97       	sbiw	r28, 0x10	; 16
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_EXT_INT++; // Increment edge count
    251e:	80 91 99 01 	lds	r24, 0x0199
    2522:	8f 5f       	subi	r24, 0xFF	; 255
    2524:	80 93 99 01 	sts	0x0199, r24

	if (1 == g_edgeTime_EXT_INT) {
    2528:	80 91 99 01 	lds	r24, 0x0199
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	c9 f5       	brne	.+114    	; 0x25a2 <Ultrasonic_edgeProcessing_EXT_INT+0x9c>
		/* Rising edge detected */
		Timer_deInit(TIMER0_ID); // De-initialize Timer0
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	0e 94 2b 09 	call	0x1256	; 0x1256 <Timer_deInit>

		external_interrupt_deinit(INT_2); // De-initialize INT2
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT_Configrations = {INT_2, FALLING_EDGE_INT2}; // Configure INT2 for falling edge detection
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	1a 82       	std	Y+2, r1	; 0x02
		external_interrupt_init(&EXT_INT_Configrations); // Reinitialize INT2 with the new configuration
    2542:	ce 01       	movw	r24, r28
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER0_ID, F_CPU_8, NORMAL_MODE}; // Configure Timer0
    254a:	ce 01       	movw	r24, r28
    254c:	03 96       	adiw	r24, 0x03	; 3
    254e:	9d 87       	std	Y+13, r25	; 0x0d
    2550:	8c 87       	std	Y+12, r24	; 0x0c
    2552:	e0 e8       	ldi	r30, 0x80	; 128
    2554:	f1 e0       	ldi	r31, 0x01	; 1
    2556:	ff 87       	std	Y+15, r31	; 0x0f
    2558:	ee 87       	std	Y+14, r30	; 0x0e
    255a:	f7 e0       	ldi	r31, 0x07	; 7
    255c:	f8 8b       	std	Y+16, r31	; 0x10
    255e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2560:	ff 85       	ldd	r31, Y+15	; 0x0f
    2562:	00 80       	ld	r0, Z
    2564:	8e 85       	ldd	r24, Y+14	; 0x0e
    2566:	9f 85       	ldd	r25, Y+15	; 0x0f
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	9f 87       	std	Y+15, r25	; 0x0f
    256c:	8e 87       	std	Y+14, r24	; 0x0e
    256e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2570:	fd 85       	ldd	r31, Y+13	; 0x0d
    2572:	00 82       	st	Z, r0
    2574:	8c 85       	ldd	r24, Y+12	; 0x0c
    2576:	9d 85       	ldd	r25, Y+13	; 0x0d
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	9d 87       	std	Y+13, r25	; 0x0d
    257c:	8c 87       	std	Y+12, r24	; 0x0c
    257e:	98 89       	ldd	r25, Y+16	; 0x10
    2580:	91 50       	subi	r25, 0x01	; 1
    2582:	98 8b       	std	Y+16, r25	; 0x10
    2584:	e8 89       	ldd	r30, Y+16	; 0x10
    2586:	ee 23       	and	r30, r30
    2588:	51 f7       	brne	.-44     	; 0x255e <Ultrasonic_edgeProcessing_EXT_INT+0x58>
		Timer_setCallBack(timer0_setCallBack, TIMER0_ID); // Set the callback function for Timer0
    258a:	86 e5       	ldi	r24, 0x56	; 86
    258c:	90 e1       	ldi	r25, 0x10	; 16
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Timer_setCallBack>
		timer_overflow_count = 0; // Reset overflow count
    2594:	10 92 9a 01 	sts	0x019A, r1
		Timer_init(&Timer_Configrations); // Initialize Timer0
    2598:	ce 01       	movw	r24, r28
    259a:	03 96       	adiw	r24, 0x03	; 3
    259c:	0e 94 49 08 	call	0x1092	; 0x1092 <Timer_init>
    25a0:	26 c0       	rjmp	.+76     	; 0x25ee <Ultrasonic_edgeProcessing_EXT_INT+0xe8>

	} else if (2 == g_edgeTime_EXT_INT) {
    25a2:	80 91 99 01 	lds	r24, 0x0199
    25a6:	82 30       	cpi	r24, 0x02	; 2
    25a8:	11 f5       	brne	.+68     	; 0x25ee <Ultrasonic_edgeProcessing_EXT_INT+0xe8>
		/* Falling edge detected */
		g_highTime_ICU_EXT_INT = (timer_overflow_count * 256) + Timer_getTimerValue(TIMER0_ID); // Calculate pulse width
    25aa:	80 91 9a 01 	lds	r24, 0x019A
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	98 2f       	mov	r25, r24
    25b4:	88 27       	eor	r24, r24
    25b6:	8c 01       	movw	r16, r24
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_getTimerValue>
    25be:	80 0f       	add	r24, r16
    25c0:	91 1f       	adc	r25, r17
    25c2:	90 93 9c 01 	sts	0x019C, r25
    25c6:	80 93 9b 01 	sts	0x019B, r24

		Timer_deInit(TIMER0_ID); // De-initialize Timer0
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	0e 94 2b 09 	call	0x1256	; 0x1256 <Timer_deInit>
		timer_overflow_count = 0; // Reset overflow count
    25d0:	10 92 9a 01 	sts	0x019A, r1

		external_interrupt_deinit(INT_2); // De-initialize INT2
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT_Configrations = {INT_2, RISING_EDGE_INT2}; // Configure INT2 for rising edge detection
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	8a 87       	std	Y+10, r24	; 0x0a
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT_Configrations); // Reinitialize INT2 with the new configuration
    25e2:	ce 01       	movw	r24, r28
    25e4:	0a 96       	adiw	r24, 0x0a	; 10
    25e6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <external_interrupt_init>

		g_edgeTime_EXT_INT = 0; // Reset edge count
    25ea:	10 92 99 01 	sts	0x0199, r1
	}
}
    25ee:	60 96       	adiw	r28, 0x10	; 16
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <LEDS_init>:
 * Make all of them output pins.
 * If the connection is POSITIVE LOGIC, put logic zero at the beginning.
 * Else, put logic one at the beginning (NEGATIVE LOGIC CONNECTION).
 */
void LEDS_init(void)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(RED_PORT_CONNECTION, RED_LED, PIN_OUTPUT);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	60 e0       	ldi	r22, 0x00	; 0
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_PORT_CONNECTION, GREEN_LED, PIN_OUTPUT);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	61 e0       	ldi	r22, 0x01	; 1
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_PORT_CONNECTION, BLUE_LED, PIN_OUTPUT);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	62 e0       	ldi	r22, 0x02	; 2
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>

#ifdef CONNECTION_POSITIVE_LOGIC
	GPIO_writePin(RED_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(GREEN_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(BLUE_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	62 e0       	ldi	r22, 0x02	; 2
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
#else
	GPIO_writePin(RED_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
	GPIO_writePin(GREEN_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
	GPIO_writePin(BLUE_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
#endif
}
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <LED_on>:
 * If the connection is POSITIVE LOGIC, put LOGIC HIGH to turn it on.
 * Else, put LOGIC LOW (NEGATIVE LOGIC CONNECTION).
 * id: The ID of the LED to turn on.
 */
void LED_on(LED_ID id)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <LED_on+0x6>
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
	switch(id)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3b 83       	std	Y+3, r19	; 0x03
    2664:	2a 83       	std	Y+2, r18	; 0x02
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	9b 81       	ldd	r25, Y+3	; 0x03
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	79 f0       	breq	.+30     	; 0x268e <LED_on+0x40>
    2670:	2a 81       	ldd	r18, Y+2	; 0x02
    2672:	3b 81       	ldd	r19, Y+3	; 0x03
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	81 f0       	breq	.+32     	; 0x269a <LED_on+0x4c>
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	9b 81       	ldd	r25, Y+3	; 0x03
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	89 f4       	brne	.+34     	; 0x26a4 <LED_on+0x56>
	{
	case red:
		GPIO_writePin(RED_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    268c:	0b c0       	rjmp	.+22     	; 0x26a4 <LED_on+0x56>
		break;
	case green:
		GPIO_writePin(GREEN_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2698:	05 c0       	rjmp	.+10     	; 0x26a4 <LED_on+0x56>
		break;
	case blue:
		GPIO_writePin(BLUE_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	case blue:
		GPIO_writePin(BLUE_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
		break;
	}
#endif
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <LED_off>:
 * If the connection is POSITIVE LOGIC, put LOGIC LOW to turn it off.
 * Else, put LOGIC HIGH (NEGATIVE LOGIC CONNECTION).
 * id: The ID of the LED to turn off.
 */
void LED_off(LED_ID id)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <LED_off+0x6>
    26b6:	0f 92       	push	r0
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
	switch(id)
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	3b 83       	std	Y+3, r19	; 0x03
    26c6:	2a 83       	std	Y+2, r18	; 0x02
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	9b 81       	ldd	r25, Y+3	; 0x03
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	91 05       	cpc	r25, r1
    26d0:	79 f0       	breq	.+30     	; 0x26f0 <LED_off+0x40>
    26d2:	2a 81       	ldd	r18, Y+2	; 0x02
    26d4:	3b 81       	ldd	r19, Y+3	; 0x03
    26d6:	22 30       	cpi	r18, 0x02	; 2
    26d8:	31 05       	cpc	r19, r1
    26da:	81 f0       	breq	.+32     	; 0x26fc <LED_off+0x4c>
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	9b 81       	ldd	r25, Y+3	; 0x03
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	89 f4       	brne	.+34     	; 0x2706 <LED_off+0x56>
	{
	case red:
		GPIO_writePin(RED_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    26ee:	0b c0       	rjmp	.+22     	; 0x2706 <LED_off+0x56>
		break;
	case green:
		GPIO_writePin(GREEN_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    26fa:	05 c0       	rjmp	.+10     	; 0x2706 <LED_off+0x56>
		break;
	case blue:
		GPIO_writePin(BLUE_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	case blue:
		GPIO_writePin(BLUE_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
		break;
	}
#endif
}
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by using the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	2e 97       	sbiw	r28, 0x0e	; 14
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	62 e0       	ldi	r22, 0x02	; 2
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 ea       	ldi	r26, 0xA0	; 160
    2740:	b1 e4       	ldi	r27, 0x41	; 65
    2742:	8b 87       	std	Y+11, r24	; 0x0b
    2744:	9c 87       	std	Y+12, r25	; 0x0c
    2746:	ad 87       	std	Y+13, r26	; 0x0d
    2748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	6b 85       	ldd	r22, Y+11	; 0x0b
    274c:	7c 85       	ldd	r23, Y+12	; 0x0c
    274e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2750:	9e 85       	ldd	r25, Y+14	; 0x0e
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a e7       	ldi	r20, 0x7A	; 122
    2758:	55 e4       	ldi	r21, 0x45	; 69
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8f 83       	std	Y+7, r24	; 0x07
    2764:	98 87       	std	Y+8, r25	; 0x08
    2766:	a9 87       	std	Y+9, r26	; 0x09
    2768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_init+0x7a>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	3f c0       	rjmp	.+126    	; 0x280a <LCD_init+0xf8>
	else if (__tmp > 65535)
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <LCD_init+0xda>
    27ce:	80 e9       	ldi	r24, 0x90	; 144
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_init+0xc8>
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <LCD_init+0xbc>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_init+0x104>
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	63 e0       	ldi	r22, 0x03	; 3
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	64 e0       	ldi	r22, 0x04	; 4
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	65 e0       	ldi	r22, 0x05	; 5
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	66 e0       	ldi	r22, 0x06	; 6
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2846:	83 e3       	ldi	r24, 0x33	; 51
    2848:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    284c:	82 e3       	ldi	r24, 0x32	; 50
    284e:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>

	/* Use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2852:	88 e2       	ldi	r24, 0x28	; 40
    2854:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>
	/* Use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Cursor off */
    2858:	8c e0       	ldi	r24, 0x0C	; 12
    285a:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>
}
    2864:	2e 96       	adiw	r28, 0x0e	; 14
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <LCD_sendCommand>:
 * Description :
 * Send the required command to the screen.
 * command: The command to be sent to the LCD.
 */
void LCD_sendCommand(uint8 command)
{
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	c3 56       	subi	r28, 0x63	; 99
    2884:	d0 40       	sbci	r29, 0x00	; 0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	fe 01       	movw	r30, r28
    2892:	ed 59       	subi	r30, 0x9D	; 157
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e1 5a       	subi	r30, 0xA1	; 161
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e8       	ldi	r26, 0x80	; 128
    28ae:	bf e3       	ldi	r27, 0x3F	; 63
    28b0:	80 83       	st	Z, r24
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	a2 83       	std	Z+2, r26	; 0x02
    28b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	8e 01       	movw	r16, r28
    28ba:	05 5a       	subi	r16, 0xA5	; 165
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	fe 01       	movw	r30, r28
    28c0:	e1 5a       	subi	r30, 0xA1	; 161
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a e7       	ldi	r20, 0x7A	; 122
    28d2:	55 e4       	ldi	r21, 0x45	; 69
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	80 83       	st	Z, r24
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	a2 83       	std	Z+2, r26	; 0x02
    28e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e6:	fe 01       	movw	r30, r28
    28e8:	e5 5a       	subi	r30, 0xA5	; 165
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	44 f4       	brge	.+16     	; 0x2914 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2904:	fe 01       	movw	r30, r28
    2906:	e7 5a       	subi	r30, 0xA7	; 167
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	64 c0       	rjmp	.+200    	; 0x29dc <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2914:	fe 01       	movw	r30, r28
    2916:	e5 5a       	subi	r30, 0xA5	; 165
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	0c f0       	brlt	.+2      	; 0x2934 <LCD_sendCommand+0xbe>
    2932:	43 c0       	rjmp	.+134    	; 0x29ba <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	fe 01       	movw	r30, r28
    2936:	e1 5a       	subi	r30, 0xA1	; 161
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e2       	ldi	r20, 0x20	; 32
    2948:	51 e4       	ldi	r21, 0x41	; 65
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	8e 01       	movw	r16, r28
    2954:	07 5a       	subi	r16, 0xA7	; 167
    2956:	1f 4f       	sbci	r17, 0xFF	; 255
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	f8 01       	movw	r30, r16
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    296a:	1f c0       	rjmp	.+62     	; 0x29aa <LCD_sendCommand+0x134>
    296c:	fe 01       	movw	r30, r28
    296e:	e9 5a       	subi	r30, 0xA9	; 169
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 e9       	ldi	r24, 0x90	; 144
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	fe 01       	movw	r30, r28
    297c:	e9 5a       	subi	r30, 0xA9	; 169
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <LCD_sendCommand+0x10e>
    2988:	fe 01       	movw	r30, r28
    298a:	e9 5a       	subi	r30, 0xA9	; 169
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	de 01       	movw	r26, r28
    2994:	a7 5a       	subi	r26, 0xA7	; 167
    2996:	bf 4f       	sbci	r27, 0xFF	; 255
    2998:	fe 01       	movw	r30, r28
    299a:	e7 5a       	subi	r30, 0xA7	; 167
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	11 96       	adiw	r26, 0x01	; 1
    29a6:	9c 93       	st	X, r25
    29a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	fe 01       	movw	r30, r28
    29ac:	e7 5a       	subi	r30, 0xA7	; 167
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	d1 f6       	brne	.-76     	; 0x296c <LCD_sendCommand+0xf6>
    29b8:	27 c0       	rjmp	.+78     	; 0x2a08 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	8e 01       	movw	r16, r28
    29bc:	07 5a       	subi	r16, 0xA7	; 167
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	e5 5a       	subi	r30, 0xA5	; 165
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	f8 01       	movw	r30, r16
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	de 01       	movw	r26, r28
    29de:	ab 5a       	subi	r26, 0xAB	; 171
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	e7 5a       	subi	r30, 0xA7	; 167
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	8d 93       	st	X+, r24
    29ee:	9c 93       	st	X, r25
    29f0:	fe 01       	movw	r30, r28
    29f2:	eb 5a       	subi	r30, 0xAB	; 171
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_sendCommand+0x184>
    29fe:	fe 01       	movw	r30, r28
    2a00:	eb 5a       	subi	r30, 0xAB	; 171
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	62 e0       	ldi	r22, 0x02	; 2
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2a12:	fe 01       	movw	r30, r28
    2a14:	ef 5a       	subi	r30, 0xAF	; 175
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a0 e8       	ldi	r26, 0x80	; 128
    2a1e:	bf e3       	ldi	r27, 0x3F	; 63
    2a20:	80 83       	st	Z, r24
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	a2 83       	std	Z+2, r26	; 0x02
    2a26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	8e 01       	movw	r16, r28
    2a2a:	03 5b       	subi	r16, 0xB3	; 179
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 5a       	subi	r30, 0xAF	; 175
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	60 81       	ld	r22, Z
    2a36:	71 81       	ldd	r23, Z+1	; 0x01
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	93 81       	ldd	r25, Z+3	; 0x03
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a e7       	ldi	r20, 0x7A	; 122
    2a42:	55 e4       	ldi	r21, 0x45	; 69
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	80 83       	st	Z, r24
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	a2 83       	std	Z+2, r26	; 0x02
    2a54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e3 5b       	subi	r30, 0xB3	; 179
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	44 f4       	brge	.+16     	; 0x2a84 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2a74:	fe 01       	movw	r30, r28
    2a76:	e5 5b       	subi	r30, 0xB5	; 181
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	80 83       	st	Z, r24
    2a82:	64 c0       	rjmp	.+200    	; 0x2b4c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2a84:	fe 01       	movw	r30, r28
    2a86:	e3 5b       	subi	r30, 0xB3	; 179
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	0c f0       	brlt	.+2      	; 0x2aa4 <LCD_sendCommand+0x22e>
    2aa2:	43 c0       	rjmp	.+134    	; 0x2b2a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	ef 5a       	subi	r30, 0xAF	; 175
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8e 01       	movw	r16, r28
    2ac4:	05 5b       	subi	r16, 0xB5	; 181
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	1f c0       	rjmp	.+62     	; 0x2b1a <LCD_sendCommand+0x2a4>
    2adc:	fe 01       	movw	r30, r28
    2ade:	e7 5b       	subi	r30, 0xB7	; 183
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 e9       	ldi	r24, 0x90	; 144
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
    2aea:	fe 01       	movw	r30, r28
    2aec:	e7 5b       	subi	r30, 0xB7	; 183
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_sendCommand+0x27e>
    2af8:	fe 01       	movw	r30, r28
    2afa:	e7 5b       	subi	r30, 0xB7	; 183
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	de 01       	movw	r26, r28
    2b04:	a5 5b       	subi	r26, 0xB5	; 181
    2b06:	bf 4f       	sbci	r27, 0xFF	; 255
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e5 5b       	subi	r30, 0xB5	; 181
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	11 96       	adiw	r26, 0x01	; 1
    2b16:	9c 93       	st	X, r25
    2b18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e5 5b       	subi	r30, 0xB5	; 181
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	d1 f6       	brne	.-76     	; 0x2adc <LCD_sendCommand+0x266>
    2b28:	27 c0       	rjmp	.+78     	; 0x2b78 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	05 5b       	subi	r16, 0xB5	; 181
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	fe 01       	movw	r30, r28
    2b32:	e3 5b       	subi	r30, 0xB3	; 179
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	de 01       	movw	r26, r28
    2b4e:	a9 5b       	subi	r26, 0xB9	; 185
    2b50:	bf 4f       	sbci	r27, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	e5 5b       	subi	r30, 0xB5	; 181
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	8d 93       	st	X+, r24
    2b5e:	9c 93       	st	X, r25
    2b60:	fe 01       	movw	r30, r28
    2b62:	e9 5b       	subi	r30, 0xB9	; 185
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_sendCommand+0x2f4>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e9 5b       	subi	r30, 0xB9	; 185
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ed 59       	subi	r30, 0x9D	; 157
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	80 71       	andi	r24, 0x10	; 16
    2b86:	90 70       	andi	r25, 0x00	; 0
    2b88:	95 95       	asr	r25
    2b8a:	87 95       	ror	r24
    2b8c:	95 95       	asr	r25
    2b8e:	87 95       	ror	r24
    2b90:	95 95       	asr	r25
    2b92:	87 95       	ror	r24
    2b94:	95 95       	asr	r25
    2b96:	87 95       	ror	r24
    2b98:	98 2f       	mov	r25, r24
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	63 e0       	ldi	r22, 0x03	; 3
    2b9e:	49 2f       	mov	r20, r25
    2ba0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ed 59       	subi	r30, 0x9D	; 157
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	80 72       	andi	r24, 0x20	; 32
    2bb2:	90 70       	andi	r25, 0x00	; 0
    2bb4:	95 95       	asr	r25
    2bb6:	87 95       	ror	r24
    2bb8:	95 95       	asr	r25
    2bba:	87 95       	ror	r24
    2bbc:	95 95       	asr	r25
    2bbe:	87 95       	ror	r24
    2bc0:	95 95       	asr	r25
    2bc2:	87 95       	ror	r24
    2bc4:	95 95       	asr	r25
    2bc6:	87 95       	ror	r24
    2bc8:	98 2f       	mov	r25, r24
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	64 e0       	ldi	r22, 0x04	; 4
    2bce:	49 2f       	mov	r20, r25
    2bd0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ed 59       	subi	r30, 0x9D	; 157
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	80 74       	andi	r24, 0x40	; 64
    2be2:	90 70       	andi	r25, 0x00	; 0
    2be4:	08 2e       	mov	r0, r24
    2be6:	89 2f       	mov	r24, r25
    2be8:	00 0c       	add	r0, r0
    2bea:	88 1f       	adc	r24, r24
    2bec:	99 0b       	sbc	r25, r25
    2bee:	00 0c       	add	r0, r0
    2bf0:	88 1f       	adc	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	98 2f       	mov	r25, r24
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	65 e0       	ldi	r22, 0x05	; 5
    2bfa:	49 2f       	mov	r20, r25
    2bfc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 59       	subi	r30, 0x9D	; 157
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	98 2f       	mov	r25, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	99 27       	eor	r25, r25
    2c0e:	99 1f       	adc	r25, r25
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	66 e0       	ldi	r22, 0x06	; 6
    2c14:	49 2f       	mov	r20, r25
    2c16:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ed 5b       	subi	r30, 0xBD	; 189
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 e8       	ldi	r26, 0x80	; 128
    2c26:	bf e3       	ldi	r27, 0x3F	; 63
    2c28:	80 83       	st	Z, r24
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	a2 83       	std	Z+2, r26	; 0x02
    2c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	8e 01       	movw	r16, r28
    2c32:	01 5c       	subi	r16, 0xC1	; 193
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	fe 01       	movw	r30, r28
    2c38:	ed 5b       	subi	r30, 0xBD	; 189
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a e7       	ldi	r20, 0x7A	; 122
    2c4a:	55 e4       	ldi	r21, 0x45	; 69
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	f8 01       	movw	r30, r16
    2c56:	80 83       	st	Z, r24
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	a2 83       	std	Z+2, r26	; 0x02
    2c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ff 96       	adiw	r30, 0x3f	; 63
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	9e af       	std	Y+62, r25	; 0x3e
    2c80:	8d af       	std	Y+61, r24	; 0x3d
    2c82:	46 c0       	rjmp	.+140    	; 0x2d10 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2c84:	fe 01       	movw	r30, r28
    2c86:	ff 96       	adiw	r30, 0x3f	; 63
    2c88:	60 81       	ld	r22, Z
    2c8a:	71 81       	ldd	r23, Z+1	; 0x01
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	64 f5       	brge	.+88     	; 0x2cf8 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ed 5b       	subi	r30, 0xBD	; 189
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9e af       	std	Y+62, r25	; 0x3e
    2ccc:	8d af       	std	Y+61, r24	; 0x3d
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <LCD_sendCommand+0x478>
    2cd0:	80 e9       	ldi	r24, 0x90	; 144
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	9c af       	std	Y+60, r25	; 0x3c
    2cd6:	8b af       	std	Y+59, r24	; 0x3b
    2cd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cda:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_sendCommand+0x466>
    2ce0:	9c af       	std	Y+60, r25	; 0x3c
    2ce2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9e af       	std	Y+62, r25	; 0x3e
    2cec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <LCD_sendCommand+0x45a>
    2cf6:	16 c0       	rjmp	.+44     	; 0x2d24 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ff 96       	adiw	r30, 0x3f	; 63
    2cfc:	60 81       	ld	r22, Z
    2cfe:	71 81       	ldd	r23, Z+1	; 0x01
    2d00:	82 81       	ldd	r24, Z+2	; 0x02
    2d02:	93 81       	ldd	r25, Z+3	; 0x03
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9e af       	std	Y+62, r25	; 0x3e
    2d0e:	8d af       	std	Y+61, r24	; 0x3d
    2d10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d14:	9a af       	std	Y+58, r25	; 0x3a
    2d16:	89 af       	std	Y+57, r24	; 0x39
    2d18:	89 ad       	ldd	r24, Y+57	; 0x39
    2d1a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_sendCommand+0x4a6>
    2d20:	9a af       	std	Y+58, r25	; 0x3a
    2d22:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	62 e0       	ldi	r22, 0x02	; 2
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	a0 e8       	ldi	r26, 0x80	; 128
    2d34:	bf e3       	ldi	r27, 0x3F	; 63
    2d36:	8d ab       	std	Y+53, r24	; 0x35
    2d38:	9e ab       	std	Y+54, r25	; 0x36
    2d3a:	af ab       	std	Y+55, r26	; 0x37
    2d3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d40:	7e a9       	ldd	r23, Y+54	; 0x36
    2d42:	8f a9       	ldd	r24, Y+55	; 0x37
    2d44:	98 ad       	ldd	r25, Y+56	; 0x38
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a e7       	ldi	r20, 0x7A	; 122
    2d4c:	55 e4       	ldi	r21, 0x45	; 69
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	89 ab       	std	Y+49, r24	; 0x31
    2d58:	9a ab       	std	Y+50, r25	; 0x32
    2d5a:	ab ab       	std	Y+51, r26	; 0x33
    2d5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d60:	7a a9       	ldd	r23, Y+50	; 0x32
    2d62:	8b a9       	ldd	r24, Y+51	; 0x33
    2d64:	9c a9       	ldd	r25, Y+52	; 0x34
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	98 ab       	std	Y+48, r25	; 0x30
    2d7c:	8f a7       	std	Y+47, r24	; 0x2f
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2d80:	69 a9       	ldd	r22, Y+49	; 0x31
    2d82:	7a a9       	ldd	r23, Y+50	; 0x32
    2d84:	8b a9       	ldd	r24, Y+51	; 0x33
    2d86:	9c a9       	ldd	r25, Y+52	; 0x34
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	6d a9       	ldd	r22, Y+53	; 0x35
    2d9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	98 ab       	std	Y+48, r25	; 0x30
    2dbe:	8f a7       	std	Y+47, r24	; 0x2f
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <LCD_sendCommand+0x56a>
    2dc2:	80 e9       	ldi	r24, 0x90	; 144
    2dc4:	91 e0       	ldi	r25, 0x01	; 1
    2dc6:	9e a7       	std	Y+46, r25	; 0x2e
    2dc8:	8d a7       	std	Y+45, r24	; 0x2d
    2dca:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <LCD_sendCommand+0x558>
    2dd2:	9e a7       	std	Y+46, r25	; 0x2e
    2dd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	98 ab       	std	Y+48, r25	; 0x30
    2dde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2de2:	98 a9       	ldd	r25, Y+48	; 0x30
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <LCD_sendCommand+0x54c>
    2de8:	14 c0       	rjmp	.+40     	; 0x2e12 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	69 a9       	ldd	r22, Y+49	; 0x31
    2dec:	7a a9       	ldd	r23, Y+50	; 0x32
    2dee:	8b a9       	ldd	r24, Y+51	; 0x33
    2df0:	9c a9       	ldd	r25, Y+52	; 0x34
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	98 ab       	std	Y+48, r25	; 0x30
    2dfc:	8f a7       	std	Y+47, r24	; 0x2f
    2dfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e00:	98 a9       	ldd	r25, Y+48	; 0x30
    2e02:	9c a7       	std	Y+44, r25	; 0x2c
    2e04:	8b a7       	std	Y+43, r24	; 0x2b
    2e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e08:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <LCD_sendCommand+0x594>
    2e0e:	9c a7       	std	Y+44, r25	; 0x2c
    2e10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e8       	ldi	r26, 0x80	; 128
    2e22:	bf e3       	ldi	r27, 0x3F	; 63
    2e24:	8f a3       	std	Y+39, r24	; 0x27
    2e26:	98 a7       	std	Y+40, r25	; 0x28
    2e28:	a9 a7       	std	Y+41, r26	; 0x29
    2e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e30:	89 a5       	ldd	r24, Y+41	; 0x29
    2e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	55 e4       	ldi	r21, 0x45	; 69
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8b a3       	std	Y+35, r24	; 0x23
    2e46:	9c a3       	std	Y+36, r25	; 0x24
    2e48:	ad a3       	std	Y+37, r26	; 0x25
    2e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e50:	8d a1       	ldd	r24, Y+37	; 0x25
    2e52:	9e a1       	ldd	r25, Y+38	; 0x26
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9a a3       	std	Y+34, r25	; 0x22
    2e6a:	89 a3       	std	Y+33, r24	; 0x21
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e70:	7c a1       	ldd	r23, Y+36	; 0x24
    2e72:	8d a1       	ldd	r24, Y+37	; 0x25
    2e74:	9e a1       	ldd	r25, Y+38	; 0x26
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	6f a1       	ldd	r22, Y+39	; 0x27
    2e88:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9a a3       	std	Y+34, r25	; 0x22
    2eac:	89 a3       	std	Y+33, r24	; 0x21
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_sendCommand+0x658>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	98 a3       	std	Y+32, r25	; 0x20
    2eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    2eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eba:	98 a1       	ldd	r25, Y+32	; 0x20
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_sendCommand+0x646>
    2ec0:	98 a3       	std	Y+32, r25	; 0x20
    2ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9a a3       	std	Y+34, r25	; 0x22
    2ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_sendCommand+0x63a>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eda:	7c a1       	ldd	r23, Y+36	; 0x24
    2edc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ede:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9a a3       	std	Y+34, r25	; 0x22
    2eea:	89 a3       	std	Y+33, r24	; 0x21
    2eec:	89 a1       	ldd	r24, Y+33	; 0x21
    2eee:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_sendCommand+0x682>
    2efc:	9e 8f       	std	Y+30, r25	; 0x1e
    2efe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    2f00:	fe 01       	movw	r30, r28
    2f02:	ed 59       	subi	r30, 0x9D	; 157
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 81       	ld	r24, Z
    2f08:	98 2f       	mov	r25, r24
    2f0a:	91 70       	andi	r25, 0x01	; 1
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	63 e0       	ldi	r22, 0x03	; 3
    2f10:	49 2f       	mov	r20, r25
    2f12:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    2f16:	fe 01       	movw	r30, r28
    2f18:	ed 59       	subi	r30, 0x9D	; 157
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	82 70       	andi	r24, 0x02	; 2
    2f24:	90 70       	andi	r25, 0x00	; 0
    2f26:	95 95       	asr	r25
    2f28:	87 95       	ror	r24
    2f2a:	98 2f       	mov	r25, r24
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	64 e0       	ldi	r22, 0x04	; 4
    2f30:	49 2f       	mov	r20, r25
    2f32:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    2f36:	fe 01       	movw	r30, r28
    2f38:	ed 59       	subi	r30, 0x9D	; 157
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	88 2f       	mov	r24, r24
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	84 70       	andi	r24, 0x04	; 4
    2f44:	90 70       	andi	r25, 0x00	; 0
    2f46:	95 95       	asr	r25
    2f48:	87 95       	ror	r24
    2f4a:	95 95       	asr	r25
    2f4c:	87 95       	ror	r24
    2f4e:	98 2f       	mov	r25, r24
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	65 e0       	ldi	r22, 0x05	; 5
    2f54:	49 2f       	mov	r20, r25
    2f56:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ed 59       	subi	r30, 0x9D	; 157
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 81       	ld	r24, Z
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	88 70       	andi	r24, 0x08	; 8
    2f68:	90 70       	andi	r25, 0x00	; 0
    2f6a:	95 95       	asr	r25
    2f6c:	87 95       	ror	r24
    2f6e:	95 95       	asr	r25
    2f70:	87 95       	ror	r24
    2f72:	95 95       	asr	r25
    2f74:	87 95       	ror	r24
    2f76:	98 2f       	mov	r25, r24
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	66 e0       	ldi	r22, 0x06	; 6
    2f7c:	49 2f       	mov	r20, r25
    2f7e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	a0 e8       	ldi	r26, 0x80	; 128
    2f88:	bf e3       	ldi	r27, 0x3F	; 63
    2f8a:	89 8f       	std	Y+25, r24	; 0x19
    2f8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f92:	69 8d       	ldd	r22, Y+25	; 0x19
    2f94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	4a e7       	ldi	r20, 0x7A	; 122
    2fa0:	55 e4       	ldi	r21, 0x45	; 69
    2fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	8d 8b       	std	Y+21, r24	; 0x15
    2fac:	9e 8b       	std	Y+22, r25	; 0x16
    2fae:	af 8b       	std	Y+23, r26	; 0x17
    2fb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	5f e3       	ldi	r21, 0x3F	; 63
    2fc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc6:	88 23       	and	r24, r24
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9c 8b       	std	Y+20, r25	; 0x14
    2fd0:	8b 8b       	std	Y+19, r24	; 0x13
    2fd2:	3f c0       	rjmp	.+126    	; 0x3052 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fda:	98 8d       	ldd	r25, Y+24	; 0x18
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f e7       	ldi	r20, 0x7F	; 127
    2fe2:	57 e4       	ldi	r21, 0x47	; 71
    2fe4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	4c f5       	brge	.+82     	; 0x303e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	69 8d       	ldd	r22, Y+25	; 0x19
    2fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <LCD_sendCommand+0x7be>
    3016:	80 e9       	ldi	r24, 0x90	; 144
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	9a 8b       	std	Y+18, r25	; 0x12
    301c:	89 8b       	std	Y+17, r24	; 0x11
    301e:	89 89       	ldd	r24, Y+17	; 0x11
    3020:	9a 89       	ldd	r25, Y+18	; 0x12
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_sendCommand+0x7ac>
    3026:	9a 8b       	std	Y+18, r25	; 0x12
    3028:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302a:	8b 89       	ldd	r24, Y+19	; 0x13
    302c:	9c 89       	ldd	r25, Y+20	; 0x14
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	9c 8b       	std	Y+20, r25	; 0x14
    3032:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3034:	8b 89       	ldd	r24, Y+19	; 0x13
    3036:	9c 89       	ldd	r25, Y+20	; 0x14
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	69 f7       	brne	.-38     	; 0x3016 <LCD_sendCommand+0x7a0>
    303c:	14 c0       	rjmp	.+40     	; 0x3066 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303e:	6d 89       	ldd	r22, Y+21	; 0x15
    3040:	7e 89       	ldd	r23, Y+22	; 0x16
    3042:	8f 89       	ldd	r24, Y+23	; 0x17
    3044:	98 8d       	ldd	r25, Y+24	; 0x18
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9c 8b       	std	Y+20, r25	; 0x14
    3050:	8b 8b       	std	Y+19, r24	; 0x13
    3052:	8b 89       	ldd	r24, Y+19	; 0x13
    3054:	9c 89       	ldd	r25, Y+20	; 0x14
    3056:	98 8b       	std	Y+16, r25	; 0x10
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	8f 85       	ldd	r24, Y+15	; 0x0f
    305c:	98 89       	ldd	r25, Y+16	; 0x10
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <LCD_sendCommand+0x7e8>
    3062:	98 8b       	std	Y+16, r25	; 0x10
    3064:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	62 e0       	ldi	r22, 0x02	; 2
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	a0 e8       	ldi	r26, 0x80	; 128
    3076:	bf e3       	ldi	r27, 0x3F	; 63
    3078:	8b 87       	std	Y+11, r24	; 0x0b
    307a:	9c 87       	std	Y+12, r25	; 0x0c
    307c:	ad 87       	std	Y+13, r26	; 0x0d
    307e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3080:	6b 85       	ldd	r22, Y+11	; 0x0b
    3082:	7c 85       	ldd	r23, Y+12	; 0x0c
    3084:	8d 85       	ldd	r24, Y+13	; 0x0d
    3086:	9e 85       	ldd	r25, Y+14	; 0x0e
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	4a e7       	ldi	r20, 0x7A	; 122
    308e:	55 e4       	ldi	r21, 0x45	; 69
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	8f 83       	std	Y+7, r24	; 0x07
    309a:	98 87       	std	Y+8, r25	; 0x08
    309c:	a9 87       	std	Y+9, r26	; 0x09
    309e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a0:	6f 81       	ldd	r22, Y+7	; 0x07
    30a2:	78 85       	ldd	r23, Y+8	; 0x08
    30a4:	89 85       	ldd	r24, Y+9	; 0x09
    30a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e8       	ldi	r20, 0x80	; 128
    30ae:	5f e3       	ldi	r21, 0x3F	; 63
    30b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b4:	88 23       	and	r24, r24
    30b6:	2c f4       	brge	.+10     	; 0x30c2 <LCD_sendCommand+0x84c>
		__ticks = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
    30c0:	3f c0       	rjmp	.+126    	; 0x3140 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    30c2:	6f 81       	ldd	r22, Y+7	; 0x07
    30c4:	78 85       	ldd	r23, Y+8	; 0x08
    30c6:	89 85       	ldd	r24, Y+9	; 0x09
    30c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	3f ef       	ldi	r19, 0xFF	; 255
    30ce:	4f e7       	ldi	r20, 0x7F	; 127
    30d0:	57 e4       	ldi	r21, 0x47	; 71
    30d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d6:	18 16       	cp	r1, r24
    30d8:	4c f5       	brge	.+82     	; 0x312c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30da:	6b 85       	ldd	r22, Y+11	; 0x0b
    30dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30de:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e2       	ldi	r20, 0x20	; 32
    30e8:	51 e4       	ldi	r21, 0x41	; 65
    30ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	bc 01       	movw	r22, r24
    30f4:	cd 01       	movw	r24, r26
    30f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	9e 83       	std	Y+6, r25	; 0x06
    3100:	8d 83       	std	Y+5, r24	; 0x05
    3102:	0f c0       	rjmp	.+30     	; 0x3122 <LCD_sendCommand+0x8ac>
    3104:	80 e9       	ldi	r24, 0x90	; 144
    3106:	91 e0       	ldi	r25, 0x01	; 1
    3108:	9c 83       	std	Y+4, r25	; 0x04
    310a:	8b 83       	std	Y+3, r24	; 0x03
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	9c 81       	ldd	r25, Y+4	; 0x04
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_sendCommand+0x89a>
    3114:	9c 83       	std	Y+4, r25	; 0x04
    3116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	9e 83       	std	Y+6, r25	; 0x06
    3120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3122:	8d 81       	ldd	r24, Y+5	; 0x05
    3124:	9e 81       	ldd	r25, Y+6	; 0x06
    3126:	00 97       	sbiw	r24, 0x00	; 0
    3128:	69 f7       	brne	.-38     	; 0x3104 <LCD_sendCommand+0x88e>
    312a:	14 c0       	rjmp	.+40     	; 0x3154 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312c:	6f 81       	ldd	r22, Y+7	; 0x07
    312e:	78 85       	ldd	r23, Y+8	; 0x08
    3130:	89 85       	ldd	r24, Y+9	; 0x09
    3132:	9a 85       	ldd	r25, Y+10	; 0x0a
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9e 83       	std	Y+6, r25	; 0x06
    313e:	8d 83       	std	Y+5, r24	; 0x05
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <LCD_sendCommand+0x8d6>
    3150:	9a 83       	std	Y+2, r25	; 0x02
    3152:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* Output the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    3154:	cd 59       	subi	r28, 0x9D	; 157
    3156:	df 4f       	sbci	r29, 0xFF	; 255
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	08 95       	ret

0000316c <LCD_displayCharacter>:
 * Description :
 * Display the required character on the screen.
 * data: The character to be displayed on the LCD.
 */
void LCD_displayCharacter(uint8 data)
{
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	c3 56       	subi	r28, 0x63	; 99
    317a:	d0 40       	sbci	r29, 0x00	; 0
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	fe 01       	movw	r30, r28
    3188:	ed 59       	subi	r30, 0x9D	; 157
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3198:	fe 01       	movw	r30, r28
    319a:	e1 5a       	subi	r30, 0xA1	; 161
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	a0 e8       	ldi	r26, 0x80	; 128
    31a4:	bf e3       	ldi	r27, 0x3F	; 63
    31a6:	80 83       	st	Z, r24
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	a2 83       	std	Z+2, r26	; 0x02
    31ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ae:	8e 01       	movw	r16, r28
    31b0:	05 5a       	subi	r16, 0xA5	; 165
    31b2:	1f 4f       	sbci	r17, 0xFF	; 255
    31b4:	fe 01       	movw	r30, r28
    31b6:	e1 5a       	subi	r30, 0xA1	; 161
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	60 81       	ld	r22, Z
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a e7       	ldi	r20, 0x7A	; 122
    31c8:	55 e4       	ldi	r21, 0x45	; 69
    31ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	f8 01       	movw	r30, r16
    31d4:	80 83       	st	Z, r24
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	a2 83       	std	Z+2, r26	; 0x02
    31da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31dc:	fe 01       	movw	r30, r28
    31de:	e5 5a       	subi	r30, 0xA5	; 165
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f6:	88 23       	and	r24, r24
    31f8:	44 f4       	brge	.+16     	; 0x320a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    31fa:	fe 01       	movw	r30, r28
    31fc:	e7 5a       	subi	r30, 0xA7	; 167
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
    3208:	64 c0       	rjmp	.+200    	; 0x32d2 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    320a:	fe 01       	movw	r30, r28
    320c:	e5 5a       	subi	r30, 0xA5	; 165
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3224:	18 16       	cp	r1, r24
    3226:	0c f0       	brlt	.+2      	; 0x322a <LCD_displayCharacter+0xbe>
    3228:	43 c0       	rjmp	.+134    	; 0x32b0 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322a:	fe 01       	movw	r30, r28
    322c:	e1 5a       	subi	r30, 0xA1	; 161
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	8e 01       	movw	r16, r28
    324a:	07 5a       	subi	r16, 0xA7	; 167
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	f8 01       	movw	r30, r16
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	1f c0       	rjmp	.+62     	; 0x32a0 <LCD_displayCharacter+0x134>
    3262:	fe 01       	movw	r30, r28
    3264:	e9 5a       	subi	r30, 0xA9	; 169
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	80 e9       	ldi	r24, 0x90	; 144
    326a:	91 e0       	ldi	r25, 0x01	; 1
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	80 83       	st	Z, r24
    3270:	fe 01       	movw	r30, r28
    3272:	e9 5a       	subi	r30, 0xA9	; 169
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <LCD_displayCharacter+0x10e>
    327e:	fe 01       	movw	r30, r28
    3280:	e9 5a       	subi	r30, 0xA9	; 169
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3288:	de 01       	movw	r26, r28
    328a:	a7 5a       	subi	r26, 0xA7	; 167
    328c:	bf 4f       	sbci	r27, 0xFF	; 255
    328e:	fe 01       	movw	r30, r28
    3290:	e7 5a       	subi	r30, 0xA7	; 167
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	11 96       	adiw	r26, 0x01	; 1
    329c:	9c 93       	st	X, r25
    329e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a0:	fe 01       	movw	r30, r28
    32a2:	e7 5a       	subi	r30, 0xA7	; 167
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	d1 f6       	brne	.-76     	; 0x3262 <LCD_displayCharacter+0xf6>
    32ae:	27 c0       	rjmp	.+78     	; 0x32fe <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	8e 01       	movw	r16, r28
    32b2:	07 5a       	subi	r16, 0xA7	; 167
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	fe 01       	movw	r30, r28
    32b8:	e5 5a       	subi	r30, 0xA5	; 165
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	f8 01       	movw	r30, r16
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	80 83       	st	Z, r24
    32d2:	de 01       	movw	r26, r28
    32d4:	ab 5a       	subi	r26, 0xAB	; 171
    32d6:	bf 4f       	sbci	r27, 0xFF	; 255
    32d8:	fe 01       	movw	r30, r28
    32da:	e7 5a       	subi	r30, 0xA7	; 167
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	8d 93       	st	X+, r24
    32e4:	9c 93       	st	X, r25
    32e6:	fe 01       	movw	r30, r28
    32e8:	eb 5a       	subi	r30, 0xAB	; 171
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	91 81       	ldd	r25, Z+1	; 0x01
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <LCD_displayCharacter+0x184>
    32f4:	fe 01       	movw	r30, r28
    32f6:	eb 5a       	subi	r30, 0xAB	; 171
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	91 83       	std	Z+1, r25	; 0x01
    32fc:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	62 e0       	ldi	r22, 0x02	; 2
    3302:	41 e0       	ldi	r20, 0x01	; 1
    3304:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3308:	fe 01       	movw	r30, r28
    330a:	ef 5a       	subi	r30, 0xAF	; 175
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 e8       	ldi	r26, 0x80	; 128
    3314:	bf e3       	ldi	r27, 0x3F	; 63
    3316:	80 83       	st	Z, r24
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	a2 83       	std	Z+2, r26	; 0x02
    331c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	8e 01       	movw	r16, r28
    3320:	03 5b       	subi	r16, 0xB3	; 179
    3322:	1f 4f       	sbci	r17, 0xFF	; 255
    3324:	fe 01       	movw	r30, r28
    3326:	ef 5a       	subi	r30, 0xAF	; 175
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a e7       	ldi	r20, 0x7A	; 122
    3338:	55 e4       	ldi	r21, 0x45	; 69
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	f8 01       	movw	r30, r16
    3344:	80 83       	st	Z, r24
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	a2 83       	std	Z+2, r26	; 0x02
    334a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334c:	fe 01       	movw	r30, r28
    334e:	e3 5b       	subi	r30, 0xB3	; 179
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	44 f4       	brge	.+16     	; 0x337a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    336a:	fe 01       	movw	r30, r28
    336c:	e5 5b       	subi	r30, 0xB5	; 181
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	80 83       	st	Z, r24
    3378:	64 c0       	rjmp	.+200    	; 0x3442 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    337a:	fe 01       	movw	r30, r28
    337c:	e3 5b       	subi	r30, 0xB3	; 179
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	0c f0       	brlt	.+2      	; 0x339a <LCD_displayCharacter+0x22e>
    3398:	43 c0       	rjmp	.+134    	; 0x3420 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	fe 01       	movw	r30, r28
    339c:	ef 5a       	subi	r30, 0xAF	; 175
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	8e 01       	movw	r16, r28
    33ba:	05 5b       	subi	r16, 0xB5	; 181
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	f8 01       	movw	r30, r16
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	80 83       	st	Z, r24
    33d0:	1f c0       	rjmp	.+62     	; 0x3410 <LCD_displayCharacter+0x2a4>
    33d2:	fe 01       	movw	r30, r28
    33d4:	e7 5b       	subi	r30, 0xB7	; 183
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 e9       	ldi	r24, 0x90	; 144
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
    33e0:	fe 01       	movw	r30, r28
    33e2:	e7 5b       	subi	r30, 0xB7	; 183
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <LCD_displayCharacter+0x27e>
    33ee:	fe 01       	movw	r30, r28
    33f0:	e7 5b       	subi	r30, 0xB7	; 183
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	de 01       	movw	r26, r28
    33fa:	a5 5b       	subi	r26, 0xB5	; 181
    33fc:	bf 4f       	sbci	r27, 0xFF	; 255
    33fe:	fe 01       	movw	r30, r28
    3400:	e5 5b       	subi	r30, 0xB5	; 181
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	9c 93       	st	X, r25
    340e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3410:	fe 01       	movw	r30, r28
    3412:	e5 5b       	subi	r30, 0xB5	; 181
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	d1 f6       	brne	.-76     	; 0x33d2 <LCD_displayCharacter+0x266>
    341e:	27 c0       	rjmp	.+78     	; 0x346e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3420:	8e 01       	movw	r16, r28
    3422:	05 5b       	subi	r16, 0xB5	; 181
    3424:	1f 4f       	sbci	r17, 0xFF	; 255
    3426:	fe 01       	movw	r30, r28
    3428:	e3 5b       	subi	r30, 0xB3	; 179
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	60 81       	ld	r22, Z
    342e:	71 81       	ldd	r23, Z+1	; 0x01
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	93 81       	ldd	r25, Z+3	; 0x03
    3434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	f8 01       	movw	r30, r16
    343e:	91 83       	std	Z+1, r25	; 0x01
    3440:	80 83       	st	Z, r24
    3442:	de 01       	movw	r26, r28
    3444:	a9 5b       	subi	r26, 0xB9	; 185
    3446:	bf 4f       	sbci	r27, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e5 5b       	subi	r30, 0xB5	; 181
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	8d 93       	st	X+, r24
    3454:	9c 93       	st	X, r25
    3456:	fe 01       	movw	r30, r28
    3458:	e9 5b       	subi	r30, 0xB9	; 185
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <LCD_displayCharacter+0x2f4>
    3464:	fe 01       	movw	r30, r28
    3466:	e9 5b       	subi	r30, 0xB9	; 185
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    346e:	fe 01       	movw	r30, r28
    3470:	ed 59       	subi	r30, 0x9D	; 157
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	88 2f       	mov	r24, r24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	80 71       	andi	r24, 0x10	; 16
    347c:	90 70       	andi	r25, 0x00	; 0
    347e:	95 95       	asr	r25
    3480:	87 95       	ror	r24
    3482:	95 95       	asr	r25
    3484:	87 95       	ror	r24
    3486:	95 95       	asr	r25
    3488:	87 95       	ror	r24
    348a:	95 95       	asr	r25
    348c:	87 95       	ror	r24
    348e:	98 2f       	mov	r25, r24
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	63 e0       	ldi	r22, 0x03	; 3
    3494:	49 2f       	mov	r20, r25
    3496:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    349a:	fe 01       	movw	r30, r28
    349c:	ed 59       	subi	r30, 0x9D	; 157
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 81       	ld	r24, Z
    34a2:	88 2f       	mov	r24, r24
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	80 72       	andi	r24, 0x20	; 32
    34a8:	90 70       	andi	r25, 0x00	; 0
    34aa:	95 95       	asr	r25
    34ac:	87 95       	ror	r24
    34ae:	95 95       	asr	r25
    34b0:	87 95       	ror	r24
    34b2:	95 95       	asr	r25
    34b4:	87 95       	ror	r24
    34b6:	95 95       	asr	r25
    34b8:	87 95       	ror	r24
    34ba:	95 95       	asr	r25
    34bc:	87 95       	ror	r24
    34be:	98 2f       	mov	r25, r24
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	64 e0       	ldi	r22, 0x04	; 4
    34c4:	49 2f       	mov	r20, r25
    34c6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    34ca:	fe 01       	movw	r30, r28
    34cc:	ed 59       	subi	r30, 0x9D	; 157
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	88 2f       	mov	r24, r24
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	80 74       	andi	r24, 0x40	; 64
    34d8:	90 70       	andi	r25, 0x00	; 0
    34da:	08 2e       	mov	r0, r24
    34dc:	89 2f       	mov	r24, r25
    34de:	00 0c       	add	r0, r0
    34e0:	88 1f       	adc	r24, r24
    34e2:	99 0b       	sbc	r25, r25
    34e4:	00 0c       	add	r0, r0
    34e6:	88 1f       	adc	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	98 2f       	mov	r25, r24
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	65 e0       	ldi	r22, 0x05	; 5
    34f0:	49 2f       	mov	r20, r25
    34f2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    34f6:	fe 01       	movw	r30, r28
    34f8:	ed 59       	subi	r30, 0x9D	; 157
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 81       	ld	r24, Z
    34fe:	98 2f       	mov	r25, r24
    3500:	99 1f       	adc	r25, r25
    3502:	99 27       	eor	r25, r25
    3504:	99 1f       	adc	r25, r25
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	66 e0       	ldi	r22, 0x06	; 6
    350a:	49 2f       	mov	r20, r25
    350c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3510:	fe 01       	movw	r30, r28
    3512:	ed 5b       	subi	r30, 0xBD	; 189
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 e8       	ldi	r26, 0x80	; 128
    351c:	bf e3       	ldi	r27, 0x3F	; 63
    351e:	80 83       	st	Z, r24
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	a2 83       	std	Z+2, r26	; 0x02
    3524:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	8e 01       	movw	r16, r28
    3528:	01 5c       	subi	r16, 0xC1	; 193
    352a:	1f 4f       	sbci	r17, 0xFF	; 255
    352c:	fe 01       	movw	r30, r28
    352e:	ed 5b       	subi	r30, 0xBD	; 189
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	4a e7       	ldi	r20, 0x7A	; 122
    3540:	55 e4       	ldi	r21, 0x45	; 69
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	f8 01       	movw	r30, r16
    354c:	80 83       	st	Z, r24
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	a2 83       	std	Z+2, r26	; 0x02
    3552:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3554:	fe 01       	movw	r30, r28
    3556:	ff 96       	adiw	r30, 0x3f	; 63
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e8       	ldi	r20, 0x80	; 128
    3566:	5f e3       	ldi	r21, 0x3F	; 63
    3568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356c:	88 23       	and	r24, r24
    356e:	2c f4       	brge	.+10     	; 0x357a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9e af       	std	Y+62, r25	; 0x3e
    3576:	8d af       	std	Y+61, r24	; 0x3d
    3578:	46 c0       	rjmp	.+140    	; 0x3606 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    357a:	fe 01       	movw	r30, r28
    357c:	ff 96       	adiw	r30, 0x3f	; 63
    357e:	60 81       	ld	r22, Z
    3580:	71 81       	ldd	r23, Z+1	; 0x01
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	3f ef       	ldi	r19, 0xFF	; 255
    358a:	4f e7       	ldi	r20, 0x7F	; 127
    358c:	57 e4       	ldi	r21, 0x47	; 71
    358e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3592:	18 16       	cp	r1, r24
    3594:	64 f5       	brge	.+88     	; 0x35ee <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3596:	fe 01       	movw	r30, r28
    3598:	ed 5b       	subi	r30, 0xBD	; 189
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e2       	ldi	r20, 0x20	; 32
    35aa:	51 e4       	ldi	r21, 0x41	; 65
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9e af       	std	Y+62, r25	; 0x3e
    35c2:	8d af       	std	Y+61, r24	; 0x3d
    35c4:	0f c0       	rjmp	.+30     	; 0x35e4 <LCD_displayCharacter+0x478>
    35c6:	80 e9       	ldi	r24, 0x90	; 144
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	9c af       	std	Y+60, r25	; 0x3c
    35cc:	8b af       	std	Y+59, r24	; 0x3b
    35ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    35d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <LCD_displayCharacter+0x466>
    35d6:	9c af       	std	Y+60, r25	; 0x3c
    35d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35da:	8d ad       	ldd	r24, Y+61	; 0x3d
    35dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	9e af       	std	Y+62, r25	; 0x3e
    35e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    35e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	69 f7       	brne	.-38     	; 0x35c6 <LCD_displayCharacter+0x45a>
    35ec:	16 c0       	rjmp	.+44     	; 0x361a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ee:	fe 01       	movw	r30, r28
    35f0:	ff 96       	adiw	r30, 0x3f	; 63
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9e af       	std	Y+62, r25	; 0x3e
    3604:	8d af       	std	Y+61, r24	; 0x3d
    3606:	8d ad       	ldd	r24, Y+61	; 0x3d
    3608:	9e ad       	ldd	r25, Y+62	; 0x3e
    360a:	9a af       	std	Y+58, r25	; 0x3a
    360c:	89 af       	std	Y+57, r24	; 0x39
    360e:	89 ad       	ldd	r24, Y+57	; 0x39
    3610:	9a ad       	ldd	r25, Y+58	; 0x3a
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <LCD_displayCharacter+0x4a6>
    3616:	9a af       	std	Y+58, r25	; 0x3a
    3618:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	62 e0       	ldi	r22, 0x02	; 2
    361e:	40 e0       	ldi	r20, 0x00	; 0
    3620:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a0 e8       	ldi	r26, 0x80	; 128
    362a:	bf e3       	ldi	r27, 0x3F	; 63
    362c:	8d ab       	std	Y+53, r24	; 0x35
    362e:	9e ab       	std	Y+54, r25	; 0x36
    3630:	af ab       	std	Y+55, r26	; 0x37
    3632:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3634:	6d a9       	ldd	r22, Y+53	; 0x35
    3636:	7e a9       	ldd	r23, Y+54	; 0x36
    3638:	8f a9       	ldd	r24, Y+55	; 0x37
    363a:	98 ad       	ldd	r25, Y+56	; 0x38
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	4a e7       	ldi	r20, 0x7A	; 122
    3642:	55 e4       	ldi	r21, 0x45	; 69
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	89 ab       	std	Y+49, r24	; 0x31
    364e:	9a ab       	std	Y+50, r25	; 0x32
    3650:	ab ab       	std	Y+51, r26	; 0x33
    3652:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3654:	69 a9       	ldd	r22, Y+49	; 0x31
    3656:	7a a9       	ldd	r23, Y+50	; 0x32
    3658:	8b a9       	ldd	r24, Y+51	; 0x33
    365a:	9c a9       	ldd	r25, Y+52	; 0x34
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e8       	ldi	r20, 0x80	; 128
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3668:	88 23       	and	r24, r24
    366a:	2c f4       	brge	.+10     	; 0x3676 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	98 ab       	std	Y+48, r25	; 0x30
    3672:	8f a7       	std	Y+47, r24	; 0x2f
    3674:	3f c0       	rjmp	.+126    	; 0x36f4 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3676:	69 a9       	ldd	r22, Y+49	; 0x31
    3678:	7a a9       	ldd	r23, Y+50	; 0x32
    367a:	8b a9       	ldd	r24, Y+51	; 0x33
    367c:	9c a9       	ldd	r25, Y+52	; 0x34
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	3f ef       	ldi	r19, 0xFF	; 255
    3682:	4f e7       	ldi	r20, 0x7F	; 127
    3684:	57 e4       	ldi	r21, 0x47	; 71
    3686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    368a:	18 16       	cp	r1, r24
    368c:	4c f5       	brge	.+82     	; 0x36e0 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368e:	6d a9       	ldd	r22, Y+53	; 0x35
    3690:	7e a9       	ldd	r23, Y+54	; 0x36
    3692:	8f a9       	ldd	r24, Y+55	; 0x37
    3694:	98 ad       	ldd	r25, Y+56	; 0x38
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e2       	ldi	r20, 0x20	; 32
    369c:	51 e4       	ldi	r21, 0x41	; 65
    369e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	bc 01       	movw	r22, r24
    36a8:	cd 01       	movw	r24, r26
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	98 ab       	std	Y+48, r25	; 0x30
    36b4:	8f a7       	std	Y+47, r24	; 0x2f
    36b6:	0f c0       	rjmp	.+30     	; 0x36d6 <LCD_displayCharacter+0x56a>
    36b8:	80 e9       	ldi	r24, 0x90	; 144
    36ba:	91 e0       	ldi	r25, 0x01	; 1
    36bc:	9e a7       	std	Y+46, r25	; 0x2e
    36be:	8d a7       	std	Y+45, r24	; 0x2d
    36c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    36c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <LCD_displayCharacter+0x558>
    36c8:	9e a7       	std	Y+46, r25	; 0x2e
    36ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ce:	98 a9       	ldd	r25, Y+48	; 0x30
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	98 ab       	std	Y+48, r25	; 0x30
    36d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d8:	98 a9       	ldd	r25, Y+48	; 0x30
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	69 f7       	brne	.-38     	; 0x36b8 <LCD_displayCharacter+0x54c>
    36de:	14 c0       	rjmp	.+40     	; 0x3708 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e0:	69 a9       	ldd	r22, Y+49	; 0x31
    36e2:	7a a9       	ldd	r23, Y+50	; 0x32
    36e4:	8b a9       	ldd	r24, Y+51	; 0x33
    36e6:	9c a9       	ldd	r25, Y+52	; 0x34
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	98 ab       	std	Y+48, r25	; 0x30
    36f2:	8f a7       	std	Y+47, r24	; 0x2f
    36f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f6:	98 a9       	ldd	r25, Y+48	; 0x30
    36f8:	9c a7       	std	Y+44, r25	; 0x2c
    36fa:	8b a7       	std	Y+43, r24	; 0x2b
    36fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	f1 f7       	brne	.-4      	; 0x3700 <LCD_displayCharacter+0x594>
    3704:	9c a7       	std	Y+44, r25	; 0x2c
    3706:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	62 e0       	ldi	r22, 0x02	; 2
    370c:	41 e0       	ldi	r20, 0x01	; 1
    370e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	a0 e8       	ldi	r26, 0x80	; 128
    3718:	bf e3       	ldi	r27, 0x3F	; 63
    371a:	8f a3       	std	Y+39, r24	; 0x27
    371c:	98 a7       	std	Y+40, r25	; 0x28
    371e:	a9 a7       	std	Y+41, r26	; 0x29
    3720:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3722:	6f a1       	ldd	r22, Y+39	; 0x27
    3724:	78 a5       	ldd	r23, Y+40	; 0x28
    3726:	89 a5       	ldd	r24, Y+41	; 0x29
    3728:	9a a5       	ldd	r25, Y+42	; 0x2a
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	4a e7       	ldi	r20, 0x7A	; 122
    3730:	55 e4       	ldi	r21, 0x45	; 69
    3732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	8b a3       	std	Y+35, r24	; 0x23
    373c:	9c a3       	std	Y+36, r25	; 0x24
    373e:	ad a3       	std	Y+37, r26	; 0x25
    3740:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3742:	6b a1       	ldd	r22, Y+35	; 0x23
    3744:	7c a1       	ldd	r23, Y+36	; 0x24
    3746:	8d a1       	ldd	r24, Y+37	; 0x25
    3748:	9e a1       	ldd	r25, Y+38	; 0x26
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e8       	ldi	r20, 0x80	; 128
    3750:	5f e3       	ldi	r21, 0x3F	; 63
    3752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3756:	88 23       	and	r24, r24
    3758:	2c f4       	brge	.+10     	; 0x3764 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	9a a3       	std	Y+34, r25	; 0x22
    3760:	89 a3       	std	Y+33, r24	; 0x21
    3762:	3f c0       	rjmp	.+126    	; 0x37e2 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3764:	6b a1       	ldd	r22, Y+35	; 0x23
    3766:	7c a1       	ldd	r23, Y+36	; 0x24
    3768:	8d a1       	ldd	r24, Y+37	; 0x25
    376a:	9e a1       	ldd	r25, Y+38	; 0x26
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	3f ef       	ldi	r19, 0xFF	; 255
    3770:	4f e7       	ldi	r20, 0x7F	; 127
    3772:	57 e4       	ldi	r21, 0x47	; 71
    3774:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3778:	18 16       	cp	r1, r24
    377a:	4c f5       	brge	.+82     	; 0x37ce <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377c:	6f a1       	ldd	r22, Y+39	; 0x27
    377e:	78 a5       	ldd	r23, Y+40	; 0x28
    3780:	89 a5       	ldd	r24, Y+41	; 0x29
    3782:	9a a5       	ldd	r25, Y+42	; 0x2a
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e2       	ldi	r20, 0x20	; 32
    378a:	51 e4       	ldi	r21, 0x41	; 65
    378c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	9a a3       	std	Y+34, r25	; 0x22
    37a2:	89 a3       	std	Y+33, r24	; 0x21
    37a4:	0f c0       	rjmp	.+30     	; 0x37c4 <LCD_displayCharacter+0x658>
    37a6:	80 e9       	ldi	r24, 0x90	; 144
    37a8:	91 e0       	ldi	r25, 0x01	; 1
    37aa:	98 a3       	std	Y+32, r25	; 0x20
    37ac:	8f 8f       	std	Y+31, r24	; 0x1f
    37ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37b0:	98 a1       	ldd	r25, Y+32	; 0x20
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <LCD_displayCharacter+0x646>
    37b6:	98 a3       	std	Y+32, r25	; 0x20
    37b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ba:	89 a1       	ldd	r24, Y+33	; 0x21
    37bc:	9a a1       	ldd	r25, Y+34	; 0x22
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	9a a3       	std	Y+34, r25	; 0x22
    37c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c4:	89 a1       	ldd	r24, Y+33	; 0x21
    37c6:	9a a1       	ldd	r25, Y+34	; 0x22
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	69 f7       	brne	.-38     	; 0x37a6 <LCD_displayCharacter+0x63a>
    37cc:	14 c0       	rjmp	.+40     	; 0x37f6 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ce:	6b a1       	ldd	r22, Y+35	; 0x23
    37d0:	7c a1       	ldd	r23, Y+36	; 0x24
    37d2:	8d a1       	ldd	r24, Y+37	; 0x25
    37d4:	9e a1       	ldd	r25, Y+38	; 0x26
    37d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	9a a3       	std	Y+34, r25	; 0x22
    37e0:	89 a3       	std	Y+33, r24	; 0x21
    37e2:	89 a1       	ldd	r24, Y+33	; 0x21
    37e4:	9a a1       	ldd	r25, Y+34	; 0x22
    37e6:	9e 8f       	std	Y+30, r25	; 0x1e
    37e8:	8d 8f       	std	Y+29, r24	; 0x1d
    37ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <LCD_displayCharacter+0x682>
    37f2:	9e 8f       	std	Y+30, r25	; 0x1e
    37f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    37f6:	fe 01       	movw	r30, r28
    37f8:	ed 59       	subi	r30, 0x9D	; 157
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	98 2f       	mov	r25, r24
    3800:	91 70       	andi	r25, 0x01	; 1
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	63 e0       	ldi	r22, 0x03	; 3
    3806:	49 2f       	mov	r20, r25
    3808:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    380c:	fe 01       	movw	r30, r28
    380e:	ed 59       	subi	r30, 0x9D	; 157
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	80 81       	ld	r24, Z
    3814:	88 2f       	mov	r24, r24
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	82 70       	andi	r24, 0x02	; 2
    381a:	90 70       	andi	r25, 0x00	; 0
    381c:	95 95       	asr	r25
    381e:	87 95       	ror	r24
    3820:	98 2f       	mov	r25, r24
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	64 e0       	ldi	r22, 0x04	; 4
    3826:	49 2f       	mov	r20, r25
    3828:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    382c:	fe 01       	movw	r30, r28
    382e:	ed 59       	subi	r30, 0x9D	; 157
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 81       	ld	r24, Z
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	84 70       	andi	r24, 0x04	; 4
    383a:	90 70       	andi	r25, 0x00	; 0
    383c:	95 95       	asr	r25
    383e:	87 95       	ror	r24
    3840:	95 95       	asr	r25
    3842:	87 95       	ror	r24
    3844:	98 2f       	mov	r25, r24
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	65 e0       	ldi	r22, 0x05	; 5
    384a:	49 2f       	mov	r20, r25
    384c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    3850:	fe 01       	movw	r30, r28
    3852:	ed 59       	subi	r30, 0x9D	; 157
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	88 2f       	mov	r24, r24
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	88 70       	andi	r24, 0x08	; 8
    385e:	90 70       	andi	r25, 0x00	; 0
    3860:	95 95       	asr	r25
    3862:	87 95       	ror	r24
    3864:	95 95       	asr	r25
    3866:	87 95       	ror	r24
    3868:	95 95       	asr	r25
    386a:	87 95       	ror	r24
    386c:	98 2f       	mov	r25, r24
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	66 e0       	ldi	r22, 0x06	; 6
    3872:	49 2f       	mov	r20, r25
    3874:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	a0 e8       	ldi	r26, 0x80	; 128
    387e:	bf e3       	ldi	r27, 0x3F	; 63
    3880:	89 8f       	std	Y+25, r24	; 0x19
    3882:	9a 8f       	std	Y+26, r25	; 0x1a
    3884:	ab 8f       	std	Y+27, r26	; 0x1b
    3886:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3888:	69 8d       	ldd	r22, Y+25	; 0x19
    388a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    388c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    388e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	4a e7       	ldi	r20, 0x7A	; 122
    3896:	55 e4       	ldi	r21, 0x45	; 69
    3898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	8d 8b       	std	Y+21, r24	; 0x15
    38a2:	9e 8b       	std	Y+22, r25	; 0x16
    38a4:	af 8b       	std	Y+23, r26	; 0x17
    38a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38a8:	6d 89       	ldd	r22, Y+21	; 0x15
    38aa:	7e 89       	ldd	r23, Y+22	; 0x16
    38ac:	8f 89       	ldd	r24, Y+23	; 0x17
    38ae:	98 8d       	ldd	r25, Y+24	; 0x18
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e8       	ldi	r20, 0x80	; 128
    38b6:	5f e3       	ldi	r21, 0x3F	; 63
    38b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38bc:	88 23       	and	r24, r24
    38be:	2c f4       	brge	.+10     	; 0x38ca <LCD_displayCharacter+0x75e>
		__ticks = 1;
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	9c 8b       	std	Y+20, r25	; 0x14
    38c6:	8b 8b       	std	Y+19, r24	; 0x13
    38c8:	3f c0       	rjmp	.+126    	; 0x3948 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    38ca:	6d 89       	ldd	r22, Y+21	; 0x15
    38cc:	7e 89       	ldd	r23, Y+22	; 0x16
    38ce:	8f 89       	ldd	r24, Y+23	; 0x17
    38d0:	98 8d       	ldd	r25, Y+24	; 0x18
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	3f ef       	ldi	r19, 0xFF	; 255
    38d6:	4f e7       	ldi	r20, 0x7F	; 127
    38d8:	57 e4       	ldi	r21, 0x47	; 71
    38da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38de:	18 16       	cp	r1, r24
    38e0:	4c f5       	brge	.+82     	; 0x3934 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e2:	69 8d       	ldd	r22, Y+25	; 0x19
    38e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e2       	ldi	r20, 0x20	; 32
    38f0:	51 e4       	ldi	r21, 0x41	; 65
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	bc 01       	movw	r22, r24
    38fc:	cd 01       	movw	r24, r26
    38fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	9c 8b       	std	Y+20, r25	; 0x14
    3908:	8b 8b       	std	Y+19, r24	; 0x13
    390a:	0f c0       	rjmp	.+30     	; 0x392a <LCD_displayCharacter+0x7be>
    390c:	80 e9       	ldi	r24, 0x90	; 144
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	9a 8b       	std	Y+18, r25	; 0x12
    3912:	89 8b       	std	Y+17, r24	; 0x11
    3914:	89 89       	ldd	r24, Y+17	; 0x11
    3916:	9a 89       	ldd	r25, Y+18	; 0x12
    3918:	01 97       	sbiw	r24, 0x01	; 1
    391a:	f1 f7       	brne	.-4      	; 0x3918 <LCD_displayCharacter+0x7ac>
    391c:	9a 8b       	std	Y+18, r25	; 0x12
    391e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3920:	8b 89       	ldd	r24, Y+19	; 0x13
    3922:	9c 89       	ldd	r25, Y+20	; 0x14
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	9c 8b       	std	Y+20, r25	; 0x14
    3928:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    392a:	8b 89       	ldd	r24, Y+19	; 0x13
    392c:	9c 89       	ldd	r25, Y+20	; 0x14
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	69 f7       	brne	.-38     	; 0x390c <LCD_displayCharacter+0x7a0>
    3932:	14 c0       	rjmp	.+40     	; 0x395c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3934:	6d 89       	ldd	r22, Y+21	; 0x15
    3936:	7e 89       	ldd	r23, Y+22	; 0x16
    3938:	8f 89       	ldd	r24, Y+23	; 0x17
    393a:	98 8d       	ldd	r25, Y+24	; 0x18
    393c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	9c 8b       	std	Y+20, r25	; 0x14
    3946:	8b 8b       	std	Y+19, r24	; 0x13
    3948:	8b 89       	ldd	r24, Y+19	; 0x13
    394a:	9c 89       	ldd	r25, Y+20	; 0x14
    394c:	98 8b       	std	Y+16, r25	; 0x10
    394e:	8f 87       	std	Y+15, r24	; 0x0f
    3950:	8f 85       	ldd	r24, Y+15	; 0x0f
    3952:	98 89       	ldd	r25, Y+16	; 0x10
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	f1 f7       	brne	.-4      	; 0x3954 <LCD_displayCharacter+0x7e8>
    3958:	98 8b       	std	Y+16, r25	; 0x10
    395a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	40 e0       	ldi	r20, 0x00	; 0
    3962:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	a0 e8       	ldi	r26, 0x80	; 128
    396c:	bf e3       	ldi	r27, 0x3F	; 63
    396e:	8b 87       	std	Y+11, r24	; 0x0b
    3970:	9c 87       	std	Y+12, r25	; 0x0c
    3972:	ad 87       	std	Y+13, r26	; 0x0d
    3974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3976:	6b 85       	ldd	r22, Y+11	; 0x0b
    3978:	7c 85       	ldd	r23, Y+12	; 0x0c
    397a:	8d 85       	ldd	r24, Y+13	; 0x0d
    397c:	9e 85       	ldd	r25, Y+14	; 0x0e
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	4a e7       	ldi	r20, 0x7A	; 122
    3984:	55 e4       	ldi	r21, 0x45	; 69
    3986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	8f 83       	std	Y+7, r24	; 0x07
    3990:	98 87       	std	Y+8, r25	; 0x08
    3992:	a9 87       	std	Y+9, r26	; 0x09
    3994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3996:	6f 81       	ldd	r22, Y+7	; 0x07
    3998:	78 85       	ldd	r23, Y+8	; 0x08
    399a:	89 85       	ldd	r24, Y+9	; 0x09
    399c:	9a 85       	ldd	r25, Y+10	; 0x0a
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e8       	ldi	r20, 0x80	; 128
    39a4:	5f e3       	ldi	r21, 0x3F	; 63
    39a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39aa:	88 23       	and	r24, r24
    39ac:	2c f4       	brge	.+10     	; 0x39b8 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	9e 83       	std	Y+6, r25	; 0x06
    39b4:	8d 83       	std	Y+5, r24	; 0x05
    39b6:	3f c0       	rjmp	.+126    	; 0x3a36 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    39b8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ba:	78 85       	ldd	r23, Y+8	; 0x08
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	3f ef       	ldi	r19, 0xFF	; 255
    39c4:	4f e7       	ldi	r20, 0x7F	; 127
    39c6:	57 e4       	ldi	r21, 0x47	; 71
    39c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39cc:	18 16       	cp	r1, r24
    39ce:	4c f5       	brge	.+82     	; 0x3a22 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e2       	ldi	r20, 0x20	; 32
    39de:	51 e4       	ldi	r21, 0x41	; 65
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	bc 01       	movw	r22, r24
    39ea:	cd 01       	movw	r24, r26
    39ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	9e 83       	std	Y+6, r25	; 0x06
    39f6:	8d 83       	std	Y+5, r24	; 0x05
    39f8:	0f c0       	rjmp	.+30     	; 0x3a18 <LCD_displayCharacter+0x8ac>
    39fa:	80 e9       	ldi	r24, 0x90	; 144
    39fc:	91 e0       	ldi	r25, 0x01	; 1
    39fe:	9c 83       	std	Y+4, r25	; 0x04
    3a00:	8b 83       	std	Y+3, r24	; 0x03
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	9c 81       	ldd	r25, Y+4	; 0x04
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <LCD_displayCharacter+0x89a>
    3a0a:	9c 83       	std	Y+4, r25	; 0x04
    3a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a10:	9e 81       	ldd	r25, Y+6	; 0x06
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	9e 83       	std	Y+6, r25	; 0x06
    3a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a18:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1c:	00 97       	sbiw	r24, 0x00	; 0
    3a1e:	69 f7       	brne	.-38     	; 0x39fa <LCD_displayCharacter+0x88e>
    3a20:	14 c0       	rjmp	.+40     	; 0x3a4a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a22:	6f 81       	ldd	r22, Y+7	; 0x07
    3a24:	78 85       	ldd	r23, Y+8	; 0x08
    3a26:	89 85       	ldd	r24, Y+9	; 0x09
    3a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	9e 83       	std	Y+6, r25	; 0x06
    3a34:	8d 83       	std	Y+5, r24	; 0x05
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3a:	9a 83       	std	Y+2, r25	; 0x02
    3a3c:	89 83       	std	Y+1, r24	; 0x01
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <LCD_displayCharacter+0x8d6>
    3a46:	9a 83       	std	Y+2, r25	; 0x02
    3a48:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* Output the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    3a4a:	cd 59       	subi	r28, 0x9D	; 157
    3a4c:	df 4f       	sbci	r29, 0xFF	; 255
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	1f 91       	pop	r17
    3a5e:	0f 91       	pop	r16
    3a60:	08 95       	ret

00003a62 <LCD_displayString>:
 * Description :
 * Display the required string on the screen.
 * Str: Pointer to the string to be displayed on the LCD.
 */
void LCD_displayString(const char *Str)
{
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	00 d0       	rcall	.+0      	; 0x3a68 <LCD_displayString+0x6>
    3a68:	0f 92       	push	r0
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	9b 83       	std	Y+3, r25	; 0x03
    3a70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a72:	19 82       	std	Y+1, r1	; 0x01
    3a74:	0e c0       	rjmp	.+28     	; 0x3a92 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	28 2f       	mov	r18, r24
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a80:	fc 01       	movw	r30, r24
    3a82:	e2 0f       	add	r30, r18
    3a84:	f3 1f       	adc	r31, r19
    3a86:	80 81       	ld	r24, Z
    3a88:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_displayCharacter>
		i++;
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	8f 5f       	subi	r24, 0xFF	; 255
    3a90:	89 83       	std	Y+1, r24	; 0x01
 * Str: Pointer to the string to be displayed on the LCD.
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	28 2f       	mov	r18, r24
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	e2 0f       	add	r30, r18
    3aa0:	f3 1f       	adc	r31, r19
    3aa2:	80 81       	ld	r24, Z
    3aa4:	88 23       	and	r24, r24
    3aa6:	39 f7       	brne	.-50     	; 0x3a76 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <LCD_moveCursor>:
 * Move the cursor to a specified row and column index on the screen.
 * row: The row index (0 or 1).
 * col: The column index (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <LCD_moveCursor+0x6>
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <LCD_moveCursor+0x8>
    3abc:	0f 92       	push	r0
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
    3ac4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac8:	28 2f       	mov	r18, r24
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	3d 83       	std	Y+5, r19	; 0x05
    3ace:	2c 83       	std	Y+4, r18	; 0x04
    3ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad4:	81 30       	cpi	r24, 0x01	; 1
    3ad6:	91 05       	cpc	r25, r1
    3ad8:	c1 f0       	breq	.+48     	; 0x3b0a <LCD_moveCursor+0x56>
    3ada:	2c 81       	ldd	r18, Y+4	; 0x04
    3adc:	3d 81       	ldd	r19, Y+5	; 0x05
    3ade:	22 30       	cpi	r18, 0x02	; 2
    3ae0:	31 05       	cpc	r19, r1
    3ae2:	2c f4       	brge	.+10     	; 0x3aee <LCD_moveCursor+0x3a>
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	61 f0       	breq	.+24     	; 0x3b04 <LCD_moveCursor+0x50>
    3aec:	19 c0       	rjmp	.+50     	; 0x3b20 <LCD_moveCursor+0x6c>
    3aee:	2c 81       	ldd	r18, Y+4	; 0x04
    3af0:	3d 81       	ldd	r19, Y+5	; 0x05
    3af2:	22 30       	cpi	r18, 0x02	; 2
    3af4:	31 05       	cpc	r19, r1
    3af6:	69 f0       	breq	.+26     	; 0x3b12 <LCD_moveCursor+0x5e>
    3af8:	8c 81       	ldd	r24, Y+4	; 0x04
    3afa:	9d 81       	ldd	r25, Y+5	; 0x05
    3afc:	83 30       	cpi	r24, 0x03	; 3
    3afe:	91 05       	cpc	r25, r1
    3b00:	61 f0       	breq	.+24     	; 0x3b1a <LCD_moveCursor+0x66>
    3b02:	0e c0       	rjmp	.+28     	; 0x3b20 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    3b04:	8b 81       	ldd	r24, Y+3	; 0x03
    3b06:	89 83       	std	Y+1, r24	; 0x01
    3b08:	0b c0       	rjmp	.+22     	; 0x3b20 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    3b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0c:	80 5c       	subi	r24, 0xC0	; 192
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	07 c0       	rjmp	.+14     	; 0x3b20 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    3b12:	8b 81       	ldd	r24, Y+3	; 0x03
    3b14:	80 5f       	subi	r24, 0xF0	; 240
    3b16:	89 83       	std	Y+1, r24	; 0x01
    3b18:	03 c0       	rjmp	.+6      	; 0x3b20 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    3b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1c:	80 5b       	subi	r24, 0xB0	; 176
    3b1e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	80 68       	ori	r24, 0x80	; 128
    3b24:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>
}
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <LCD_displayStringRowColumn>:
 * row: The row index (0 or 1).
 * col: The column index (0 to 15).
 * Str: Pointer to the string to be displayed on the LCD.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <LCD_displayStringRowColumn+0x6>
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <LCD_displayStringRowColumn+0x8>
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	89 83       	std	Y+1, r24	; 0x01
    3b46:	6a 83       	std	Y+2, r22	; 0x02
    3b48:	5c 83       	std	Y+4, r21	; 0x04
    3b4a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* Go to the required LCD position */
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	6a 81       	ldd	r22, Y+2	; 0x02
    3b50:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_moveCursor>
	LCD_displayString(Str); /* Display the string */
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <LCD_displayString>
}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <LCD_intgerToString>:
 * Description :
 * Display the required decimal value on the screen.
 * data: The integer value to be displayed on the LCD.
 */
void LCD_intgerToString(int data)
{
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	62 97       	sbiw	r28, 0x12	; 18
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
    3b7e:	9a 8b       	std	Y+18, r25	; 0x12
    3b80:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* Use itoa C
    3b82:	89 89       	ldd	r24, Y+17	; 0x11
    3b84:	9a 89       	ldd	r25, Y+18	; 0x12
    3b86:	9e 01       	movw	r18, r28
    3b88:	2f 5f       	subi	r18, 0xFF	; 255
    3b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8c:	b9 01       	movw	r22, r18
    3b8e:	4a e0       	ldi	r20, 0x0A	; 10
    3b90:	50 e0       	ldi	r21, 0x00	; 0
    3b92:	0e 94 c0 20 	call	0x4180	; 0x4180 <itoa>
	 * Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	LCD_displayString(buff); /* Display the string */
    3b96:	ce 01       	movw	r24, r28
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <LCD_displayString>
}
    3b9e:	62 96       	adiw	r28, 0x12	; 18
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command.
 */
void LCD_clearScreen(void)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	0e 94 3b 14 	call	0x2876	; 0x2876 <LCD_sendCommand>
}
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <IR_ReadValue>:
 * Function to read the value from a specific IR sensor pin.
 * ir_port: The port number where the IR sensor is connected.
 * ir_pin: The pin number where the IR sensor is connected.
 * Returns: The value read from the IR sensor pin (0 or 1).
 */
uint8 IR_ReadValue(uint8 ir_port, uint8 ir_pin) {
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <IR_ReadValue+0x6>
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	6a 83       	std	Y+2, r22	; 0x02
    return (GPIO_readPin(ir_port, ir_pin));
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	6a 81       	ldd	r22, Y+2	; 0x02
    3bd6:	0e 94 cf 0c 	call	0x199e	; 0x199e <GPIO_readPin>
}
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <IR_init>:
/*
 * Description:
 * Function to initialize the IR sensor.
 * This function sets up the necessary pin directions for the IR sensor.
 */
void IR_init(void) {
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(IR_PORT, IR0_PIN, PIN_INPUT);
    3bec:	83 e0       	ldi	r24, 0x03	; 3
    3bee:	62 e0       	ldi	r22, 0x02	; 2
    3bf0:	40 e0       	ldi	r20, 0x00	; 0
    3bf2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(IR_PORT, IR1_PIN, PIN_INPUT);
    3bf6:	83 e0       	ldi	r24, 0x03	; 3
    3bf8:	63 e0       	ldi	r22, 0x03	; 3
    3bfa:	40 e0       	ldi	r20, 0x00	; 0
    3bfc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
}
    3c00:	cf 91       	pop	r28
    3c02:	df 91       	pop	r29
    3c04:	08 95       	ret

00003c06 <Buzzer_init>:
/*
 * Description:
 * Initializes the buzzer pin direction and turns off the buzzer.
 */
void Buzzer_init(void)
{
    3c06:	df 93       	push	r29
    3c08:	cf 93       	push	r28
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, PIN_OUTPUT);
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	65 e0       	ldi	r22, 0x05	; 5
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, LOGIC_LOW);
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	65 e0       	ldi	r22, 0x05	; 5
    3c1c:	40 e0       	ldi	r20, 0x00	; 0
    3c1e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
}
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <Buzzer_on>:
/*
 * Description:
 * Activates the buzzer.
 */
void Buzzer_on(void)
{
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, LOGIC_HIGH);
    3c30:	82 e0       	ldi	r24, 0x02	; 2
    3c32:	65 e0       	ldi	r22, 0x05	; 5
    3c34:	41 e0       	ldi	r20, 0x01	; 1
    3c36:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
}
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <Buzzer_off>:
/*
 * Description:
 * Deactivates the buzzer.
 */
void Buzzer_off(void)
{
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, LOGIC_LOW);
    3c48:	82 e0       	ldi	r24, 0x02	; 2
    3c4a:	65 e0       	ldi	r22, 0x05	; 5
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPIO_writePin>
}
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <main>:
 *****************************************************************/
uint16 g_distance1 = 0;
uint16 g_distance2 = 0;

int main(void)
{
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
	Inits();			/* Initialize all modules. */
    3c60:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <Inits>

	while(1)
	{
		Read_Distance_and_Display_on_LCD();		/* Read the distance and display it on LCD. */
    3c64:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <Read_Distance_and_Display_on_LCD>
		Read_IR_and_Display_on_LCD();           /* Read the IR sensor values and display them on LCD. */
    3c68:	0e 94 49 20 	call	0x4092	; 0x4092 <Read_IR_and_Display_on_LCD>
    3c6c:	fb cf       	rjmp	.-10     	; 0x3c64 <main+0xc>

00003c6e <Inits>:
/*
 * Description:
 * Function to initialize all modules.
 */
void Inits(void)
{
    3c6e:	df 93       	push	r29
    3c70:	cf 93       	push	r28
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);          /* Enable global interrupts. */
    3c76:	af e5       	ldi	r26, 0x5F	; 95
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	ef e5       	ldi	r30, 0x5F	; 95
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	80 68       	ori	r24, 0x80	; 128
    3c82:	8c 93       	st	X, r24
	Ultrasonic_init(ICU);    /* Initialize the ultrasonic sensor using ICU. */
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	0e 94 1f 10 	call	0x203e	; 0x203e <Ultrasonic_init>
	Ultrasonic_init(EXT_INT);/* Initialize the ultrasonic sensor using external interrupt. */
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	0e 94 1f 10 	call	0x203e	; 0x203e <Ultrasonic_init>
	LCD_init();              /* Initialize the LCD. */
    3c90:	0e 94 89 13 	call	0x2712	; 0x2712 <LCD_init>
	LEDS_init();             /* Initialize the LEDs. */
    3c94:	0e 94 02 13 	call	0x2604	; 0x2604 <LEDS_init>
	Buzzer_init();           /* Initialize the buzzer. */
    3c98:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <Buzzer_init>
	IR_init();               /* Initialize the IR sensors. */
    3c9c:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <IR_init>
}
    3ca0:	cf 91       	pop	r28
    3ca2:	df 91       	pop	r29
    3ca4:	08 95       	ret

00003ca6 <Alert>:
/*
 * Description:
 * Function to make an alert.
 */
void Alert(void)
{
    3ca6:	df 93       	push	r29
    3ca8:	cf 93       	push	r28
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	6c 97       	sbiw	r28, 0x1c	; 28
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	f8 94       	cli
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	cd bf       	out	0x3d, r28	; 61
	LED_on(red);
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
	LED_on(green);
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
	LED_on(blue);
    3cc6:	82 e0       	ldi	r24, 0x02	; 2
    3cc8:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
	Buzzer_on();
    3ccc:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <Buzzer_on>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	a8 e4       	ldi	r26, 0x48	; 72
    3cd6:	b3 e4       	ldi	r27, 0x43	; 67
    3cd8:	89 8f       	std	Y+25, r24	; 0x19
    3cda:	9a 8f       	std	Y+26, r25	; 0x1a
    3cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    3cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a e7       	ldi	r20, 0x7A	; 122
    3cee:	55 e4       	ldi	r21, 0x45	; 69
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	8d 8b       	std	Y+21, r24	; 0x15
    3cfa:	9e 8b       	std	Y+22, r25	; 0x16
    3cfc:	af 8b       	std	Y+23, r26	; 0x17
    3cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d00:	6d 89       	ldd	r22, Y+21	; 0x15
    3d02:	7e 89       	ldd	r23, Y+22	; 0x16
    3d04:	8f 89       	ldd	r24, Y+23	; 0x17
    3d06:	98 8d       	ldd	r25, Y+24	; 0x18
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e8       	ldi	r20, 0x80	; 128
    3d0e:	5f e3       	ldi	r21, 0x3F	; 63
    3d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	2c f4       	brge	.+10     	; 0x3d22 <Alert+0x7c>
		__ticks = 1;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9c 8b       	std	Y+20, r25	; 0x14
    3d1e:	8b 8b       	std	Y+19, r24	; 0x13
    3d20:	3f c0       	rjmp	.+126    	; 0x3da0 <Alert+0xfa>
	else if (__tmp > 65535)
    3d22:	6d 89       	ldd	r22, Y+21	; 0x15
    3d24:	7e 89       	ldd	r23, Y+22	; 0x16
    3d26:	8f 89       	ldd	r24, Y+23	; 0x17
    3d28:	98 8d       	ldd	r25, Y+24	; 0x18
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f ef       	ldi	r19, 0xFF	; 255
    3d2e:	4f e7       	ldi	r20, 0x7F	; 127
    3d30:	57 e4       	ldi	r21, 0x47	; 71
    3d32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	4c f5       	brge	.+82     	; 0x3d8c <Alert+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	9c 8b       	std	Y+20, r25	; 0x14
    3d60:	8b 8b       	std	Y+19, r24	; 0x13
    3d62:	0f c0       	rjmp	.+30     	; 0x3d82 <Alert+0xdc>
    3d64:	80 e9       	ldi	r24, 0x90	; 144
    3d66:	91 e0       	ldi	r25, 0x01	; 1
    3d68:	9a 8b       	std	Y+18, r25	; 0x12
    3d6a:	89 8b       	std	Y+17, r24	; 0x11
    3d6c:	89 89       	ldd	r24, Y+17	; 0x11
    3d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <Alert+0xca>
    3d74:	9a 8b       	std	Y+18, r25	; 0x12
    3d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	9c 8b       	std	Y+20, r25	; 0x14
    3d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d82:	8b 89       	ldd	r24, Y+19	; 0x13
    3d84:	9c 89       	ldd	r25, Y+20	; 0x14
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	69 f7       	brne	.-38     	; 0x3d64 <Alert+0xbe>
    3d8a:	14 c0       	rjmp	.+40     	; 0x3db4 <Alert+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d90:	8f 89       	ldd	r24, Y+23	; 0x17
    3d92:	98 8d       	ldd	r25, Y+24	; 0x18
    3d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	9c 8b       	std	Y+20, r25	; 0x14
    3d9e:	8b 8b       	std	Y+19, r24	; 0x13
    3da0:	8b 89       	ldd	r24, Y+19	; 0x13
    3da2:	9c 89       	ldd	r25, Y+20	; 0x14
    3da4:	98 8b       	std	Y+16, r25	; 0x10
    3da6:	8f 87       	std	Y+15, r24	; 0x0f
    3da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3daa:	98 89       	ldd	r25, Y+16	; 0x10
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <Alert+0x106>
    3db0:	98 8b       	std	Y+16, r25	; 0x10
    3db2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	LED_off(red);
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
	LED_off(green);
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
	LED_off(blue);
    3dc0:	82 e0       	ldi	r24, 0x02	; 2
    3dc2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
	Buzzer_off();
    3dc6:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <Buzzer_off>
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	a8 e4       	ldi	r26, 0x48	; 72
    3dd0:	b3 e4       	ldi	r27, 0x43	; 67
    3dd2:	8b 87       	std	Y+11, r24	; 0x0b
    3dd4:	9c 87       	std	Y+12, r25	; 0x0c
    3dd6:	ad 87       	std	Y+13, r26	; 0x0d
    3dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	4a e7       	ldi	r20, 0x7A	; 122
    3de8:	55 e4       	ldi	r21, 0x45	; 69
    3dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	8f 83       	std	Y+7, r24	; 0x07
    3df4:	98 87       	std	Y+8, r25	; 0x08
    3df6:	a9 87       	std	Y+9, r26	; 0x09
    3df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfc:	78 85       	ldd	r23, Y+8	; 0x08
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e8       	ldi	r20, 0x80	; 128
    3e08:	5f e3       	ldi	r21, 0x3F	; 63
    3e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e0e:	88 23       	and	r24, r24
    3e10:	2c f4       	brge	.+10     	; 0x3e1c <Alert+0x176>
		__ticks = 1;
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	9e 83       	std	Y+6, r25	; 0x06
    3e18:	8d 83       	std	Y+5, r24	; 0x05
    3e1a:	3f c0       	rjmp	.+126    	; 0x3e9a <Alert+0x1f4>
	else if (__tmp > 65535)
    3e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1e:	78 85       	ldd	r23, Y+8	; 0x08
    3e20:	89 85       	ldd	r24, Y+9	; 0x09
    3e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
    3e28:	4f e7       	ldi	r20, 0x7F	; 127
    3e2a:	57 e4       	ldi	r21, 0x47	; 71
    3e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e30:	18 16       	cp	r1, r24
    3e32:	4c f5       	brge	.+82     	; 0x3e86 <Alert+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e2       	ldi	r20, 0x20	; 32
    3e42:	51 e4       	ldi	r21, 0x41	; 65
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	bc 01       	movw	r22, r24
    3e4e:	cd 01       	movw	r24, r26
    3e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	8d 83       	std	Y+5, r24	; 0x05
    3e5c:	0f c0       	rjmp	.+30     	; 0x3e7c <Alert+0x1d6>
    3e5e:	80 e9       	ldi	r24, 0x90	; 144
    3e60:	91 e0       	ldi	r25, 0x01	; 1
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	8b 81       	ldd	r24, Y+3	; 0x03
    3e68:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <Alert+0x1c4>
    3e6e:	9c 83       	std	Y+4, r25	; 0x04
    3e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <Alert+0x1b8>
    3e84:	14 c0       	rjmp	.+40     	; 0x3eae <Alert+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9e 83       	std	Y+6, r25	; 0x06
    3e98:	8d 83       	std	Y+5, r24	; 0x05
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <Alert+0x200>
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    3eae:	6c 96       	adiw	r28, 0x1c	; 28
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	08 95       	ret

00003ec0 <Read_Distance_and_Display_on_LCD>:
 * 11 cm <= Distance <= 15 cm: Red and Green LEDs ON, Blue LED OFF.
 * 16 cm <= Distance <= 20 cm: Only Red LED ON, others OFF.
 * Distance > 20 cm: All LEDs OFF, Buzzer OFF.
 */
void Read_Distance_and_Display_on_LCD(void)
{
    3ec0:	df 93       	push	r29
    3ec2:	cf 93       	push	r28
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
	g_distance1 = Ultrasonic_readDistance(ICU);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	0e 94 0b 12 	call	0x2416	; 0x2416 <Ultrasonic_readDistance>
    3ece:	90 93 9e 01 	sts	0x019E, r25
    3ed2:	80 93 9d 01 	sts	0x019D, r24
	g_distance2 = Ultrasonic_readDistance(EXT_INT);
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0e 94 0b 12 	call	0x2416	; 0x2416 <Ultrasonic_readDistance>
    3edc:	90 93 a0 01 	sts	0x01A0, r25
    3ee0:	80 93 9f 01 	sts	0x019F, r24

	LCD_displayStringRowColumn(0, 0, "D1=");
    3ee4:	20 e6       	ldi	r18, 0x60	; 96
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	a9 01       	movw	r20, r18
    3eee:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
	LCD_intgerToString(g_distance1);
    3ef2:	80 91 9d 01 	lds	r24, 0x019D
    3ef6:	90 91 9e 01 	lds	r25, 0x019E
    3efa:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_intgerToString>

	LCD_displayStringRowColumn(0, 8, ",D2=");
    3efe:	24 e6       	ldi	r18, 0x64	; 100
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	68 e0       	ldi	r22, 0x08	; 8
    3f06:	a9 01       	movw	r20, r18
    3f08:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
	LCD_intgerToString(g_distance2);
    3f0c:	80 91 9f 01 	lds	r24, 0x019F
    3f10:	90 91 a0 01 	lds	r25, 0x01A0
    3f14:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_intgerToString>

	/*
	 * If distance is < 10, clear the next pixel in LCD.
	 */
	if(g_distance1 < 10)
    3f18:	80 91 9d 01 	lds	r24, 0x019D
    3f1c:	90 91 9e 01 	lds	r25, 0x019E
    3f20:	8a 30       	cpi	r24, 0x0A	; 10
    3f22:	91 05       	cpc	r25, r1
    3f24:	40 f4       	brcc	.+16     	; 0x3f36 <Read_Distance_and_Display_on_LCD+0x76>
	{
		LCD_displayStringRowColumn(0, 4, "cm ");
    3f26:	29 e6       	ldi	r18, 0x69	; 105
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	64 e0       	ldi	r22, 0x04	; 4
    3f2e:	a9 01       	movw	r20, r18
    3f30:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
    3f34:	07 c0       	rjmp	.+14     	; 0x3f44 <Read_Distance_and_Display_on_LCD+0x84>
	}
	else
	{
		LCD_displayStringRowColumn(0, 5, "cm ");
    3f36:	29 e6       	ldi	r18, 0x69	; 105
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	65 e0       	ldi	r22, 0x05	; 5
    3f3e:	a9 01       	movw	r20, r18
    3f40:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
	}

	if(g_distance2 < 10)
    3f44:	80 91 9f 01 	lds	r24, 0x019F
    3f48:	90 91 a0 01 	lds	r25, 0x01A0
    3f4c:	8a 30       	cpi	r24, 0x0A	; 10
    3f4e:	91 05       	cpc	r25, r1
    3f50:	40 f4       	brcc	.+16     	; 0x3f62 <Read_Distance_and_Display_on_LCD+0xa2>
	{
		LCD_displayStringRowColumn(0, 13, "cm ");
    3f52:	29 e6       	ldi	r18, 0x69	; 105
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	6d e0       	ldi	r22, 0x0D	; 13
    3f5a:	a9 01       	movw	r20, r18
    3f5c:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
    3f60:	07 c0       	rjmp	.+14     	; 0x3f70 <Read_Distance_and_Display_on_LCD+0xb0>
	}
	else
	{
		LCD_displayStringRowColumn(0, 14, "cm ");
    3f62:	29 e6       	ldi	r18, 0x69	; 105
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	6e e0       	ldi	r22, 0x0E	; 14
    3f6a:	a9 01       	movw	r20, r18
    3f6c:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
	}

	if(g_distance1 <= 5 || g_distance2 <= 5)
    3f70:	80 91 9d 01 	lds	r24, 0x019D
    3f74:	90 91 9e 01 	lds	r25, 0x019E
    3f78:	86 30       	cpi	r24, 0x06	; 6
    3f7a:	91 05       	cpc	r25, r1
    3f7c:	38 f0       	brcs	.+14     	; 0x3f8c <Read_Distance_and_Display_on_LCD+0xcc>
    3f7e:	80 91 9f 01 	lds	r24, 0x019F
    3f82:	90 91 a0 01 	lds	r25, 0x01A0
    3f86:	86 30       	cpi	r24, 0x06	; 6
    3f88:	91 05       	cpc	r25, r1
    3f8a:	18 f4       	brcc	.+6      	; 0x3f92 <Read_Distance_and_Display_on_LCD+0xd2>
	{
		Alert();
    3f8c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <Alert>
    3f90:	7d c0       	rjmp	.+250    	; 0x408c <Read_Distance_and_Display_on_LCD+0x1cc>
	}
	else if((g_distance1 >= 6 && g_distance1 <= 10) || (g_distance2 >= 6 && g_distance2 <= 10))
    3f92:	80 91 9d 01 	lds	r24, 0x019D
    3f96:	90 91 9e 01 	lds	r25, 0x019E
    3f9a:	86 30       	cpi	r24, 0x06	; 6
    3f9c:	91 05       	cpc	r25, r1
    3f9e:	38 f0       	brcs	.+14     	; 0x3fae <Read_Distance_and_Display_on_LCD+0xee>
    3fa0:	80 91 9d 01 	lds	r24, 0x019D
    3fa4:	90 91 9e 01 	lds	r25, 0x019E
    3fa8:	8b 30       	cpi	r24, 0x0B	; 11
    3faa:	91 05       	cpc	r25, r1
    3fac:	70 f0       	brcs	.+28     	; 0x3fca <Read_Distance_and_Display_on_LCD+0x10a>
    3fae:	80 91 9f 01 	lds	r24, 0x019F
    3fb2:	90 91 a0 01 	lds	r25, 0x01A0
    3fb6:	86 30       	cpi	r24, 0x06	; 6
    3fb8:	91 05       	cpc	r25, r1
    3fba:	98 f0       	brcs	.+38     	; 0x3fe2 <Read_Distance_and_Display_on_LCD+0x122>
    3fbc:	80 91 9f 01 	lds	r24, 0x019F
    3fc0:	90 91 a0 01 	lds	r25, 0x01A0
    3fc4:	8b 30       	cpi	r24, 0x0B	; 11
    3fc6:	91 05       	cpc	r25, r1
    3fc8:	60 f4       	brcc	.+24     	; 0x3fe2 <Read_Distance_and_Display_on_LCD+0x122>
	{
		Buzzer_off();
    3fca:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <Buzzer_off>
		LED_on(red);
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
		LED_on(green);
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
		LED_on(blue);
    3fda:	82 e0       	ldi	r24, 0x02	; 2
    3fdc:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
    3fe0:	55 c0       	rjmp	.+170    	; 0x408c <Read_Distance_and_Display_on_LCD+0x1cc>
	}
	else if((g_distance1 >= 11 && g_distance1 <= 15) || (g_distance2 >= 11 && g_distance2 <= 15))
    3fe2:	80 91 9d 01 	lds	r24, 0x019D
    3fe6:	90 91 9e 01 	lds	r25, 0x019E
    3fea:	8b 30       	cpi	r24, 0x0B	; 11
    3fec:	91 05       	cpc	r25, r1
    3fee:	38 f0       	brcs	.+14     	; 0x3ffe <Read_Distance_and_Display_on_LCD+0x13e>
    3ff0:	80 91 9d 01 	lds	r24, 0x019D
    3ff4:	90 91 9e 01 	lds	r25, 0x019E
    3ff8:	80 31       	cpi	r24, 0x10	; 16
    3ffa:	91 05       	cpc	r25, r1
    3ffc:	70 f0       	brcs	.+28     	; 0x401a <Read_Distance_and_Display_on_LCD+0x15a>
    3ffe:	80 91 9f 01 	lds	r24, 0x019F
    4002:	90 91 a0 01 	lds	r25, 0x01A0
    4006:	8b 30       	cpi	r24, 0x0B	; 11
    4008:	91 05       	cpc	r25, r1
    400a:	88 f0       	brcs	.+34     	; 0x402e <Read_Distance_and_Display_on_LCD+0x16e>
    400c:	80 91 9f 01 	lds	r24, 0x019F
    4010:	90 91 a0 01 	lds	r25, 0x01A0
    4014:	80 31       	cpi	r24, 0x10	; 16
    4016:	91 05       	cpc	r25, r1
    4018:	50 f4       	brcc	.+20     	; 0x402e <Read_Distance_and_Display_on_LCD+0x16e>
	{
		LED_on(red);
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
		LED_on(green);
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
		LED_off(blue);
    4026:	82 e0       	ldi	r24, 0x02	; 2
    4028:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
    402c:	2f c0       	rjmp	.+94     	; 0x408c <Read_Distance_and_Display_on_LCD+0x1cc>
	}
	else if((g_distance1 >= 16 && g_distance1 <= 20) || (g_distance2 >= 16 && g_distance2 <= 20))
    402e:	80 91 9d 01 	lds	r24, 0x019D
    4032:	90 91 9e 01 	lds	r25, 0x019E
    4036:	80 31       	cpi	r24, 0x10	; 16
    4038:	91 05       	cpc	r25, r1
    403a:	38 f0       	brcs	.+14     	; 0x404a <Read_Distance_and_Display_on_LCD+0x18a>
    403c:	80 91 9d 01 	lds	r24, 0x019D
    4040:	90 91 9e 01 	lds	r25, 0x019E
    4044:	85 31       	cpi	r24, 0x15	; 21
    4046:	91 05       	cpc	r25, r1
    4048:	70 f0       	brcs	.+28     	; 0x4066 <Read_Distance_and_Display_on_LCD+0x1a6>
    404a:	80 91 9f 01 	lds	r24, 0x019F
    404e:	90 91 a0 01 	lds	r25, 0x01A0
    4052:	80 31       	cpi	r24, 0x10	; 16
    4054:	91 05       	cpc	r25, r1
    4056:	88 f0       	brcs	.+34     	; 0x407a <Read_Distance_and_Display_on_LCD+0x1ba>
    4058:	80 91 9f 01 	lds	r24, 0x019F
    405c:	90 91 a0 01 	lds	r25, 0x01A0
    4060:	85 31       	cpi	r24, 0x15	; 21
    4062:	91 05       	cpc	r25, r1
    4064:	50 f4       	brcc	.+20     	; 0x407a <Read_Distance_and_Display_on_LCD+0x1ba>
	{
		LED_on(red);
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	0e 94 27 13 	call	0x264e	; 0x264e <LED_on>
		LED_off(green);
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
		LED_off(blue);
    4072:	82 e0       	ldi	r24, 0x02	; 2
    4074:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
    4078:	09 c0       	rjmp	.+18     	; 0x408c <Read_Distance_and_Display_on_LCD+0x1cc>
	}
	else
	{
		LED_off(red);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
		LED_off(green);
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
		LED_off(blue);
    4086:	82 e0       	ldi	r24, 0x02	; 2
    4088:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LED_off>
	}
}
    408c:	cf 91       	pop	r28
    408e:	df 91       	pop	r29
    4090:	08 95       	ret

00004092 <Read_IR_and_Display_on_LCD>:
/*
 * Description:
 * Function to read the IR sensor values and display them on LCD.
 */
void Read_IR_and_Display_on_LCD(void)
{
    4092:	df 93       	push	r29
    4094:	cf 93       	push	r28
    4096:	00 d0       	rcall	.+0      	; 0x4098 <Read_IR_and_Display_on_LCD+0x6>
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
	uint8 read_ir1, read_ir2;
	read_ir1 = IR_ReadValue(PORTD_ID, PIN2_ID);
    409c:	83 e0       	ldi	r24, 0x03	; 3
    409e:	62 e0       	ldi	r22, 0x02	; 2
    40a0:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <IR_ReadValue>
    40a4:	8a 83       	std	Y+2, r24	; 0x02
	LCD_displayStringRowColumn(1, 0, "IR1=");
    40a6:	2d e6       	ldi	r18, 0x6D	; 109
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	a9 01       	movw	r20, r18
    40b0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
	LCD_intgerToString(read_ir1);
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	88 2f       	mov	r24, r24
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_intgerToString>
	read_ir2 = IR_ReadValue(PORTD_ID, PIN3_ID);
    40be:	83 e0       	ldi	r24, 0x03	; 3
    40c0:	63 e0       	ldi	r22, 0x03	; 3
    40c2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <IR_ReadValue>
    40c6:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(1, 7, ",IR2=");
    40c8:	22 e7       	ldi	r18, 0x72	; 114
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	67 e0       	ldi	r22, 0x07	; 7
    40d0:	a9 01       	movw	r20, r18
    40d2:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_displayStringRowColumn>
	LCD_intgerToString(read_ir2);
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	88 2f       	mov	r24, r24
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_intgerToString>
}
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	cf 91       	pop	r28
    40e6:	df 91       	pop	r29
    40e8:	08 95       	ret

000040ea <__udivmodhi4>:
    40ea:	aa 1b       	sub	r26, r26
    40ec:	bb 1b       	sub	r27, r27
    40ee:	51 e1       	ldi	r21, 0x11	; 17
    40f0:	07 c0       	rjmp	.+14     	; 0x4100 <__udivmodhi4_ep>

000040f2 <__udivmodhi4_loop>:
    40f2:	aa 1f       	adc	r26, r26
    40f4:	bb 1f       	adc	r27, r27
    40f6:	a6 17       	cp	r26, r22
    40f8:	b7 07       	cpc	r27, r23
    40fa:	10 f0       	brcs	.+4      	; 0x4100 <__udivmodhi4_ep>
    40fc:	a6 1b       	sub	r26, r22
    40fe:	b7 0b       	sbc	r27, r23

00004100 <__udivmodhi4_ep>:
    4100:	88 1f       	adc	r24, r24
    4102:	99 1f       	adc	r25, r25
    4104:	5a 95       	dec	r21
    4106:	a9 f7       	brne	.-22     	; 0x40f2 <__udivmodhi4_loop>
    4108:	80 95       	com	r24
    410a:	90 95       	com	r25
    410c:	bc 01       	movw	r22, r24
    410e:	cd 01       	movw	r24, r26
    4110:	08 95       	ret

00004112 <__prologue_saves__>:
    4112:	2f 92       	push	r2
    4114:	3f 92       	push	r3
    4116:	4f 92       	push	r4
    4118:	5f 92       	push	r5
    411a:	6f 92       	push	r6
    411c:	7f 92       	push	r7
    411e:	8f 92       	push	r8
    4120:	9f 92       	push	r9
    4122:	af 92       	push	r10
    4124:	bf 92       	push	r11
    4126:	cf 92       	push	r12
    4128:	df 92       	push	r13
    412a:	ef 92       	push	r14
    412c:	ff 92       	push	r15
    412e:	0f 93       	push	r16
    4130:	1f 93       	push	r17
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	ca 1b       	sub	r28, r26
    413c:	db 0b       	sbc	r29, r27
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	09 94       	ijmp

0000414a <__epilogue_restores__>:
    414a:	2a 88       	ldd	r2, Y+18	; 0x12
    414c:	39 88       	ldd	r3, Y+17	; 0x11
    414e:	48 88       	ldd	r4, Y+16	; 0x10
    4150:	5f 84       	ldd	r5, Y+15	; 0x0f
    4152:	6e 84       	ldd	r6, Y+14	; 0x0e
    4154:	7d 84       	ldd	r7, Y+13	; 0x0d
    4156:	8c 84       	ldd	r8, Y+12	; 0x0c
    4158:	9b 84       	ldd	r9, Y+11	; 0x0b
    415a:	aa 84       	ldd	r10, Y+10	; 0x0a
    415c:	b9 84       	ldd	r11, Y+9	; 0x09
    415e:	c8 84       	ldd	r12, Y+8	; 0x08
    4160:	df 80       	ldd	r13, Y+7	; 0x07
    4162:	ee 80       	ldd	r14, Y+6	; 0x06
    4164:	fd 80       	ldd	r15, Y+5	; 0x05
    4166:	0c 81       	ldd	r16, Y+4	; 0x04
    4168:	1b 81       	ldd	r17, Y+3	; 0x03
    416a:	aa 81       	ldd	r26, Y+2	; 0x02
    416c:	b9 81       	ldd	r27, Y+1	; 0x01
    416e:	ce 0f       	add	r28, r30
    4170:	d1 1d       	adc	r29, r1
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	f8 94       	cli
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	cd bf       	out	0x3d, r28	; 61
    417c:	ed 01       	movw	r28, r26
    417e:	08 95       	ret

00004180 <itoa>:
    4180:	fb 01       	movw	r30, r22
    4182:	9f 01       	movw	r18, r30
    4184:	e8 94       	clt
    4186:	42 30       	cpi	r20, 0x02	; 2
    4188:	c4 f0       	brlt	.+48     	; 0x41ba <itoa+0x3a>
    418a:	45 32       	cpi	r20, 0x25	; 37
    418c:	b4 f4       	brge	.+44     	; 0x41ba <itoa+0x3a>
    418e:	4a 30       	cpi	r20, 0x0A	; 10
    4190:	29 f4       	brne	.+10     	; 0x419c <itoa+0x1c>
    4192:	97 fb       	bst	r25, 7
    4194:	1e f4       	brtc	.+6      	; 0x419c <itoa+0x1c>
    4196:	90 95       	com	r25
    4198:	81 95       	neg	r24
    419a:	9f 4f       	sbci	r25, 0xFF	; 255
    419c:	64 2f       	mov	r22, r20
    419e:	77 27       	eor	r23, r23
    41a0:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    41a4:	80 5d       	subi	r24, 0xD0	; 208
    41a6:	8a 33       	cpi	r24, 0x3A	; 58
    41a8:	0c f0       	brlt	.+2      	; 0x41ac <itoa+0x2c>
    41aa:	89 5d       	subi	r24, 0xD9	; 217
    41ac:	81 93       	st	Z+, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	00 97       	sbiw	r24, 0x00	; 0
    41b2:	a1 f7       	brne	.-24     	; 0x419c <itoa+0x1c>
    41b4:	16 f4       	brtc	.+4      	; 0x41ba <itoa+0x3a>
    41b6:	5d e2       	ldi	r21, 0x2D	; 45
    41b8:	51 93       	st	Z+, r21
    41ba:	10 82       	st	Z, r1
    41bc:	c9 01       	movw	r24, r18
    41be:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <strrev>

000041c2 <strrev>:
    41c2:	dc 01       	movw	r26, r24
    41c4:	fc 01       	movw	r30, r24
    41c6:	67 2f       	mov	r22, r23
    41c8:	71 91       	ld	r23, Z+
    41ca:	77 23       	and	r23, r23
    41cc:	e1 f7       	brne	.-8      	; 0x41c6 <strrev+0x4>
    41ce:	32 97       	sbiw	r30, 0x02	; 2
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <strrev+0x18>
    41d2:	7c 91       	ld	r23, X
    41d4:	6d 93       	st	X+, r22
    41d6:	70 83       	st	Z, r23
    41d8:	62 91       	ld	r22, -Z
    41da:	ae 17       	cp	r26, r30
    41dc:	bf 07       	cpc	r27, r31
    41de:	c8 f3       	brcs	.-14     	; 0x41d2 <strrev+0x10>
    41e0:	08 95       	ret

000041e2 <_exit>:
    41e2:	f8 94       	cli

000041e4 <__stop_program>:
    41e4:	ff cf       	rjmp	.-2      	; 0x41e4 <__stop_program>
