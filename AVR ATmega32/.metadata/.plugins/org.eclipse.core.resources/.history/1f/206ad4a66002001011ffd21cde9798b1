/******************************************************************************
 * Module       : Application
 * File Name    : Application.c
 * Author       : A7la Team :)
 * Created on   : 22/11/2024
 * Description  : Source file for the Application layer
 *******************************************************************************/
#include "Application.h"

/******************************************************************************
 *                           Global Variables                                 *
 ******************************************************************************/
volatile uint16 distanceRight    = 0;
volatile uint16 distanceForward  = 0;
volatile uint16 distanceBackward = 0;

/******************************************************************************
 *                      Interrupt Service Routines                            *
 ******************************************************************************/
void ISR2(void) {
	Stop();
}

void ISR1(void) {
	Stop();
}

int main(void)
{
	SREG |= (1 << 7);  // Enable global interrupts

	LEDS_init();
	UART_Init(&config);
	UART_SetRxCallback(App_Receive);

	DcMotor_Init(100);

	Ultrasonic_init();

	// Configure external interrupt 1
	EXT_INT_ConfigType EX_interrupt_1 = { INT_1, RISING_EDGE };
	external_interrupt_setCallBack(ISR1, INT_1);
	external_interrupt_init(&EX_interrupt_1);

	// Configure external interrupt 2
	EXT_INT_ConfigType EX_interrupt_2 = { INT_2, RISING_EDGE };
	external_interrupt_setCallBack(ISR2, INT_2);
	external_interrupt_init(&EX_interrupt_2);

	PWM2_Init(64);
	PWM2_SetDutyCycle(50);

	while (1)
	{
		distanceRight = Ultrasonic_readDistance(U_right);

		LCD_moveCursor(0, 0);
		LCD_intgerToString(distanceRight);

		if (distanceRight < 100) {
			LCD_displayStringRowColumn(0, 2, " ");
		}
		if (distanceRight > 100) {
			LCD_displayStringRowColumn(0, 0, "99 ");
		}
		if (distanceRight < 10) {
			LCD_displayStringRowColumn(0, 1, " ");
		}

		_delay_ms(100);

		distanceForward = Ultrasonic_readDistance(U_forward);

		LCD_moveCursor(1, 0);
		LCD_intgerToString(distanceForward);

		if (distanceForward < 100) {
			LCD_displayStringRowColumn(1, 2, " ");
		}
		if (distanceForward > 100) {
			LCD_displayStringRowColumn(1, 0, "99 ");
		}
		if (distanceForward < 10) {
			LCD_displayStringRowColumn(1, 1, " ");
		}

		_delay_ms(100);
	}
}
/******************************************************************************
 *                      Functions Definitions                                 *
 ******************************************************************************/
void App_Receive(uint8 recievedMSG)
{
	switch (recievedMSG)
	{
	case 'F':
		Forward();  //Move forward
		break;
	case 'B':
		Backward();  //Move backward
		break;
	case 'S':
		Stop();  //Stop movement
		break;
	case 'R':
		Right_Forward();  //Turn right and move forward
		break;
	case 'L':
		Left_Forward();  //Turn left and move forward
		break;
	case 'A':
		Right_Backward();  //Turn right and move backward
		break;
	case 'H':
		Left_Backward();	/*Turn left and move backward*/
		break;
	case 'P':
		// autoParking();	// Perform auto-parking
		break;
	case 'M':
		// DcMotor_Init(motorSpeed(UART_receiveByte()));   //Reinitialize motor with new speed
		break;
	}
}

uint8 motorSpeed(uint8 speed)
{
	switch (speed)
	{
	case '1':
		return MOTOR_SPEED_ONE;  // Speed level 1
		break;
	case '2':
		return MOTOR_SPEED_TWO;  // Speed level 2
		break;
	case '3':
		return MOTOR_MAX_SPEED;  // Speed level 3
		break;
	}

	return MOTOR_MAX_SPEED;  // Default speed
}

void readDistance(void)
{
	LCD_displayStringRowColumn(0, 0, "D1 = ");
	LCD_intgerToString(distanceRight);
	LCD_displayStringRowColumn(0, 8, "cm");

	if (distanceRight < 10) {
		LCD_displayStringRowColumn(0, 6, " ");
	}

	if (distanceRight < 100) {
		LCD_displayStringRowColumn(0, 7, " ");
	}

	if (distanceRight >= 100) {
		LCD_displayStringRowColumn(0, 5, "99 ");
	}
}
