/******************************************************************************
 * File Name    : Control_Car_Using_Bluetooth.c
 * Author       : A7la Team :)
 * Created on   : 22/11/2024
 * Description  : Source file for the APP
 *******************************************************************************/
#include "Control_Car_Using_Bluetooth.h"

volatile uint8 pir_recieve1 = 0;
volatile uint8 pir_recieve2 = 0;
volatile uint16 distance = 0;

/*******************************************************************************
 *                              Functions Deceleration                           *
 *******************************************************************************/

void ISR0()
{
	Stop();
}

void ISR1()
{
	Stop();
}

/* Main function */
int main(void)
{
	SREG |= (1<<7);

	uint8 recievedMSG = 0;  // Variable to store received message

	UART_init(&uart_configratoin);  // Initialize UART with configuration

	DcMotor_Init(100);  // Initialize DC motor with speed received from UART

	PIR_init();

	LCD_init();
	LCD_clearScreen();

	LEDS_init();

	Ultrasonic_init();

	EXT_INT_ConfigType EX_interrupt_0 = {INT_0, RISING_EDGE};
	external_interrupt_setCallBack(ISR0, INT_0);
	external_interrupt_init(&EX_interrupt_0);

	EXT_INT_ConfigType EX_interrupt_1 = {INT_1, RISING_EDGE};
	external_interrupt_setCallBack(ISR1, INT_1);
	external_interrupt_init(&EX_interrupt_1);
	while(1)
	{
		pir_recieve1 = PIR_ReadValue1();
		pir_recieve2 = PIR_ReadValue2();

		if(pir_recieve1)
		{
			LED_on(red);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Motion Detected");
			LCD_displayStringRowColumn(1, 0, "In Back");
		}
		else
		{
			LED_off(red);
		}

		if(pir_recieve2)
		{
			LED_on(green);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Motion Detected");
			LCD_displayStringRowColumn(1, 0, "In Front");
		}
		else
		{
			LED_off(green);
		}

		//		recievedMSG = UART_receiveByte();  // Receive a byte from UART
		//
		//		switch(recievedMSG)
		//		{
		//		case 'F':
		//			if(!pir_recieve1)
		//			{
		//				Forward();  // Move forward
		//			}
		//			break;
		//		case 'B':
		//			if(!pir_recieve2)
		//			{
		//				Backward();  // Move backward
		//			}
		//			break;
		//		case 'S':
		//			Stop();  // Stop movement
		//			break;
		//		case 'R':
		//			if(!pir_recieve1)
		//			{
		//				Right_Forward();  // Turn right and move forward
		//			}
		//			break;
		//		case 'L':
		//			if(!pir_recieve1)
		//			{
		//				Left_Forward();  // Turn left and move forward
		//			}
		//			break;
		//		case 'A':
		//			if(!pir_recieve2)
		//			{
		//				Right_Backward();  // Turn right and move Backward
		//			}
		//			break;
		//		case 'H':
		//			if(!pir_recieve2)
		//			{
		//				Left_Backward();  // Turn left and move Backward
		//			}
		//			break;
		//		case 'P':
		//			autoParking();
		//			break;
		//		case 'M':
		//			DcMotor_Init(motorSpeed(UART_receiveByte()));  // Reinitialize motor with new speed
		//			break;
		//		}
	}
	return 0;
}

/* Function to determine motor speed based on received speed value */
uint8 motorSpeed(uint8 speed)
{
	switch(speed)
	{
	case '1':
		return MOTOR_SPEED_ONE;  // Speed level 1
		break;
	case '2':
		return MOTOR_SPEED_TWO;  // Speed level 2
		break;
	case '3':
		return MOTOR_MAX_SPEED;  // Speed level 3
		break;
	}

	return MOTOR_MAX_SPEED;  // Default speed
}


void autoParking(void)
{
	uint8 counter = 0;

	LCD_clearScreen();

	_delay_ms(500);
	_delay_ms(500);

	readDistance();

	Forward();

	while(distance > 40)
	{
		readDistance();

		_delay_ms(100);

		counter++;
		if(counter > 5)
		{
			LCD_displayStringRowColumn(1, 0, "SPACE Available");

			Stop();

			_delay_ms(500);
			_delay_ms(500);

			Left_Forward_Parking();

			_delay_ms(500);

			Stop();

			_delay_ms(500);

			Backward();

			_delay_ms(500);
			_delay_ms(500);

			Stop();

			_delay_ms(500);

			Left_Backward();

			_delay_ms(700);
			_delay_ms(700);

			break;
		}
	}

	if(counter < 5)
	{
		LCD_displayStringRowColumn(1, 0, "NO SPACE");
	}

	Stop();
}

void readDistance(void)
{
	distance = Ultrasonic_readDistance();
	LCD_displayStringRowColumn(0, 0, "D1 = ");
	LCD_intgerToString(distance);
	LCD_displayStringRowColumn(0, 8, "cm");

	if(distance < 10)
	{
		LCD_displayStringRowColumn(0, 6, " ");
	}

	if(distance < 100)
	{
		LCD_displayStringRowColumn(0, 7, " ");
	}

	if(distance >= 100)
	{
		LCD_displayStringRowColumn(0, 5, "99 ");
	}
}
