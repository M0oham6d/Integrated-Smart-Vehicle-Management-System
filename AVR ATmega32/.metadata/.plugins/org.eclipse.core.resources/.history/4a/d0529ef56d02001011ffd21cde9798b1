/******************************************************************************
 * Module       : Application
 * File Name    : Application.c
 * Author       : A7la Team :)
 * Created on   : 22/11/2024
 * Description  : Source file for the Application layer
 *******************************************************************************/
#include "Application.h"

/******************************************************************************
 *                           Global Variables                                 *
 ******************************************************************************/
volatile uint16 distanceRight    = 0;
volatile uint16 distanceForward  = 0;
volatile uint16 distanceBackward = 0;
uint8 selection = 0 ;
/******************************************************************************
 *                      Interrupt Service Routines                            *
 ******************************************************************************/
void ISR2(void) {
	Stop();
}

void ISR1(void) {
	Stop();
}

int main(void) {
	SREG |= (1 << 7);  // Enable global interrupts

	LEDS_init();
	UART_Init(&config);
	UART_SetRxCallback(App_Receive);
	LCD_init();
	DcMotor_Init(100);

	Ultrasonic_init();

	PWM2_Init(64);
	PWM2_SetDutyCycle(50);

	Buzzer_init();
	while (1)
	{
		readDistance();
		collisionAvoidance();
	}
}
/******************************************************************************
 *                      Functions Definitions                                 *
 ******************************************************************************/
void App_Receive(uint8 recievedMSG) {
	selection = recievedMSG ;
	switch (recievedMSG) {
	case 'F':
		Forward();  //Move forward
		break;
	case 'B':
		Backward();  //Move backward
		break;
	case 'S':
		Stop();  //Stop movement
		break;
	case 'R':
		Right_Forward();  //Turn right and move forward
		break;
	case 'L':
		Left_Forward();  //Turn left and move forward
		break;
	case 'A':
		Right_Backward();  //Turn right and move backward
		break;
	case 'H':
		Left_Backward(); /*Turn left and move backward*/
		break;
	case 'P':
		// autoParking();	// Perform auto-parking
		break;
	case 'M':
		// DcMotor_Init(motorSpeed(UART_receiveByte()));   //Reinitialize motor with new speed
		break;
	}
}

uint8 motorSpeed(uint8 speed) {
	switch (speed) {
	case '1':
		return MOTOR_SPEED_ONE;  // Speed level 1
		break;
	case '2':
		return MOTOR_SPEED_TWO;  // Speed level 2
		break;
	case '3':
		return MOTOR_MAX_SPEED;  // Speed level 3
		break;
	}

	return MOTOR_MAX_SPEED;  // Default speed
}

void readDistance(void) {
	distanceRight = Ultrasonic_readDistance(U_right);

	LCD_displayStringRowColumn(0, 0, "R:");
	LCD_moveCursor(0, 2);
	LCD_intgerToString(distanceRight);

	if (distanceRight < 100) {
		LCD_displayStringRowColumn(0, 5, " ");
	}
	if (distanceRight > 100) {
		LCD_displayStringRowColumn(0, 2, "99 ");
	}
	if (distanceRight < 10) {
		LCD_displayStringRowColumn(0, 3, " ");
	}

	_delay_ms(100);

	distanceForward = Ultrasonic_readDistance(U_forward);

	LCD_displayStringRowColumn(1, 0, "F:");
	LCD_moveCursor(1, 2);
	LCD_intgerToString(distanceForward);

	if (distanceForward < 100) {
		LCD_displayStringRowColumn(1, 5, " ");
	}
	if (distanceForward > 100) {
		LCD_displayStringRowColumn(1, 2, "99 ");
	}
	if (distanceForward < 10) {
		LCD_displayStringRowColumn(1, 3, " ");
	}

	_delay_ms(100);

	distanceBackward = Ultrasonic_readDistance(U_backward);

	LCD_displayStringRowColumn(1, 6, "B:");
	LCD_moveCursor(1, 9);
	LCD_intgerToString(distanceBackward);

	if (distanceBackward < 100) {
		LCD_displayStringRowColumn(1, 12, " ");
	}
	if (distanceBackward > 100) {
		LCD_displayStringRowColumn(1, 9, "99 ");
	}
	if (distanceBackward < 10) {
		LCD_displayStringRowColumn(1, 10, " ");
	}

	_delay_ms(100);
}

void collisionAvoidance(void)
{
	if(distanceForward <= 15 && (selection == 'F' || selection == 'R' || selection == 'L'))
	{
		Buzzer_on();
		if (distanceForward <= 8)
		{
			Stop();
			Buzzer_off();
		}
	}
	else if (distanceForward > 15)
	{
		Buzzer_off();
	}


	if(distanceBackward <= 8 && (selection == 'B' || selection == 'A' || selection == 'H'))
	{
		Stop();
		Buzzer_off();
	}
	else if(distanceBackward <= 15 && (selection == 'B' || selection == 'A' || selection == 'H'))
	{
		Buzzer_on();
	}
	else if(distanceBackward > 15)
	{
		Buzzer_off();
	}
}
