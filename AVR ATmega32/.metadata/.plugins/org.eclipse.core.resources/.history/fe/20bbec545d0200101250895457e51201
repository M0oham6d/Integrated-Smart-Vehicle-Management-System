/*
 * T_UART.c
 *
 *  Created on: Mar 16, 2025
 *      Author: Muhammed Ayman
 */


#include "T_UART.h"

// Callbacks
static void (*RxCallback)(uint8_t) = 0;
static void (*TxCallback)(void) = 0;

void UART_Init(UART_Config *config) {
    // Set baud rate
    uint16_t ubrr = (F_CPU / (16 * config->baudRate)) - 1;
    UBRRH = (uint8_t)(ubrr >> 8);
    UBRRL = (uint8_t)ubrr;

    // Set frame format
    uint8_t ucsrb = (1 << RXEN) | (1 << TXEN);  // Enable RX and TX
    uint8_t ucsrc = (1 << URSEL);  // URSEL must be 1 when writing to UCSRC

    // Data bits
    switch (config->dataBits) {
        case 5: ucsrc |= (0 << UCSZ0) | (0 << UCSZ1); break;
        case 6: ucsrc |= (1 << UCSZ0) | (0 << UCSZ1); break;
        case 7: ucsrc |= (0 << UCSZ0) | (1 << UCSZ1); break;
        case 8: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); break;
        case 9: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); ucsrb |= (1 << UCSZ2); break;
    }

    // Parity
    if (config->parity == 1) ucsrc |= (1 << UPM1);  // Even parity
    else if (config->parity == 2) ucsrc |= (1 << UPM1) | (1 << UPM0);  // Odd parity

    // Stop bits
    if (config->stopBits == 2) ucsrc |= (1 << USBS);

    // Apply configurations
    UCSRB = ucsrb;
    UCSRC = ucsrc;

    // Enable Global Interrupts
    sei();
}

// Transmit data
void UART_Transmit(uint8_t data) {
    while (!(UCSRA & (1 << UDRE)));  // Wait for empty transmit buffer
    UDR = data;
}

// Receive data
uint8_t UART_Receive(void) {
    while (!(UCSRA & (1 << RXC)));  // Wait for data to be received
    return UDR;
}

// Set RX callback
void UART_SetRxCallback(void (*callback)(uint8_t)) {
    RxCallback = callback;
    UCSRB |= (1 << RXCIE);  // Enable RX interrupt
}

// Set TX callback
void UART_SetTxCallback(void (*callback)(void)) {
    TxCallback = callback;
    UCSRB |= (1 << TXCIE);  // Enable TX interrupt
}

// ISR for RX complete
ISR(USART_RXC_vect) {
    if (RxCallback) {
        RxCallback(UDR);
    }
}

// ISR for TX complete
ISR(USART_TXC_vect) {
    if (TxCallback) {
        TxCallback();
    }
}
