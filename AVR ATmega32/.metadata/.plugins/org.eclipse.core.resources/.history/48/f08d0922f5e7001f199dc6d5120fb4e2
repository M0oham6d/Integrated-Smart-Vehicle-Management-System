/*
 * ultrasonic_sensor.c
 * Author: Muhammed Ayman
 * Module: Ultrasonic Sensor
 */

#include "ultrasonic_sensor.h"

/*******************************************************************************
 *                      			Variables                                  *
 *******************************************************************************/
static uint8 g_edgeTime = 0;
static uint16 g_highTime = 0;

/*******************************************************************************
 *                      	Functions Prototypes                               *
 *******************************************************************************/
static void Ultrasonic_edgeProcessing(void);

/*******************************************************************************
 *                      	Functions Definitions                              *
 *******************************************************************************/
void Ultrasonic_init(void)
{
	/*
	 * Set up ICU Configuration.
	 * Initialize ICU.
	 * Set call back function.
	 * */
	ICU_ConfigType ICU_Configurations = {F_CPU_8, RAISING};
	ICU_init(&ICU_Configurations);
	ICU_setCallBack(Ultrasonic_edgeProcessing);
	/* Set up pin direction for trigger pin as output. */
	GPIO_setupPinDirection(TRIGGER_PORT_CONNECTION, TRIGGER_PIN1, PIN_OUTPUT);
}

/*
 * Send the trigger pulse to the ultrasonic sensor.
 */
static void Ultrasonic_Trigger(void)
{
	GPIO_writePin(TRIGGER_PORT_CONNECTION, TRIGGER_PIN1, LOGIC_HIGH);
	_delay_us(10);
	GPIO_writePin(TRIGGER_PORT_CONNECTION, TRIGGER_PIN1, LOGIC_LOW);
}

/*
 * Send the trigger pulse by using the Ultrasonic_Trigger function.
 * Start the measurement process via the ICU driver.
 * The measured distance in centimeters.
 */
uint16 Ultrasonic_readDistance(void)
{
	Ultrasonic_Trigger();

	return (g_highTime / 117.6) + 1;
}

/*
 * This is the callback function called by the ICU driver.
 * It calculates the high time (pulse time) generated by the ultrasonic sensor.
 */
static void Ultrasonic_edgeProcessing(void)
{
	g_edgeTime++;
	if(g_edgeTime == 1)
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
	}
	else if(2 == g_edgeTime)
	{
		g_highTime = ICU_getInputCaptureValue();		/* Get the high time. */

		/* Detect falling edge */
		ICU_setEdgeDetectionType(RAISING);

		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();

		g_edgeTime = 0;			/* Clear the counter to start from zero again. */
	}
}
